{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1488011895000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1488011895000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1488011896000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1488011895000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1488011895000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1488011896000},{"_id":"themes/next/README.en.md","hash":"3b0c7998cf17f9cf9e1a5bfcd65679a43a00c817","modified":1488011896000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1488011895000},{"_id":"themes/next/_config.yml","hash":"89ffcafc54d1d462c6005456767c5d8d36185692","modified":1488011896000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1488011896000},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1488011895000},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1488011895000},{"_id":"source/_posts/Let's Encrypt SSL.md","hash":"8c194fbe45b46a9e1c9aae30a7f226349dc5d7bd","modified":1488011871000},{"_id":"source/categories/index.md","hash":"d51db580efc1edca02813a5939b51abb9333c3c2","modified":1488011872000},{"_id":"source/_posts/My-New-Post.md","hash":"ac406f21efda44e68016dcfd15d063f1bbb6bfbe","modified":1488011872000},{"_id":"source/_posts/docker.md","hash":"b07e3966b95b2fd92d54fd80cab0b7932b1d36c3","modified":1488011871000},{"_id":"source/_posts/happyday.md","hash":"c45287dbff49f7dd4b94c7fac3962af3d45ca65b","modified":1488011872000},{"_id":"source/_posts/eslint.md","hash":"03e56bfc9820ad63e8063d92f42024d7a0a76e98","modified":1488011872000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1488011871000},{"_id":"source/_posts/hexo.md","hash":"7af425160b9fcb2c72e84bcbba72c1336a70e282","modified":1488011871000},{"_id":"source/_posts/interview.md","hash":"3580ca64274d44fd3730b1a7a444d816eeeeef50","modified":1488011872000},{"_id":"source/_posts/pm2.md","hash":"da3086bc9dab0931cca34184ef6aef1b4ca1ac74","modified":1488011872000},{"_id":"source/_posts/pattern.md","hash":"13c849fa5958a76d6b088d9fd29ff74185f22c49","modified":1488011872000},{"_id":"source/_posts/loadtest.md","hash":"1250d4b7449ddc88ef5e3faa01822f58889aa9f4","modified":1488011872000},{"_id":"source/_posts/postgre.md","hash":"5f61e6c48787abbd96e7195891d2663c4cf55ba6","modified":1488011872000},{"_id":"source/_posts/sequelize.md","hash":"1663f3705e4ec9b4a0fea5c43c8d03d1a40b9d0d","modified":1488015487000},{"_id":"source/_posts/vue.md","hash":"ec6e5587b02fdd4b862c7efe39a6d25bc6caf71b","modified":1488011871000},{"_id":"source/tags/index.md","hash":"ba27695f1572dff9ace58e82b5a66c43840fe56c","modified":1488011872000},{"_id":"source/_posts/webpack.md","hash":"ca8191a1723745c6480e808ae8c49f1a2918dc12","modified":1488011872000},{"_id":"source/about/index.md","hash":"0330b10bfb69136ccca8e2b04cf01353c89d26cb","modified":1488011871000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1488011928000},{"_id":"themes/next/.git/config","hash":"91b6a53b2a7f929b698734717a38d4ac169f0c1f","modified":1488011928000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1488011928000},{"_id":"themes/next/.git/index","hash":"9b58a09d36e8e824b2c55bf7930a44e7449b7505","modified":1488014394000},{"_id":"themes/next/.git/packed-refs","hash":"12ca02d8374d9a441a6c8a6c9ed061432cb0a8c9","modified":1488011928000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1488012029000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1488012029000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1488011896000},{"_id":"themes/next/layout/_layout.swig","hash":"2fa3c74066843a859fac77803324a1de51044da9","modified":1488011951000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1488011950000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1488011951000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1488011948000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1488011949000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1488011949000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1488011947000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1488011938000},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1488011943000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1488011948000},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1488011944000},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1488011940000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1488011945000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1488011939000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1488011938000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1488011941000},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1488011939000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1488011943000},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1488011939000},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1488011946000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1488011944000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1488012029000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1488012029000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1488012029000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488011896000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1488011929000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1488011928000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1488011929000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1488011928000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1488011928000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1488011929000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1488011929000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1488011929000},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1488011929000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1488011937000},{"_id":"themes/next/.git/logs/HEAD","hash":"c0223629929aa0a9844ce392c0a515ba4e519300","modified":1488011928000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1488011896000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1488011896000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1488011896000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1488011896000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1488011896000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488012028000},{"_id":"themes/next/layout/_macro/post.swig","hash":"e6016def9b512188f4c2725399c9adc7bc41cdae","modified":1488011957000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488012028000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1488011958000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1488011953000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1488011953000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1488012025000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"43d8830bb19da4fc7a5773866be19fa066b62645","modified":1488011954000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1488012025000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1488012025000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1488012022000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1488012025000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1488012022000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"78ccfc1dc915247c1fec3c86d742e0f4c2f6d99c","modified":1488012023000},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1488012023000},{"_id":"themes/next/layout/_partials/header.swig","hash":"adab5c3f7b173f1b45454787f39dde07aea03483","modified":1488012023000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1488012023000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1488012023000},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1488012023000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1488011920000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1488011897000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1488011897000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1488011897000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1488011899000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1488011898000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1488011897000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1488011897000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1488011897000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1488011899000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488011898000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488011897000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1488011897000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1488011897000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1488011897000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488012026000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488012026000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488011921000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488011920000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488011920000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488011921000},{"_id":"themes/next/.git/refs/heads/master","hash":"2311b7302155cc3ec46e40ad16dc5c94e36328b4","modified":1488011928000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1488012025000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1488012025000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1488012025000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1488012026000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1488012026000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"4abc01bc870e1d7a783cdbd26166edc782a6a4f4","modified":1488012026000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1488012027000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1488012026000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1488012027000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1488012026000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1488012024000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1488012026000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1488012024000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1488012024000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1488012024000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1488012023000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1488012024000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1488012025000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1488012024000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1488011928000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1488012024000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1488011920000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1488011921000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1488011921000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"19a176989b89b1b59b0cc77d4c7c43ac7770c603","modified":1488011921000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c459aa6d607d8bcb747544e74f6ad0b8374aa3b1","modified":1488011921000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"fc185c6cec79593775d1c2440dbe2a71cfbe2e99","modified":1488011921000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1488011900000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1488011901000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1488011901000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1488011901000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1488011901000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1488011900000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1488011901000},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1488011901000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1488011904000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1488011915000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1488011904000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1488011920000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1488011915000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1488011919000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1488011919000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1488011902000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1488011902000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1488011902000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1488011904000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1488011919000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1488011904000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1488011915000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1488011919000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1488011915000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1488011915000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1488011915000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1488011915000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1488011906000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1488011907000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1488011906000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1488011915000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1488011907000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1488011906000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1488011920000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"c0223629929aa0a9844ce392c0a515ba4e519300","modified":1488011928000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1488011928000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1488012028000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1488012027000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1488012028000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1488012027000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1488012028000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1488012028000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1488012027000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1488012027000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1488012027000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1488012027000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"ea8078fa9e10be2bb042749d8b6a97adc38f914c","modified":1488012027000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1488012028000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1488011923000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1488011923000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1488011923000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1488011923000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1488011923000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1488011923000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1488011927000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1488011927000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1488011927000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1488011927000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1488011927000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1488011927000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"ff9f163bb05c0709577040a875924d36c9ab99d6","modified":1488011922000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"dcf9fe43b2ef78b923118ba39efedb38760e76b1","modified":1488011922000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1408209dfb9a22a0982a30bdbd14842c2b53f264","modified":1488011922000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1488011922000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1488011922000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9b63bd8effc7cf4b96acdea4d73add7df934a222","modified":1488011922000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1488011923000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1488011923000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1488011922000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1488011922000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1488011923000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1488011923000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1488011921000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488011923000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1488011921000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1488011921000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1488011921000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488011921000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1488011901000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488011905000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488011905000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488011905000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488011906000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488011904000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488011904000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1488011905000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1488011905000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1488011905000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1488011919000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1488011918000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1488011919000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1488011916000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1488011914000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1488011914000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1488011914000},{"_id":"themes/next/.git/objects/pack/pack-09d2cad91a6ac35ae1af89af759fcca2221e2fec.idx","hash":"b4cf99299a1ffd0a310c392df8f4c5b4da218c50","modified":1488011935000},{"_id":"themes/next/source/images/avatar.jpg","hash":"62deda61e17aef771cbf423724e19e70976ba07e","modified":1488011901000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1488011904000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1488011909000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1488011908000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1488011909000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1488011909000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"c0223629929aa0a9844ce392c0a515ba4e519300","modified":1488011928000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1488011927000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1488011923000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1488011924000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1488011924000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1488011923000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1488011924000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1488011926000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1488011926000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1488011926000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1488011926000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1488011926000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1488011926000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1488011926000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1488011926000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"fdfadbb4483043c7e0afd541ee9712389e633517","modified":1488011924000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1488011924000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1488011924000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1488011924000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1488011924000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"7f1aab694caf603809e33cff82beea84cd0128fd","modified":1488011924000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1488011924000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1488011924000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1488011924000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1488011924000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1488011924000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1488011925000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1488011924000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1488011925000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1488011925000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1488011925000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1488011925000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1488011925000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1488011925000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1488011925000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1488011925000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1488011926000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1488011925000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1488011925000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1488011925000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1488011925000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1488011927000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1488011926000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1488011926000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1488011926000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1488011926000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1488011927000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1488011927000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1488011927000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1488011923000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488011923000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488011922000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488011906000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488011906000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1488011906000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488011906000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1488011906000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1488011906000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1488011914000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1488011919000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1488011914000},{"_id":"themes/next/.git/objects/pack/pack-09d2cad91a6ac35ae1af89af759fcca2221e2fec.pack","hash":"38a8ff9d0c26e00a6808a13fad2010aa0838e15e","modified":1488012022000}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2017-01-19T08:52:48.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-01-19 16:52:48\ntype: \"categories\"\n---\n","updated":"2017-02-25T08:37:52.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cizl2t6ug0000r7fypwvaw0xt","content":"","excerpt":"","more":""},{"title":"tags","date":"2017-01-19T08:53:34.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-01-19 16:53:34\ntype: \"tags\"\n---\n","updated":"2017-02-25T08:37:52.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cizl2t6uo0002r7fyeff21024","content":"","excerpt":"","more":""},{"title":"about","date":"2017-01-19T08:44:34.000Z","_content":"adfsdfffffffff","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-01-19 16:44:34\n---\nadfsdfffffffff","updated":"2017-02-25T08:37:51.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cizl2t6uu0004r7fyy95vfwp3","content":"<p>adfsdfffffffff</p>\n","excerpt":"","more":"<p>adfsdfffffffff</p>\n"}],"Post":[{"title":"Let's Encrypt","date":"2016-12-21T03:47:39.000Z","_content":"\n### 使用Let's Encrypt生成免费SSL证书\n\n官网：[Let's Encrypt](https://letsencrypt.org/)\n\nLet's Encrypt是由互联网安全研究小组（ISRG，一个公益组织）提供的服务。提供免费、自动化、开放的证书签发服务。\n\nLet's Encrypt颁发的证书有期是90天，需要在过期前进行续期，好在Let's Encrypt已经提供了自动续期的脚本。\n\n官网推荐使用[Certbot](https://certbot.eff.org/)工具来部署Https证书。在Certbot首页上选择Web服务器及服务器OS类型，我们在这里以Nginx + CentOS 6为例来说明。\n\n原文链接：[https://certbot.eff.org/#centos6-nginx](https://certbot.eff.org/#centos6-nginx)\n\n0. #### 生成证书\n\n\t0. 安装证书生成工具certbot-auto：\n\n\t\t```\n\t\twget https://dl.eff.org/certbot-auto\n\t\tchmod a+x certbot-auto\n\t\t```\n\t0. 安装依赖\n\n\t\t运行```./certbot-auto```，安装所有依赖项。过程中可能会提示```Virtualenv Command Not Found```，需要[安装pip](https://pip.pypa.io/en/stable/installing/)、virtualenv包：```pip install virtualenv```。\n\n\t0. 配置Nginx\n\t\t\n\t\t为需要配置https的站点添加以下配置，将访问/.well-known的请求指向本地目录。Let's Encrypt在生成证书的过程中，会在/var/www/www.xxx.com/.well-known目录生成一个临时文件，并且会访问类似于http://www.xxx.com/.well-known/acme-challenge/HGr8U1IeTW4kY_Z6UIyaakzOkyQgPr_7ArlLgtZE8SX的url，来检查域名配置是否有效。\n\n\t\t添加以下配置，并重启Nginx：nginx -s reload，如果reload不生效，可以试试restart。\n\t\t\n\t\t```\n\t\tserver {\n\n\t\t\t...\t\t\t\n\n\t\t\tlocation /.well-known {\n\t        \talias /var/www/www.xxx.com/.well-known;\n\t    \t}\n\n\t\t\t...\n\n\t\t}\n\t\t```\n\n\t\t*即使证书生成之后，也需要保留Nginx的这一个配置，因为证书的续期还需要这一个配置。*\n\n\t0. 通过向导生成证书\n\n\t\t运行```./certbot-auto certonly```，会通过向导方式一步一步来生成证书。过程中间会用到上一步在Nginx中配置的本地目录。\n\n\t\t**对证书生成过程和原理比较熟悉的话，可以不使用向导方式，直接使用certbot-auto命令```./certbot-auto certonly --webroot -w /var/www/www.xxx.com -d xxx.com -d www.xxx.com -w /var/www/thing -d thing.is -d m.thing.is```可以快速高效地生成证书**\n\n\t\t生成的证书默认在/etc/letsencrypt/live/www.xxx.com/目录。\n\n0. #### 配置Nginx使用证书\n\n\t添加以下配置，并重启Nginx：```nginx -s reload```，如果reload不生效，可以试试restart。\n\n\t```\n\tserver {\n\n\t\t...\n\t\tlisten 443;\n\n\t    ssl on;\n        ssl_stapling_verify on;\n        ssl_certificate         /etc/letsencrypt/live/www.xxx.com/fullchain.pem;\n        ssl_certificate_key     /etc/letsencrypt/live/www.xxx.com/privkey.pem;\n\n\t\t...\n\n\t}\n\t```\n\n0. #### 检查证书的有效性\n\n\t打开浏览器，检查证书的有效性。\n\n0. #### 证书续期\n\n\tLet's Encrypt颁发的证书有期是90天，需要在过期前进行续期，好在Let's Encrypt已经提供了自动续期的脚本。\n\n\t官网说明，可以一天调用两次，如果检测到证书不需要更新，是什么都不做的，以减少意外造成的故障。\n\n\t先运行```certbot-auto renew --dry-run```命令检查证书自动续期是否正常，如果正常，将```certbot-auto renew --quiet```命令添加到系统的计划任务cron中，就可以实现证书自动续期了。\n\n\t```\n\t01 1 * * * ./path/to/certbot-auto renew --quiet\n\t```\n\t表示每天的1点1分自动执行续期脚本。\n\n\n\n\n\n","source":"_posts/Let's Encrypt SSL.md","raw":"---\ntitle: Let's Encrypt\ndate: 2016-12-21 11:47:39\ntags:\n---\n\n### 使用Let's Encrypt生成免费SSL证书\n\n官网：[Let's Encrypt](https://letsencrypt.org/)\n\nLet's Encrypt是由互联网安全研究小组（ISRG，一个公益组织）提供的服务。提供免费、自动化、开放的证书签发服务。\n\nLet's Encrypt颁发的证书有期是90天，需要在过期前进行续期，好在Let's Encrypt已经提供了自动续期的脚本。\n\n官网推荐使用[Certbot](https://certbot.eff.org/)工具来部署Https证书。在Certbot首页上选择Web服务器及服务器OS类型，我们在这里以Nginx + CentOS 6为例来说明。\n\n原文链接：[https://certbot.eff.org/#centos6-nginx](https://certbot.eff.org/#centos6-nginx)\n\n0. #### 生成证书\n\n\t0. 安装证书生成工具certbot-auto：\n\n\t\t```\n\t\twget https://dl.eff.org/certbot-auto\n\t\tchmod a+x certbot-auto\n\t\t```\n\t0. 安装依赖\n\n\t\t运行```./certbot-auto```，安装所有依赖项。过程中可能会提示```Virtualenv Command Not Found```，需要[安装pip](https://pip.pypa.io/en/stable/installing/)、virtualenv包：```pip install virtualenv```。\n\n\t0. 配置Nginx\n\t\t\n\t\t为需要配置https的站点添加以下配置，将访问/.well-known的请求指向本地目录。Let's Encrypt在生成证书的过程中，会在/var/www/www.xxx.com/.well-known目录生成一个临时文件，并且会访问类似于http://www.xxx.com/.well-known/acme-challenge/HGr8U1IeTW4kY_Z6UIyaakzOkyQgPr_7ArlLgtZE8SX的url，来检查域名配置是否有效。\n\n\t\t添加以下配置，并重启Nginx：nginx -s reload，如果reload不生效，可以试试restart。\n\t\t\n\t\t```\n\t\tserver {\n\n\t\t\t...\t\t\t\n\n\t\t\tlocation /.well-known {\n\t        \talias /var/www/www.xxx.com/.well-known;\n\t    \t}\n\n\t\t\t...\n\n\t\t}\n\t\t```\n\n\t\t*即使证书生成之后，也需要保留Nginx的这一个配置，因为证书的续期还需要这一个配置。*\n\n\t0. 通过向导生成证书\n\n\t\t运行```./certbot-auto certonly```，会通过向导方式一步一步来生成证书。过程中间会用到上一步在Nginx中配置的本地目录。\n\n\t\t**对证书生成过程和原理比较熟悉的话，可以不使用向导方式，直接使用certbot-auto命令```./certbot-auto certonly --webroot -w /var/www/www.xxx.com -d xxx.com -d www.xxx.com -w /var/www/thing -d thing.is -d m.thing.is```可以快速高效地生成证书**\n\n\t\t生成的证书默认在/etc/letsencrypt/live/www.xxx.com/目录。\n\n0. #### 配置Nginx使用证书\n\n\t添加以下配置，并重启Nginx：```nginx -s reload```，如果reload不生效，可以试试restart。\n\n\t```\n\tserver {\n\n\t\t...\n\t\tlisten 443;\n\n\t    ssl on;\n        ssl_stapling_verify on;\n        ssl_certificate         /etc/letsencrypt/live/www.xxx.com/fullchain.pem;\n        ssl_certificate_key     /etc/letsencrypt/live/www.xxx.com/privkey.pem;\n\n\t\t...\n\n\t}\n\t```\n\n0. #### 检查证书的有效性\n\n\t打开浏览器，检查证书的有效性。\n\n0. #### 证书续期\n\n\tLet's Encrypt颁发的证书有期是90天，需要在过期前进行续期，好在Let's Encrypt已经提供了自动续期的脚本。\n\n\t官网说明，可以一天调用两次，如果检测到证书不需要更新，是什么都不做的，以减少意外造成的故障。\n\n\t先运行```certbot-auto renew --dry-run```命令检查证书自动续期是否正常，如果正常，将```certbot-auto renew --quiet```命令添加到系统的计划任务cron中，就可以实现证书自动续期了。\n\n\t```\n\t01 1 * * * ./path/to/certbot-auto renew --quiet\n\t```\n\t表示每天的1点1分自动执行续期脚本。\n\n\n\n\n\n","slug":"Let's Encrypt SSL","published":1,"updated":"2017-02-25T08:37:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2t6uk0001r7fy1ushqdl5","content":"<h3 id=\"使用Let’s-Encrypt生成免费SSL证书\"><a href=\"#使用Let’s-Encrypt生成免费SSL证书\" class=\"headerlink\" title=\"使用Let’s Encrypt生成免费SSL证书\"></a>使用Let’s Encrypt生成免费SSL证书</h3><p>官网：<a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"external\">Let’s Encrypt</a></p>\n<p>Let’s Encrypt是由互联网安全研究小组（ISRG，一个公益组织）提供的服务。提供免费、自动化、开放的证书签发服务。</p>\n<p>Let’s Encrypt颁发的证书有期是90天，需要在过期前进行续期，好在Let’s Encrypt已经提供了自动续期的脚本。</p>\n<p>官网推荐使用<a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"external\">Certbot</a>工具来部署Https证书。在Certbot首页上选择Web服务器及服务器OS类型，我们在这里以Nginx + CentOS 6为例来说明。</p>\n<p>原文链接：<a href=\"https://certbot.eff.org/#centos6-nginx\" target=\"_blank\" rel=\"external\">https://certbot.eff.org/#centos6-nginx</a></p>\n<ol>\n<li><h4 id=\"生成证书\"><a href=\"#生成证书\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h4><ol>\n<li><p>安装证书生成工具certbot-auto：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://dl.eff.org/certbot-auto</div><div class=\"line\">chmod a+x certbot-auto</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装依赖</p>\n<p> 运行<figure class=\"highlight plain\"><figcaption><span>Command Not Found```，需要[安装pip](https://pip.pypa.io/en/stable/installing/)、virtualenv包：```pip install virtualenv```。</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">0. 配置Nginx</div><div class=\"line\">\t</div><div class=\"line\">\t为需要配置https的站点添加以下配置，将访问/.well-known的请求指向本地目录。Let&apos;s Encrypt在生成证书的过程中，会在/var/www/www.xxx.com/.well-known目录生成一个临时文件，并且会访问类似于http://www.xxx.com/.well-known/acme-challenge/HGr8U1IeTW4kY_Z6UIyaakzOkyQgPr_7ArlLgtZE8SX的url，来检查域名配置是否有效。</div><div class=\"line\"></div><div class=\"line\">\t添加以下配置，并重启Nginx：nginx -s reload，如果reload不生效，可以试试restart。</div></pre></td></tr></table></figure></p>\n<p> server {</p>\n<pre><code>...            \n\nlocation /.well-known {\n    alias /var/www/www.xxx.com/.well-known;\n}\n\n...\n</code></pre><p> }</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t\t*即使证书生成之后，也需要保留Nginx的这一个配置，因为证书的续期还需要这一个配置。*</div><div class=\"line\"></div><div class=\"line\">\t0. 通过向导生成证书</div><div class=\"line\"></div><div class=\"line\">\t\t运行```./certbot-auto certonly```，会通过向导方式一步一步来生成证书。过程中间会用到上一步在Nginx中配置的本地目录。</div><div class=\"line\"></div><div class=\"line\">\t\t**对证书生成过程和原理比较熟悉的话，可以不使用向导方式，直接使用certbot-auto命令```./certbot-auto certonly --webroot -w /var/www/www.xxx.com -d xxx.com -d www.xxx.com -w /var/www/thing -d thing.is -d m.thing.is```可以快速高效地生成证书**</div><div class=\"line\"></div><div class=\"line\">\t\t生成的证书默认在/etc/letsencrypt/live/www.xxx.com/目录。</div><div class=\"line\"></div><div class=\"line\">0. #### 配置Nginx使用证书</div><div class=\"line\"></div><div class=\"line\">\t添加以下配置，并重启Nginx：```nginx -s reload```，如果reload不生效，可以试试restart。</div></pre></td></tr></table></figure>\n<p>server {</p>\n<p> …<br> listen 443;</p>\n<p> ssl on;<br> ssl_stapling_verify on;<br> ssl_certificate         /etc/letsencrypt/live/www.xxx.com/fullchain.pem;<br> ssl_certificate_key     /etc/letsencrypt/live/www.xxx.com/privkey.pem;</p>\n<p> …</p>\n<p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">0. #### 检查证书的有效性</div><div class=\"line\"></div><div class=\"line\">\t打开浏览器，检查证书的有效性。</div><div class=\"line\"></div><div class=\"line\">0. #### 证书续期</div><div class=\"line\"></div><div class=\"line\">\tLet&apos;s Encrypt颁发的证书有期是90天，需要在过期前进行续期，好在Let&apos;s Encrypt已经提供了自动续期的脚本。</div><div class=\"line\"></div><div class=\"line\">\t官网说明，可以一天调用两次，如果检测到证书不需要更新，是什么都不做的，以减少意外造成的故障。</div><div class=\"line\"></div><div class=\"line\">\t先运行```certbot-auto renew --dry-run```命令检查证书自动续期是否正常，如果正常，将```certbot-auto renew --quiet```命令添加到系统的计划任务cron中，就可以实现证书自动续期了。</div></pre></td></tr></table></figure>\n<p>01 1 <em> </em> * ./path/to/certbot-auto renew –quiet<br>```<br>表示每天的1点1分自动执行续期脚本。</p>\n</li>\n</ol>\n</li>\n</ol>\n","excerpt":"","more":"<h3 id=\"使用Let’s-Encrypt生成免费SSL证书\"><a href=\"#使用Let’s-Encrypt生成免费SSL证书\" class=\"headerlink\" title=\"使用Let’s Encrypt生成免费SSL证书\"></a>使用Let’s Encrypt生成免费SSL证书</h3><p>官网：<a href=\"https://letsencrypt.org/\">Let’s Encrypt</a></p>\n<p>Let’s Encrypt是由互联网安全研究小组（ISRG，一个公益组织）提供的服务。提供免费、自动化、开放的证书签发服务。</p>\n<p>Let’s Encrypt颁发的证书有期是90天，需要在过期前进行续期，好在Let’s Encrypt已经提供了自动续期的脚本。</p>\n<p>官网推荐使用<a href=\"https://certbot.eff.org/\">Certbot</a>工具来部署Https证书。在Certbot首页上选择Web服务器及服务器OS类型，我们在这里以Nginx + CentOS 6为例来说明。</p>\n<p>原文链接：<a href=\"https://certbot.eff.org/#centos6-nginx\">https://certbot.eff.org/#centos6-nginx</a></p>\n<ol>\n<li><h4 id=\"生成证书\"><a href=\"#生成证书\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h4><ol>\n<li><p>安装证书生成工具certbot-auto：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://dl.eff.org/certbot-auto</div><div class=\"line\">chmod a+x certbot-auto</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装依赖</p>\n<p> 运行<figure class=\"highlight plain\"><figcaption><span>Command Not Found```，需要[安装pip](https://pip.pypa.io/en/stable/installing/)、virtualenv包：```pip install virtualenv```。</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">0. 配置Nginx</div><div class=\"line\">\t</div><div class=\"line\">\t为需要配置https的站点添加以下配置，将访问/.well-known的请求指向本地目录。Let&apos;s Encrypt在生成证书的过程中，会在/var/www/www.xxx.com/.well-known目录生成一个临时文件，并且会访问类似于http://www.xxx.com/.well-known/acme-challenge/HGr8U1IeTW4kY_Z6UIyaakzOkyQgPr_7ArlLgtZE8SX的url，来检查域名配置是否有效。</div><div class=\"line\"></div><div class=\"line\">\t添加以下配置，并重启Nginx：nginx -s reload，如果reload不生效，可以试试restart。</div></pre></td></tr></table></figure></p>\n<p> server {</p>\n<pre><code>...            \n\nlocation /.well-known {\n    alias /var/www/www.xxx.com/.well-known;\n}\n\n...\n</code></pre><p> }</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t\t*即使证书生成之后，也需要保留Nginx的这一个配置，因为证书的续期还需要这一个配置。*</div><div class=\"line\"></div><div class=\"line\">\t0. 通过向导生成证书</div><div class=\"line\"></div><div class=\"line\">\t\t运行```./certbot-auto certonly```，会通过向导方式一步一步来生成证书。过程中间会用到上一步在Nginx中配置的本地目录。</div><div class=\"line\"></div><div class=\"line\">\t\t**对证书生成过程和原理比较熟悉的话，可以不使用向导方式，直接使用certbot-auto命令```./certbot-auto certonly --webroot -w /var/www/www.xxx.com -d xxx.com -d www.xxx.com -w /var/www/thing -d thing.is -d m.thing.is```可以快速高效地生成证书**</div><div class=\"line\"></div><div class=\"line\">\t\t生成的证书默认在/etc/letsencrypt/live/www.xxx.com/目录。</div><div class=\"line\"></div><div class=\"line\">0. #### 配置Nginx使用证书</div><div class=\"line\"></div><div class=\"line\">\t添加以下配置，并重启Nginx：```nginx -s reload```，如果reload不生效，可以试试restart。</div></pre></td></tr></table></figure>\n<p>server {</p>\n<p> …<br> listen 443;</p>\n<p> ssl on;<br> ssl_stapling_verify on;<br> ssl_certificate         /etc/letsencrypt/live/www.xxx.com/fullchain.pem;<br> ssl_certificate_key     /etc/letsencrypt/live/www.xxx.com/privkey.pem;</p>\n<p> …</p>\n<p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">0. #### 检查证书的有效性</div><div class=\"line\"></div><div class=\"line\">\t打开浏览器，检查证书的有效性。</div><div class=\"line\"></div><div class=\"line\">0. #### 证书续期</div><div class=\"line\"></div><div class=\"line\">\tLet&apos;s Encrypt颁发的证书有期是90天，需要在过期前进行续期，好在Let&apos;s Encrypt已经提供了自动续期的脚本。</div><div class=\"line\"></div><div class=\"line\">\t官网说明，可以一天调用两次，如果检测到证书不需要更新，是什么都不做的，以减少意外造成的故障。</div><div class=\"line\"></div><div class=\"line\">\t先运行```certbot-auto renew --dry-run```命令检查证书自动续期是否正常，如果正常，将```certbot-auto renew --quiet```命令添加到系统的计划任务cron中，就可以实现证书自动续期了。</div></pre></td></tr></table></figure>\n<p>01 1 <em> </em> * ./path/to/certbot-auto renew –quiet<br>```<br>表示每天的1点1分自动执行续期脚本。</p>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"My New Post","date":"2016-12-13T03:13:01.000Z","_content":"@cnBeta：【分析称苹果圣诞表现不佳：卫星图像显示店外停车少了】根据美国媒体 CNBC 的报道，摩根大通日前在一则报道中表示，他们在通过卫星图像进行观察之后发现，过去几个月的时间里停放在美国经销商门外的汽车数量要少于去年的同一时间。\n\n@cnBeta：【苹果拒绝三星支付应用上架App Store】根据外媒 ET News 的报道，苹果目前已经拒绝了三星旗下的“Samsung Pay Mini”应用上架 App Store。据了解，这款应用将会在明年年初的 CES 2017 消费电子展会上亮相，它能让用户在网上使用 Samsung Pay 进行支付。三星公司证实，苹果已经拒绝了 Samsung Pay Mini 应用登陆 App Store 的请求，不过，苹果似乎没有提供拒绝这款应用的明确理由","source":"_posts/My-New-Post.md","raw":"---\ntitle: My New Post\ndate: 2016-12-13 11:13:01\ntags:\n---\n@cnBeta：【分析称苹果圣诞表现不佳：卫星图像显示店外停车少了】根据美国媒体 CNBC 的报道，摩根大通日前在一则报道中表示，他们在通过卫星图像进行观察之后发现，过去几个月的时间里停放在美国经销商门外的汽车数量要少于去年的同一时间。\n\n@cnBeta：【苹果拒绝三星支付应用上架App Store】根据外媒 ET News 的报道，苹果目前已经拒绝了三星旗下的“Samsung Pay Mini”应用上架 App Store。据了解，这款应用将会在明年年初的 CES 2017 消费电子展会上亮相，它能让用户在网上使用 Samsung Pay 进行支付。三星公司证实，苹果已经拒绝了 Samsung Pay Mini 应用登陆 App Store 的请求，不过，苹果似乎没有提供拒绝这款应用的明确理由","slug":"My-New-Post","published":1,"updated":"2017-02-25T08:37:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2t6uq0003r7fyuo2evsup","content":"<p>@cnBeta：【分析称苹果圣诞表现不佳：卫星图像显示店外停车少了】根据美国媒体 CNBC 的报道，摩根大通日前在一则报道中表示，他们在通过卫星图像进行观察之后发现，过去几个月的时间里停放在美国经销商门外的汽车数量要少于去年的同一时间。</p>\n<p>@cnBeta：【苹果拒绝三星支付应用上架App Store】根据外媒 ET News 的报道，苹果目前已经拒绝了三星旗下的“Samsung Pay Mini”应用上架 App Store。据了解，这款应用将会在明年年初的 CES 2017 消费电子展会上亮相，它能让用户在网上使用 Samsung Pay 进行支付。三星公司证实，苹果已经拒绝了 Samsung Pay Mini 应用登陆 App Store 的请求，不过，苹果似乎没有提供拒绝这款应用的明确理由</p>\n","excerpt":"","more":"<p>@cnBeta：【分析称苹果圣诞表现不佳：卫星图像显示店外停车少了】根据美国媒体 CNBC 的报道，摩根大通日前在一则报道中表示，他们在通过卫星图像进行观察之后发现，过去几个月的时间里停放在美国经销商门外的汽车数量要少于去年的同一时间。</p>\n<p>@cnBeta：【苹果拒绝三星支付应用上架App Store】根据外媒 ET News 的报道，苹果目前已经拒绝了三星旗下的“Samsung Pay Mini”应用上架 App Store。据了解，这款应用将会在明年年初的 CES 2017 消费电子展会上亮相，它能让用户在网上使用 Samsung Pay 进行支付。三星公司证实，苹果已经拒绝了 Samsung Pay Mini 应用登陆 App Store 的请求，不过，苹果似乎没有提供拒绝这款应用的明确理由</p>\n"},{"title":"docker 常用命令","date":"2016-12-14T09:56:03.000Z","_content":"总结一下常用命令:\n\n其中<>阔起来的参数为必选，[]阔起来为可选\n\ndocker version 查看docker的版本号，包括客户端、服务端、依赖的Go等\ndocker info 查看系统(docker)层面信息，包括管理的images, containers数等\ndocker search <image> 在docker index中搜索image\ndocker pull <image> 从docker registry server 中下拉image\ndocker push <image|repository> 推送一个image或repository到registry\ndocker push <image|repository>:TAG 同上，指定tag\ndocker inspect <image|container> 查看image或container的底层信息\ndocker images TODO filter out the intermediate image layers (intermediate image layers 是什么)\ndocker images -a 列出所有的images\ndocker ps 默认显示正在运行中的container\ndocker ps -l 显示最后一次创建的container，包括未运行的\ndocker ps -a 显示所有的container，包括未运行的\ndocker logs <container> 查看container的日志，也就是执行命令的一些输出\ndocker rm <container...> 删除一个或多个container\ndocker rm `docker ps -a -q` 删除所有的container\ndocker ps -a -q | xargs docker rm 同上, 删除所有的container\ndocker rmi <image...> 删除一个或多个image\ndocker start/stop/restart <container> 开启/停止/重启container\ndocker start -i <container> 启动一个container并进入交互模式\ndocker attach <container> attach一个运行中的container\ndocker run <image> <command> 使用image创建container并执行相应命令，然后停止\ndocker run -i -t <image> /bin/bash 使用image创建container并进入交互模式, login shell是/bin/bash\ndocker run -i -t -p <host_port:contain_port> 将container的端口映射到宿主机的端口\ndocker commit <container> [repo:tag] 将一个container固化为一个新的image，后面的repo:tag可选\ndocker build <path> 寻找path路径下名为的Dockerfile的配置文件，使用此配置生成新的image\ndocker build -t repo[:tag] 同上，可以指定repo和可选的tag\ndocker build - < <dockerfile> 使用指定的dockerfile配置文件，docker以stdin方式获取内容，使用此配置生成新的image\ndocker port <container> <container port> 查看本地哪个端口映射到container的指定端口，其实用docker ps 也可以看到\n\n\n### 安装docker\n1. 利用官方脚本：\n\n```\n$ sudo yum update\n$ sudo curl -sSL https://get.docker.com/ | sh\n```\n2.  用黄狗安装：\n\n```\n$ sudo yum update\n$ sudo yum -y install docker\n$ sudo systemctl start docker\n```\n### 删除操作\n##### 删除所有已经停止的continer  -q 列出所有id\n\n```\ndocker rm $(docker ps -a -q)\n```\n##### 删除所有镜像\n\n```\ndocker rmi $(docker images | grep none | awk '{print $3}' | sort -r)\n```\n### 命令说明\n1. 其中go的语法模板\n \n```\ndocker images --format \"{{.ID}}: {{.Repository}}\"\ndocker images --format \"table {{.ID}}\\t{{.Repository}}\\t{{.Tag}}\"\n```\n2. filter 过滤参数\n \n```\ndocker images -f since=mongo:3.2\n```\n 表示自从3.2 版本以来所有的镜像。\n3. docker run -it --rm --name ryanserver ubuntu:14.04 bash \n   \n   it 表示交互终端 \n   rm 推出后删除\n   ubuntu  镜像名称\n   bash bash命令\n   naem 指定container名称\n```\ndocker run --name webserver -d -p 85:80 nginx\n```\n\n4. docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n- -a :提交的镜像作者；\n- -c :使用Dockerfile指令来创建镜像；\n- -m :提交时的说明文字；\n- -p :在commit时，将容器暂停。\n如：\n\n```\n$ docker commit \\\n    --author \"Tao Wang <twang2218@gmail.com>\" \\\n    --message \"修改了默认网页\" \\\n    webserver \\\n    nginx:v2\n```\n5.通过dockfile制作镜像\n\n```\nFROM nginx\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html\n```\nfrom 指定基础镜像 \n\nDockerfile中每次运行run 都执行了一层。&& 将各个所需命令串联起来\n\nDockerfile 支持 Shell 类的行尾添加 \\ 的命令换行方式，以及行首# 进行注释的格式\n一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。\n\ncopy 文件时可使用通配符，其通配符规则要满足 Go 的 filepath.Match 规则，如：\n\n```\nCOPY hom* /mydir/\nCOPY hom?.txt /mydir/\n```\nAdd 功能和copy 类似，不过自带解压功能：\n\n```\nFROM scratch\nADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /\n```\n###### 环境变量的配置\n格式有两种：\n  ● ENV <key> <value>\n  ● ENV <key1>=<value1> <key2>=<value2>...\n例如 ENV VERSION=1.0 DEBUG=on \\\n     NAME=\"Happy Feet\n######  匿名卷\n在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，\n任何向 /data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：\ndocker run -d -v mydata:/data xxxx\n###### 挂载host目录\n将host机中的文件挂载到container中：\ndocker可以支持把一个宿主机上的目录挂载到镜像里。\n\n```\ndocker run -it -v /home/dock/Downloads:/usr/Downloads ubuntu64 /bin/bash\n```\n\n通过-v参数，冒号前为宿主机目录，必须为绝对路径，冒号后为镜像内挂载的路径。\n\n一个dockfile:\n \n```\nMAINTAINER Anna Doe <anna@example.com>\nnodejs pm2:\nFROM node:0.11.13\n# or just node, without tag\n\nRUN npm install -g pm2\nRUN pm2 dump\n# dump will start pm2 daemon and create everything needed\n\nVOLUME [\"/srv/apps\", \"/srv/logs\", \"/srv/server.json\"]\n# don't put the files in docker container, user -v\n\nEXPOSE 3000\n\nCMD [\"pm2\", \"start\", \"/srv/server.json\", \"--no-daemon\"]\n# no daemon mode for docker\n```\n\n6. docker build -t repo[:tag] . \n   \n可以指定repo和可选的tag\n如果注意，会看到 docker build 命令最后有一个 .。. 表示当前目录\ncopy命令只有在当前上下文有有效\n\n7. 从container中导出\n导出(Export)\nExport命令用于持久化容器（不是镜像）\n接着执行导出：\nsudo docker export <CONTAINER ID> > /home/export.tar\n\n导出后，可以通过docker import   导入，如\n\n```\ncat busy.tar | sudo docker import - busy:v1.0\n\n```\n\n8. 保存镜像\n   sudo docker save busybox-1 > /home/save.tar\n\n\n```\n用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。\n```\n\n9. docker 自启动配置\n\n自动启动container 如下：\n\n```\ndocker run -ti --restart=on-failure:3   \n失败后会启动三次\n```\n10. 用非root用户操作docker\n下面是使用非root用户操作的步骤\n\n```\n创建docker组\nsudo groupadd docker\n将当前用户加入docker组\nsudo gpasswd -a ${USER} docker\n重新启动docker服务（下面是CentOS7的命令）\nsudo systemctl restart docker\n当前用户退出系统重新登陆\n运行docker命令\ndocker ps\n```\n\n11.用docker 启动zookeeper \n\n```\nps -aux | grep docker\ndocker run  --name alizookeeper --restart always -d -P zookeeper\n```\n\n ","source":"_posts/docker.md","raw":"---\ntitle: docker 常用命令\ndate: 2016-12-14 17:56:03\ntags:\n---\n总结一下常用命令:\n\n其中<>阔起来的参数为必选，[]阔起来为可选\n\ndocker version 查看docker的版本号，包括客户端、服务端、依赖的Go等\ndocker info 查看系统(docker)层面信息，包括管理的images, containers数等\ndocker search <image> 在docker index中搜索image\ndocker pull <image> 从docker registry server 中下拉image\ndocker push <image|repository> 推送一个image或repository到registry\ndocker push <image|repository>:TAG 同上，指定tag\ndocker inspect <image|container> 查看image或container的底层信息\ndocker images TODO filter out the intermediate image layers (intermediate image layers 是什么)\ndocker images -a 列出所有的images\ndocker ps 默认显示正在运行中的container\ndocker ps -l 显示最后一次创建的container，包括未运行的\ndocker ps -a 显示所有的container，包括未运行的\ndocker logs <container> 查看container的日志，也就是执行命令的一些输出\ndocker rm <container...> 删除一个或多个container\ndocker rm `docker ps -a -q` 删除所有的container\ndocker ps -a -q | xargs docker rm 同上, 删除所有的container\ndocker rmi <image...> 删除一个或多个image\ndocker start/stop/restart <container> 开启/停止/重启container\ndocker start -i <container> 启动一个container并进入交互模式\ndocker attach <container> attach一个运行中的container\ndocker run <image> <command> 使用image创建container并执行相应命令，然后停止\ndocker run -i -t <image> /bin/bash 使用image创建container并进入交互模式, login shell是/bin/bash\ndocker run -i -t -p <host_port:contain_port> 将container的端口映射到宿主机的端口\ndocker commit <container> [repo:tag] 将一个container固化为一个新的image，后面的repo:tag可选\ndocker build <path> 寻找path路径下名为的Dockerfile的配置文件，使用此配置生成新的image\ndocker build -t repo[:tag] 同上，可以指定repo和可选的tag\ndocker build - < <dockerfile> 使用指定的dockerfile配置文件，docker以stdin方式获取内容，使用此配置生成新的image\ndocker port <container> <container port> 查看本地哪个端口映射到container的指定端口，其实用docker ps 也可以看到\n\n\n### 安装docker\n1. 利用官方脚本：\n\n```\n$ sudo yum update\n$ sudo curl -sSL https://get.docker.com/ | sh\n```\n2.  用黄狗安装：\n\n```\n$ sudo yum update\n$ sudo yum -y install docker\n$ sudo systemctl start docker\n```\n### 删除操作\n##### 删除所有已经停止的continer  -q 列出所有id\n\n```\ndocker rm $(docker ps -a -q)\n```\n##### 删除所有镜像\n\n```\ndocker rmi $(docker images | grep none | awk '{print $3}' | sort -r)\n```\n### 命令说明\n1. 其中go的语法模板\n \n```\ndocker images --format \"{{.ID}}: {{.Repository}}\"\ndocker images --format \"table {{.ID}}\\t{{.Repository}}\\t{{.Tag}}\"\n```\n2. filter 过滤参数\n \n```\ndocker images -f since=mongo:3.2\n```\n 表示自从3.2 版本以来所有的镜像。\n3. docker run -it --rm --name ryanserver ubuntu:14.04 bash \n   \n   it 表示交互终端 \n   rm 推出后删除\n   ubuntu  镜像名称\n   bash bash命令\n   naem 指定container名称\n```\ndocker run --name webserver -d -p 85:80 nginx\n```\n\n4. docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n- -a :提交的镜像作者；\n- -c :使用Dockerfile指令来创建镜像；\n- -m :提交时的说明文字；\n- -p :在commit时，将容器暂停。\n如：\n\n```\n$ docker commit \\\n    --author \"Tao Wang <twang2218@gmail.com>\" \\\n    --message \"修改了默认网页\" \\\n    webserver \\\n    nginx:v2\n```\n5.通过dockfile制作镜像\n\n```\nFROM nginx\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html\n```\nfrom 指定基础镜像 \n\nDockerfile中每次运行run 都执行了一层。&& 将各个所需命令串联起来\n\nDockerfile 支持 Shell 类的行尾添加 \\ 的命令换行方式，以及行首# 进行注释的格式\n一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。\n\ncopy 文件时可使用通配符，其通配符规则要满足 Go 的 filepath.Match 规则，如：\n\n```\nCOPY hom* /mydir/\nCOPY hom?.txt /mydir/\n```\nAdd 功能和copy 类似，不过自带解压功能：\n\n```\nFROM scratch\nADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /\n```\n###### 环境变量的配置\n格式有两种：\n  ● ENV <key> <value>\n  ● ENV <key1>=<value1> <key2>=<value2>...\n例如 ENV VERSION=1.0 DEBUG=on \\\n     NAME=\"Happy Feet\n######  匿名卷\n在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，\n任何向 /data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：\ndocker run -d -v mydata:/data xxxx\n###### 挂载host目录\n将host机中的文件挂载到container中：\ndocker可以支持把一个宿主机上的目录挂载到镜像里。\n\n```\ndocker run -it -v /home/dock/Downloads:/usr/Downloads ubuntu64 /bin/bash\n```\n\n通过-v参数，冒号前为宿主机目录，必须为绝对路径，冒号后为镜像内挂载的路径。\n\n一个dockfile:\n \n```\nMAINTAINER Anna Doe <anna@example.com>\nnodejs pm2:\nFROM node:0.11.13\n# or just node, without tag\n\nRUN npm install -g pm2\nRUN pm2 dump\n# dump will start pm2 daemon and create everything needed\n\nVOLUME [\"/srv/apps\", \"/srv/logs\", \"/srv/server.json\"]\n# don't put the files in docker container, user -v\n\nEXPOSE 3000\n\nCMD [\"pm2\", \"start\", \"/srv/server.json\", \"--no-daemon\"]\n# no daemon mode for docker\n```\n\n6. docker build -t repo[:tag] . \n   \n可以指定repo和可选的tag\n如果注意，会看到 docker build 命令最后有一个 .。. 表示当前目录\ncopy命令只有在当前上下文有有效\n\n7. 从container中导出\n导出(Export)\nExport命令用于持久化容器（不是镜像）\n接着执行导出：\nsudo docker export <CONTAINER ID> > /home/export.tar\n\n导出后，可以通过docker import   导入，如\n\n```\ncat busy.tar | sudo docker import - busy:v1.0\n\n```\n\n8. 保存镜像\n   sudo docker save busybox-1 > /home/save.tar\n\n\n```\n用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。\n```\n\n9. docker 自启动配置\n\n自动启动container 如下：\n\n```\ndocker run -ti --restart=on-failure:3   \n失败后会启动三次\n```\n10. 用非root用户操作docker\n下面是使用非root用户操作的步骤\n\n```\n创建docker组\nsudo groupadd docker\n将当前用户加入docker组\nsudo gpasswd -a ${USER} docker\n重新启动docker服务（下面是CentOS7的命令）\nsudo systemctl restart docker\n当前用户退出系统重新登陆\n运行docker命令\ndocker ps\n```\n\n11.用docker 启动zookeeper \n\n```\nps -aux | grep docker\ndocker run  --name alizookeeper --restart always -d -P zookeeper\n```\n\n ","slug":"docker","published":1,"updated":"2017-02-25T08:37:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2t6uv0005r7fyj69gupfu","content":"<p>总结一下常用命令:</p>\n<p>其中&lt;&gt;阔起来的参数为必选，[]阔起来为可选</p>\n<p>docker version 查看docker的版本号，包括客户端、服务端、依赖的Go等<br>docker info 查看系统(docker)层面信息，包括管理的images, containers数等<br>docker search <image> 在docker index中搜索image<br>docker pull <image> 从docker registry server 中下拉image<br>docker push <image|repository> 推送一个image或repository到registry<br>docker push <image|repository>:TAG 同上，指定tag<br>docker inspect <image|container> 查看image或container的底层信息<br>docker images TODO filter out the intermediate image layers (intermediate image layers 是什么)<br>docker images -a 列出所有的images<br>docker ps 默认显示正在运行中的container<br>docker ps -l 显示最后一次创建的container，包括未运行的<br>docker ps -a 显示所有的container，包括未运行的<br>docker logs <container> 查看container的日志，也就是执行命令的一些输出<br>docker rm <container...> 删除一个或多个container<br>docker rm <code>docker ps -a -q</code> 删除所有的container<br>docker ps -a -q | xargs docker rm 同上, 删除所有的container<br>docker rmi <image...> 删除一个或多个image<br>docker start/stop/restart <container> 开启/停止/重启container<br>docker start -i <container> 启动一个container并进入交互模式<br>docker attach <container> attach一个运行中的container<br>docker run <image> <command> 使用image创建container并执行相应命令，然后停止<br>docker run -i -t <image> /bin/bash 使用image创建container并进入交互模式, login shell是/bin/bash<br>docker run -i -t -p <host_port:contain_port> 将container的端口映射到宿主机的端口<br>docker commit <container> [repo:tag] 将一个container固化为一个新的image，后面的repo:tag可选<br>docker build <path></path> 寻找path路径下名为的Dockerfile的配置文件，使用此配置生成新的image<br>docker build -t repo[:tag] 同上，可以指定repo和可选的tag<br>docker build - &lt; <dockerfile> 使用指定的dockerfile配置文件，docker以stdin方式获取内容，使用此配置生成新的image<br>docker port <container> <container port=\"\"> 查看本地哪个端口映射到container的指定端口，其实用docker ps 也可以看到</container></container></dockerfile></container></host_port:contain_port></image></image></container></container></container></image...></container...></container></image|container></image|repository></image|repository></image></image></p>\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><ol>\n<li>利用官方脚本：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo yum update</div><div class=\"line\">$ sudo curl -sSL https://get.docker.com/ | sh</div></pre></td></tr></table></figure>\n<ol>\n<li>用黄狗安装：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo yum update</div><div class=\"line\">$ sudo yum -y install docker</div><div class=\"line\">$ sudo systemctl start docker</div></pre></td></tr></table></figure>\n<h3 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h3><h5 id=\"删除所有已经停止的continer-q-列出所有id\"><a href=\"#删除所有已经停止的continer-q-列出所有id\" class=\"headerlink\" title=\"删除所有已经停止的continer  -q 列出所有id\"></a>删除所有已经停止的continer  -q 列出所有id</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker rm $(docker ps -a -q)</div></pre></td></tr></table></figure>\n<h5 id=\"删除所有镜像\"><a href=\"#删除所有镜像\" class=\"headerlink\" title=\"删除所有镜像\"></a>删除所有镜像</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker rmi $(docker images | grep none | awk &apos;&#123;print $3&#125;&apos; | sort -r)</div></pre></td></tr></table></figure>\n<h3 id=\"命令说明\"><a href=\"#命令说明\" class=\"headerlink\" title=\"命令说明\"></a>命令说明</h3><ol>\n<li>其中go的语法模板</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker images --format &quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;&quot;</div><div class=\"line\">docker images --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Repository&#125;&#125;\\t&#123;&#123;.Tag&#125;&#125;&quot;</div></pre></td></tr></table></figure>\n<ol>\n<li>filter 过滤参数</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker images -f since=mongo:3.2</div></pre></td></tr></table></figure>\n<p> 表示自从3.2 版本以来所有的镜像。</p>\n<ol>\n<li><p>docker run -it –rm –name ryanserver ubuntu:14.04 bash </p>\n<p>it 表示交互终端<br>rm 推出后删除<br>ubuntu  镜像名称<br>bash bash命令<br>naem 指定container名称</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run --name webserver -d -p 85:80 nginx</div></pre></td></tr></table></figure>\n</li>\n<li><p>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</p>\n</li>\n</ol>\n<ul>\n<li>-a :提交的镜像作者；</li>\n<li>-c :使用Dockerfile指令来创建镜像；</li>\n<li>-m :提交时的说明文字；</li>\n<li>-p :在commit时，将容器暂停。<br>如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker commit \\</div><div class=\"line\">    --author &quot;Tao Wang &lt;twang2218@gmail.com&gt;&quot; \\</div><div class=\"line\">    --message &quot;修改了默认网页&quot; \\</div><div class=\"line\">    webserver \\</div><div class=\"line\">    nginx:v2</div></pre></td></tr></table></figure>\n<p>5.通过dockfile制作镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM nginx</div><div class=\"line\">RUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/share/nginx/html/index.html</div></pre></td></tr></table></figure>\n<p>from 指定基础镜像 </p>\n<p>Dockerfile中每次运行run 都执行了一层。&amp;&amp; 将各个所需命令串联起来</p>\n<p>Dockerfile 支持 Shell 类的行尾添加 \\ 的命令换行方式，以及行首# 进行注释的格式<br>一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。</p>\n<p>copy 文件时可使用通配符，其通配符规则要满足 Go 的 filepath.Match 规则，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">COPY hom* /mydir/</div><div class=\"line\">COPY hom?.txt /mydir/</div></pre></td></tr></table></figure>\n<p>Add 功能和copy 类似，不过自带解压功能：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM scratch</div><div class=\"line\">ADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /</div></pre></td></tr></table></figure>\n<h6 id=\"环境变量的配置\"><a href=\"#环境变量的配置\" class=\"headerlink\" title=\"环境变量的配置\"></a>环境变量的配置</h6><p>格式有两种：<br>  ● ENV <key> <value><br>  ● ENV <key1>=<value1> <key2>=<value2>…<br>例如 ENV VERSION=1.0 DEBUG=on \\<br>     NAME=”Happy Feet</value2></key2></value1></key1></value></key></p>\n<h6 id=\"匿名卷\"><a href=\"#匿名卷\" class=\"headerlink\" title=\"匿名卷\"></a>匿名卷</h6><p>在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，<br>任何向 /data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：<br>docker run -d -v mydata:/data xxxx</p>\n<h6 id=\"挂载host目录\"><a href=\"#挂载host目录\" class=\"headerlink\" title=\"挂载host目录\"></a>挂载host目录</h6><p>将host机中的文件挂载到container中：<br>docker可以支持把一个宿主机上的目录挂载到镜像里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -it -v /home/dock/Downloads:/usr/Downloads ubuntu64 /bin/bash</div></pre></td></tr></table></figure>\n<p>通过-v参数，冒号前为宿主机目录，必须为绝对路径，冒号后为镜像内挂载的路径。</p>\n<p>一个dockfile:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">MAINTAINER Anna Doe &lt;anna@example.com&gt;</div><div class=\"line\">nodejs pm2:</div><div class=\"line\">FROM node:0.11.13</div><div class=\"line\"># or just node, without tag</div><div class=\"line\"></div><div class=\"line\">RUN npm install -g pm2</div><div class=\"line\">RUN pm2 dump</div><div class=\"line\"># dump will start pm2 daemon and create everything needed</div><div class=\"line\"></div><div class=\"line\">VOLUME [&quot;/srv/apps&quot;, &quot;/srv/logs&quot;, &quot;/srv/server.json&quot;]</div><div class=\"line\"># don&apos;t put the files in docker container, user -v</div><div class=\"line\"></div><div class=\"line\">EXPOSE 3000</div><div class=\"line\"></div><div class=\"line\">CMD [&quot;pm2&quot;, &quot;start&quot;, &quot;/srv/server.json&quot;, &quot;--no-daemon&quot;]</div><div class=\"line\"># no daemon mode for docker</div></pre></td></tr></table></figure>\n<ol>\n<li>docker build -t repo[:tag] . </li>\n</ol>\n<p>可以指定repo和可选的tag<br>如果注意，会看到 docker build 命令最后有一个 .。. 表示当前目录<br>copy命令只有在当前上下文有有效</p>\n<ol>\n<li>从container中导出<br>导出(Export)<br>Export命令用于持久化容器（不是镜像）<br>接着执行导出：<br>sudo docker export <container id=\"\"> &gt; /home/export.tar</container></li>\n</ol>\n<p>导出后，可以通过docker import   导入，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat busy.tar | sudo docker import - busy:v1.0</div></pre></td></tr></table></figure>\n<ol>\n<li>保存镜像<br>sudo docker save busybox-1 &gt; /home/save.tar</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</div></pre></td></tr></table></figure>\n<ol>\n<li>docker 自启动配置</li>\n</ol>\n<p>自动启动container 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -ti --restart=on-failure:3   </div><div class=\"line\">失败后会启动三次</div></pre></td></tr></table></figure>\n<ol>\n<li>用非root用户操作docker<br>下面是使用非root用户操作的步骤</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">创建docker组</div><div class=\"line\">sudo groupadd docker</div><div class=\"line\">将当前用户加入docker组</div><div class=\"line\">sudo gpasswd -a $&#123;USER&#125; docker</div><div class=\"line\">重新启动docker服务（下面是CentOS7的命令）</div><div class=\"line\">sudo systemctl restart docker</div><div class=\"line\">当前用户退出系统重新登陆</div><div class=\"line\">运行docker命令</div><div class=\"line\">docker ps</div></pre></td></tr></table></figure>\n<p>11.用docker 启动zookeeper </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps -aux | grep docker</div><div class=\"line\">docker run  --name alizookeeper --restart always -d -P zookeeper</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>总结一下常用命令:</p>\n<p>其中&lt;&gt;阔起来的参数为必选，[]阔起来为可选</p>\n<p>docker version 查看docker的版本号，包括客户端、服务端、依赖的Go等<br>docker info 查看系统(docker)层面信息，包括管理的images, containers数等<br>docker search <image> 在docker index中搜索image<br>docker pull <image> 从docker registry server 中下拉image<br>docker push <image|repository> 推送一个image或repository到registry<br>docker push <image|repository>:TAG 同上，指定tag<br>docker inspect <image|container> 查看image或container的底层信息<br>docker images TODO filter out the intermediate image layers (intermediate image layers 是什么)<br>docker images -a 列出所有的images<br>docker ps 默认显示正在运行中的container<br>docker ps -l 显示最后一次创建的container，包括未运行的<br>docker ps -a 显示所有的container，包括未运行的<br>docker logs <container> 查看container的日志，也就是执行命令的一些输出<br>docker rm <container...> 删除一个或多个container<br>docker rm <code>docker ps -a -q</code> 删除所有的container<br>docker ps -a -q | xargs docker rm 同上, 删除所有的container<br>docker rmi <image...> 删除一个或多个image<br>docker start/stop/restart <container> 开启/停止/重启container<br>docker start -i <container> 启动一个container并进入交互模式<br>docker attach <container> attach一个运行中的container<br>docker run <image> <command> 使用image创建container并执行相应命令，然后停止<br>docker run -i -t <image> /bin/bash 使用image创建container并进入交互模式, login shell是/bin/bash<br>docker run -i -t -p <host_port:contain_port> 将container的端口映射到宿主机的端口<br>docker commit <container> [repo:tag] 将一个container固化为一个新的image，后面的repo:tag可选<br>docker build <path> 寻找path路径下名为的Dockerfile的配置文件，使用此配置生成新的image<br>docker build -t repo[:tag] 同上，可以指定repo和可选的tag<br>docker build - &lt; <dockerfile> 使用指定的dockerfile配置文件，docker以stdin方式获取内容，使用此配置生成新的image<br>docker port <container> <container port> 查看本地哪个端口映射到container的指定端口，其实用docker ps 也可以看到</p>\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><ol>\n<li>利用官方脚本：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo yum update</div><div class=\"line\">$ sudo curl -sSL https://get.docker.com/ | sh</div></pre></td></tr></table></figure>\n<ol>\n<li>用黄狗安装：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo yum update</div><div class=\"line\">$ sudo yum -y install docker</div><div class=\"line\">$ sudo systemctl start docker</div></pre></td></tr></table></figure>\n<h3 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h3><h5 id=\"删除所有已经停止的continer-q-列出所有id\"><a href=\"#删除所有已经停止的continer-q-列出所有id\" class=\"headerlink\" title=\"删除所有已经停止的continer  -q 列出所有id\"></a>删除所有已经停止的continer  -q 列出所有id</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker rm $(docker ps -a -q)</div></pre></td></tr></table></figure>\n<h5 id=\"删除所有镜像\"><a href=\"#删除所有镜像\" class=\"headerlink\" title=\"删除所有镜像\"></a>删除所有镜像</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker rmi $(docker images | grep none | awk &apos;&#123;print $3&#125;&apos; | sort -r)</div></pre></td></tr></table></figure>\n<h3 id=\"命令说明\"><a href=\"#命令说明\" class=\"headerlink\" title=\"命令说明\"></a>命令说明</h3><ol>\n<li>其中go的语法模板</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker images --format &quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;&quot;</div><div class=\"line\">docker images --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Repository&#125;&#125;\\t&#123;&#123;.Tag&#125;&#125;&quot;</div></pre></td></tr></table></figure>\n<ol>\n<li>filter 过滤参数</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker images -f since=mongo:3.2</div></pre></td></tr></table></figure>\n<p> 表示自从3.2 版本以来所有的镜像。</p>\n<ol>\n<li><p>docker run -it –rm –name ryanserver ubuntu:14.04 bash </p>\n<p>it 表示交互终端<br>rm 推出后删除<br>ubuntu  镜像名称<br>bash bash命令<br>naem 指定container名称</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run --name webserver -d -p 85:80 nginx</div></pre></td></tr></table></figure>\n</li>\n<li><p>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</p>\n</li>\n</ol>\n<ul>\n<li>-a :提交的镜像作者；</li>\n<li>-c :使用Dockerfile指令来创建镜像；</li>\n<li>-m :提交时的说明文字；</li>\n<li>-p :在commit时，将容器暂停。<br>如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker commit \\</div><div class=\"line\">    --author &quot;Tao Wang &lt;twang2218@gmail.com&gt;&quot; \\</div><div class=\"line\">    --message &quot;修改了默认网页&quot; \\</div><div class=\"line\">    webserver \\</div><div class=\"line\">    nginx:v2</div></pre></td></tr></table></figure>\n<p>5.通过dockfile制作镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM nginx</div><div class=\"line\">RUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/share/nginx/html/index.html</div></pre></td></tr></table></figure>\n<p>from 指定基础镜像 </p>\n<p>Dockerfile中每次运行run 都执行了一层。&amp;&amp; 将各个所需命令串联起来</p>\n<p>Dockerfile 支持 Shell 类的行尾添加 \\ 的命令换行方式，以及行首# 进行注释的格式<br>一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。</p>\n<p>copy 文件时可使用通配符，其通配符规则要满足 Go 的 filepath.Match 规则，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">COPY hom* /mydir/</div><div class=\"line\">COPY hom?.txt /mydir/</div></pre></td></tr></table></figure>\n<p>Add 功能和copy 类似，不过自带解压功能：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM scratch</div><div class=\"line\">ADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /</div></pre></td></tr></table></figure>\n<h6 id=\"环境变量的配置\"><a href=\"#环境变量的配置\" class=\"headerlink\" title=\"环境变量的配置\"></a>环境变量的配置</h6><p>格式有两种：<br>  ● ENV <key> <value><br>  ● ENV <key1>=<value1> <key2>=<value2>…<br>例如 ENV VERSION=1.0 DEBUG=on \\<br>     NAME=”Happy Feet</p>\n<h6 id=\"匿名卷\"><a href=\"#匿名卷\" class=\"headerlink\" title=\"匿名卷\"></a>匿名卷</h6><p>在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，<br>任何向 /data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：<br>docker run -d -v mydata:/data xxxx</p>\n<h6 id=\"挂载host目录\"><a href=\"#挂载host目录\" class=\"headerlink\" title=\"挂载host目录\"></a>挂载host目录</h6><p>将host机中的文件挂载到container中：<br>docker可以支持把一个宿主机上的目录挂载到镜像里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -it -v /home/dock/Downloads:/usr/Downloads ubuntu64 /bin/bash</div></pre></td></tr></table></figure>\n<p>通过-v参数，冒号前为宿主机目录，必须为绝对路径，冒号后为镜像内挂载的路径。</p>\n<p>一个dockfile:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">MAINTAINER Anna Doe &lt;anna@example.com&gt;</div><div class=\"line\">nodejs pm2:</div><div class=\"line\">FROM node:0.11.13</div><div class=\"line\"># or just node, without tag</div><div class=\"line\"></div><div class=\"line\">RUN npm install -g pm2</div><div class=\"line\">RUN pm2 dump</div><div class=\"line\"># dump will start pm2 daemon and create everything needed</div><div class=\"line\"></div><div class=\"line\">VOLUME [&quot;/srv/apps&quot;, &quot;/srv/logs&quot;, &quot;/srv/server.json&quot;]</div><div class=\"line\"># don&apos;t put the files in docker container, user -v</div><div class=\"line\"></div><div class=\"line\">EXPOSE 3000</div><div class=\"line\"></div><div class=\"line\">CMD [&quot;pm2&quot;, &quot;start&quot;, &quot;/srv/server.json&quot;, &quot;--no-daemon&quot;]</div><div class=\"line\"># no daemon mode for docker</div></pre></td></tr></table></figure>\n<ol>\n<li>docker build -t repo[:tag] . </li>\n</ol>\n<p>可以指定repo和可选的tag<br>如果注意，会看到 docker build 命令最后有一个 .。. 表示当前目录<br>copy命令只有在当前上下文有有效</p>\n<ol>\n<li>从container中导出<br>导出(Export)<br>Export命令用于持久化容器（不是镜像）<br>接着执行导出：<br>sudo docker export <CONTAINER ID> &gt; /home/export.tar</li>\n</ol>\n<p>导出后，可以通过docker import   导入，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat busy.tar | sudo docker import - busy:v1.0</div></pre></td></tr></table></figure>\n<ol>\n<li>保存镜像<br>sudo docker save busybox-1 &gt; /home/save.tar</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</div></pre></td></tr></table></figure>\n<ol>\n<li>docker 自启动配置</li>\n</ol>\n<p>自动启动container 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -ti --restart=on-failure:3   </div><div class=\"line\">失败后会启动三次</div></pre></td></tr></table></figure>\n<ol>\n<li>用非root用户操作docker<br>下面是使用非root用户操作的步骤</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">创建docker组</div><div class=\"line\">sudo groupadd docker</div><div class=\"line\">将当前用户加入docker组</div><div class=\"line\">sudo gpasswd -a $&#123;USER&#125; docker</div><div class=\"line\">重新启动docker服务（下面是CentOS7的命令）</div><div class=\"line\">sudo systemctl restart docker</div><div class=\"line\">当前用户退出系统重新登陆</div><div class=\"line\">运行docker命令</div><div class=\"line\">docker ps</div></pre></td></tr></table></figure>\n<p>11.用docker 启动zookeeper </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps -aux | grep docker</div><div class=\"line\">docker run  --name alizookeeper --restart always -d -P zookeeper</div></pre></td></tr></table></figure>\n"},{"title":"happyday","date":"2016-12-14T09:56:03.000Z","_content":"## 今天是个开心的日子\n　2014年起，中国每年有1亿人选择境外游，随着境外游规模的激增，中国消费者对海外商品的认识越加深入。2016年7月，《经济学人》杂志的一篇文章表示，中国的中产阶级（家庭年收入在7.66万-28.6万人民币之间）人数从1990年代的几乎为零，增长到今日的2.25亿。","source":"_posts/happyday.md","raw":"---\ntitle: happyday\ndate: 2016-12-14 17:56:03\ntags:\n---\n## 今天是个开心的日子\n　2014年起，中国每年有1亿人选择境外游，随着境外游规模的激增，中国消费者对海外商品的认识越加深入。2016年7月，《经济学人》杂志的一篇文章表示，中国的中产阶级（家庭年收入在7.66万-28.6万人民币之间）人数从1990年代的几乎为零，增长到今日的2.25亿。","slug":"happyday","published":1,"updated":"2017-02-25T08:37:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2t6uy0006r7fyajwi3coz","content":"<h2 id=\"今天是个开心的日子\"><a href=\"#今天是个开心的日子\" class=\"headerlink\" title=\"今天是个开心的日子\"></a>今天是个开心的日子</h2><p>　2014年起，中国每年有1亿人选择境外游，随着境外游规模的激增，中国消费者对海外商品的认识越加深入。2016年7月，《经济学人》杂志的一篇文章表示，中国的中产阶级（家庭年收入在7.66万-28.6万人民币之间）人数从1990年代的几乎为零，增长到今日的2.25亿。</p>\n","excerpt":"","more":"<h2 id=\"今天是个开心的日子\"><a href=\"#今天是个开心的日子\" class=\"headerlink\" title=\"今天是个开心的日子\"></a>今天是个开心的日子</h2><p>　2014年起，中国每年有1亿人选择境外游，随着境外游规模的激增，中国消费者对海外商品的认识越加深入。2016年7月，《经济学人》杂志的一篇文章表示，中国的中产阶级（家庭年收入在7.66万-28.6万人民币之间）人数从1990年代的几乎为零，增长到今日的2.25亿。</p>\n"},{"title":"eslint","date":"2016-12-25T05:31:39.000Z","_content":"\nEslint的一个例子：\n\n```\n以下是.eslintrc 文件示例和解释：\n\n\n{\n  \"env\": {\n    \"browser\": true,\n    \"node\": true,\n    \"commonjs\": true\n  },\n  \"ecmaFeatures\": {\n    // lambda表达式\n    \"arrowFunctions\": true,\n    // 解构赋值\n    \"destructuring\": true,\n    // class\n    \"classes\": true,\n    // http://es6.ruanyifeng.com/#docs/function#函数参数的默认值\n    \"defaultParams\": true,\n    // 块级作用域，允许使用let const\n    \"blockBindings\": true,\n    // 允许使用模块，模块内默认严格模式\n    \"modules\": true,\n    // 允许字面量定义对象时，用表达式做属性名\n    // http://es6.ruanyifeng.com/#docs/object#属性名表达式\n    \"objectLiteralComputedProperties\": true,\n    // 允许对象字面量方法名简写\n    /*var o = {\n        method() {\n          return \"Hello!\";\n        }\n     };\n\n     等同于\n\n     var o = {\n       method: function() {\n         return \"Hello!\";\n       }\n     };\n    */\n    \"objectLiteralShorthandMethods\": true,\n    /*\n      对象字面量属性名简写\n      var foo = 'bar';\n      var baz = {foo};\n      baz // {foo: \"bar\"}\n\n      // 等同于\n      var baz = {foo: foo};\n    */\n    \"objectLiteralShorthandProperties\": true,\n    // http://es6.ruanyifeng.com/#docs/function#rest参数\n    \"restParams\": true,\n    // http://es6.ruanyifeng.com/#docs/function#扩展运算符\n    \"spread\": true,\n    // http://es6.ruanyifeng.com/#docs/iterator#for---of循环\n    \"forOf\": true,\n    // http://es6.ruanyifeng.com/#docs/generator\n    \"generators\": true,\n    // http://es6.ruanyifeng.com/#docs/string#模板字符串\n    \"templateStrings\": true,\n    \"superInFunctions\": true,\n    // http://es6.ruanyifeng.com/#docs/object#对象的扩展运算符\n    \"experimentalObjectRestSpread\": true\n  },\n\n  \"rules\": {\n    // 定义对象的set存取器属性时，强制定义get\n    \"accessor-pairs\": 2,\n    // 指定数组的元素之间要以空格隔开(,后面)， never参数：[ 之前和 ] 之后不能带空格，always参数：[ 之前和 ] 之后必须带空格\n    \"array-bracket-spacing\": [2, \"never\"],\n    // 在块级作用域外访问块内定义的变量是否报错提示\n    \"block-scoped-var\": 0,\n    // if while function 后面的{必须与if在同一行，java风格。\n    \"brace-style\": [2, \"1tbs\", { \"allowSingleLine\": true }],\n    // 双峰驼命名格式\n    \"camelcase\": 2,\n    // 数组和对象键值对最后一个逗号， never参数：不能带末尾的逗号, always参数：必须带末尾的逗号，\n    // always-multiline：多行模式必须带逗号，单行模式不能带逗号\n    \"comma-dangle\": [2, \"never\"],\n    // 控制逗号前后的空格\n    \"comma-spacing\": [2, { \"before\": false, \"after\": true }],\n    // 控制逗号在行尾出现还是在行首出现\n    // http://eslint.org/docs/rules/comma-style\n    \"comma-style\": [2, \"last\"],\n    // 圈复杂度\n    \"complexity\": [2,9],\n    // 以方括号取对象属性时，[ 后面和 ] 前面是否需要空格, 可选参数 never, always\n    \"computed-property-spacing\": [2,\"never\"],\n    // 强制方法必须返回值，TypeScript强类型，不配置\n    \"consistent-return\": 0,\n    // 用于指统一在回调函数中指向this的变量名，箭头函数中的this已经可以指向外层调用者，应该没卵用了\n    // e.g [0,\"that\"] 指定只能 var that = this. that不能指向其他任何值，this也不能赋值给that以外的其他值\n    \"consistent-this\": 0,\n    // 强制在子类构造函数中用super()调用父类构造函数，TypeScrip的编译器也会提示\n    \"constructor-super\": 0,\n    // if else while for do后面的代码块是否需要{ }包围，参数：\n    //    multi  只有块中有多行语句时才需要{ }包围\n    //    multi-line  只有块中有多行语句时才需要{ }包围, 但是块中的执行语句只有一行时，\n    //                   块中的语句只能跟和if语句在同一行。if (foo) foo++; else doSomething();\n    //    multi-or-nest 只有块中有多行语句时才需要{ }包围, 如果块中的执行语句只有一行，执行语句可以零另起一行也可以跟在if语句后面\n    //    [2, \"multi\", \"consistent\"] 保持前后语句的{ }一致\n    //    default: [2, \"all\"] 全都需要{ }包围\n    \"curly\": [2, \"all\"],\n    // switch语句强制default分支，也可添加 // no default 注释取消此次警告\n    \"default-case\": 2,\n    // 强制object.key 中 . 的位置，参数:\n    //      property，'.'号应与属性在同一行\n    //      object, '.' 号应与对象名在同一行\n    \"dot-location\": [2, \"property\"],\n    // 强制使用.号取属性\n    //    参数： allowKeywords：true 使用保留字做属性名时，只能使用.方式取属性\n    //                          false 使用保留字做属性名时, 只能使用[]方式取属性 e.g [2, {\"allowKeywords\": false}]\n    //           allowPattern:  当属性名匹配提供的正则表达式时，允许使用[]方式取值,否则只能用.号取值 e.g [2, {\"allowPattern\": \"^[a-z]+(_[a-z]+)+$\"}]\n    \"dot-notation\": [2, {\"allowKeywords\": true}],\n    // 文件末尾强制换行\n    \"eol-last\": 2,\n    // 使用 === 替代 ==\n    \"eqeqeq\": [2, \"allow-null\"],\n    // 方法表达式是否需要命名\n    \"func-names\": 0,\n    // 方法定义风格，参数：\n    //    declaration: 强制使用方法声明的方式，function f(){} e.g [2, \"declaration\"]\n    //    expression：强制使用方法表达式的方式，var f = function() {}  e.g [2, \"expression\"]\n    //    allowArrowFunctions: declaration风格中允许箭头函数。 e.g [2, \"declaration\", { \"allowArrowFunctions\": true }]\n    \"func-style\": 0,\n    \"generator-star-spacing\": [2, { \"before\": true, \"after\": true }],\n    \"guard-for-in\": 0,\n    \"handle-callback-err\": [2, \"^(err|error)$\" ],\n    \"indent\": [2, 2, { \"SwitchCase\": 1 }],\n    \"key-spacing\": [2, { \"beforeColon\": false, \"afterColon\": true }],\n    \"linebreak-style\": 0,\n    \"lines-around-comment\": 0,\n    \"max-nested-callbacks\": 0,\n    \"new-cap\": [2, { \"newIsCap\": true, \"capIsNew\": false }],\n    \"new-parens\": 2,\n    \"newline-after-var\": 0,\n    \"no-alert\": 0,\n    \"no-array-constructor\": 2,\n    \"no-caller\": 2,\n    \"no-catch-shadow\": 0,\n    \"no-cond-assign\": 2,\n    \"no-console\": 0,\n    \"no-constant-condition\": 0,\n    \"no-continue\": 0,\n    \"no-control-regex\": 2,\n    \"no-debugger\": 2,\n    \"no-delete-var\": 2,\n    \"no-div-regex\": 0,\n    \"no-dupe-args\": 2,\n    \"no-dupe-keys\": 2,\n    \"no-duplicate-case\": 2,\n    \"no-else-return\": 0,\n    \"no-empty\": 0,\n    \"no-empty-character-class\": 2,\n    \"no-empty-label\": 2,\n    \"no-eq-null\": 0,\n    \"no-eval\": 2,\n    \"no-ex-assign\": 2,\n    \"no-extend-native\": 2,\n    \"no-extra-bind\": 2,\n    \"no-extra-boolean-cast\": 2,\n    \"no-extra-parens\": 0,\n    \"no-extra-semi\": 0,\n    \"no-fallthrough\": 2,\n    \"no-floating-decimal\": 2,\n    \"no-func-assign\": 2,\n    \"no-implied-eval\": 2,\n    \"no-inline-comments\": 0,\n    \"no-inner-declarations\": [2, \"functions\"],\n    \"no-invalid-regexp\": 2,\n    \"no-irregular-whitespace\": 2,\n    \"no-iterator\": 2,\n    \"no-label-var\": 2,\n    \"no-labels\": 2,\n    \"no-lone-blocks\": 2,\n    \"no-lonely-if\": 0,\n    \"no-loop-func\": 0,\n    \"no-mixed-requires\": 0,\n    \"no-mixed-spaces-and-tabs\": 2,\n    \"no-multi-spaces\": 2,\n    \"no-multi-str\": 2,\n    \"no-multiple-empty-lines\": [2, { \"max\": 1 }],\n    \"no-native-reassign\": 2,\n    \"no-negated-in-lhs\": 2,\n    \"no-nested-ternary\": 0,\n    \"no-new\": 2,\n    \"no-new-func\": 0,\n    \"no-new-object\": 2,\n    \"no-new-require\": 2,\n    \"no-new-wrappers\": 2,\n    \"no-obj-calls\": 2,\n    \"no-octal\": 2,\n    \"no-octal-escape\": 2,\n    \"no-param-reassign\": 0,\n    \"no-path-concat\": 0,\n    \"no-process-env\": 0,\n    \"no-process-exit\": 0,\n    \"no-proto\": 0,\n    \"no-redeclare\": 2,\n    \"no-regex-spaces\": 2,\n    \"no-restricted-modules\": 0,\n    \"no-return-assign\": 2,\n    \"no-script-url\": 0,\n    \"no-self-compare\": 2,\n    \"no-sequences\": 2,\n    \"no-shadow\": 0,\n    \"no-shadow-restricted-names\": 2,\n    \"no-spaced-func\": 2,\n    \"no-sparse-arrays\": 2,\n    \"no-sync\": 0,\n    \"no-ternary\": 0,\n    \"no-this-before-super\": 2,\n    \"no-throw-literal\": 2,\n    \"no-trailing-spaces\": 2,\n    \"no-undef\": 2,\n    \"no-undef-init\": 2,\n    \"no-undefined\": 0,\n    \"no-underscore-dangle\": 0,\n    \"no-unexpected-multiline\": 2,\n    \"no-unneeded-ternary\": 2,\n    \"no-unreachable\": 2,\n    \"no-unused-expressions\": 0,\n    \"no-unused-vars\": [2, { \"vars\": \"all\", \"args\": \"none\" }],\n    \"no-use-before-define\": 0,\n    \"no-var\": 0,\n    \"no-void\": 0,\n    \"no-warning-comments\": 0,\n    \"no-with\": 2,\n    \"object-curly-spacing\": 0,\n    \"object-shorthand\": 0,\n    \"one-var\": [2, { \"initialized\": \"never\" }],\n    \"operator-assignment\": 0,\n    \"operator-linebreak\": [2, \"after\", { \"overrides\": { \"?\": \"before\", \":\": \"before\" } }],\n    \"padded-blocks\": 0,\n    \"prefer-const\": 0,\n    \"quote-props\": 0,\n    \"quotes\": [2, \"single\", \"avoid-escape\"],\n    \"radix\": 2,\n    \"semi\": [2, \"never\"],\n    \"semi-spacing\": 0,\n    \"sort-vars\": 0,\n    \"space-after-keywords\": [2, \"always\"],\n    \"space-before-blocks\": [2, \"always\"],\n    \"space-before-function-paren\": [2, \"always\"],\n    \"space-in-parens\": [2, \"never\"],\n    \"space-infix-ops\": 2,\n    \"space-return-throw-case\": 2,\n    \"space-unary-ops\": [2, { \"words\": true, \"nonwords\": false }],\n    \"spaced-comment\": [2, \"always\", { \"markers\": [\"global\", \"globals\", \"eslint\", \"eslint-disable\", \"*package\", \"!\"] }],\n    \"strict\": 0,\n    \"use-isnan\": 2,\n    \"valid-jsdoc\": 0,\n    \"valid-typeof\": 2,\n    \"vars-on-top\": 0,\n    \"wrap-iife\": [2, \"any\"],\n    \"wrap-regex\": 0,\n    \"yoda\": [2, \"never\"]\n  }\n}\n```\n","source":"_posts/eslint.md","raw":"---\ntitle: eslint\ndate: 2016-12-25 13:31:39\ntags:\n---\n\nEslint的一个例子：\n\n```\n以下是.eslintrc 文件示例和解释：\n\n\n{\n  \"env\": {\n    \"browser\": true,\n    \"node\": true,\n    \"commonjs\": true\n  },\n  \"ecmaFeatures\": {\n    // lambda表达式\n    \"arrowFunctions\": true,\n    // 解构赋值\n    \"destructuring\": true,\n    // class\n    \"classes\": true,\n    // http://es6.ruanyifeng.com/#docs/function#函数参数的默认值\n    \"defaultParams\": true,\n    // 块级作用域，允许使用let const\n    \"blockBindings\": true,\n    // 允许使用模块，模块内默认严格模式\n    \"modules\": true,\n    // 允许字面量定义对象时，用表达式做属性名\n    // http://es6.ruanyifeng.com/#docs/object#属性名表达式\n    \"objectLiteralComputedProperties\": true,\n    // 允许对象字面量方法名简写\n    /*var o = {\n        method() {\n          return \"Hello!\";\n        }\n     };\n\n     等同于\n\n     var o = {\n       method: function() {\n         return \"Hello!\";\n       }\n     };\n    */\n    \"objectLiteralShorthandMethods\": true,\n    /*\n      对象字面量属性名简写\n      var foo = 'bar';\n      var baz = {foo};\n      baz // {foo: \"bar\"}\n\n      // 等同于\n      var baz = {foo: foo};\n    */\n    \"objectLiteralShorthandProperties\": true,\n    // http://es6.ruanyifeng.com/#docs/function#rest参数\n    \"restParams\": true,\n    // http://es6.ruanyifeng.com/#docs/function#扩展运算符\n    \"spread\": true,\n    // http://es6.ruanyifeng.com/#docs/iterator#for---of循环\n    \"forOf\": true,\n    // http://es6.ruanyifeng.com/#docs/generator\n    \"generators\": true,\n    // http://es6.ruanyifeng.com/#docs/string#模板字符串\n    \"templateStrings\": true,\n    \"superInFunctions\": true,\n    // http://es6.ruanyifeng.com/#docs/object#对象的扩展运算符\n    \"experimentalObjectRestSpread\": true\n  },\n\n  \"rules\": {\n    // 定义对象的set存取器属性时，强制定义get\n    \"accessor-pairs\": 2,\n    // 指定数组的元素之间要以空格隔开(,后面)， never参数：[ 之前和 ] 之后不能带空格，always参数：[ 之前和 ] 之后必须带空格\n    \"array-bracket-spacing\": [2, \"never\"],\n    // 在块级作用域外访问块内定义的变量是否报错提示\n    \"block-scoped-var\": 0,\n    // if while function 后面的{必须与if在同一行，java风格。\n    \"brace-style\": [2, \"1tbs\", { \"allowSingleLine\": true }],\n    // 双峰驼命名格式\n    \"camelcase\": 2,\n    // 数组和对象键值对最后一个逗号， never参数：不能带末尾的逗号, always参数：必须带末尾的逗号，\n    // always-multiline：多行模式必须带逗号，单行模式不能带逗号\n    \"comma-dangle\": [2, \"never\"],\n    // 控制逗号前后的空格\n    \"comma-spacing\": [2, { \"before\": false, \"after\": true }],\n    // 控制逗号在行尾出现还是在行首出现\n    // http://eslint.org/docs/rules/comma-style\n    \"comma-style\": [2, \"last\"],\n    // 圈复杂度\n    \"complexity\": [2,9],\n    // 以方括号取对象属性时，[ 后面和 ] 前面是否需要空格, 可选参数 never, always\n    \"computed-property-spacing\": [2,\"never\"],\n    // 强制方法必须返回值，TypeScript强类型，不配置\n    \"consistent-return\": 0,\n    // 用于指统一在回调函数中指向this的变量名，箭头函数中的this已经可以指向外层调用者，应该没卵用了\n    // e.g [0,\"that\"] 指定只能 var that = this. that不能指向其他任何值，this也不能赋值给that以外的其他值\n    \"consistent-this\": 0,\n    // 强制在子类构造函数中用super()调用父类构造函数，TypeScrip的编译器也会提示\n    \"constructor-super\": 0,\n    // if else while for do后面的代码块是否需要{ }包围，参数：\n    //    multi  只有块中有多行语句时才需要{ }包围\n    //    multi-line  只有块中有多行语句时才需要{ }包围, 但是块中的执行语句只有一行时，\n    //                   块中的语句只能跟和if语句在同一行。if (foo) foo++; else doSomething();\n    //    multi-or-nest 只有块中有多行语句时才需要{ }包围, 如果块中的执行语句只有一行，执行语句可以零另起一行也可以跟在if语句后面\n    //    [2, \"multi\", \"consistent\"] 保持前后语句的{ }一致\n    //    default: [2, \"all\"] 全都需要{ }包围\n    \"curly\": [2, \"all\"],\n    // switch语句强制default分支，也可添加 // no default 注释取消此次警告\n    \"default-case\": 2,\n    // 强制object.key 中 . 的位置，参数:\n    //      property，'.'号应与属性在同一行\n    //      object, '.' 号应与对象名在同一行\n    \"dot-location\": [2, \"property\"],\n    // 强制使用.号取属性\n    //    参数： allowKeywords：true 使用保留字做属性名时，只能使用.方式取属性\n    //                          false 使用保留字做属性名时, 只能使用[]方式取属性 e.g [2, {\"allowKeywords\": false}]\n    //           allowPattern:  当属性名匹配提供的正则表达式时，允许使用[]方式取值,否则只能用.号取值 e.g [2, {\"allowPattern\": \"^[a-z]+(_[a-z]+)+$\"}]\n    \"dot-notation\": [2, {\"allowKeywords\": true}],\n    // 文件末尾强制换行\n    \"eol-last\": 2,\n    // 使用 === 替代 ==\n    \"eqeqeq\": [2, \"allow-null\"],\n    // 方法表达式是否需要命名\n    \"func-names\": 0,\n    // 方法定义风格，参数：\n    //    declaration: 强制使用方法声明的方式，function f(){} e.g [2, \"declaration\"]\n    //    expression：强制使用方法表达式的方式，var f = function() {}  e.g [2, \"expression\"]\n    //    allowArrowFunctions: declaration风格中允许箭头函数。 e.g [2, \"declaration\", { \"allowArrowFunctions\": true }]\n    \"func-style\": 0,\n    \"generator-star-spacing\": [2, { \"before\": true, \"after\": true }],\n    \"guard-for-in\": 0,\n    \"handle-callback-err\": [2, \"^(err|error)$\" ],\n    \"indent\": [2, 2, { \"SwitchCase\": 1 }],\n    \"key-spacing\": [2, { \"beforeColon\": false, \"afterColon\": true }],\n    \"linebreak-style\": 0,\n    \"lines-around-comment\": 0,\n    \"max-nested-callbacks\": 0,\n    \"new-cap\": [2, { \"newIsCap\": true, \"capIsNew\": false }],\n    \"new-parens\": 2,\n    \"newline-after-var\": 0,\n    \"no-alert\": 0,\n    \"no-array-constructor\": 2,\n    \"no-caller\": 2,\n    \"no-catch-shadow\": 0,\n    \"no-cond-assign\": 2,\n    \"no-console\": 0,\n    \"no-constant-condition\": 0,\n    \"no-continue\": 0,\n    \"no-control-regex\": 2,\n    \"no-debugger\": 2,\n    \"no-delete-var\": 2,\n    \"no-div-regex\": 0,\n    \"no-dupe-args\": 2,\n    \"no-dupe-keys\": 2,\n    \"no-duplicate-case\": 2,\n    \"no-else-return\": 0,\n    \"no-empty\": 0,\n    \"no-empty-character-class\": 2,\n    \"no-empty-label\": 2,\n    \"no-eq-null\": 0,\n    \"no-eval\": 2,\n    \"no-ex-assign\": 2,\n    \"no-extend-native\": 2,\n    \"no-extra-bind\": 2,\n    \"no-extra-boolean-cast\": 2,\n    \"no-extra-parens\": 0,\n    \"no-extra-semi\": 0,\n    \"no-fallthrough\": 2,\n    \"no-floating-decimal\": 2,\n    \"no-func-assign\": 2,\n    \"no-implied-eval\": 2,\n    \"no-inline-comments\": 0,\n    \"no-inner-declarations\": [2, \"functions\"],\n    \"no-invalid-regexp\": 2,\n    \"no-irregular-whitespace\": 2,\n    \"no-iterator\": 2,\n    \"no-label-var\": 2,\n    \"no-labels\": 2,\n    \"no-lone-blocks\": 2,\n    \"no-lonely-if\": 0,\n    \"no-loop-func\": 0,\n    \"no-mixed-requires\": 0,\n    \"no-mixed-spaces-and-tabs\": 2,\n    \"no-multi-spaces\": 2,\n    \"no-multi-str\": 2,\n    \"no-multiple-empty-lines\": [2, { \"max\": 1 }],\n    \"no-native-reassign\": 2,\n    \"no-negated-in-lhs\": 2,\n    \"no-nested-ternary\": 0,\n    \"no-new\": 2,\n    \"no-new-func\": 0,\n    \"no-new-object\": 2,\n    \"no-new-require\": 2,\n    \"no-new-wrappers\": 2,\n    \"no-obj-calls\": 2,\n    \"no-octal\": 2,\n    \"no-octal-escape\": 2,\n    \"no-param-reassign\": 0,\n    \"no-path-concat\": 0,\n    \"no-process-env\": 0,\n    \"no-process-exit\": 0,\n    \"no-proto\": 0,\n    \"no-redeclare\": 2,\n    \"no-regex-spaces\": 2,\n    \"no-restricted-modules\": 0,\n    \"no-return-assign\": 2,\n    \"no-script-url\": 0,\n    \"no-self-compare\": 2,\n    \"no-sequences\": 2,\n    \"no-shadow\": 0,\n    \"no-shadow-restricted-names\": 2,\n    \"no-spaced-func\": 2,\n    \"no-sparse-arrays\": 2,\n    \"no-sync\": 0,\n    \"no-ternary\": 0,\n    \"no-this-before-super\": 2,\n    \"no-throw-literal\": 2,\n    \"no-trailing-spaces\": 2,\n    \"no-undef\": 2,\n    \"no-undef-init\": 2,\n    \"no-undefined\": 0,\n    \"no-underscore-dangle\": 0,\n    \"no-unexpected-multiline\": 2,\n    \"no-unneeded-ternary\": 2,\n    \"no-unreachable\": 2,\n    \"no-unused-expressions\": 0,\n    \"no-unused-vars\": [2, { \"vars\": \"all\", \"args\": \"none\" }],\n    \"no-use-before-define\": 0,\n    \"no-var\": 0,\n    \"no-void\": 0,\n    \"no-warning-comments\": 0,\n    \"no-with\": 2,\n    \"object-curly-spacing\": 0,\n    \"object-shorthand\": 0,\n    \"one-var\": [2, { \"initialized\": \"never\" }],\n    \"operator-assignment\": 0,\n    \"operator-linebreak\": [2, \"after\", { \"overrides\": { \"?\": \"before\", \":\": \"before\" } }],\n    \"padded-blocks\": 0,\n    \"prefer-const\": 0,\n    \"quote-props\": 0,\n    \"quotes\": [2, \"single\", \"avoid-escape\"],\n    \"radix\": 2,\n    \"semi\": [2, \"never\"],\n    \"semi-spacing\": 0,\n    \"sort-vars\": 0,\n    \"space-after-keywords\": [2, \"always\"],\n    \"space-before-blocks\": [2, \"always\"],\n    \"space-before-function-paren\": [2, \"always\"],\n    \"space-in-parens\": [2, \"never\"],\n    \"space-infix-ops\": 2,\n    \"space-return-throw-case\": 2,\n    \"space-unary-ops\": [2, { \"words\": true, \"nonwords\": false }],\n    \"spaced-comment\": [2, \"always\", { \"markers\": [\"global\", \"globals\", \"eslint\", \"eslint-disable\", \"*package\", \"!\"] }],\n    \"strict\": 0,\n    \"use-isnan\": 2,\n    \"valid-jsdoc\": 0,\n    \"valid-typeof\": 2,\n    \"vars-on-top\": 0,\n    \"wrap-iife\": [2, \"any\"],\n    \"wrap-regex\": 0,\n    \"yoda\": [2, \"never\"]\n  }\n}\n```\n","slug":"eslint","published":1,"updated":"2017-02-25T08:37:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2t6v00007r7fy63x1klna","content":"<p>Eslint的一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div></pre></td><td class=\"code\"><pre><div class=\"line\">以下是.eslintrc 文件示例和解释：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;env&quot;: &#123;</div><div class=\"line\">    &quot;browser&quot;: true,</div><div class=\"line\">    &quot;node&quot;: true,</div><div class=\"line\">    &quot;commonjs&quot;: true</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;ecmaFeatures&quot;: &#123;</div><div class=\"line\">    // lambda表达式</div><div class=\"line\">    &quot;arrowFunctions&quot;: true,</div><div class=\"line\">    // 解构赋值</div><div class=\"line\">    &quot;destructuring&quot;: true,</div><div class=\"line\">    // class</div><div class=\"line\">    &quot;classes&quot;: true,</div><div class=\"line\">    // http://es6.ruanyifeng.com/#docs/function#函数参数的默认值</div><div class=\"line\">    &quot;defaultParams&quot;: true,</div><div class=\"line\">    // 块级作用域，允许使用let const</div><div class=\"line\">    &quot;blockBindings&quot;: true,</div><div class=\"line\">    // 允许使用模块，模块内默认严格模式</div><div class=\"line\">    &quot;modules&quot;: true,</div><div class=\"line\">    // 允许字面量定义对象时，用表达式做属性名</div><div class=\"line\">    // http://es6.ruanyifeng.com/#docs/object#属性名表达式</div><div class=\"line\">    &quot;objectLiteralComputedProperties&quot;: true,</div><div class=\"line\">    // 允许对象字面量方法名简写</div><div class=\"line\">    /*var o = &#123;</div><div class=\"line\">        method() &#123;</div><div class=\"line\">          return &quot;Hello!&quot;;</div><div class=\"line\">        &#125;</div><div class=\"line\">     &#125;;</div><div class=\"line\"></div><div class=\"line\">     等同于</div><div class=\"line\"></div><div class=\"line\">     var o = &#123;</div><div class=\"line\">       method: function() &#123;</div><div class=\"line\">         return &quot;Hello!&quot;;</div><div class=\"line\">       &#125;</div><div class=\"line\">     &#125;;</div><div class=\"line\">    */</div><div class=\"line\">    &quot;objectLiteralShorthandMethods&quot;: true,</div><div class=\"line\">    /*</div><div class=\"line\">      对象字面量属性名简写</div><div class=\"line\">      var foo = &apos;bar&apos;;</div><div class=\"line\">      var baz = &#123;foo&#125;;</div><div class=\"line\">      baz // &#123;foo: &quot;bar&quot;&#125;</div><div class=\"line\"></div><div class=\"line\">      // 等同于</div><div class=\"line\">      var baz = &#123;foo: foo&#125;;</div><div class=\"line\">    */</div><div class=\"line\">    &quot;objectLiteralShorthandProperties&quot;: true,</div><div class=\"line\">    // http://es6.ruanyifeng.com/#docs/function#rest参数</div><div class=\"line\">    &quot;restParams&quot;: true,</div><div class=\"line\">    // http://es6.ruanyifeng.com/#docs/function#扩展运算符</div><div class=\"line\">    &quot;spread&quot;: true,</div><div class=\"line\">    // http://es6.ruanyifeng.com/#docs/iterator#for---of循环</div><div class=\"line\">    &quot;forOf&quot;: true,</div><div class=\"line\">    // http://es6.ruanyifeng.com/#docs/generator</div><div class=\"line\">    &quot;generators&quot;: true,</div><div class=\"line\">    // http://es6.ruanyifeng.com/#docs/string#模板字符串</div><div class=\"line\">    &quot;templateStrings&quot;: true,</div><div class=\"line\">    &quot;superInFunctions&quot;: true,</div><div class=\"line\">    // http://es6.ruanyifeng.com/#docs/object#对象的扩展运算符</div><div class=\"line\">    &quot;experimentalObjectRestSpread&quot;: true</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  &quot;rules&quot;: &#123;</div><div class=\"line\">    // 定义对象的set存取器属性时，强制定义get</div><div class=\"line\">    &quot;accessor-pairs&quot;: 2,</div><div class=\"line\">    // 指定数组的元素之间要以空格隔开(,后面)， never参数：[ 之前和 ] 之后不能带空格，always参数：[ 之前和 ] 之后必须带空格</div><div class=\"line\">    &quot;array-bracket-spacing&quot;: [2, &quot;never&quot;],</div><div class=\"line\">    // 在块级作用域外访问块内定义的变量是否报错提示</div><div class=\"line\">    &quot;block-scoped-var&quot;: 0,</div><div class=\"line\">    // if while function 后面的&#123;必须与if在同一行，java风格。</div><div class=\"line\">    &quot;brace-style&quot;: [2, &quot;1tbs&quot;, &#123; &quot;allowSingleLine&quot;: true &#125;],</div><div class=\"line\">    // 双峰驼命名格式</div><div class=\"line\">    &quot;camelcase&quot;: 2,</div><div class=\"line\">    // 数组和对象键值对最后一个逗号， never参数：不能带末尾的逗号, always参数：必须带末尾的逗号，</div><div class=\"line\">    // always-multiline：多行模式必须带逗号，单行模式不能带逗号</div><div class=\"line\">    &quot;comma-dangle&quot;: [2, &quot;never&quot;],</div><div class=\"line\">    // 控制逗号前后的空格</div><div class=\"line\">    &quot;comma-spacing&quot;: [2, &#123; &quot;before&quot;: false, &quot;after&quot;: true &#125;],</div><div class=\"line\">    // 控制逗号在行尾出现还是在行首出现</div><div class=\"line\">    // http://eslint.org/docs/rules/comma-style</div><div class=\"line\">    &quot;comma-style&quot;: [2, &quot;last&quot;],</div><div class=\"line\">    // 圈复杂度</div><div class=\"line\">    &quot;complexity&quot;: [2,9],</div><div class=\"line\">    // 以方括号取对象属性时，[ 后面和 ] 前面是否需要空格, 可选参数 never, always</div><div class=\"line\">    &quot;computed-property-spacing&quot;: [2,&quot;never&quot;],</div><div class=\"line\">    // 强制方法必须返回值，TypeScript强类型，不配置</div><div class=\"line\">    &quot;consistent-return&quot;: 0,</div><div class=\"line\">    // 用于指统一在回调函数中指向this的变量名，箭头函数中的this已经可以指向外层调用者，应该没卵用了</div><div class=\"line\">    // e.g [0,&quot;that&quot;] 指定只能 var that = this. that不能指向其他任何值，this也不能赋值给that以外的其他值</div><div class=\"line\">    &quot;consistent-this&quot;: 0,</div><div class=\"line\">    // 强制在子类构造函数中用super()调用父类构造函数，TypeScrip的编译器也会提示</div><div class=\"line\">    &quot;constructor-super&quot;: 0,</div><div class=\"line\">    // if else while for do后面的代码块是否需要&#123; &#125;包围，参数：</div><div class=\"line\">    //    multi  只有块中有多行语句时才需要&#123; &#125;包围</div><div class=\"line\">    //    multi-line  只有块中有多行语句时才需要&#123; &#125;包围, 但是块中的执行语句只有一行时，</div><div class=\"line\">    //                   块中的语句只能跟和if语句在同一行。if (foo) foo++; else doSomething();</div><div class=\"line\">    //    multi-or-nest 只有块中有多行语句时才需要&#123; &#125;包围, 如果块中的执行语句只有一行，执行语句可以零另起一行也可以跟在if语句后面</div><div class=\"line\">    //    [2, &quot;multi&quot;, &quot;consistent&quot;] 保持前后语句的&#123; &#125;一致</div><div class=\"line\">    //    default: [2, &quot;all&quot;] 全都需要&#123; &#125;包围</div><div class=\"line\">    &quot;curly&quot;: [2, &quot;all&quot;],</div><div class=\"line\">    // switch语句强制default分支，也可添加 // no default 注释取消此次警告</div><div class=\"line\">    &quot;default-case&quot;: 2,</div><div class=\"line\">    // 强制object.key 中 . 的位置，参数:</div><div class=\"line\">    //      property，&apos;.&apos;号应与属性在同一行</div><div class=\"line\">    //      object, &apos;.&apos; 号应与对象名在同一行</div><div class=\"line\">    &quot;dot-location&quot;: [2, &quot;property&quot;],</div><div class=\"line\">    // 强制使用.号取属性</div><div class=\"line\">    //    参数： allowKeywords：true 使用保留字做属性名时，只能使用.方式取属性</div><div class=\"line\">    //                          false 使用保留字做属性名时, 只能使用[]方式取属性 e.g [2, &#123;&quot;allowKeywords&quot;: false&#125;]</div><div class=\"line\">    //           allowPattern:  当属性名匹配提供的正则表达式时，允许使用[]方式取值,否则只能用.号取值 e.g [2, &#123;&quot;allowPattern&quot;: &quot;^[a-z]+(_[a-z]+)+$&quot;&#125;]</div><div class=\"line\">    &quot;dot-notation&quot;: [2, &#123;&quot;allowKeywords&quot;: true&#125;],</div><div class=\"line\">    // 文件末尾强制换行</div><div class=\"line\">    &quot;eol-last&quot;: 2,</div><div class=\"line\">    // 使用 === 替代 ==</div><div class=\"line\">    &quot;eqeqeq&quot;: [2, &quot;allow-null&quot;],</div><div class=\"line\">    // 方法表达式是否需要命名</div><div class=\"line\">    &quot;func-names&quot;: 0,</div><div class=\"line\">    // 方法定义风格，参数：</div><div class=\"line\">    //    declaration: 强制使用方法声明的方式，function f()&#123;&#125; e.g [2, &quot;declaration&quot;]</div><div class=\"line\">    //    expression：强制使用方法表达式的方式，var f = function() &#123;&#125;  e.g [2, &quot;expression&quot;]</div><div class=\"line\">    //    allowArrowFunctions: declaration风格中允许箭头函数。 e.g [2, &quot;declaration&quot;, &#123; &quot;allowArrowFunctions&quot;: true &#125;]</div><div class=\"line\">    &quot;func-style&quot;: 0,</div><div class=\"line\">    &quot;generator-star-spacing&quot;: [2, &#123; &quot;before&quot;: true, &quot;after&quot;: true &#125;],</div><div class=\"line\">    &quot;guard-for-in&quot;: 0,</div><div class=\"line\">    &quot;handle-callback-err&quot;: [2, &quot;^(err|error)$&quot; ],</div><div class=\"line\">    &quot;indent&quot;: [2, 2, &#123; &quot;SwitchCase&quot;: 1 &#125;],</div><div class=\"line\">    &quot;key-spacing&quot;: [2, &#123; &quot;beforeColon&quot;: false, &quot;afterColon&quot;: true &#125;],</div><div class=\"line\">    &quot;linebreak-style&quot;: 0,</div><div class=\"line\">    &quot;lines-around-comment&quot;: 0,</div><div class=\"line\">    &quot;max-nested-callbacks&quot;: 0,</div><div class=\"line\">    &quot;new-cap&quot;: [2, &#123; &quot;newIsCap&quot;: true, &quot;capIsNew&quot;: false &#125;],</div><div class=\"line\">    &quot;new-parens&quot;: 2,</div><div class=\"line\">    &quot;newline-after-var&quot;: 0,</div><div class=\"line\">    &quot;no-alert&quot;: 0,</div><div class=\"line\">    &quot;no-array-constructor&quot;: 2,</div><div class=\"line\">    &quot;no-caller&quot;: 2,</div><div class=\"line\">    &quot;no-catch-shadow&quot;: 0,</div><div class=\"line\">    &quot;no-cond-assign&quot;: 2,</div><div class=\"line\">    &quot;no-console&quot;: 0,</div><div class=\"line\">    &quot;no-constant-condition&quot;: 0,</div><div class=\"line\">    &quot;no-continue&quot;: 0,</div><div class=\"line\">    &quot;no-control-regex&quot;: 2,</div><div class=\"line\">    &quot;no-debugger&quot;: 2,</div><div class=\"line\">    &quot;no-delete-var&quot;: 2,</div><div class=\"line\">    &quot;no-div-regex&quot;: 0,</div><div class=\"line\">    &quot;no-dupe-args&quot;: 2,</div><div class=\"line\">    &quot;no-dupe-keys&quot;: 2,</div><div class=\"line\">    &quot;no-duplicate-case&quot;: 2,</div><div class=\"line\">    &quot;no-else-return&quot;: 0,</div><div class=\"line\">    &quot;no-empty&quot;: 0,</div><div class=\"line\">    &quot;no-empty-character-class&quot;: 2,</div><div class=\"line\">    &quot;no-empty-label&quot;: 2,</div><div class=\"line\">    &quot;no-eq-null&quot;: 0,</div><div class=\"line\">    &quot;no-eval&quot;: 2,</div><div class=\"line\">    &quot;no-ex-assign&quot;: 2,</div><div class=\"line\">    &quot;no-extend-native&quot;: 2,</div><div class=\"line\">    &quot;no-extra-bind&quot;: 2,</div><div class=\"line\">    &quot;no-extra-boolean-cast&quot;: 2,</div><div class=\"line\">    &quot;no-extra-parens&quot;: 0,</div><div class=\"line\">    &quot;no-extra-semi&quot;: 0,</div><div class=\"line\">    &quot;no-fallthrough&quot;: 2,</div><div class=\"line\">    &quot;no-floating-decimal&quot;: 2,</div><div class=\"line\">    &quot;no-func-assign&quot;: 2,</div><div class=\"line\">    &quot;no-implied-eval&quot;: 2,</div><div class=\"line\">    &quot;no-inline-comments&quot;: 0,</div><div class=\"line\">    &quot;no-inner-declarations&quot;: [2, &quot;functions&quot;],</div><div class=\"line\">    &quot;no-invalid-regexp&quot;: 2,</div><div class=\"line\">    &quot;no-irregular-whitespace&quot;: 2,</div><div class=\"line\">    &quot;no-iterator&quot;: 2,</div><div class=\"line\">    &quot;no-label-var&quot;: 2,</div><div class=\"line\">    &quot;no-labels&quot;: 2,</div><div class=\"line\">    &quot;no-lone-blocks&quot;: 2,</div><div class=\"line\">    &quot;no-lonely-if&quot;: 0,</div><div class=\"line\">    &quot;no-loop-func&quot;: 0,</div><div class=\"line\">    &quot;no-mixed-requires&quot;: 0,</div><div class=\"line\">    &quot;no-mixed-spaces-and-tabs&quot;: 2,</div><div class=\"line\">    &quot;no-multi-spaces&quot;: 2,</div><div class=\"line\">    &quot;no-multi-str&quot;: 2,</div><div class=\"line\">    &quot;no-multiple-empty-lines&quot;: [2, &#123; &quot;max&quot;: 1 &#125;],</div><div class=\"line\">    &quot;no-native-reassign&quot;: 2,</div><div class=\"line\">    &quot;no-negated-in-lhs&quot;: 2,</div><div class=\"line\">    &quot;no-nested-ternary&quot;: 0,</div><div class=\"line\">    &quot;no-new&quot;: 2,</div><div class=\"line\">    &quot;no-new-func&quot;: 0,</div><div class=\"line\">    &quot;no-new-object&quot;: 2,</div><div class=\"line\">    &quot;no-new-require&quot;: 2,</div><div class=\"line\">    &quot;no-new-wrappers&quot;: 2,</div><div class=\"line\">    &quot;no-obj-calls&quot;: 2,</div><div class=\"line\">    &quot;no-octal&quot;: 2,</div><div class=\"line\">    &quot;no-octal-escape&quot;: 2,</div><div class=\"line\">    &quot;no-param-reassign&quot;: 0,</div><div class=\"line\">    &quot;no-path-concat&quot;: 0,</div><div class=\"line\">    &quot;no-process-env&quot;: 0,</div><div class=\"line\">    &quot;no-process-exit&quot;: 0,</div><div class=\"line\">    &quot;no-proto&quot;: 0,</div><div class=\"line\">    &quot;no-redeclare&quot;: 2,</div><div class=\"line\">    &quot;no-regex-spaces&quot;: 2,</div><div class=\"line\">    &quot;no-restricted-modules&quot;: 0,</div><div class=\"line\">    &quot;no-return-assign&quot;: 2,</div><div class=\"line\">    &quot;no-script-url&quot;: 0,</div><div class=\"line\">    &quot;no-self-compare&quot;: 2,</div><div class=\"line\">    &quot;no-sequences&quot;: 2,</div><div class=\"line\">    &quot;no-shadow&quot;: 0,</div><div class=\"line\">    &quot;no-shadow-restricted-names&quot;: 2,</div><div class=\"line\">    &quot;no-spaced-func&quot;: 2,</div><div class=\"line\">    &quot;no-sparse-arrays&quot;: 2,</div><div class=\"line\">    &quot;no-sync&quot;: 0,</div><div class=\"line\">    &quot;no-ternary&quot;: 0,</div><div class=\"line\">    &quot;no-this-before-super&quot;: 2,</div><div class=\"line\">    &quot;no-throw-literal&quot;: 2,</div><div class=\"line\">    &quot;no-trailing-spaces&quot;: 2,</div><div class=\"line\">    &quot;no-undef&quot;: 2,</div><div class=\"line\">    &quot;no-undef-init&quot;: 2,</div><div class=\"line\">    &quot;no-undefined&quot;: 0,</div><div class=\"line\">    &quot;no-underscore-dangle&quot;: 0,</div><div class=\"line\">    &quot;no-unexpected-multiline&quot;: 2,</div><div class=\"line\">    &quot;no-unneeded-ternary&quot;: 2,</div><div class=\"line\">    &quot;no-unreachable&quot;: 2,</div><div class=\"line\">    &quot;no-unused-expressions&quot;: 0,</div><div class=\"line\">    &quot;no-unused-vars&quot;: [2, &#123; &quot;vars&quot;: &quot;all&quot;, &quot;args&quot;: &quot;none&quot; &#125;],</div><div class=\"line\">    &quot;no-use-before-define&quot;: 0,</div><div class=\"line\">    &quot;no-var&quot;: 0,</div><div class=\"line\">    &quot;no-void&quot;: 0,</div><div class=\"line\">    &quot;no-warning-comments&quot;: 0,</div><div class=\"line\">    &quot;no-with&quot;: 2,</div><div class=\"line\">    &quot;object-curly-spacing&quot;: 0,</div><div class=\"line\">    &quot;object-shorthand&quot;: 0,</div><div class=\"line\">    &quot;one-var&quot;: [2, &#123; &quot;initialized&quot;: &quot;never&quot; &#125;],</div><div class=\"line\">    &quot;operator-assignment&quot;: 0,</div><div class=\"line\">    &quot;operator-linebreak&quot;: [2, &quot;after&quot;, &#123; &quot;overrides&quot;: &#123; &quot;?&quot;: &quot;before&quot;, &quot;:&quot;: &quot;before&quot; &#125; &#125;],</div><div class=\"line\">    &quot;padded-blocks&quot;: 0,</div><div class=\"line\">    &quot;prefer-const&quot;: 0,</div><div class=\"line\">    &quot;quote-props&quot;: 0,</div><div class=\"line\">    &quot;quotes&quot;: [2, &quot;single&quot;, &quot;avoid-escape&quot;],</div><div class=\"line\">    &quot;radix&quot;: 2,</div><div class=\"line\">    &quot;semi&quot;: [2, &quot;never&quot;],</div><div class=\"line\">    &quot;semi-spacing&quot;: 0,</div><div class=\"line\">    &quot;sort-vars&quot;: 0,</div><div class=\"line\">    &quot;space-after-keywords&quot;: [2, &quot;always&quot;],</div><div class=\"line\">    &quot;space-before-blocks&quot;: [2, &quot;always&quot;],</div><div class=\"line\">    &quot;space-before-function-paren&quot;: [2, &quot;always&quot;],</div><div class=\"line\">    &quot;space-in-parens&quot;: [2, &quot;never&quot;],</div><div class=\"line\">    &quot;space-infix-ops&quot;: 2,</div><div class=\"line\">    &quot;space-return-throw-case&quot;: 2,</div><div class=\"line\">    &quot;space-unary-ops&quot;: [2, &#123; &quot;words&quot;: true, &quot;nonwords&quot;: false &#125;],</div><div class=\"line\">    &quot;spaced-comment&quot;: [2, &quot;always&quot;, &#123; &quot;markers&quot;: [&quot;global&quot;, &quot;globals&quot;, &quot;eslint&quot;, &quot;eslint-disable&quot;, &quot;*package&quot;, &quot;!&quot;] &#125;],</div><div class=\"line\">    &quot;strict&quot;: 0,</div><div class=\"line\">    &quot;use-isnan&quot;: 2,</div><div class=\"line\">    &quot;valid-jsdoc&quot;: 0,</div><div class=\"line\">    &quot;valid-typeof&quot;: 2,</div><div class=\"line\">    &quot;vars-on-top&quot;: 0,</div><div class=\"line\">    &quot;wrap-iife&quot;: [2, &quot;any&quot;],</div><div class=\"line\">    &quot;wrap-regex&quot;: 0,</div><div class=\"line\">    &quot;yoda&quot;: [2, &quot;never&quot;]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>Eslint的一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div></pre></td><td class=\"code\"><pre><div class=\"line\">以下是.eslintrc 文件示例和解释：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;env&quot;: &#123;</div><div class=\"line\">    &quot;browser&quot;: true,</div><div class=\"line\">    &quot;node&quot;: true,</div><div class=\"line\">    &quot;commonjs&quot;: true</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;ecmaFeatures&quot;: &#123;</div><div class=\"line\">    // lambda表达式</div><div class=\"line\">    &quot;arrowFunctions&quot;: true,</div><div class=\"line\">    // 解构赋值</div><div class=\"line\">    &quot;destructuring&quot;: true,</div><div class=\"line\">    // class</div><div class=\"line\">    &quot;classes&quot;: true,</div><div class=\"line\">    // http://es6.ruanyifeng.com/#docs/function#函数参数的默认值</div><div class=\"line\">    &quot;defaultParams&quot;: true,</div><div class=\"line\">    // 块级作用域，允许使用let const</div><div class=\"line\">    &quot;blockBindings&quot;: true,</div><div class=\"line\">    // 允许使用模块，模块内默认严格模式</div><div class=\"line\">    &quot;modules&quot;: true,</div><div class=\"line\">    // 允许字面量定义对象时，用表达式做属性名</div><div class=\"line\">    // http://es6.ruanyifeng.com/#docs/object#属性名表达式</div><div class=\"line\">    &quot;objectLiteralComputedProperties&quot;: true,</div><div class=\"line\">    // 允许对象字面量方法名简写</div><div class=\"line\">    /*var o = &#123;</div><div class=\"line\">        method() &#123;</div><div class=\"line\">          return &quot;Hello!&quot;;</div><div class=\"line\">        &#125;</div><div class=\"line\">     &#125;;</div><div class=\"line\"></div><div class=\"line\">     等同于</div><div class=\"line\"></div><div class=\"line\">     var o = &#123;</div><div class=\"line\">       method: function() &#123;</div><div class=\"line\">         return &quot;Hello!&quot;;</div><div class=\"line\">       &#125;</div><div class=\"line\">     &#125;;</div><div class=\"line\">    */</div><div class=\"line\">    &quot;objectLiteralShorthandMethods&quot;: true,</div><div class=\"line\">    /*</div><div class=\"line\">      对象字面量属性名简写</div><div class=\"line\">      var foo = &apos;bar&apos;;</div><div class=\"line\">      var baz = &#123;foo&#125;;</div><div class=\"line\">      baz // &#123;foo: &quot;bar&quot;&#125;</div><div class=\"line\"></div><div class=\"line\">      // 等同于</div><div class=\"line\">      var baz = &#123;foo: foo&#125;;</div><div class=\"line\">    */</div><div class=\"line\">    &quot;objectLiteralShorthandProperties&quot;: true,</div><div class=\"line\">    // http://es6.ruanyifeng.com/#docs/function#rest参数</div><div class=\"line\">    &quot;restParams&quot;: true,</div><div class=\"line\">    // http://es6.ruanyifeng.com/#docs/function#扩展运算符</div><div class=\"line\">    &quot;spread&quot;: true,</div><div class=\"line\">    // http://es6.ruanyifeng.com/#docs/iterator#for---of循环</div><div class=\"line\">    &quot;forOf&quot;: true,</div><div class=\"line\">    // http://es6.ruanyifeng.com/#docs/generator</div><div class=\"line\">    &quot;generators&quot;: true,</div><div class=\"line\">    // http://es6.ruanyifeng.com/#docs/string#模板字符串</div><div class=\"line\">    &quot;templateStrings&quot;: true,</div><div class=\"line\">    &quot;superInFunctions&quot;: true,</div><div class=\"line\">    // http://es6.ruanyifeng.com/#docs/object#对象的扩展运算符</div><div class=\"line\">    &quot;experimentalObjectRestSpread&quot;: true</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  &quot;rules&quot;: &#123;</div><div class=\"line\">    // 定义对象的set存取器属性时，强制定义get</div><div class=\"line\">    &quot;accessor-pairs&quot;: 2,</div><div class=\"line\">    // 指定数组的元素之间要以空格隔开(,后面)， never参数：[ 之前和 ] 之后不能带空格，always参数：[ 之前和 ] 之后必须带空格</div><div class=\"line\">    &quot;array-bracket-spacing&quot;: [2, &quot;never&quot;],</div><div class=\"line\">    // 在块级作用域外访问块内定义的变量是否报错提示</div><div class=\"line\">    &quot;block-scoped-var&quot;: 0,</div><div class=\"line\">    // if while function 后面的&#123;必须与if在同一行，java风格。</div><div class=\"line\">    &quot;brace-style&quot;: [2, &quot;1tbs&quot;, &#123; &quot;allowSingleLine&quot;: true &#125;],</div><div class=\"line\">    // 双峰驼命名格式</div><div class=\"line\">    &quot;camelcase&quot;: 2,</div><div class=\"line\">    // 数组和对象键值对最后一个逗号， never参数：不能带末尾的逗号, always参数：必须带末尾的逗号，</div><div class=\"line\">    // always-multiline：多行模式必须带逗号，单行模式不能带逗号</div><div class=\"line\">    &quot;comma-dangle&quot;: [2, &quot;never&quot;],</div><div class=\"line\">    // 控制逗号前后的空格</div><div class=\"line\">    &quot;comma-spacing&quot;: [2, &#123; &quot;before&quot;: false, &quot;after&quot;: true &#125;],</div><div class=\"line\">    // 控制逗号在行尾出现还是在行首出现</div><div class=\"line\">    // http://eslint.org/docs/rules/comma-style</div><div class=\"line\">    &quot;comma-style&quot;: [2, &quot;last&quot;],</div><div class=\"line\">    // 圈复杂度</div><div class=\"line\">    &quot;complexity&quot;: [2,9],</div><div class=\"line\">    // 以方括号取对象属性时，[ 后面和 ] 前面是否需要空格, 可选参数 never, always</div><div class=\"line\">    &quot;computed-property-spacing&quot;: [2,&quot;never&quot;],</div><div class=\"line\">    // 强制方法必须返回值，TypeScript强类型，不配置</div><div class=\"line\">    &quot;consistent-return&quot;: 0,</div><div class=\"line\">    // 用于指统一在回调函数中指向this的变量名，箭头函数中的this已经可以指向外层调用者，应该没卵用了</div><div class=\"line\">    // e.g [0,&quot;that&quot;] 指定只能 var that = this. that不能指向其他任何值，this也不能赋值给that以外的其他值</div><div class=\"line\">    &quot;consistent-this&quot;: 0,</div><div class=\"line\">    // 强制在子类构造函数中用super()调用父类构造函数，TypeScrip的编译器也会提示</div><div class=\"line\">    &quot;constructor-super&quot;: 0,</div><div class=\"line\">    // if else while for do后面的代码块是否需要&#123; &#125;包围，参数：</div><div class=\"line\">    //    multi  只有块中有多行语句时才需要&#123; &#125;包围</div><div class=\"line\">    //    multi-line  只有块中有多行语句时才需要&#123; &#125;包围, 但是块中的执行语句只有一行时，</div><div class=\"line\">    //                   块中的语句只能跟和if语句在同一行。if (foo) foo++; else doSomething();</div><div class=\"line\">    //    multi-or-nest 只有块中有多行语句时才需要&#123; &#125;包围, 如果块中的执行语句只有一行，执行语句可以零另起一行也可以跟在if语句后面</div><div class=\"line\">    //    [2, &quot;multi&quot;, &quot;consistent&quot;] 保持前后语句的&#123; &#125;一致</div><div class=\"line\">    //    default: [2, &quot;all&quot;] 全都需要&#123; &#125;包围</div><div class=\"line\">    &quot;curly&quot;: [2, &quot;all&quot;],</div><div class=\"line\">    // switch语句强制default分支，也可添加 // no default 注释取消此次警告</div><div class=\"line\">    &quot;default-case&quot;: 2,</div><div class=\"line\">    // 强制object.key 中 . 的位置，参数:</div><div class=\"line\">    //      property，&apos;.&apos;号应与属性在同一行</div><div class=\"line\">    //      object, &apos;.&apos; 号应与对象名在同一行</div><div class=\"line\">    &quot;dot-location&quot;: [2, &quot;property&quot;],</div><div class=\"line\">    // 强制使用.号取属性</div><div class=\"line\">    //    参数： allowKeywords：true 使用保留字做属性名时，只能使用.方式取属性</div><div class=\"line\">    //                          false 使用保留字做属性名时, 只能使用[]方式取属性 e.g [2, &#123;&quot;allowKeywords&quot;: false&#125;]</div><div class=\"line\">    //           allowPattern:  当属性名匹配提供的正则表达式时，允许使用[]方式取值,否则只能用.号取值 e.g [2, &#123;&quot;allowPattern&quot;: &quot;^[a-z]+(_[a-z]+)+$&quot;&#125;]</div><div class=\"line\">    &quot;dot-notation&quot;: [2, &#123;&quot;allowKeywords&quot;: true&#125;],</div><div class=\"line\">    // 文件末尾强制换行</div><div class=\"line\">    &quot;eol-last&quot;: 2,</div><div class=\"line\">    // 使用 === 替代 ==</div><div class=\"line\">    &quot;eqeqeq&quot;: [2, &quot;allow-null&quot;],</div><div class=\"line\">    // 方法表达式是否需要命名</div><div class=\"line\">    &quot;func-names&quot;: 0,</div><div class=\"line\">    // 方法定义风格，参数：</div><div class=\"line\">    //    declaration: 强制使用方法声明的方式，function f()&#123;&#125; e.g [2, &quot;declaration&quot;]</div><div class=\"line\">    //    expression：强制使用方法表达式的方式，var f = function() &#123;&#125;  e.g [2, &quot;expression&quot;]</div><div class=\"line\">    //    allowArrowFunctions: declaration风格中允许箭头函数。 e.g [2, &quot;declaration&quot;, &#123; &quot;allowArrowFunctions&quot;: true &#125;]</div><div class=\"line\">    &quot;func-style&quot;: 0,</div><div class=\"line\">    &quot;generator-star-spacing&quot;: [2, &#123; &quot;before&quot;: true, &quot;after&quot;: true &#125;],</div><div class=\"line\">    &quot;guard-for-in&quot;: 0,</div><div class=\"line\">    &quot;handle-callback-err&quot;: [2, &quot;^(err|error)$&quot; ],</div><div class=\"line\">    &quot;indent&quot;: [2, 2, &#123; &quot;SwitchCase&quot;: 1 &#125;],</div><div class=\"line\">    &quot;key-spacing&quot;: [2, &#123; &quot;beforeColon&quot;: false, &quot;afterColon&quot;: true &#125;],</div><div class=\"line\">    &quot;linebreak-style&quot;: 0,</div><div class=\"line\">    &quot;lines-around-comment&quot;: 0,</div><div class=\"line\">    &quot;max-nested-callbacks&quot;: 0,</div><div class=\"line\">    &quot;new-cap&quot;: [2, &#123; &quot;newIsCap&quot;: true, &quot;capIsNew&quot;: false &#125;],</div><div class=\"line\">    &quot;new-parens&quot;: 2,</div><div class=\"line\">    &quot;newline-after-var&quot;: 0,</div><div class=\"line\">    &quot;no-alert&quot;: 0,</div><div class=\"line\">    &quot;no-array-constructor&quot;: 2,</div><div class=\"line\">    &quot;no-caller&quot;: 2,</div><div class=\"line\">    &quot;no-catch-shadow&quot;: 0,</div><div class=\"line\">    &quot;no-cond-assign&quot;: 2,</div><div class=\"line\">    &quot;no-console&quot;: 0,</div><div class=\"line\">    &quot;no-constant-condition&quot;: 0,</div><div class=\"line\">    &quot;no-continue&quot;: 0,</div><div class=\"line\">    &quot;no-control-regex&quot;: 2,</div><div class=\"line\">    &quot;no-debugger&quot;: 2,</div><div class=\"line\">    &quot;no-delete-var&quot;: 2,</div><div class=\"line\">    &quot;no-div-regex&quot;: 0,</div><div class=\"line\">    &quot;no-dupe-args&quot;: 2,</div><div class=\"line\">    &quot;no-dupe-keys&quot;: 2,</div><div class=\"line\">    &quot;no-duplicate-case&quot;: 2,</div><div class=\"line\">    &quot;no-else-return&quot;: 0,</div><div class=\"line\">    &quot;no-empty&quot;: 0,</div><div class=\"line\">    &quot;no-empty-character-class&quot;: 2,</div><div class=\"line\">    &quot;no-empty-label&quot;: 2,</div><div class=\"line\">    &quot;no-eq-null&quot;: 0,</div><div class=\"line\">    &quot;no-eval&quot;: 2,</div><div class=\"line\">    &quot;no-ex-assign&quot;: 2,</div><div class=\"line\">    &quot;no-extend-native&quot;: 2,</div><div class=\"line\">    &quot;no-extra-bind&quot;: 2,</div><div class=\"line\">    &quot;no-extra-boolean-cast&quot;: 2,</div><div class=\"line\">    &quot;no-extra-parens&quot;: 0,</div><div class=\"line\">    &quot;no-extra-semi&quot;: 0,</div><div class=\"line\">    &quot;no-fallthrough&quot;: 2,</div><div class=\"line\">    &quot;no-floating-decimal&quot;: 2,</div><div class=\"line\">    &quot;no-func-assign&quot;: 2,</div><div class=\"line\">    &quot;no-implied-eval&quot;: 2,</div><div class=\"line\">    &quot;no-inline-comments&quot;: 0,</div><div class=\"line\">    &quot;no-inner-declarations&quot;: [2, &quot;functions&quot;],</div><div class=\"line\">    &quot;no-invalid-regexp&quot;: 2,</div><div class=\"line\">    &quot;no-irregular-whitespace&quot;: 2,</div><div class=\"line\">    &quot;no-iterator&quot;: 2,</div><div class=\"line\">    &quot;no-label-var&quot;: 2,</div><div class=\"line\">    &quot;no-labels&quot;: 2,</div><div class=\"line\">    &quot;no-lone-blocks&quot;: 2,</div><div class=\"line\">    &quot;no-lonely-if&quot;: 0,</div><div class=\"line\">    &quot;no-loop-func&quot;: 0,</div><div class=\"line\">    &quot;no-mixed-requires&quot;: 0,</div><div class=\"line\">    &quot;no-mixed-spaces-and-tabs&quot;: 2,</div><div class=\"line\">    &quot;no-multi-spaces&quot;: 2,</div><div class=\"line\">    &quot;no-multi-str&quot;: 2,</div><div class=\"line\">    &quot;no-multiple-empty-lines&quot;: [2, &#123; &quot;max&quot;: 1 &#125;],</div><div class=\"line\">    &quot;no-native-reassign&quot;: 2,</div><div class=\"line\">    &quot;no-negated-in-lhs&quot;: 2,</div><div class=\"line\">    &quot;no-nested-ternary&quot;: 0,</div><div class=\"line\">    &quot;no-new&quot;: 2,</div><div class=\"line\">    &quot;no-new-func&quot;: 0,</div><div class=\"line\">    &quot;no-new-object&quot;: 2,</div><div class=\"line\">    &quot;no-new-require&quot;: 2,</div><div class=\"line\">    &quot;no-new-wrappers&quot;: 2,</div><div class=\"line\">    &quot;no-obj-calls&quot;: 2,</div><div class=\"line\">    &quot;no-octal&quot;: 2,</div><div class=\"line\">    &quot;no-octal-escape&quot;: 2,</div><div class=\"line\">    &quot;no-param-reassign&quot;: 0,</div><div class=\"line\">    &quot;no-path-concat&quot;: 0,</div><div class=\"line\">    &quot;no-process-env&quot;: 0,</div><div class=\"line\">    &quot;no-process-exit&quot;: 0,</div><div class=\"line\">    &quot;no-proto&quot;: 0,</div><div class=\"line\">    &quot;no-redeclare&quot;: 2,</div><div class=\"line\">    &quot;no-regex-spaces&quot;: 2,</div><div class=\"line\">    &quot;no-restricted-modules&quot;: 0,</div><div class=\"line\">    &quot;no-return-assign&quot;: 2,</div><div class=\"line\">    &quot;no-script-url&quot;: 0,</div><div class=\"line\">    &quot;no-self-compare&quot;: 2,</div><div class=\"line\">    &quot;no-sequences&quot;: 2,</div><div class=\"line\">    &quot;no-shadow&quot;: 0,</div><div class=\"line\">    &quot;no-shadow-restricted-names&quot;: 2,</div><div class=\"line\">    &quot;no-spaced-func&quot;: 2,</div><div class=\"line\">    &quot;no-sparse-arrays&quot;: 2,</div><div class=\"line\">    &quot;no-sync&quot;: 0,</div><div class=\"line\">    &quot;no-ternary&quot;: 0,</div><div class=\"line\">    &quot;no-this-before-super&quot;: 2,</div><div class=\"line\">    &quot;no-throw-literal&quot;: 2,</div><div class=\"line\">    &quot;no-trailing-spaces&quot;: 2,</div><div class=\"line\">    &quot;no-undef&quot;: 2,</div><div class=\"line\">    &quot;no-undef-init&quot;: 2,</div><div class=\"line\">    &quot;no-undefined&quot;: 0,</div><div class=\"line\">    &quot;no-underscore-dangle&quot;: 0,</div><div class=\"line\">    &quot;no-unexpected-multiline&quot;: 2,</div><div class=\"line\">    &quot;no-unneeded-ternary&quot;: 2,</div><div class=\"line\">    &quot;no-unreachable&quot;: 2,</div><div class=\"line\">    &quot;no-unused-expressions&quot;: 0,</div><div class=\"line\">    &quot;no-unused-vars&quot;: [2, &#123; &quot;vars&quot;: &quot;all&quot;, &quot;args&quot;: &quot;none&quot; &#125;],</div><div class=\"line\">    &quot;no-use-before-define&quot;: 0,</div><div class=\"line\">    &quot;no-var&quot;: 0,</div><div class=\"line\">    &quot;no-void&quot;: 0,</div><div class=\"line\">    &quot;no-warning-comments&quot;: 0,</div><div class=\"line\">    &quot;no-with&quot;: 2,</div><div class=\"line\">    &quot;object-curly-spacing&quot;: 0,</div><div class=\"line\">    &quot;object-shorthand&quot;: 0,</div><div class=\"line\">    &quot;one-var&quot;: [2, &#123; &quot;initialized&quot;: &quot;never&quot; &#125;],</div><div class=\"line\">    &quot;operator-assignment&quot;: 0,</div><div class=\"line\">    &quot;operator-linebreak&quot;: [2, &quot;after&quot;, &#123; &quot;overrides&quot;: &#123; &quot;?&quot;: &quot;before&quot;, &quot;:&quot;: &quot;before&quot; &#125; &#125;],</div><div class=\"line\">    &quot;padded-blocks&quot;: 0,</div><div class=\"line\">    &quot;prefer-const&quot;: 0,</div><div class=\"line\">    &quot;quote-props&quot;: 0,</div><div class=\"line\">    &quot;quotes&quot;: [2, &quot;single&quot;, &quot;avoid-escape&quot;],</div><div class=\"line\">    &quot;radix&quot;: 2,</div><div class=\"line\">    &quot;semi&quot;: [2, &quot;never&quot;],</div><div class=\"line\">    &quot;semi-spacing&quot;: 0,</div><div class=\"line\">    &quot;sort-vars&quot;: 0,</div><div class=\"line\">    &quot;space-after-keywords&quot;: [2, &quot;always&quot;],</div><div class=\"line\">    &quot;space-before-blocks&quot;: [2, &quot;always&quot;],</div><div class=\"line\">    &quot;space-before-function-paren&quot;: [2, &quot;always&quot;],</div><div class=\"line\">    &quot;space-in-parens&quot;: [2, &quot;never&quot;],</div><div class=\"line\">    &quot;space-infix-ops&quot;: 2,</div><div class=\"line\">    &quot;space-return-throw-case&quot;: 2,</div><div class=\"line\">    &quot;space-unary-ops&quot;: [2, &#123; &quot;words&quot;: true, &quot;nonwords&quot;: false &#125;],</div><div class=\"line\">    &quot;spaced-comment&quot;: [2, &quot;always&quot;, &#123; &quot;markers&quot;: [&quot;global&quot;, &quot;globals&quot;, &quot;eslint&quot;, &quot;eslint-disable&quot;, &quot;*package&quot;, &quot;!&quot;] &#125;],</div><div class=\"line\">    &quot;strict&quot;: 0,</div><div class=\"line\">    &quot;use-isnan&quot;: 2,</div><div class=\"line\">    &quot;valid-jsdoc&quot;: 0,</div><div class=\"line\">    &quot;valid-typeof&quot;: 2,</div><div class=\"line\">    &quot;vars-on-top&quot;: 0,</div><div class=\"line\">    &quot;wrap-iife&quot;: [2, &quot;any&quot;],</div><div class=\"line\">    &quot;wrap-regex&quot;: 0,</div><div class=\"line\">    &quot;yoda&quot;: [2, &quot;never&quot;]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-02-25T08:37:51.000Z","updated":"2017-02-25T08:37:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2t6v50008r7fye5vw7bji","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"hexo","date":"2016-12-21T03:47:39.000Z","_content":"# install\nNode和Git都安装好后,首先创建一个文件夹,如blog,用户存放hexo的配置文件,然后进入blog里安装Hexo。\n\n执行如下命令安装Hexo：\n\nsudo npm install -g hexo\n\n初始化然后，执行init命令初始化hexo,命令：\n\nhexo init\n\n好啦，至此，全部安装工作已经完成！blog就是你的博客根目录，所有的操作都在里面进行。\n\n生成静态页面\n\nhexo generate（hexo g也可以）\n\n本地启动\n\n启动本地服务，进行文章预览调试，命令：\n\nhexo server\n\n浏览器输入http://localhost:4000\n\n我不知道你们能不能，反正我不能，因为我还有环境没配置好\n\n# 配置Github\n建立Repository\n\n建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法\n\n然后建立关联，我的blog在本地/Users/leopard/blog，blog是我之前建的东西也全在这里面，有：\n\n    _config.yml    node_modules    public      source\n\n    db.json        package.json    scaffolds  themes\n\n现在我们需要_config.yml文件，来建立关联，命令：\n\nvim _config.yml\n\n翻到最下面，改成我这样子的\n\ndeploy:\n\n     type: git\n\n     repo: https://github.com/leopardpan/leopardpan.github.io.git\n\n     branch: master\n\n然后执行命令：\n\nnpm install hexo-deployer-git --save\n\n \n# 一些常用命令：\n\nhexo new\"postName\" #新建文章\n\nhexo new page\"pageName\" #新建页面\n\nhexo generate #生成静态页面至public目录\n\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo help # 查看帮助\n\nhexo version #查看Hexo的版本\n\n ","source":"_posts/hexo.md","raw":"---\ntitle: hexo\ndate: 2016-12-21 11:47:39\ntags:\n---\n# install\nNode和Git都安装好后,首先创建一个文件夹,如blog,用户存放hexo的配置文件,然后进入blog里安装Hexo。\n\n执行如下命令安装Hexo：\n\nsudo npm install -g hexo\n\n初始化然后，执行init命令初始化hexo,命令：\n\nhexo init\n\n好啦，至此，全部安装工作已经完成！blog就是你的博客根目录，所有的操作都在里面进行。\n\n生成静态页面\n\nhexo generate（hexo g也可以）\n\n本地启动\n\n启动本地服务，进行文章预览调试，命令：\n\nhexo server\n\n浏览器输入http://localhost:4000\n\n我不知道你们能不能，反正我不能，因为我还有环境没配置好\n\n# 配置Github\n建立Repository\n\n建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法\n\n然后建立关联，我的blog在本地/Users/leopard/blog，blog是我之前建的东西也全在这里面，有：\n\n    _config.yml    node_modules    public      source\n\n    db.json        package.json    scaffolds  themes\n\n现在我们需要_config.yml文件，来建立关联，命令：\n\nvim _config.yml\n\n翻到最下面，改成我这样子的\n\ndeploy:\n\n     type: git\n\n     repo: https://github.com/leopardpan/leopardpan.github.io.git\n\n     branch: master\n\n然后执行命令：\n\nnpm install hexo-deployer-git --save\n\n \n# 一些常用命令：\n\nhexo new\"postName\" #新建文章\n\nhexo new page\"pageName\" #新建页面\n\nhexo generate #生成静态页面至public目录\n\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo help # 查看帮助\n\nhexo version #查看Hexo的版本\n\n ","slug":"hexo","published":1,"updated":"2017-02-25T08:37:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2t6v70009r7fyj9e4bgp2","content":"<h1 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h1><p>Node和Git都安装好后,首先创建一个文件夹,如blog,用户存放hexo的配置文件,然后进入blog里安装Hexo。</p>\n<p>执行如下命令安装Hexo：</p>\n<p>sudo npm install -g hexo</p>\n<p>初始化然后，执行init命令初始化hexo,命令：</p>\n<p>hexo init</p>\n<p>好啦，至此，全部安装工作已经完成！blog就是你的博客根目录，所有的操作都在里面进行。</p>\n<p>生成静态页面</p>\n<p>hexo generate（hexo g也可以）</p>\n<p>本地启动</p>\n<p>启动本地服务，进行文章预览调试，命令：</p>\n<p>hexo server</p>\n<p>浏览器输入<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a></p>\n<p>我不知道你们能不能，反正我不能，因为我还有环境没配置好</p>\n<h1 id=\"配置Github\"><a href=\"#配置Github\" class=\"headerlink\" title=\"配置Github\"></a>配置Github</h1><p>建立Repository</p>\n<p>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法</p>\n<p>然后建立关联，我的blog在本地/Users/leopard/blog，blog是我之前建的东西也全在这里面，有：</p>\n<pre><code>_config.yml    node_modules    public      source\n\ndb.json        package.json    scaffolds  themes\n</code></pre><p>现在我们需要_config.yml文件，来建立关联，命令：</p>\n<p>vim _config.yml</p>\n<p>翻到最下面，改成我这样子的</p>\n<p>deploy:</p>\n<pre><code>type: git\n\nrepo: https://github.com/leopardpan/leopardpan.github.io.git\n\nbranch: master\n</code></pre><p>然后执行命令：</p>\n<p>npm install hexo-deployer-git –save</p>\n<h1 id=\"一些常用命令：\"><a href=\"#一些常用命令：\" class=\"headerlink\" title=\"一些常用命令：\"></a>一些常用命令：</h1><p>hexo new”postName” #新建文章</p>\n<p>hexo new page”pageName” #新建页面</p>\n<p>hexo generate #生成静态页面至public目录</p>\n<p>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p>\n<p>hexo deploy #将.deploy目录部署到GitHub</p>\n<p>hexo help # 查看帮助</p>\n<p>hexo version #查看Hexo的版本</p>\n","excerpt":"","more":"<h1 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h1><p>Node和Git都安装好后,首先创建一个文件夹,如blog,用户存放hexo的配置文件,然后进入blog里安装Hexo。</p>\n<p>执行如下命令安装Hexo：</p>\n<p>sudo npm install -g hexo</p>\n<p>初始化然后，执行init命令初始化hexo,命令：</p>\n<p>hexo init</p>\n<p>好啦，至此，全部安装工作已经完成！blog就是你的博客根目录，所有的操作都在里面进行。</p>\n<p>生成静态页面</p>\n<p>hexo generate（hexo g也可以）</p>\n<p>本地启动</p>\n<p>启动本地服务，进行文章预览调试，命令：</p>\n<p>hexo server</p>\n<p>浏览器输入<a href=\"http://localhost:4000\">http://localhost:4000</a></p>\n<p>我不知道你们能不能，反正我不能，因为我还有环境没配置好</p>\n<h1 id=\"配置Github\"><a href=\"#配置Github\" class=\"headerlink\" title=\"配置Github\"></a>配置Github</h1><p>建立Repository</p>\n<p>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法</p>\n<p>然后建立关联，我的blog在本地/Users/leopard/blog，blog是我之前建的东西也全在这里面，有：</p>\n<pre><code>_config.yml    node_modules    public      source\n\ndb.json        package.json    scaffolds  themes\n</code></pre><p>现在我们需要_config.yml文件，来建立关联，命令：</p>\n<p>vim _config.yml</p>\n<p>翻到最下面，改成我这样子的</p>\n<p>deploy:</p>\n<pre><code>type: git\n\nrepo: https://github.com/leopardpan/leopardpan.github.io.git\n\nbranch: master\n</code></pre><p>然后执行命令：</p>\n<p>npm install hexo-deployer-git –save</p>\n<h1 id=\"一些常用命令：\"><a href=\"#一些常用命令：\" class=\"headerlink\" title=\"一些常用命令：\"></a>一些常用命令：</h1><p>hexo new”postName” #新建文章</p>\n<p>hexo new page”pageName” #新建页面</p>\n<p>hexo generate #生成静态页面至public目录</p>\n<p>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p>\n<p>hexo deploy #将.deploy目录部署到GitHub</p>\n<p>hexo help # 查看帮助</p>\n<p>hexo version #查看Hexo的版本</p>\n"},{"title":"interview","date":"2017-01-23T10:25:52.000Z","_content":" 而在底层，Node.js借助libuv来作为抽象封装层， 从而屏蔽不同操作系统的差异，Node可以借助livuv来来实现多线程。\n \n ![image](http://www.admin10000.com/UploadFiles/Document/201509/30/20150930072020634231.PNG)\n \n 事件循环是单线程的，从下图可以看出\n \n ![image](http://www.admin10000.com/UploadFiles/Document/201509/30/20150930072028113909.PNG)\n \n 所有的同步任务在主线程上执行，形成一个任务栈。所有的异步任务的回调在另一队列中，只有执行完\n \n tTimeout()只是将事件插入了\"任务队列\"，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。\n \n Node.js也是单线程的Event Loop，但是它的运行机制不同于浏览器环境。\n \n ![image](http://image.beekka.com/blog/2014/bg2014100803.png)\n \n\n```\nprocess.nextTick(function A() {\n  console.log(1);\n  process.nextTick(function B(){console.log(2);});\n});\n\nsetTimeout(function timeout() {\n  console.log('TIMEOUT FIRED');\n}, 0)\n// 1\n// 2\n// TIMEOUT FIRED\n```\n\n上面代码中，由于process.nextTick方法指定的回调函数，总是在当前\"执行栈\"的尾部触发，所以不仅函数A比setTimeout指定的回调函数timeout先执行，而且函数B也比timeout先执行。这说明，如果有多个process.nextTick语句（不管它们是否嵌套），将全部在当前\"执行栈\"执行。   setImmediate总是将事件注册到下一轮Event Loop\n\n\n　测试金字塔指的是： 当我们在编写测试用例时，底层的单元测试应该远比上层的端到端测试要多。\n　\n\n数组的shift和unshift  push 和 pop \n\nnode 优势：非阻塞IO、高并发、丰富的生态环境\n\n node有哪些全局对象?\n参考答案: process, console, Buffer和exports\n![image](https://camo.githubusercontent.com/233315761d49d4c75fe7969e36bda22ecf5bbc0f/687474703a2f2f6a6f616f7073696c76612e6769746875622e696f2f74616c6b732f456e642d746f2d456e642d4a6176615363726970742d776974682d7468652d4d45414e2d537461636b2f696d672f6e6f64656a732d617263682d7070742e706e67)\n\nprocess有哪些常用方法?\n参考答案: process.stdin, process.stdout, process.stderr, process.on, process.env, process.argv, process.arch, process.platform, process.exit\n\n通过domain获取eventemmiter 的异常：\n\n```\nvar domain = require('domain');\n    var myDomain = domain.create();\n    myDomain.on('error', function(err){\n        console.log('domain接收到的错误事件:', err);\n    }); // 接收事件并打印\n    myDomain.run(function(){\n        var emitter1 = new MyEmitter();\n        emitter1.emit('error', '错误事件来自emitter1');\n        emitter2 = new MyEmitter();\n        emitter2.emit('error', '错误事件来自emitter2');\n    });\n```\n\nsupper 代表父类构造函数和原形\n\n\n原生构造函数：\nBoolean()\nNumber()\nString()\nArray()\nDate()\nFunction()\nRegExp()\nError()\nObject()\n\nEs6 可以继承这些原生的构造函数\n \n```\nclass MyArray extends Array {\n  constructor(...args) {\n    super(...args);\n  }\n}\n\nvar arr = new MyArray();\narr[0] = 12;\narr.length // 1\n\narr.length = 0;\narr[0] // undefined\n```\n\n```\nclass ExtendableError extends Error {\n  constructor(message) {\n    super();\n    this.message = message;\n    this.stack = (new Error()).stack;\n    this.name = this.constructor.name;\n  }\n}\n\nclass MyError extends ExtendableError {\n  constructor(m) {\n    super(m);\n  }\n}\n\nvar myerror = new MyError('ll');\nmyerror.message // \"ll\"\nmyerror instanceof Error // true\nmyerror.name // \"MyError\"\nmyerror.stack\n```\n\n定义get set ,可在方法体内部拦截\n\n```\nclass MyClass {\n  constructor() {\n    // ...\n  }\n  get prop() {\n    return 'getter';\n  }\n  set prop(value) {\n    console.log('setter: '+value);\n  }\n  * [Symbol.iterator]() {\n    for (let arg of this.args) {\n      yield arg;\n    }\n  }\n}\n```\n\nStream有什么好处?\n参考答案: 非阻塞式数据处理提升效率，片断处理节省内存，管道处理方便可扩展等.\n\n\nfs.watch和fs.watchFile有什么区别，怎么应用?\n参考答案: 二者主要用来监听文件变动．fs.watch利用操作系统原生机制来监听，可能不适用网络文件系统; fs.watchFile则是定期检查文件状态变更，适用于网络文件系统，但是相比fs.watch有些慢，因为不是实时机制．\n\n实现一个简单的HTTP 服务器。\nrequire('http').createServer(function(req,res){}).listen(300);\n\nspawn应用来运行返回大量数据的子进程，如图像处理，文件读取等。而exec则应用来运行只返回少量返回值的子进程，如只返回一个状态码。\n\n有哪些常用方法可以防止程序崩溃?\n\n参考答案: 1) try-catch-finally 2) EventEmitter/Stream error事件处理 3) domain统一控制 4) jshint静态检查 5) jasmine/mocha进行单元测试\n\n\n要监控nodejs的内存使用的话，需要安装memwathch 模块\n\nnodejs C++ 扩展的实现：\nhttps://my.oschina.net/yushulx/blog/423704\n\nprocess.argv 数组的第一个元素永远都会是 node，并且第二个参数总是指向你的程序的路径，所以，你应该从第三个元素\n\n\n```\nregex test   if (/^\\/api\\/parsetime/.test(req.url))\n```\n\n\n回调函数的规则：err 为第一个参数\n\n文件的总行：\n```\nvar lines = contents.toString().split('\\n').length - 1\n```\n\n\nfs.unlink 删除文件\n\n\n```\n//创建一个tcp 服务器\nvar net = require('net')\n\nvar server = net.createServer(function (socket) {\n\n  // socket 处理逻辑\n\n})\n\nserver.listen(8000)\n```\n\n\n使用 socket.write(data) 可以写数据到 socket 中，用 socket.end() 可以关闭一个 socket。另外， .end() 方法也可以接收一个数据对象作为参数，因此，你可简单地使用 socket.end(data) 来完成写数据和关闭两个操作。\n\nconcat-stream：会连接多个stream,参数中不指定encoding 的话，会自行推断。\n\n```\nvar arrays = concat({ encoding: 'array' }, function(out) {\n    t.deepEqual(out, [1,2,3,4,5,6])\n  })\n  arrays.write([1,2,3])\n  arrays.write([4,5,6])\n  arrays.end()\n```\n\n```\nfs.createReadStream(file).pipe(process.stdout);\n```\n使用through2 对流数据进行转换：\n\n通过split 将流中的数据分行：\n\nYou can use the `split` module to split input by newlines. For example:\n```\n    var split = require('split');\n    process.stdin\n        .pipe(split())\n        .pipe(through2(function (line, _, next) {\n            console.dir(line.toString());\n            next();\n        }))\n    ;\n```","source":"_posts/interview.md","raw":"---\ntitle: interview\ndate: 2017-01-23 18:25:52\ntags:\n---\n 而在底层，Node.js借助libuv来作为抽象封装层， 从而屏蔽不同操作系统的差异，Node可以借助livuv来来实现多线程。\n \n ![image](http://www.admin10000.com/UploadFiles/Document/201509/30/20150930072020634231.PNG)\n \n 事件循环是单线程的，从下图可以看出\n \n ![image](http://www.admin10000.com/UploadFiles/Document/201509/30/20150930072028113909.PNG)\n \n 所有的同步任务在主线程上执行，形成一个任务栈。所有的异步任务的回调在另一队列中，只有执行完\n \n tTimeout()只是将事件插入了\"任务队列\"，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。\n \n Node.js也是单线程的Event Loop，但是它的运行机制不同于浏览器环境。\n \n ![image](http://image.beekka.com/blog/2014/bg2014100803.png)\n \n\n```\nprocess.nextTick(function A() {\n  console.log(1);\n  process.nextTick(function B(){console.log(2);});\n});\n\nsetTimeout(function timeout() {\n  console.log('TIMEOUT FIRED');\n}, 0)\n// 1\n// 2\n// TIMEOUT FIRED\n```\n\n上面代码中，由于process.nextTick方法指定的回调函数，总是在当前\"执行栈\"的尾部触发，所以不仅函数A比setTimeout指定的回调函数timeout先执行，而且函数B也比timeout先执行。这说明，如果有多个process.nextTick语句（不管它们是否嵌套），将全部在当前\"执行栈\"执行。   setImmediate总是将事件注册到下一轮Event Loop\n\n\n　测试金字塔指的是： 当我们在编写测试用例时，底层的单元测试应该远比上层的端到端测试要多。\n　\n\n数组的shift和unshift  push 和 pop \n\nnode 优势：非阻塞IO、高并发、丰富的生态环境\n\n node有哪些全局对象?\n参考答案: process, console, Buffer和exports\n![image](https://camo.githubusercontent.com/233315761d49d4c75fe7969e36bda22ecf5bbc0f/687474703a2f2f6a6f616f7073696c76612e6769746875622e696f2f74616c6b732f456e642d746f2d456e642d4a6176615363726970742d776974682d7468652d4d45414e2d537461636b2f696d672f6e6f64656a732d617263682d7070742e706e67)\n\nprocess有哪些常用方法?\n参考答案: process.stdin, process.stdout, process.stderr, process.on, process.env, process.argv, process.arch, process.platform, process.exit\n\n通过domain获取eventemmiter 的异常：\n\n```\nvar domain = require('domain');\n    var myDomain = domain.create();\n    myDomain.on('error', function(err){\n        console.log('domain接收到的错误事件:', err);\n    }); // 接收事件并打印\n    myDomain.run(function(){\n        var emitter1 = new MyEmitter();\n        emitter1.emit('error', '错误事件来自emitter1');\n        emitter2 = new MyEmitter();\n        emitter2.emit('error', '错误事件来自emitter2');\n    });\n```\n\nsupper 代表父类构造函数和原形\n\n\n原生构造函数：\nBoolean()\nNumber()\nString()\nArray()\nDate()\nFunction()\nRegExp()\nError()\nObject()\n\nEs6 可以继承这些原生的构造函数\n \n```\nclass MyArray extends Array {\n  constructor(...args) {\n    super(...args);\n  }\n}\n\nvar arr = new MyArray();\narr[0] = 12;\narr.length // 1\n\narr.length = 0;\narr[0] // undefined\n```\n\n```\nclass ExtendableError extends Error {\n  constructor(message) {\n    super();\n    this.message = message;\n    this.stack = (new Error()).stack;\n    this.name = this.constructor.name;\n  }\n}\n\nclass MyError extends ExtendableError {\n  constructor(m) {\n    super(m);\n  }\n}\n\nvar myerror = new MyError('ll');\nmyerror.message // \"ll\"\nmyerror instanceof Error // true\nmyerror.name // \"MyError\"\nmyerror.stack\n```\n\n定义get set ,可在方法体内部拦截\n\n```\nclass MyClass {\n  constructor() {\n    // ...\n  }\n  get prop() {\n    return 'getter';\n  }\n  set prop(value) {\n    console.log('setter: '+value);\n  }\n  * [Symbol.iterator]() {\n    for (let arg of this.args) {\n      yield arg;\n    }\n  }\n}\n```\n\nStream有什么好处?\n参考答案: 非阻塞式数据处理提升效率，片断处理节省内存，管道处理方便可扩展等.\n\n\nfs.watch和fs.watchFile有什么区别，怎么应用?\n参考答案: 二者主要用来监听文件变动．fs.watch利用操作系统原生机制来监听，可能不适用网络文件系统; fs.watchFile则是定期检查文件状态变更，适用于网络文件系统，但是相比fs.watch有些慢，因为不是实时机制．\n\n实现一个简单的HTTP 服务器。\nrequire('http').createServer(function(req,res){}).listen(300);\n\nspawn应用来运行返回大量数据的子进程，如图像处理，文件读取等。而exec则应用来运行只返回少量返回值的子进程，如只返回一个状态码。\n\n有哪些常用方法可以防止程序崩溃?\n\n参考答案: 1) try-catch-finally 2) EventEmitter/Stream error事件处理 3) domain统一控制 4) jshint静态检查 5) jasmine/mocha进行单元测试\n\n\n要监控nodejs的内存使用的话，需要安装memwathch 模块\n\nnodejs C++ 扩展的实现：\nhttps://my.oschina.net/yushulx/blog/423704\n\nprocess.argv 数组的第一个元素永远都会是 node，并且第二个参数总是指向你的程序的路径，所以，你应该从第三个元素\n\n\n```\nregex test   if (/^\\/api\\/parsetime/.test(req.url))\n```\n\n\n回调函数的规则：err 为第一个参数\n\n文件的总行：\n```\nvar lines = contents.toString().split('\\n').length - 1\n```\n\n\nfs.unlink 删除文件\n\n\n```\n//创建一个tcp 服务器\nvar net = require('net')\n\nvar server = net.createServer(function (socket) {\n\n  // socket 处理逻辑\n\n})\n\nserver.listen(8000)\n```\n\n\n使用 socket.write(data) 可以写数据到 socket 中，用 socket.end() 可以关闭一个 socket。另外， .end() 方法也可以接收一个数据对象作为参数，因此，你可简单地使用 socket.end(data) 来完成写数据和关闭两个操作。\n\nconcat-stream：会连接多个stream,参数中不指定encoding 的话，会自行推断。\n\n```\nvar arrays = concat({ encoding: 'array' }, function(out) {\n    t.deepEqual(out, [1,2,3,4,5,6])\n  })\n  arrays.write([1,2,3])\n  arrays.write([4,5,6])\n  arrays.end()\n```\n\n```\nfs.createReadStream(file).pipe(process.stdout);\n```\n使用through2 对流数据进行转换：\n\n通过split 将流中的数据分行：\n\nYou can use the `split` module to split input by newlines. For example:\n```\n    var split = require('split');\n    process.stdin\n        .pipe(split())\n        .pipe(through2(function (line, _, next) {\n            console.dir(line.toString());\n            next();\n        }))\n    ;\n```","slug":"interview","published":1,"updated":"2017-02-25T08:37:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2t6v9000ar7fyjcogihua","content":"<p> 而在底层，Node.js借助libuv来作为抽象封装层， 从而屏蔽不同操作系统的差异，Node可以借助livuv来来实现多线程。</p>\n<p> <img src=\"http://www.admin10000.com/UploadFiles/Document/201509/30/20150930072020634231.PNG\" alt=\"image\"></p>\n<p> 事件循环是单线程的，从下图可以看出</p>\n<p> <img src=\"http://www.admin10000.com/UploadFiles/Document/201509/30/20150930072028113909.PNG\" alt=\"image\"></p>\n<p> 所有的同步任务在主线程上执行，形成一个任务栈。所有的异步任务的回调在另一队列中，只有执行完</p>\n<p> tTimeout()只是将事件插入了”任务队列”，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。</p>\n<p> Node.js也是单线程的Event Loop，但是它的运行机制不同于浏览器环境。</p>\n<p> <img src=\"http://image.beekka.com/blog/2014/bg2014100803.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">process.nextTick(function A() &#123;</div><div class=\"line\">  console.log(1);</div><div class=\"line\">  process.nextTick(function B()&#123;console.log(2);&#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">setTimeout(function timeout() &#123;</div><div class=\"line\">  console.log(&apos;TIMEOUT FIRED&apos;);</div><div class=\"line\">&#125;, 0)</div><div class=\"line\">// 1</div><div class=\"line\">// 2</div><div class=\"line\">// TIMEOUT FIRED</div></pre></td></tr></table></figure>\n<p>上面代码中，由于process.nextTick方法指定的回调函数，总是在当前”执行栈”的尾部触发，所以不仅函数A比setTimeout指定的回调函数timeout先执行，而且函数B也比timeout先执行。这说明，如果有多个process.nextTick语句（不管它们是否嵌套），将全部在当前”执行栈”执行。   setImmediate总是将事件注册到下一轮Event Loop</p>\n<p>　测试金字塔指的是： 当我们在编写测试用例时，底层的单元测试应该远比上层的端到端测试要多。\n　</p>\n<p>数组的shift和unshift  push 和 pop </p>\n<p>node 优势：非阻塞IO、高并发、丰富的生态环境</p>\n<p> node有哪些全局对象?<br>参考答案: process, console, Buffer和exports<br><img src=\"https://camo.githubusercontent.com/233315761d49d4c75fe7969e36bda22ecf5bbc0f/687474703a2f2f6a6f616f7073696c76612e6769746875622e696f2f74616c6b732f456e642d746f2d456e642d4a6176615363726970742d776974682d7468652d4d45414e2d537461636b2f696d672f6e6f64656a732d617263682d7070742e706e67\" alt=\"image\"></p>\n<p>process有哪些常用方法?<br>参考答案: process.stdin, process.stdout, process.stderr, process.on, process.env, process.argv, process.arch, process.platform, process.exit</p>\n<p>通过domain获取eventemmiter 的异常：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var domain = require(&apos;domain&apos;);</div><div class=\"line\">    var myDomain = domain.create();</div><div class=\"line\">    myDomain.on(&apos;error&apos;, function(err)&#123;</div><div class=\"line\">        console.log(&apos;domain接收到的错误事件:&apos;, err);</div><div class=\"line\">    &#125;); // 接收事件并打印</div><div class=\"line\">    myDomain.run(function()&#123;</div><div class=\"line\">        var emitter1 = new MyEmitter();</div><div class=\"line\">        emitter1.emit(&apos;error&apos;, &apos;错误事件来自emitter1&apos;);</div><div class=\"line\">        emitter2 = new MyEmitter();</div><div class=\"line\">        emitter2.emit(&apos;error&apos;, &apos;错误事件来自emitter2&apos;);</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<p>supper 代表父类构造函数和原形</p>\n<p>原生构造函数：<br>Boolean()<br>Number()<br>String()<br>Array()<br>Date()<br>Function()<br>RegExp()<br>Error()<br>Object()</p>\n<p>Es6 可以继承这些原生的构造函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">class MyArray extends Array &#123;</div><div class=\"line\">  constructor(...args) &#123;</div><div class=\"line\">    super(...args);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var arr = new MyArray();</div><div class=\"line\">arr[0] = 12;</div><div class=\"line\">arr.length // 1</div><div class=\"line\"></div><div class=\"line\">arr.length = 0;</div><div class=\"line\">arr[0] // undefined</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">class ExtendableError extends Error &#123;</div><div class=\"line\">  constructor(message) &#123;</div><div class=\"line\">    super();</div><div class=\"line\">    this.message = message;</div><div class=\"line\">    this.stack = (new Error()).stack;</div><div class=\"line\">    this.name = this.constructor.name;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class MyError extends ExtendableError &#123;</div><div class=\"line\">  constructor(m) &#123;</div><div class=\"line\">    super(m);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var myerror = new MyError(&apos;ll&apos;);</div><div class=\"line\">myerror.message // &quot;ll&quot;</div><div class=\"line\">myerror instanceof Error // true</div><div class=\"line\">myerror.name // &quot;MyError&quot;</div><div class=\"line\">myerror.stack</div></pre></td></tr></table></figure>\n<p>定义get set ,可在方法体内部拦截</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">class MyClass &#123;</div><div class=\"line\">  constructor() &#123;</div><div class=\"line\">    // ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  get prop() &#123;</div><div class=\"line\">    return &apos;getter&apos;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  set prop(value) &#123;</div><div class=\"line\">    console.log(&apos;setter: &apos;+value);</div><div class=\"line\">  &#125;</div><div class=\"line\">  * [Symbol.iterator]() &#123;</div><div class=\"line\">    for (let arg of this.args) &#123;</div><div class=\"line\">      yield arg;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Stream有什么好处?<br>参考答案: 非阻塞式数据处理提升效率，片断处理节省内存，管道处理方便可扩展等.</p>\n<p>fs.watch和fs.watchFile有什么区别，怎么应用?<br>参考答案: 二者主要用来监听文件变动．fs.watch利用操作系统原生机制来监听，可能不适用网络文件系统; fs.watchFile则是定期检查文件状态变更，适用于网络文件系统，但是相比fs.watch有些慢，因为不是实时机制．</p>\n<p>实现一个简单的HTTP 服务器。<br>require(‘http’).createServer(function(req,res){}).listen(300);</p>\n<p>spawn应用来运行返回大量数据的子进程，如图像处理，文件读取等。而exec则应用来运行只返回少量返回值的子进程，如只返回一个状态码。</p>\n<p>有哪些常用方法可以防止程序崩溃?</p>\n<p>参考答案: 1) try-catch-finally 2) EventEmitter/Stream error事件处理 3) domain统一控制 4) jshint静态检查 5) jasmine/mocha进行单元测试</p>\n<p>要监控nodejs的内存使用的话，需要安装memwathch 模块</p>\n<p>nodejs C++ 扩展的实现：<br><a href=\"https://my.oschina.net/yushulx/blog/423704\" target=\"_blank\" rel=\"external\">https://my.oschina.net/yushulx/blog/423704</a></p>\n<p>process.argv 数组的第一个元素永远都会是 node，并且第二个参数总是指向你的程序的路径，所以，你应该从第三个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">regex test   if (/^\\/api\\/parsetime/.test(req.url))</div></pre></td></tr></table></figure>\n<p>回调函数的规则：err 为第一个参数</p>\n<p>文件的总行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var lines = contents.toString().split(&apos;\\n&apos;).length - 1</div></pre></td></tr></table></figure></p>\n<p>fs.unlink 删除文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//创建一个tcp 服务器</div><div class=\"line\">var net = require(&apos;net&apos;)</div><div class=\"line\"></div><div class=\"line\">var server = net.createServer(function (socket) &#123;</div><div class=\"line\"></div><div class=\"line\">  // socket 处理逻辑</div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">server.listen(8000)</div></pre></td></tr></table></figure>\n<p>使用 socket.write(data) 可以写数据到 socket 中，用 socket.end() 可以关闭一个 socket。另外， .end() 方法也可以接收一个数据对象作为参数，因此，你可简单地使用 socket.end(data) 来完成写数据和关闭两个操作。</p>\n<p>concat-stream：会连接多个stream,参数中不指定encoding 的话，会自行推断。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arrays = concat(&#123; encoding: &apos;array&apos; &#125;, function(out) &#123;</div><div class=\"line\">    t.deepEqual(out, [1,2,3,4,5,6])</div><div class=\"line\">  &#125;)</div><div class=\"line\">  arrays.write([1,2,3])</div><div class=\"line\">  arrays.write([4,5,6])</div><div class=\"line\">  arrays.end()</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.createReadStream(file).pipe(process.stdout);</div></pre></td></tr></table></figure>\n<p>使用through2 对流数据进行转换：</p>\n<p>通过split 将流中的数据分行：</p>\n<p>You can use the <code>split</code> module to split input by newlines. For example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var split = require(&apos;split&apos;);</div><div class=\"line\">process.stdin</div><div class=\"line\">    .pipe(split())</div><div class=\"line\">    .pipe(through2(function (line, _, next) &#123;</div><div class=\"line\">        console.dir(line.toString());</div><div class=\"line\">        next();</div><div class=\"line\">    &#125;))</div><div class=\"line\">;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p> 而在底层，Node.js借助libuv来作为抽象封装层， 从而屏蔽不同操作系统的差异，Node可以借助livuv来来实现多线程。</p>\n<p> <img src=\"http://www.admin10000.com/UploadFiles/Document/201509/30/20150930072020634231.PNG\" alt=\"image\"></p>\n<p> 事件循环是单线程的，从下图可以看出</p>\n<p> <img src=\"http://www.admin10000.com/UploadFiles/Document/201509/30/20150930072028113909.PNG\" alt=\"image\"></p>\n<p> 所有的同步任务在主线程上执行，形成一个任务栈。所有的异步任务的回调在另一队列中，只有执行完</p>\n<p> tTimeout()只是将事件插入了”任务队列”，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。</p>\n<p> Node.js也是单线程的Event Loop，但是它的运行机制不同于浏览器环境。</p>\n<p> <img src=\"http://image.beekka.com/blog/2014/bg2014100803.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">process.nextTick(function A() &#123;</div><div class=\"line\">  console.log(1);</div><div class=\"line\">  process.nextTick(function B()&#123;console.log(2);&#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">setTimeout(function timeout() &#123;</div><div class=\"line\">  console.log(&apos;TIMEOUT FIRED&apos;);</div><div class=\"line\">&#125;, 0)</div><div class=\"line\">// 1</div><div class=\"line\">// 2</div><div class=\"line\">// TIMEOUT FIRED</div></pre></td></tr></table></figure>\n<p>上面代码中，由于process.nextTick方法指定的回调函数，总是在当前”执行栈”的尾部触发，所以不仅函数A比setTimeout指定的回调函数timeout先执行，而且函数B也比timeout先执行。这说明，如果有多个process.nextTick语句（不管它们是否嵌套），将全部在当前”执行栈”执行。   setImmediate总是将事件注册到下一轮Event Loop</p>\n<p>　测试金字塔指的是： 当我们在编写测试用例时，底层的单元测试应该远比上层的端到端测试要多。\n　</p>\n<p>数组的shift和unshift  push 和 pop </p>\n<p>node 优势：非阻塞IO、高并发、丰富的生态环境</p>\n<p> node有哪些全局对象?<br>参考答案: process, console, Buffer和exports<br><img src=\"https://camo.githubusercontent.com/233315761d49d4c75fe7969e36bda22ecf5bbc0f/687474703a2f2f6a6f616f7073696c76612e6769746875622e696f2f74616c6b732f456e642d746f2d456e642d4a6176615363726970742d776974682d7468652d4d45414e2d537461636b2f696d672f6e6f64656a732d617263682d7070742e706e67\" alt=\"image\"></p>\n<p>process有哪些常用方法?<br>参考答案: process.stdin, process.stdout, process.stderr, process.on, process.env, process.argv, process.arch, process.platform, process.exit</p>\n<p>通过domain获取eventemmiter 的异常：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var domain = require(&apos;domain&apos;);</div><div class=\"line\">    var myDomain = domain.create();</div><div class=\"line\">    myDomain.on(&apos;error&apos;, function(err)&#123;</div><div class=\"line\">        console.log(&apos;domain接收到的错误事件:&apos;, err);</div><div class=\"line\">    &#125;); // 接收事件并打印</div><div class=\"line\">    myDomain.run(function()&#123;</div><div class=\"line\">        var emitter1 = new MyEmitter();</div><div class=\"line\">        emitter1.emit(&apos;error&apos;, &apos;错误事件来自emitter1&apos;);</div><div class=\"line\">        emitter2 = new MyEmitter();</div><div class=\"line\">        emitter2.emit(&apos;error&apos;, &apos;错误事件来自emitter2&apos;);</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<p>supper 代表父类构造函数和原形</p>\n<p>原生构造函数：<br>Boolean()<br>Number()<br>String()<br>Array()<br>Date()<br>Function()<br>RegExp()<br>Error()<br>Object()</p>\n<p>Es6 可以继承这些原生的构造函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">class MyArray extends Array &#123;</div><div class=\"line\">  constructor(...args) &#123;</div><div class=\"line\">    super(...args);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var arr = new MyArray();</div><div class=\"line\">arr[0] = 12;</div><div class=\"line\">arr.length // 1</div><div class=\"line\"></div><div class=\"line\">arr.length = 0;</div><div class=\"line\">arr[0] // undefined</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">class ExtendableError extends Error &#123;</div><div class=\"line\">  constructor(message) &#123;</div><div class=\"line\">    super();</div><div class=\"line\">    this.message = message;</div><div class=\"line\">    this.stack = (new Error()).stack;</div><div class=\"line\">    this.name = this.constructor.name;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class MyError extends ExtendableError &#123;</div><div class=\"line\">  constructor(m) &#123;</div><div class=\"line\">    super(m);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var myerror = new MyError(&apos;ll&apos;);</div><div class=\"line\">myerror.message // &quot;ll&quot;</div><div class=\"line\">myerror instanceof Error // true</div><div class=\"line\">myerror.name // &quot;MyError&quot;</div><div class=\"line\">myerror.stack</div></pre></td></tr></table></figure>\n<p>定义get set ,可在方法体内部拦截</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">class MyClass &#123;</div><div class=\"line\">  constructor() &#123;</div><div class=\"line\">    // ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  get prop() &#123;</div><div class=\"line\">    return &apos;getter&apos;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  set prop(value) &#123;</div><div class=\"line\">    console.log(&apos;setter: &apos;+value);</div><div class=\"line\">  &#125;</div><div class=\"line\">  * [Symbol.iterator]() &#123;</div><div class=\"line\">    for (let arg of this.args) &#123;</div><div class=\"line\">      yield arg;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Stream有什么好处?<br>参考答案: 非阻塞式数据处理提升效率，片断处理节省内存，管道处理方便可扩展等.</p>\n<p>fs.watch和fs.watchFile有什么区别，怎么应用?<br>参考答案: 二者主要用来监听文件变动．fs.watch利用操作系统原生机制来监听，可能不适用网络文件系统; fs.watchFile则是定期检查文件状态变更，适用于网络文件系统，但是相比fs.watch有些慢，因为不是实时机制．</p>\n<p>实现一个简单的HTTP 服务器。<br>require(‘http’).createServer(function(req,res){}).listen(300);</p>\n<p>spawn应用来运行返回大量数据的子进程，如图像处理，文件读取等。而exec则应用来运行只返回少量返回值的子进程，如只返回一个状态码。</p>\n<p>有哪些常用方法可以防止程序崩溃?</p>\n<p>参考答案: 1) try-catch-finally 2) EventEmitter/Stream error事件处理 3) domain统一控制 4) jshint静态检查 5) jasmine/mocha进行单元测试</p>\n<p>要监控nodejs的内存使用的话，需要安装memwathch 模块</p>\n<p>nodejs C++ 扩展的实现：<br><a href=\"https://my.oschina.net/yushulx/blog/423704\">https://my.oschina.net/yushulx/blog/423704</a></p>\n<p>process.argv 数组的第一个元素永远都会是 node，并且第二个参数总是指向你的程序的路径，所以，你应该从第三个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">regex test   if (/^\\/api\\/parsetime/.test(req.url))</div></pre></td></tr></table></figure>\n<p>回调函数的规则：err 为第一个参数</p>\n<p>文件的总行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var lines = contents.toString().split(&apos;\\n&apos;).length - 1</div></pre></td></tr></table></figure></p>\n<p>fs.unlink 删除文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//创建一个tcp 服务器</div><div class=\"line\">var net = require(&apos;net&apos;)</div><div class=\"line\"></div><div class=\"line\">var server = net.createServer(function (socket) &#123;</div><div class=\"line\"></div><div class=\"line\">  // socket 处理逻辑</div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">server.listen(8000)</div></pre></td></tr></table></figure>\n<p>使用 socket.write(data) 可以写数据到 socket 中，用 socket.end() 可以关闭一个 socket。另外， .end() 方法也可以接收一个数据对象作为参数，因此，你可简单地使用 socket.end(data) 来完成写数据和关闭两个操作。</p>\n<p>concat-stream：会连接多个stream,参数中不指定encoding 的话，会自行推断。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arrays = concat(&#123; encoding: &apos;array&apos; &#125;, function(out) &#123;</div><div class=\"line\">    t.deepEqual(out, [1,2,3,4,5,6])</div><div class=\"line\">  &#125;)</div><div class=\"line\">  arrays.write([1,2,3])</div><div class=\"line\">  arrays.write([4,5,6])</div><div class=\"line\">  arrays.end()</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.createReadStream(file).pipe(process.stdout);</div></pre></td></tr></table></figure>\n<p>使用through2 对流数据进行转换：</p>\n<p>通过split 将流中的数据分行：</p>\n<p>You can use the <code>split</code> module to split input by newlines. For example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var split = require(&apos;split&apos;);</div><div class=\"line\">process.stdin</div><div class=\"line\">    .pipe(split())</div><div class=\"line\">    .pipe(through2(function (line, _, next) &#123;</div><div class=\"line\">        console.dir(line.toString());</div><div class=\"line\">        next();</div><div class=\"line\">    &#125;))</div><div class=\"line\">;</div></pre></td></tr></table></figure></p>\n"},{"title":"pm2","date":"2016-12-29T09:53:39.000Z","_content":"### pm2 start 启动文件的设置\n\n1. 通过 pm2 ecosystem 生成文件\n2. 在配置文件中配置，主要参数如下：\n　　\n```\nmin_uptime：最小运行时间，这里设置的是60s即如果应用程序在60s内退出，pm2会认为程序异常退出，此时触发重启max_restarts设置数量\n\nexec_mode：应用程序启动模式，这里设置的是cluster_mode（集群），默认是fork\nerror_file：自定义应用程序的错误日志文件\nout_file：自定义应用程序日志文件\npid_file：自定义应用程序的pid文件\nwatch：是否启用监控模式，默认是false。如果设置成true，当应用程序变动时，pm2会自动重载。这里也可以设置你要监控的文件\n\nexec_interpreter：应用程序的脚本类型，这里使用的shell，默认是nodejs\ndefaults to “node”. can be “python”, “ruby”, “bash” or whatever interpreter you wish to use. “none” will execute your app as a binary executable\n\n当使用babel的时候： exec_interpreter:\"babel-node\"\n \nmax_memory_restart  超出这个内存后会重新启动\n\n```\n\n3. 可以设置watch 的目录\n   \n```\n{\n  \"name\"        : \"fis-receiver\",  // 应用名称\n  \"script\"      : \"./bin/www\",  // 实际启动脚本\n  \"cwd\"         : \"./\",  // 当前工作路径\n  \"watch\": [  // 监控变化的目录，一旦变化，自动重启\n    \"bin\",\n    \"routers\"\n  ],\n  \"ignore_watch\" : [  // 从监控目录中排除\n    \"node_modules\", \n    \"logs\",\n    \"public\"\n  ],\n  \"watch_options\": {\n    \"followSymlinks\": false\n  },\n  \"error_file\" : \"./logs/app-err.log\",  // 错误日志路径\n  \"out_file\"   : \"./logs/app-out.log\",  // 普通日志路径\n  \"env\": {\n      \"NODE_ENV\": \"production\"  // 环境参数，当前指定为生产环境\n  }\n}\n```\n\n","source":"_posts/pm2.md","raw":"---\ntitle: pm2\ndate: 2016-12-29 17:53:39\ntags:\n---\n### pm2 start 启动文件的设置\n\n1. 通过 pm2 ecosystem 生成文件\n2. 在配置文件中配置，主要参数如下：\n　　\n```\nmin_uptime：最小运行时间，这里设置的是60s即如果应用程序在60s内退出，pm2会认为程序异常退出，此时触发重启max_restarts设置数量\n\nexec_mode：应用程序启动模式，这里设置的是cluster_mode（集群），默认是fork\nerror_file：自定义应用程序的错误日志文件\nout_file：自定义应用程序日志文件\npid_file：自定义应用程序的pid文件\nwatch：是否启用监控模式，默认是false。如果设置成true，当应用程序变动时，pm2会自动重载。这里也可以设置你要监控的文件\n\nexec_interpreter：应用程序的脚本类型，这里使用的shell，默认是nodejs\ndefaults to “node”. can be “python”, “ruby”, “bash” or whatever interpreter you wish to use. “none” will execute your app as a binary executable\n\n当使用babel的时候： exec_interpreter:\"babel-node\"\n \nmax_memory_restart  超出这个内存后会重新启动\n\n```\n\n3. 可以设置watch 的目录\n   \n```\n{\n  \"name\"        : \"fis-receiver\",  // 应用名称\n  \"script\"      : \"./bin/www\",  // 实际启动脚本\n  \"cwd\"         : \"./\",  // 当前工作路径\n  \"watch\": [  // 监控变化的目录，一旦变化，自动重启\n    \"bin\",\n    \"routers\"\n  ],\n  \"ignore_watch\" : [  // 从监控目录中排除\n    \"node_modules\", \n    \"logs\",\n    \"public\"\n  ],\n  \"watch_options\": {\n    \"followSymlinks\": false\n  },\n  \"error_file\" : \"./logs/app-err.log\",  // 错误日志路径\n  \"out_file\"   : \"./logs/app-out.log\",  // 普通日志路径\n  \"env\": {\n      \"NODE_ENV\": \"production\"  // 环境参数，当前指定为生产环境\n  }\n}\n```\n\n","slug":"pm2","published":1,"updated":"2017-02-25T08:37:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2t6vb000br7fy6z5ofoet","content":"<h3 id=\"pm2-start-启动文件的设置\"><a href=\"#pm2-start-启动文件的设置\" class=\"headerlink\" title=\"pm2 start 启动文件的设置\"></a>pm2 start 启动文件的设置</h3><ol>\n<li>通过 pm2 ecosystem 生成文件</li>\n<li><p>在配置文件中配置，主要参数如下：\n　　</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">min_uptime：最小运行时间，这里设置的是60s即如果应用程序在60s内退出，pm2会认为程序异常退出，此时触发重启max_restarts设置数量</div><div class=\"line\"></div><div class=\"line\">exec_mode：应用程序启动模式，这里设置的是cluster_mode（集群），默认是fork</div><div class=\"line\">error_file：自定义应用程序的错误日志文件</div><div class=\"line\">out_file：自定义应用程序日志文件</div><div class=\"line\">pid_file：自定义应用程序的pid文件</div><div class=\"line\">watch：是否启用监控模式，默认是false。如果设置成true，当应用程序变动时，pm2会自动重载。这里也可以设置你要监控的文件</div><div class=\"line\"></div><div class=\"line\">exec_interpreter：应用程序的脚本类型，这里使用的shell，默认是nodejs</div><div class=\"line\">defaults to “node”. can be “python”, “ruby”, “bash” or whatever interpreter you wish to use. “none” will execute your app as a binary executable</div><div class=\"line\"></div><div class=\"line\">当使用babel的时候： exec_interpreter:&quot;babel-node&quot;</div><div class=\"line\"> </div><div class=\"line\">max_memory_restart  超出这个内存后会重新启动</div></pre></td></tr></table></figure>\n</li>\n<li><p>可以设置watch 的目录</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;name&quot;        : &quot;fis-receiver&quot;,  // 应用名称</div><div class=\"line\">  &quot;script&quot;      : &quot;./bin/www&quot;,  // 实际启动脚本</div><div class=\"line\">  &quot;cwd&quot;         : &quot;./&quot;,  // 当前工作路径</div><div class=\"line\">  &quot;watch&quot;: [  // 监控变化的目录，一旦变化，自动重启</div><div class=\"line\">    &quot;bin&quot;,</div><div class=\"line\">    &quot;routers&quot;</div><div class=\"line\">  ],</div><div class=\"line\">  &quot;ignore_watch&quot; : [  // 从监控目录中排除</div><div class=\"line\">    &quot;node_modules&quot;, </div><div class=\"line\">    &quot;logs&quot;,</div><div class=\"line\">    &quot;public&quot;</div><div class=\"line\">  ],</div><div class=\"line\">  &quot;watch_options&quot;: &#123;</div><div class=\"line\">    &quot;followSymlinks&quot;: false</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;error_file&quot; : &quot;./logs/app-err.log&quot;,  // 错误日志路径</div><div class=\"line\">  &quot;out_file&quot;   : &quot;./logs/app-out.log&quot;,  // 普通日志路径</div><div class=\"line\">  &quot;env&quot;: &#123;</div><div class=\"line\">      &quot;NODE_ENV&quot;: &quot;production&quot;  // 环境参数，当前指定为生产环境</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"pm2-start-启动文件的设置\"><a href=\"#pm2-start-启动文件的设置\" class=\"headerlink\" title=\"pm2 start 启动文件的设置\"></a>pm2 start 启动文件的设置</h3><ol>\n<li>通过 pm2 ecosystem 生成文件</li>\n<li><p>在配置文件中配置，主要参数如下：\n　　</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">min_uptime：最小运行时间，这里设置的是60s即如果应用程序在60s内退出，pm2会认为程序异常退出，此时触发重启max_restarts设置数量</div><div class=\"line\"></div><div class=\"line\">exec_mode：应用程序启动模式，这里设置的是cluster_mode（集群），默认是fork</div><div class=\"line\">error_file：自定义应用程序的错误日志文件</div><div class=\"line\">out_file：自定义应用程序日志文件</div><div class=\"line\">pid_file：自定义应用程序的pid文件</div><div class=\"line\">watch：是否启用监控模式，默认是false。如果设置成true，当应用程序变动时，pm2会自动重载。这里也可以设置你要监控的文件</div><div class=\"line\"></div><div class=\"line\">exec_interpreter：应用程序的脚本类型，这里使用的shell，默认是nodejs</div><div class=\"line\">defaults to “node”. can be “python”, “ruby”, “bash” or whatever interpreter you wish to use. “none” will execute your app as a binary executable</div><div class=\"line\"></div><div class=\"line\">当使用babel的时候： exec_interpreter:&quot;babel-node&quot;</div><div class=\"line\"> </div><div class=\"line\">max_memory_restart  超出这个内存后会重新启动</div></pre></td></tr></table></figure>\n</li>\n<li><p>可以设置watch 的目录</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;name&quot;        : &quot;fis-receiver&quot;,  // 应用名称</div><div class=\"line\">  &quot;script&quot;      : &quot;./bin/www&quot;,  // 实际启动脚本</div><div class=\"line\">  &quot;cwd&quot;         : &quot;./&quot;,  // 当前工作路径</div><div class=\"line\">  &quot;watch&quot;: [  // 监控变化的目录，一旦变化，自动重启</div><div class=\"line\">    &quot;bin&quot;,</div><div class=\"line\">    &quot;routers&quot;</div><div class=\"line\">  ],</div><div class=\"line\">  &quot;ignore_watch&quot; : [  // 从监控目录中排除</div><div class=\"line\">    &quot;node_modules&quot;, </div><div class=\"line\">    &quot;logs&quot;,</div><div class=\"line\">    &quot;public&quot;</div><div class=\"line\">  ],</div><div class=\"line\">  &quot;watch_options&quot;: &#123;</div><div class=\"line\">    &quot;followSymlinks&quot;: false</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;error_file&quot; : &quot;./logs/app-err.log&quot;,  // 错误日志路径</div><div class=\"line\">  &quot;out_file&quot;   : &quot;./logs/app-out.log&quot;,  // 普通日志路径</div><div class=\"line\">  &quot;env&quot;: &#123;</div><div class=\"line\">      &quot;NODE_ENV&quot;: &quot;production&quot;  // 环境参数，当前指定为生产环境</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"pattern","date":"2016-12-26T06:05:38.000Z","_content":"##  装饰模式\n\n```\n'use strict';\nclass Sale {\n  constructor(price) {\n    [this.decoratorsList, this.price] = [[], price];\n  }\n\n  decorate(decorator) {\n    if (!Sale[decorator]) throw new Error(`decorator not exist: ${decorator}`);\n    this.decoratorsList.push(Sale[decorator]);\n  }\n\n  getPrice() {\n    for (let decorator of this.decoratorsList) {\n      this.price = decorator(this.price);\n    }\n    return this.price.toFixed(2);\n  }\n\n  static quebec(price) {\n    return price + price * 7.5 / 100;\n  }\n\n  static fedtax(price) {\n    return price + price * 5 / 100;\n  }\n}\nmodule.exports=Sale;\n```\n\n## 工厂模式\n\n\n```\n \n'use strict';\nclass CarMaker {\n  constructor() {\n    this.doors = 0;\n  }\n\n  drive() {\n    console.log(`jaja, i have ${this.doors} doors`);\n  }\n\n  static factory(type) {\n    return new CarMaker[type]();\n  }\n}\n\nCarMaker.Compact = class Compact extends CarMaker {\n  constructor() {\n    super();\n    this.doors = 4;\n  }\n};\n\nmodule.exports=CarMaker;\n\n```\n\n## 策略模式 --自行脑补\n## 单例模式\n\n\n```\n'use strict';\nlet __instance = function () {\n  let instance;\n  return (newInstance) => {\n    if (newInstance) instance = newInstance;\n    return instance;\n  }\n}();\n\nclass Universe {\n  constructor() {\n    if (__instance()) return __instance();\n    __instance(this);\n  }\n}\nmodule.exports=Universe;\n\n```\n\n##订阅者模式\n\n\n```\n/**\n * Created by ryan on 2016/8/29.\n */\n'use strict';\nclass Event {\n  constructor() {\n    this.subscribers = new Map([['any', []]]);\n  }\n\n  on(fn, type = 'any') {\n    let subs = this.subscribers;\n    if (!subs.get(type)) return subs.set(type, [fn]);\n    subs.set(type, (subs.get(type).push(fn)));\n  }\n\n  emit(content, type = 'any') {\n    for (let fn of this.subscribers.get(type)) {\n      fn(content);\n    }\n  }\n}\n\nlet event = new Event();\n\nevent.on((content) => console.log(`get published content: ${content}`), 'myEvent');\nevent.emit('jaja', 'myEvent'); //get published content: jaja\n\n```\n","source":"_posts/pattern.md","raw":"---\ntitle: pattern\ndate: 2016-12-26 14:05:38\ntags:\n---\n##  装饰模式\n\n```\n'use strict';\nclass Sale {\n  constructor(price) {\n    [this.decoratorsList, this.price] = [[], price];\n  }\n\n  decorate(decorator) {\n    if (!Sale[decorator]) throw new Error(`decorator not exist: ${decorator}`);\n    this.decoratorsList.push(Sale[decorator]);\n  }\n\n  getPrice() {\n    for (let decorator of this.decoratorsList) {\n      this.price = decorator(this.price);\n    }\n    return this.price.toFixed(2);\n  }\n\n  static quebec(price) {\n    return price + price * 7.5 / 100;\n  }\n\n  static fedtax(price) {\n    return price + price * 5 / 100;\n  }\n}\nmodule.exports=Sale;\n```\n\n## 工厂模式\n\n\n```\n \n'use strict';\nclass CarMaker {\n  constructor() {\n    this.doors = 0;\n  }\n\n  drive() {\n    console.log(`jaja, i have ${this.doors} doors`);\n  }\n\n  static factory(type) {\n    return new CarMaker[type]();\n  }\n}\n\nCarMaker.Compact = class Compact extends CarMaker {\n  constructor() {\n    super();\n    this.doors = 4;\n  }\n};\n\nmodule.exports=CarMaker;\n\n```\n\n## 策略模式 --自行脑补\n## 单例模式\n\n\n```\n'use strict';\nlet __instance = function () {\n  let instance;\n  return (newInstance) => {\n    if (newInstance) instance = newInstance;\n    return instance;\n  }\n}();\n\nclass Universe {\n  constructor() {\n    if (__instance()) return __instance();\n    __instance(this);\n  }\n}\nmodule.exports=Universe;\n\n```\n\n##订阅者模式\n\n\n```\n/**\n * Created by ryan on 2016/8/29.\n */\n'use strict';\nclass Event {\n  constructor() {\n    this.subscribers = new Map([['any', []]]);\n  }\n\n  on(fn, type = 'any') {\n    let subs = this.subscribers;\n    if (!subs.get(type)) return subs.set(type, [fn]);\n    subs.set(type, (subs.get(type).push(fn)));\n  }\n\n  emit(content, type = 'any') {\n    for (let fn of this.subscribers.get(type)) {\n      fn(content);\n    }\n  }\n}\n\nlet event = new Event();\n\nevent.on((content) => console.log(`get published content: ${content}`), 'myEvent');\nevent.emit('jaja', 'myEvent'); //get published content: jaja\n\n```\n","slug":"pattern","published":1,"updated":"2017-02-25T08:37:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2t6vc000cr7fyz1rt7shd","content":"<h2 id=\"装饰模式\"><a href=\"#装饰模式\" class=\"headerlink\" title=\"装饰模式\"></a>装饰模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\">class Sale &#123;</div><div class=\"line\">  constructor(price) &#123;</div><div class=\"line\">    [this.decoratorsList, this.price] = [[], price];</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  decorate(decorator) &#123;</div><div class=\"line\">    if (!Sale[decorator]) throw new Error(`decorator not exist: $&#123;decorator&#125;`);</div><div class=\"line\">    this.decoratorsList.push(Sale[decorator]);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  getPrice() &#123;</div><div class=\"line\">    for (let decorator of this.decoratorsList) &#123;</div><div class=\"line\">      this.price = decorator(this.price);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return this.price.toFixed(2);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  static quebec(price) &#123;</div><div class=\"line\">    return price + price * 7.5 / 100;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  static fedtax(price) &#123;</div><div class=\"line\">    return price + price * 5 / 100;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">module.exports=Sale;</div></pre></td></tr></table></figure>\n<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\">class CarMaker &#123;</div><div class=\"line\">  constructor() &#123;</div><div class=\"line\">    this.doors = 0;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  drive() &#123;</div><div class=\"line\">    console.log(`jaja, i have $&#123;this.doors&#125; doors`);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  static factory(type) &#123;</div><div class=\"line\">    return new CarMaker[type]();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">CarMaker.Compact = class Compact extends CarMaker &#123;</div><div class=\"line\">  constructor() &#123;</div><div class=\"line\">    super();</div><div class=\"line\">    this.doors = 4;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">module.exports=CarMaker;</div></pre></td></tr></table></figure>\n<h2 id=\"策略模式-–自行脑补\"><a href=\"#策略模式-–自行脑补\" class=\"headerlink\" title=\"策略模式 –自行脑补\"></a>策略模式 –自行脑补</h2><h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\">let __instance = function () &#123;</div><div class=\"line\">  let instance;</div><div class=\"line\">  return (newInstance) =&gt; &#123;</div><div class=\"line\">    if (newInstance) instance = newInstance;</div><div class=\"line\">    return instance;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;();</div><div class=\"line\"></div><div class=\"line\">class Universe &#123;</div><div class=\"line\">  constructor() &#123;</div><div class=\"line\">    if (__instance()) return __instance();</div><div class=\"line\">    __instance(this);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">module.exports=Universe;</div></pre></td></tr></table></figure>\n<p>##订阅者模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by ryan on 2016/8/29.</div><div class=\"line\"> */</div><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\">class Event &#123;</div><div class=\"line\">  constructor() &#123;</div><div class=\"line\">    this.subscribers = new Map([[&apos;any&apos;, []]]);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  on(fn, type = &apos;any&apos;) &#123;</div><div class=\"line\">    let subs = this.subscribers;</div><div class=\"line\">    if (!subs.get(type)) return subs.set(type, [fn]);</div><div class=\"line\">    subs.set(type, (subs.get(type).push(fn)));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  emit(content, type = &apos;any&apos;) &#123;</div><div class=\"line\">    for (let fn of this.subscribers.get(type)) &#123;</div><div class=\"line\">      fn(content);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let event = new Event();</div><div class=\"line\"></div><div class=\"line\">event.on((content) =&gt; console.log(`get published content: $&#123;content&#125;`), &apos;myEvent&apos;);</div><div class=\"line\">event.emit(&apos;jaja&apos;, &apos;myEvent&apos;); //get published content: jaja</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"装饰模式\"><a href=\"#装饰模式\" class=\"headerlink\" title=\"装饰模式\"></a>装饰模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\">class Sale &#123;</div><div class=\"line\">  constructor(price) &#123;</div><div class=\"line\">    [this.decoratorsList, this.price] = [[], price];</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  decorate(decorator) &#123;</div><div class=\"line\">    if (!Sale[decorator]) throw new Error(`decorator not exist: $&#123;decorator&#125;`);</div><div class=\"line\">    this.decoratorsList.push(Sale[decorator]);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  getPrice() &#123;</div><div class=\"line\">    for (let decorator of this.decoratorsList) &#123;</div><div class=\"line\">      this.price = decorator(this.price);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return this.price.toFixed(2);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  static quebec(price) &#123;</div><div class=\"line\">    return price + price * 7.5 / 100;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  static fedtax(price) &#123;</div><div class=\"line\">    return price + price * 5 / 100;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">module.exports=Sale;</div></pre></td></tr></table></figure>\n<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\">class CarMaker &#123;</div><div class=\"line\">  constructor() &#123;</div><div class=\"line\">    this.doors = 0;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  drive() &#123;</div><div class=\"line\">    console.log(`jaja, i have $&#123;this.doors&#125; doors`);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  static factory(type) &#123;</div><div class=\"line\">    return new CarMaker[type]();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">CarMaker.Compact = class Compact extends CarMaker &#123;</div><div class=\"line\">  constructor() &#123;</div><div class=\"line\">    super();</div><div class=\"line\">    this.doors = 4;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">module.exports=CarMaker;</div></pre></td></tr></table></figure>\n<h2 id=\"策略模式-–自行脑补\"><a href=\"#策略模式-–自行脑补\" class=\"headerlink\" title=\"策略模式 –自行脑补\"></a>策略模式 –自行脑补</h2><h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\">let __instance = function () &#123;</div><div class=\"line\">  let instance;</div><div class=\"line\">  return (newInstance) =&gt; &#123;</div><div class=\"line\">    if (newInstance) instance = newInstance;</div><div class=\"line\">    return instance;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;();</div><div class=\"line\"></div><div class=\"line\">class Universe &#123;</div><div class=\"line\">  constructor() &#123;</div><div class=\"line\">    if (__instance()) return __instance();</div><div class=\"line\">    __instance(this);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">module.exports=Universe;</div></pre></td></tr></table></figure>\n<p>##订阅者模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by ryan on 2016/8/29.</div><div class=\"line\"> */</div><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\">class Event &#123;</div><div class=\"line\">  constructor() &#123;</div><div class=\"line\">    this.subscribers = new Map([[&apos;any&apos;, []]]);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  on(fn, type = &apos;any&apos;) &#123;</div><div class=\"line\">    let subs = this.subscribers;</div><div class=\"line\">    if (!subs.get(type)) return subs.set(type, [fn]);</div><div class=\"line\">    subs.set(type, (subs.get(type).push(fn)));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  emit(content, type = &apos;any&apos;) &#123;</div><div class=\"line\">    for (let fn of this.subscribers.get(type)) &#123;</div><div class=\"line\">      fn(content);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let event = new Event();</div><div class=\"line\"></div><div class=\"line\">event.on((content) =&gt; console.log(`get published content: $&#123;content&#125;`), &apos;myEvent&apos;);</div><div class=\"line\">event.emit(&apos;jaja&apos;, &apos;myEvent&apos;); //get published content: jaja</div></pre></td></tr></table></figure>\n"},{"title":"loadtest","date":"2017-01-17T01:41:01.000Z","_content":"### loadtest 压力测试\n可用powershell 或linux bash \n\n命令行如果加post body 会报错\n\n常用参数：\n\n-T 表示持续时间\n\n-c 并行数量\n\n-n 总的请求\n\n-m  get,put,post\n\n--rps 每秒发送请求数\n\n-P Request body 数据\n\n-p body 数据存在的文件路径\n\n-H header 添加\n\n-C 设置cookie\n```\nparam(\n    [int] $iterations = 6000,\n    [int] $rps = 500,\n    [string][ValidateSet(\"plaintext\")] $variation = \"plaintext\")\n\nif ($variation -eq \"plaintext\")\n{\n    $url = \"http://wh.etao.cn/auth/test\"\n}\n\nWrite-Host -ForegroundColor Green Beginning workload\nWrite-Host \"`& loadtest -k -n $iterations -c 100 --rps $rps $url\"\nWrite-Host\n\n& loadtest -k -n $iterations -c 100 --rps $rps $url\n```\n\n```\nloadtest -c 5 -t 2 -m post -T 'application/json'  -P '{\"message\":\"hello\"}'  -H \"Accept: application/json; q=0.9, application/xml; q=0.6\" http://cttest.etao.cn:8011/api/auth/test\n```\n","source":"_posts/loadtest.md","raw":"---\ntitle: loadtest\ndate: 2017-01-17 09:41:01\ntags:\n---\n### loadtest 压力测试\n可用powershell 或linux bash \n\n命令行如果加post body 会报错\n\n常用参数：\n\n-T 表示持续时间\n\n-c 并行数量\n\n-n 总的请求\n\n-m  get,put,post\n\n--rps 每秒发送请求数\n\n-P Request body 数据\n\n-p body 数据存在的文件路径\n\n-H header 添加\n\n-C 设置cookie\n```\nparam(\n    [int] $iterations = 6000,\n    [int] $rps = 500,\n    [string][ValidateSet(\"plaintext\")] $variation = \"plaintext\")\n\nif ($variation -eq \"plaintext\")\n{\n    $url = \"http://wh.etao.cn/auth/test\"\n}\n\nWrite-Host -ForegroundColor Green Beginning workload\nWrite-Host \"`& loadtest -k -n $iterations -c 100 --rps $rps $url\"\nWrite-Host\n\n& loadtest -k -n $iterations -c 100 --rps $rps $url\n```\n\n```\nloadtest -c 5 -t 2 -m post -T 'application/json'  -P '{\"message\":\"hello\"}'  -H \"Accept: application/json; q=0.9, application/xml; q=0.6\" http://cttest.etao.cn:8011/api/auth/test\n```\n","slug":"loadtest","published":1,"updated":"2017-02-25T08:37:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2t6ve000dr7fyt61gk30c","content":"<h3 id=\"loadtest-压力测试\"><a href=\"#loadtest-压力测试\" class=\"headerlink\" title=\"loadtest 压力测试\"></a>loadtest 压力测试</h3><p>可用powershell 或linux bash </p>\n<p>命令行如果加post body 会报错</p>\n<p>常用参数：</p>\n<p>-T 表示持续时间</p>\n<p>-c 并行数量</p>\n<p>-n 总的请求</p>\n<p>-m  get,put,post</p>\n<p>–rps 每秒发送请求数</p>\n<p>-P Request body 数据</p>\n<p>-p body 数据存在的文件路径</p>\n<p>-H header 添加</p>\n<p>-C 设置cookie<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">param(</div><div class=\"line\">    [int] $iterations = 6000,</div><div class=\"line\">    [int] $rps = 500,</div><div class=\"line\">    [string][ValidateSet(&quot;plaintext&quot;)] $variation = &quot;plaintext&quot;)</div><div class=\"line\"></div><div class=\"line\">if ($variation -eq &quot;plaintext&quot;)</div><div class=\"line\">&#123;</div><div class=\"line\">    $url = &quot;http://wh.etao.cn/auth/test&quot;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Write-Host -ForegroundColor Green Beginning workload</div><div class=\"line\">Write-Host &quot;`&amp; loadtest -k -n $iterations -c 100 --rps $rps $url&quot;</div><div class=\"line\">Write-Host</div><div class=\"line\"></div><div class=\"line\">&amp; loadtest -k -n $iterations -c 100 --rps $rps $url</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">loadtest -c 5 -t 2 -m post -T &apos;application/json&apos;  -P &apos;&#123;&quot;message&quot;:&quot;hello&quot;&#125;&apos;  -H &quot;Accept: application/json; q=0.9, application/xml; q=0.6&quot; http://cttest.etao.cn:8011/api/auth/test</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"loadtest-压力测试\"><a href=\"#loadtest-压力测试\" class=\"headerlink\" title=\"loadtest 压力测试\"></a>loadtest 压力测试</h3><p>可用powershell 或linux bash </p>\n<p>命令行如果加post body 会报错</p>\n<p>常用参数：</p>\n<p>-T 表示持续时间</p>\n<p>-c 并行数量</p>\n<p>-n 总的请求</p>\n<p>-m  get,put,post</p>\n<p>–rps 每秒发送请求数</p>\n<p>-P Request body 数据</p>\n<p>-p body 数据存在的文件路径</p>\n<p>-H header 添加</p>\n<p>-C 设置cookie<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">param(</div><div class=\"line\">    [int] $iterations = 6000,</div><div class=\"line\">    [int] $rps = 500,</div><div class=\"line\">    [string][ValidateSet(&quot;plaintext&quot;)] $variation = &quot;plaintext&quot;)</div><div class=\"line\"></div><div class=\"line\">if ($variation -eq &quot;plaintext&quot;)</div><div class=\"line\">&#123;</div><div class=\"line\">    $url = &quot;http://wh.etao.cn/auth/test&quot;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Write-Host -ForegroundColor Green Beginning workload</div><div class=\"line\">Write-Host &quot;`&amp; loadtest -k -n $iterations -c 100 --rps $rps $url&quot;</div><div class=\"line\">Write-Host</div><div class=\"line\"></div><div class=\"line\">&amp; loadtest -k -n $iterations -c 100 --rps $rps $url</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">loadtest -c 5 -t 2 -m post -T &apos;application/json&apos;  -P &apos;&#123;&quot;message&quot;:&quot;hello&quot;&#125;&apos;  -H &quot;Accept: application/json; q=0.9, application/xml; q=0.6&quot; http://cttest.etao.cn:8011/api/auth/test</div></pre></td></tr></table></figure>\n"},{"title":"postgre","date":"2017-02-21T03:18:37.000Z","_content":"\n```\ndb.many(query, values); // expects one or more rows\ndb.one(query, values); // expects a single row\ndb.none(query, values); // expects no rows\ndb.any(query, values); // expects anything, same as `manyOrNone`\ndb.oneOrNone(query, values); // expects 1 or 0 rows\ndb.manyOrNone(query, values); // expects anything, same as `any`\n```\n\nThe library supports named parameters in query formatting, with the syntax of $*propName*, where * is any of the following open-close pairs: {}, (), <>, [], //\n\n\n```\ndb.query('SELECT * FROM users WHERE name=${name} AND active=$/active/', {\n    name: 'John',\n    active: true\n});\n```\n\nthis 的用法：\n```\nvar doc = {\n    id: 123,\n    body: \"some text\"\n};\n\ndb.none(\"INSERT INTO documents(id, doc) VALUES(${id}, ${this})\", doc)\n    .then(function () {\n        // success;\n    })\n    .catch(function (error) {\n        // error;\n    });\n```\n\nwhich will execute:\n\nINSERT INTO documents(id, doc) VALUES(123, '{\"id\":123,\"body\":\"some text\"}')\n\n\n执行函数\n\nAnd when you are not expecting any return results, call db.proc instead. Both methods return a Promise object, but db.proc doesn't take a qrm parameter, always assuming it is one|none.\n```\ndb.func('findAudit', [123, new Date()])\n    .then(function (data) {\n        console.log(data); // printing the data returned \n    })\n    .catch(function (error) {\n        console.log(error); // printing the error \n    });\ndb.proc();\n```\n\n公用一个连接：\n\n```\ndb.task(function (t) {\n    // `t` and `this` here are the same;\n    // execute a chain of queries;\n})\n    .then(function (data) {\n        // success;\n    })\n    .catch(function (error) {\n        // failed;    \n    });\n```\n\n事物：其中可以嵌套事物\n\n```\ndb.tx(function (t) {\n    // t = this;\n    return t.batch([\n        t.one(\"insert into users(name) values($1) returning id\", \"John\"),\n        t.one(\"insert into events(code) values($1) returning id\", 123)\n    ]);\n})\n    .spread(function (user, event) {\n        // print new user id + new event id;\n        console.log(\"DATA:\", user.id, event.id);\n    })\n    .catch(function (error) {\n        console.log(\"ERROR:\", error); // print the error;\n    })\n    .finally(function () {\n    \n\n        pgp.end(); // for immediate app exit, closing the connection pool.   关闭连接池，是的一般不需要\n        \n        If, however you normally exit your application by killing the NodeJS process, then you don't need to use it.\n\n        \n    });\n```\n\n设置隔离级别：\n\n```\nvar TransactionMode = pgp.txMode.TransactionMode;\nvar isolationLevel = pgp.txMode.isolationLevel;\n\n// Create a reusable transaction mode (serializable + read-only + deferrable):\nvar tmSRD = new TransactionMode({\n    tiLevel: isolationLevel.serializable,\n    readOnly: true,\n    deferrable: true\n});\n\nfunction myTransaction() {\n    return this.query('SELECT * FROM table');\n}\n\nmyTransaction.txMode = tmSRD; // assign transaction mode;\n\ndb.tx(myTransaction)\n    .then(function(){\n        // success;\n    });\n```\n重置promise：\n\n```\nvar promise = require('bluebird');\nvar options = {\n    promiseLib: promise\n};\nvar pgp = require('pg-promise')(options);\n```\n\n","source":"_posts/postgre.md","raw":"---\ntitle: postgre\ndate: 2017-02-21 11:18:37\ntags:\n---\n\n```\ndb.many(query, values); // expects one or more rows\ndb.one(query, values); // expects a single row\ndb.none(query, values); // expects no rows\ndb.any(query, values); // expects anything, same as `manyOrNone`\ndb.oneOrNone(query, values); // expects 1 or 0 rows\ndb.manyOrNone(query, values); // expects anything, same as `any`\n```\n\nThe library supports named parameters in query formatting, with the syntax of $*propName*, where * is any of the following open-close pairs: {}, (), <>, [], //\n\n\n```\ndb.query('SELECT * FROM users WHERE name=${name} AND active=$/active/', {\n    name: 'John',\n    active: true\n});\n```\n\nthis 的用法：\n```\nvar doc = {\n    id: 123,\n    body: \"some text\"\n};\n\ndb.none(\"INSERT INTO documents(id, doc) VALUES(${id}, ${this})\", doc)\n    .then(function () {\n        // success;\n    })\n    .catch(function (error) {\n        // error;\n    });\n```\n\nwhich will execute:\n\nINSERT INTO documents(id, doc) VALUES(123, '{\"id\":123,\"body\":\"some text\"}')\n\n\n执行函数\n\nAnd when you are not expecting any return results, call db.proc instead. Both methods return a Promise object, but db.proc doesn't take a qrm parameter, always assuming it is one|none.\n```\ndb.func('findAudit', [123, new Date()])\n    .then(function (data) {\n        console.log(data); // printing the data returned \n    })\n    .catch(function (error) {\n        console.log(error); // printing the error \n    });\ndb.proc();\n```\n\n公用一个连接：\n\n```\ndb.task(function (t) {\n    // `t` and `this` here are the same;\n    // execute a chain of queries;\n})\n    .then(function (data) {\n        // success;\n    })\n    .catch(function (error) {\n        // failed;    \n    });\n```\n\n事物：其中可以嵌套事物\n\n```\ndb.tx(function (t) {\n    // t = this;\n    return t.batch([\n        t.one(\"insert into users(name) values($1) returning id\", \"John\"),\n        t.one(\"insert into events(code) values($1) returning id\", 123)\n    ]);\n})\n    .spread(function (user, event) {\n        // print new user id + new event id;\n        console.log(\"DATA:\", user.id, event.id);\n    })\n    .catch(function (error) {\n        console.log(\"ERROR:\", error); // print the error;\n    })\n    .finally(function () {\n    \n\n        pgp.end(); // for immediate app exit, closing the connection pool.   关闭连接池，是的一般不需要\n        \n        If, however you normally exit your application by killing the NodeJS process, then you don't need to use it.\n\n        \n    });\n```\n\n设置隔离级别：\n\n```\nvar TransactionMode = pgp.txMode.TransactionMode;\nvar isolationLevel = pgp.txMode.isolationLevel;\n\n// Create a reusable transaction mode (serializable + read-only + deferrable):\nvar tmSRD = new TransactionMode({\n    tiLevel: isolationLevel.serializable,\n    readOnly: true,\n    deferrable: true\n});\n\nfunction myTransaction() {\n    return this.query('SELECT * FROM table');\n}\n\nmyTransaction.txMode = tmSRD; // assign transaction mode;\n\ndb.tx(myTransaction)\n    .then(function(){\n        // success;\n    });\n```\n重置promise：\n\n```\nvar promise = require('bluebird');\nvar options = {\n    promiseLib: promise\n};\nvar pgp = require('pg-promise')(options);\n```\n\n","slug":"postgre","published":1,"updated":"2017-02-25T08:37:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2t6vf000er7fygj018ziw","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.many(query, values); // expects one or more rows</div><div class=\"line\">db.one(query, values); // expects a single row</div><div class=\"line\">db.none(query, values); // expects no rows</div><div class=\"line\">db.any(query, values); // expects anything, same as `manyOrNone`</div><div class=\"line\">db.oneOrNone(query, values); // expects 1 or 0 rows</div><div class=\"line\">db.manyOrNone(query, values); // expects anything, same as `any`</div></pre></td></tr></table></figure>\n<p>The library supports named parameters in query formatting, with the syntax of $<em>propName</em>, where * is any of the following open-close pairs: {}, (), &lt;&gt;, [], //</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.query(&apos;SELECT * FROM users WHERE name=$&#123;name&#125; AND active=$/active/&apos;, &#123;</div><div class=\"line\">    name: &apos;John&apos;,</div><div class=\"line\">    active: true</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>this 的用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var doc = &#123;</div><div class=\"line\">    id: 123,</div><div class=\"line\">    body: &quot;some text&quot;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">db.none(&quot;INSERT INTO documents(id, doc) VALUES($&#123;id&#125;, $&#123;this&#125;)&quot;, doc)</div><div class=\"line\">    .then(function () &#123;</div><div class=\"line\">        // success;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .catch(function (error) &#123;</div><div class=\"line\">        // error;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n<p>which will execute:</p>\n<p>INSERT INTO documents(id, doc) VALUES(123, ‘{“id”:123,”body”:”some text”}’)</p>\n<p>执行函数</p>\n<p>And when you are not expecting any return results, call db.proc instead. Both methods return a Promise object, but db.proc doesn’t take a qrm parameter, always assuming it is one|none.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.func(&apos;findAudit&apos;, [123, new Date()])</div><div class=\"line\">    .then(function (data) &#123;</div><div class=\"line\">        console.log(data); // printing the data returned </div><div class=\"line\">    &#125;)</div><div class=\"line\">    .catch(function (error) &#123;</div><div class=\"line\">        console.log(error); // printing the error </div><div class=\"line\">    &#125;);</div><div class=\"line\">db.proc();</div></pre></td></tr></table></figure></p>\n<p>公用一个连接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.task(function (t) &#123;</div><div class=\"line\">    // `t` and `this` here are the same;</div><div class=\"line\">    // execute a chain of queries;</div><div class=\"line\">&#125;)</div><div class=\"line\">    .then(function (data) &#123;</div><div class=\"line\">        // success;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .catch(function (error) &#123;</div><div class=\"line\">        // failed;    </div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<p>事物：其中可以嵌套事物</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.tx(function (t) &#123;</div><div class=\"line\">    // t = this;</div><div class=\"line\">    return t.batch([</div><div class=\"line\">        t.one(&quot;insert into users(name) values($1) returning id&quot;, &quot;John&quot;),</div><div class=\"line\">        t.one(&quot;insert into events(code) values($1) returning id&quot;, 123)</div><div class=\"line\">    ]);</div><div class=\"line\">&#125;)</div><div class=\"line\">    .spread(function (user, event) &#123;</div><div class=\"line\">        // print new user id + new event id;</div><div class=\"line\">        console.log(&quot;DATA:&quot;, user.id, event.id);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .catch(function (error) &#123;</div><div class=\"line\">        console.log(&quot;ERROR:&quot;, error); // print the error;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .finally(function () &#123;</div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\">        pgp.end(); // for immediate app exit, closing the connection pool.   关闭连接池，是的一般不需要</div><div class=\"line\">        </div><div class=\"line\">        If, however you normally exit your application by killing the NodeJS process, then you don&apos;t need to use it.</div><div class=\"line\"></div><div class=\"line\">        </div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<p>设置隔离级别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var TransactionMode = pgp.txMode.TransactionMode;</div><div class=\"line\">var isolationLevel = pgp.txMode.isolationLevel;</div><div class=\"line\"></div><div class=\"line\">// Create a reusable transaction mode (serializable + read-only + deferrable):</div><div class=\"line\">var tmSRD = new TransactionMode(&#123;</div><div class=\"line\">    tiLevel: isolationLevel.serializable,</div><div class=\"line\">    readOnly: true,</div><div class=\"line\">    deferrable: true</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">function myTransaction() &#123;</div><div class=\"line\">    return this.query(&apos;SELECT * FROM table&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">myTransaction.txMode = tmSRD; // assign transaction mode;</div><div class=\"line\"></div><div class=\"line\">db.tx(myTransaction)</div><div class=\"line\">    .then(function()&#123;</div><div class=\"line\">        // success;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<p>重置promise：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var promise = require(&apos;bluebird&apos;);</div><div class=\"line\">var options = &#123;</div><div class=\"line\">    promiseLib: promise</div><div class=\"line\">&#125;;</div><div class=\"line\">var pgp = require(&apos;pg-promise&apos;)(options);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.many(query, values); // expects one or more rows</div><div class=\"line\">db.one(query, values); // expects a single row</div><div class=\"line\">db.none(query, values); // expects no rows</div><div class=\"line\">db.any(query, values); // expects anything, same as `manyOrNone`</div><div class=\"line\">db.oneOrNone(query, values); // expects 1 or 0 rows</div><div class=\"line\">db.manyOrNone(query, values); // expects anything, same as `any`</div></pre></td></tr></table></figure>\n<p>The library supports named parameters in query formatting, with the syntax of $<em>propName</em>, where * is any of the following open-close pairs: {}, (), &lt;&gt;, [], //</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.query(&apos;SELECT * FROM users WHERE name=$&#123;name&#125; AND active=$/active/&apos;, &#123;</div><div class=\"line\">    name: &apos;John&apos;,</div><div class=\"line\">    active: true</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>this 的用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var doc = &#123;</div><div class=\"line\">    id: 123,</div><div class=\"line\">    body: &quot;some text&quot;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">db.none(&quot;INSERT INTO documents(id, doc) VALUES($&#123;id&#125;, $&#123;this&#125;)&quot;, doc)</div><div class=\"line\">    .then(function () &#123;</div><div class=\"line\">        // success;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .catch(function (error) &#123;</div><div class=\"line\">        // error;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n<p>which will execute:</p>\n<p>INSERT INTO documents(id, doc) VALUES(123, ‘{“id”:123,”body”:”some text”}’)</p>\n<p>执行函数</p>\n<p>And when you are not expecting any return results, call db.proc instead. Both methods return a Promise object, but db.proc doesn’t take a qrm parameter, always assuming it is one|none.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.func(&apos;findAudit&apos;, [123, new Date()])</div><div class=\"line\">    .then(function (data) &#123;</div><div class=\"line\">        console.log(data); // printing the data returned </div><div class=\"line\">    &#125;)</div><div class=\"line\">    .catch(function (error) &#123;</div><div class=\"line\">        console.log(error); // printing the error </div><div class=\"line\">    &#125;);</div><div class=\"line\">db.proc();</div></pre></td></tr></table></figure></p>\n<p>公用一个连接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.task(function (t) &#123;</div><div class=\"line\">    // `t` and `this` here are the same;</div><div class=\"line\">    // execute a chain of queries;</div><div class=\"line\">&#125;)</div><div class=\"line\">    .then(function (data) &#123;</div><div class=\"line\">        // success;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .catch(function (error) &#123;</div><div class=\"line\">        // failed;    </div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<p>事物：其中可以嵌套事物</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.tx(function (t) &#123;</div><div class=\"line\">    // t = this;</div><div class=\"line\">    return t.batch([</div><div class=\"line\">        t.one(&quot;insert into users(name) values($1) returning id&quot;, &quot;John&quot;),</div><div class=\"line\">        t.one(&quot;insert into events(code) values($1) returning id&quot;, 123)</div><div class=\"line\">    ]);</div><div class=\"line\">&#125;)</div><div class=\"line\">    .spread(function (user, event) &#123;</div><div class=\"line\">        // print new user id + new event id;</div><div class=\"line\">        console.log(&quot;DATA:&quot;, user.id, event.id);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .catch(function (error) &#123;</div><div class=\"line\">        console.log(&quot;ERROR:&quot;, error); // print the error;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .finally(function () &#123;</div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\">        pgp.end(); // for immediate app exit, closing the connection pool.   关闭连接池，是的一般不需要</div><div class=\"line\">        </div><div class=\"line\">        If, however you normally exit your application by killing the NodeJS process, then you don&apos;t need to use it.</div><div class=\"line\"></div><div class=\"line\">        </div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<p>设置隔离级别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var TransactionMode = pgp.txMode.TransactionMode;</div><div class=\"line\">var isolationLevel = pgp.txMode.isolationLevel;</div><div class=\"line\"></div><div class=\"line\">// Create a reusable transaction mode (serializable + read-only + deferrable):</div><div class=\"line\">var tmSRD = new TransactionMode(&#123;</div><div class=\"line\">    tiLevel: isolationLevel.serializable,</div><div class=\"line\">    readOnly: true,</div><div class=\"line\">    deferrable: true</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">function myTransaction() &#123;</div><div class=\"line\">    return this.query(&apos;SELECT * FROM table&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">myTransaction.txMode = tmSRD; // assign transaction mode;</div><div class=\"line\"></div><div class=\"line\">db.tx(myTransaction)</div><div class=\"line\">    .then(function()&#123;</div><div class=\"line\">        // success;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<p>重置promise：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var promise = require(&apos;bluebird&apos;);</div><div class=\"line\">var options = &#123;</div><div class=\"line\">    promiseLib: promise</div><div class=\"line\">&#125;;</div><div class=\"line\">var pgp = require(&apos;pg-promise&apos;)(options);</div></pre></td></tr></table></figure>\n"},{"title":"sequelize","date":"2017-02-25T09:38:07.000Z","_content":"","source":"_posts/sequelize.md","raw":"---\ntitle: sequelize\ndate: 2017-02-25 17:38:07\ntags:\n---\n","slug":"sequelize","published":1,"updated":"2017-02-25T09:38:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2t6vi000fr7fyxj3ohtan","content":"","excerpt":"","more":""},{"title":"vue","date":"2017-01-19T07:19:03.000Z","_content":"#####  v-once 指令，你也能执行一次性地插值\n\n##### Mustache 不能在 HTML 属性中使用，应使用 v-bind 指令：\n\n```\n<div v-bind:id=\"dynamicId\"></div>\n```\n\n##### 修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()\n\n```\n<!-- 阻止单击事件冒泡 -->\n<a v-on:click.stop=\"doThis\"></a>\n<!-- 提交事件不再重载页面 -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n<!-- 修饰符可以串联  -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n<!-- 只有修饰符 -->\n<form v-on:submit.prevent></form>\n<!-- 添加事件侦听器时使用事件捕获模式 -->\n<div v-on:click.capture=\"doThis\">...</div>\n<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->\n<div v-on:click.self=\"doThat\">...</div>\n<a v-on:click.once=\"doThis\"></a>\n```\n\n##### 过滤器函数总接受表达式的值作为第一个参数。\n\n```\nnew Vue({\n  // ...\n  filters: {\n    capitalize: function (value) {\n      if (!value) return ''\n      value = value.toString()\n      return value.charAt(0).toUpperCase() + value.slice(1)\n    }\n  }\n})\n过滤器可以串联：\n{{ message | filterA | filterB }}\n```\n\n##### v-bind 缩写\n\n\n```\n<!-- 完整语法 -->\n<a v-bind:href=\"url\"></a>\n<!-- 缩写 -->\n<a :href=\"url\"></a>\nv-on 缩写\n\n<!-- 完整语法 -->\n<a v-on:click=\"doSomething\"></a>\n<!-- 缩写 -->\n<a @click=\"doSomething\"></a>\n```\n##### watch property\n##### 条件组\n\n```\n<h1 v-if=\"ok\">Yes</h1>\n<h1 v-else>No</h1>\n```\n##### 列表渲染\n\n```\n<ul id=\"example-1\">\n  <li v-for=\"item in items\">\n    {{ item.message }}\n  </li>\n</ul>\n```\n##### 按键修饰符\n记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：\n\n```\n<!-- 同上 -->\n<input v-on:keyup.enter=\"submit\">\n<!-- 缩写语法 -->\n<input @keyup.enter=\"submit\">\n全部的按键别名：\n.enter\n.tab\n.delete (捕获 “删除” 和 “退格” 键)\n.esc\n.space\n.up\n.down\n.left\n.right\n```\n##### 绑定属性值\n\n```\n<input\n  type=\"checkbox\"\n  v-model=\"toggle\"\n  v-bind:true-value=\"a\"\n  v-bind:false-value=\"b\"\n>\n```\n##### 修饰符\n\n```\n在默认情况下， v-model 在 input 事件中同步输入框的值与数据 (除了 上述 IME 部分)，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：\n<!-- 在 \"change\" 而不是 \"input\" 事件中更新 -->\n<input v-model.lazy=\"msg\" >\n.number\n\n如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值：\n<input v-model.number=\"age\" type=\"number\">\n这通常很有用，因为在 type=\"number\" 时 HTML 中输入的值也总是会返回字符串类型。\n.trim\n\n如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：\n<input v-model.trim=\"msg\">\n```\n","source":"_posts/vue.md","raw":"---\ntitle: vue\ndate: 2017-01-19 15:19:03\ntags:\n---\n#####  v-once 指令，你也能执行一次性地插值\n\n##### Mustache 不能在 HTML 属性中使用，应使用 v-bind 指令：\n\n```\n<div v-bind:id=\"dynamicId\"></div>\n```\n\n##### 修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()\n\n```\n<!-- 阻止单击事件冒泡 -->\n<a v-on:click.stop=\"doThis\"></a>\n<!-- 提交事件不再重载页面 -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n<!-- 修饰符可以串联  -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n<!-- 只有修饰符 -->\n<form v-on:submit.prevent></form>\n<!-- 添加事件侦听器时使用事件捕获模式 -->\n<div v-on:click.capture=\"doThis\">...</div>\n<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->\n<div v-on:click.self=\"doThat\">...</div>\n<a v-on:click.once=\"doThis\"></a>\n```\n\n##### 过滤器函数总接受表达式的值作为第一个参数。\n\n```\nnew Vue({\n  // ...\n  filters: {\n    capitalize: function (value) {\n      if (!value) return ''\n      value = value.toString()\n      return value.charAt(0).toUpperCase() + value.slice(1)\n    }\n  }\n})\n过滤器可以串联：\n{{ message | filterA | filterB }}\n```\n\n##### v-bind 缩写\n\n\n```\n<!-- 完整语法 -->\n<a v-bind:href=\"url\"></a>\n<!-- 缩写 -->\n<a :href=\"url\"></a>\nv-on 缩写\n\n<!-- 完整语法 -->\n<a v-on:click=\"doSomething\"></a>\n<!-- 缩写 -->\n<a @click=\"doSomething\"></a>\n```\n##### watch property\n##### 条件组\n\n```\n<h1 v-if=\"ok\">Yes</h1>\n<h1 v-else>No</h1>\n```\n##### 列表渲染\n\n```\n<ul id=\"example-1\">\n  <li v-for=\"item in items\">\n    {{ item.message }}\n  </li>\n</ul>\n```\n##### 按键修饰符\n记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：\n\n```\n<!-- 同上 -->\n<input v-on:keyup.enter=\"submit\">\n<!-- 缩写语法 -->\n<input @keyup.enter=\"submit\">\n全部的按键别名：\n.enter\n.tab\n.delete (捕获 “删除” 和 “退格” 键)\n.esc\n.space\n.up\n.down\n.left\n.right\n```\n##### 绑定属性值\n\n```\n<input\n  type=\"checkbox\"\n  v-model=\"toggle\"\n  v-bind:true-value=\"a\"\n  v-bind:false-value=\"b\"\n>\n```\n##### 修饰符\n\n```\n在默认情况下， v-model 在 input 事件中同步输入框的值与数据 (除了 上述 IME 部分)，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：\n<!-- 在 \"change\" 而不是 \"input\" 事件中更新 -->\n<input v-model.lazy=\"msg\" >\n.number\n\n如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值：\n<input v-model.number=\"age\" type=\"number\">\n这通常很有用，因为在 type=\"number\" 时 HTML 中输入的值也总是会返回字符串类型。\n.trim\n\n如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：\n<input v-model.trim=\"msg\">\n```\n","slug":"vue","published":1,"updated":"2017-02-25T08:37:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2t6vk000gr7fy8xe5s16j","content":"<h5 id=\"v-once-指令，你也能执行一次性地插值\"><a href=\"#v-once-指令，你也能执行一次性地插值\" class=\"headerlink\" title=\"v-once 指令，你也能执行一次性地插值\"></a>v-once 指令，你也能执行一次性地插值</h5><h5 id=\"Mustache-不能在-HTML-属性中使用，应使用-v-bind-指令：\"><a href=\"#Mustache-不能在-HTML-属性中使用，应使用-v-bind-指令：\" class=\"headerlink\" title=\"Mustache 不能在 HTML 属性中使用，应使用 v-bind 指令：\"></a>Mustache 不能在 HTML 属性中使用，应使用 v-bind 指令：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"修饰符（Modifiers）是以半角句号-指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，-prevent-修饰符告诉-v-on-指令对于触发的事件调用-event-preventDefault\"><a href=\"#修饰符（Modifiers）是以半角句号-指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，-prevent-修饰符告诉-v-on-指令对于触发的事件调用-event-preventDefault\" class=\"headerlink\" title=\"修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()\"></a>修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 阻止单击事件冒泡 --&gt;</div><div class=\"line\">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</div><div class=\"line\">&lt;!-- 提交事件不再重载页面 --&gt;</div><div class=\"line\">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</div><div class=\"line\">&lt;!-- 修饰符可以串联  --&gt;</div><div class=\"line\">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</div><div class=\"line\">&lt;!-- 只有修饰符 --&gt;</div><div class=\"line\">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</div><div class=\"line\">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</div><div class=\"line\">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</div><div class=\"line\">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</div><div class=\"line\">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</div><div class=\"line\">&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"过滤器函数总接受表达式的值作为第一个参数。\"><a href=\"#过滤器函数总接受表达式的值作为第一个参数。\" class=\"headerlink\" title=\"过滤器函数总接受表达式的值作为第一个参数。\"></a>过滤器函数总接受表达式的值作为第一个参数。</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">new Vue(&#123;</div><div class=\"line\">  // ...</div><div class=\"line\">  filters: &#123;</div><div class=\"line\">    capitalize: function (value) &#123;</div><div class=\"line\">      if (!value) return &apos;&apos;</div><div class=\"line\">      value = value.toString()</div><div class=\"line\">      return value.charAt(0).toUpperCase() + value.slice(1)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">过滤器可以串联：</div><div class=\"line\">&#123;&#123; message | filterA | filterB &#125;&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"v-bind-缩写\"><a href=\"#v-bind-缩写\" class=\"headerlink\" title=\"v-bind 缩写\"></a>v-bind 缩写</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 完整语法 --&gt;</div><div class=\"line\">&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;</div><div class=\"line\">&lt;!-- 缩写 --&gt;</div><div class=\"line\">&lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;</div><div class=\"line\">v-on 缩写</div><div class=\"line\"></div><div class=\"line\">&lt;!-- 完整语法 --&gt;</div><div class=\"line\">&lt;a v-on:click=&quot;doSomething&quot;&gt;&lt;/a&gt;</div><div class=\"line\">&lt;!-- 缩写 --&gt;</div><div class=\"line\">&lt;a @click=&quot;doSomething&quot;&gt;&lt;/a&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"watch-property\"><a href=\"#watch-property\" class=\"headerlink\" title=\"watch property\"></a>watch property</h5><h5 id=\"条件组\"><a href=\"#条件组\" class=\"headerlink\" title=\"条件组\"></a>条件组</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1 v-if=&quot;ok&quot;&gt;Yes&lt;/h1&gt;</div><div class=\"line\">&lt;h1 v-else&gt;No&lt;/h1&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul id=&quot;example-1&quot;&gt;</div><div class=\"line\">  &lt;li v-for=&quot;item in items&quot;&gt;</div><div class=\"line\">    &#123;&#123; item.message &#125;&#125;</div><div class=\"line\">  &lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h5><p>记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 同上 --&gt;</div><div class=\"line\">&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;</div><div class=\"line\">&lt;!-- 缩写语法 --&gt;</div><div class=\"line\">&lt;input @keyup.enter=&quot;submit&quot;&gt;</div><div class=\"line\">全部的按键别名：</div><div class=\"line\">.enter</div><div class=\"line\">.tab</div><div class=\"line\">.delete (捕获 “删除” 和 “退格” 键)</div><div class=\"line\">.esc</div><div class=\"line\">.space</div><div class=\"line\">.up</div><div class=\"line\">.down</div><div class=\"line\">.left</div><div class=\"line\">.right</div></pre></td></tr></table></figure>\n<h5 id=\"绑定属性值\"><a href=\"#绑定属性值\" class=\"headerlink\" title=\"绑定属性值\"></a>绑定属性值</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input</div><div class=\"line\">  type=&quot;checkbox&quot;</div><div class=\"line\">  v-model=&quot;toggle&quot;</div><div class=\"line\">  v-bind:true-value=&quot;a&quot;</div><div class=\"line\">  v-bind:false-value=&quot;b&quot;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">在默认情况下， v-model 在 input 事件中同步输入框的值与数据 (除了 上述 IME 部分)，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：</div><div class=\"line\">&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 --&gt;</div><div class=\"line\">&lt;input v-model.lazy=&quot;msg&quot; &gt;</div><div class=\"line\">.number</div><div class=\"line\"></div><div class=\"line\">如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值：</div><div class=\"line\">&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&gt;</div><div class=\"line\">这通常很有用，因为在 type=&quot;number&quot; 时 HTML 中输入的值也总是会返回字符串类型。</div><div class=\"line\">.trim</div><div class=\"line\"></div><div class=\"line\">如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：</div><div class=\"line\">&lt;input v-model.trim=&quot;msg&quot;&gt;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h5 id=\"v-once-指令，你也能执行一次性地插值\"><a href=\"#v-once-指令，你也能执行一次性地插值\" class=\"headerlink\" title=\"v-once 指令，你也能执行一次性地插值\"></a>v-once 指令，你也能执行一次性地插值</h5><h5 id=\"Mustache-不能在-HTML-属性中使用，应使用-v-bind-指令：\"><a href=\"#Mustache-不能在-HTML-属性中使用，应使用-v-bind-指令：\" class=\"headerlink\" title=\"Mustache 不能在 HTML 属性中使用，应使用 v-bind 指令：\"></a>Mustache 不能在 HTML 属性中使用，应使用 v-bind 指令：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"修饰符（Modifiers）是以半角句号-指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，-prevent-修饰符告诉-v-on-指令对于触发的事件调用-event-preventDefault\"><a href=\"#修饰符（Modifiers）是以半角句号-指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，-prevent-修饰符告诉-v-on-指令对于触发的事件调用-event-preventDefault\" class=\"headerlink\" title=\"修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()\"></a>修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 阻止单击事件冒泡 --&gt;</div><div class=\"line\">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</div><div class=\"line\">&lt;!-- 提交事件不再重载页面 --&gt;</div><div class=\"line\">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</div><div class=\"line\">&lt;!-- 修饰符可以串联  --&gt;</div><div class=\"line\">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</div><div class=\"line\">&lt;!-- 只有修饰符 --&gt;</div><div class=\"line\">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</div><div class=\"line\">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</div><div class=\"line\">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</div><div class=\"line\">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</div><div class=\"line\">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</div><div class=\"line\">&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"过滤器函数总接受表达式的值作为第一个参数。\"><a href=\"#过滤器函数总接受表达式的值作为第一个参数。\" class=\"headerlink\" title=\"过滤器函数总接受表达式的值作为第一个参数。\"></a>过滤器函数总接受表达式的值作为第一个参数。</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">new Vue(&#123;</div><div class=\"line\">  // ...</div><div class=\"line\">  filters: &#123;</div><div class=\"line\">    capitalize: function (value) &#123;</div><div class=\"line\">      if (!value) return &apos;&apos;</div><div class=\"line\">      value = value.toString()</div><div class=\"line\">      return value.charAt(0).toUpperCase() + value.slice(1)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">过滤器可以串联：</div><div class=\"line\">&#123;&#123; message | filterA | filterB &#125;&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"v-bind-缩写\"><a href=\"#v-bind-缩写\" class=\"headerlink\" title=\"v-bind 缩写\"></a>v-bind 缩写</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 完整语法 --&gt;</div><div class=\"line\">&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;</div><div class=\"line\">&lt;!-- 缩写 --&gt;</div><div class=\"line\">&lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;</div><div class=\"line\">v-on 缩写</div><div class=\"line\"></div><div class=\"line\">&lt;!-- 完整语法 --&gt;</div><div class=\"line\">&lt;a v-on:click=&quot;doSomething&quot;&gt;&lt;/a&gt;</div><div class=\"line\">&lt;!-- 缩写 --&gt;</div><div class=\"line\">&lt;a @click=&quot;doSomething&quot;&gt;&lt;/a&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"watch-property\"><a href=\"#watch-property\" class=\"headerlink\" title=\"watch property\"></a>watch property</h5><h5 id=\"条件组\"><a href=\"#条件组\" class=\"headerlink\" title=\"条件组\"></a>条件组</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1 v-if=&quot;ok&quot;&gt;Yes&lt;/h1&gt;</div><div class=\"line\">&lt;h1 v-else&gt;No&lt;/h1&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul id=&quot;example-1&quot;&gt;</div><div class=\"line\">  &lt;li v-for=&quot;item in items&quot;&gt;</div><div class=\"line\">    &#123;&#123; item.message &#125;&#125;</div><div class=\"line\">  &lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h5><p>记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 同上 --&gt;</div><div class=\"line\">&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;</div><div class=\"line\">&lt;!-- 缩写语法 --&gt;</div><div class=\"line\">&lt;input @keyup.enter=&quot;submit&quot;&gt;</div><div class=\"line\">全部的按键别名：</div><div class=\"line\">.enter</div><div class=\"line\">.tab</div><div class=\"line\">.delete (捕获 “删除” 和 “退格” 键)</div><div class=\"line\">.esc</div><div class=\"line\">.space</div><div class=\"line\">.up</div><div class=\"line\">.down</div><div class=\"line\">.left</div><div class=\"line\">.right</div></pre></td></tr></table></figure>\n<h5 id=\"绑定属性值\"><a href=\"#绑定属性值\" class=\"headerlink\" title=\"绑定属性值\"></a>绑定属性值</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input</div><div class=\"line\">  type=&quot;checkbox&quot;</div><div class=\"line\">  v-model=&quot;toggle&quot;</div><div class=\"line\">  v-bind:true-value=&quot;a&quot;</div><div class=\"line\">  v-bind:false-value=&quot;b&quot;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">在默认情况下， v-model 在 input 事件中同步输入框的值与数据 (除了 上述 IME 部分)，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：</div><div class=\"line\">&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 --&gt;</div><div class=\"line\">&lt;input v-model.lazy=&quot;msg&quot; &gt;</div><div class=\"line\">.number</div><div class=\"line\"></div><div class=\"line\">如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值：</div><div class=\"line\">&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&gt;</div><div class=\"line\">这通常很有用，因为在 type=&quot;number&quot; 时 HTML 中输入的值也总是会返回字符串类型。</div><div class=\"line\">.trim</div><div class=\"line\"></div><div class=\"line\">如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：</div><div class=\"line\">&lt;input v-model.trim=&quot;msg&quot;&gt;</div></pre></td></tr></table></figure>\n"},{"title":"webpack","date":"2017-01-17T06:58:02.000Z","_content":"\nWebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。\n\nWebpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试\n\n具体配置参考：http://www.jianshu.com/p/42e11515c10f\n\n感叹号的作用在于使同一文件能够使用不同类型的loader\n\n对css 分模块：\n\n```\n{\n        test: /\\.css$/,\n        loader: 'style!css?modules'//跟前面相比就在后面加上了?modules\n}\n```\n\nLoaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。\n\n####  常用命令\n\n\n```\n$ webpack --config webpack.min.js //另一份配置文件\n\n$ webpack --display-error-details //显示异常信息\n\n$ webpack --watch   //监听变动并自动打包\n \n$ webpack -p    //压缩混淆脚本，这个非常非常重要！\n \n$ webpack -d    //生成map映射文件，告知哪些模块被最终打包到哪里了\n```\n\n对公共库的封装：\n\n```\nentry: {\n  vendor: [\"jquery\", \"other-lib\"],\n  app: \"./entry\"\n}\nnew CommonsChunkPlugin({\n  name: \"vendor\",\n\n  // filename: \"vendor.js\"\n  // (Give the chunk a different name)\n\n  minChunks: Infinity,\n  // (with more entries, this ensures that no other module\n  //  goes into the vendor chunk)\n})\n```\n\n关于express webpack middleware 的配置\n\nhttp://www.cnblogs.com/linfangshuhellowored/p/5657285.html\n\n给文件自动添加hash后缀\n\n根据chunkhash的定义知道，chunkhash是根据具体模块文件的内容计算所得的hash值，所以某个文件的改动只会影响它本身的hash指纹，不会影响其他文件。配置webpack的output如下：\n```\noutput: {\n    filename: '[name].[chunkhash:8].js',\n    path: __dirname + '/built'\n}\noutput: {\n    filename: '[name].[hash:8].js',\n    path: __dirname + '/built'\n}\n```","source":"_posts/webpack.md","raw":"---\ntitle: webpack\ndate: 2017-01-17 14:58:02\ntags:\n---\n\nWebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。\n\nWebpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试\n\n具体配置参考：http://www.jianshu.com/p/42e11515c10f\n\n感叹号的作用在于使同一文件能够使用不同类型的loader\n\n对css 分模块：\n\n```\n{\n        test: /\\.css$/,\n        loader: 'style!css?modules'//跟前面相比就在后面加上了?modules\n}\n```\n\nLoaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。\n\n####  常用命令\n\n\n```\n$ webpack --config webpack.min.js //另一份配置文件\n\n$ webpack --display-error-details //显示异常信息\n\n$ webpack --watch   //监听变动并自动打包\n \n$ webpack -p    //压缩混淆脚本，这个非常非常重要！\n \n$ webpack -d    //生成map映射文件，告知哪些模块被最终打包到哪里了\n```\n\n对公共库的封装：\n\n```\nentry: {\n  vendor: [\"jquery\", \"other-lib\"],\n  app: \"./entry\"\n}\nnew CommonsChunkPlugin({\n  name: \"vendor\",\n\n  // filename: \"vendor.js\"\n  // (Give the chunk a different name)\n\n  minChunks: Infinity,\n  // (with more entries, this ensures that no other module\n  //  goes into the vendor chunk)\n})\n```\n\n关于express webpack middleware 的配置\n\nhttp://www.cnblogs.com/linfangshuhellowored/p/5657285.html\n\n给文件自动添加hash后缀\n\n根据chunkhash的定义知道，chunkhash是根据具体模块文件的内容计算所得的hash值，所以某个文件的改动只会影响它本身的hash指纹，不会影响其他文件。配置webpack的output如下：\n```\noutput: {\n    filename: '[name].[chunkhash:8].js',\n    path: __dirname + '/built'\n}\noutput: {\n    filename: '[name].[hash:8].js',\n    path: __dirname + '/built'\n}\n```","slug":"webpack","published":1,"updated":"2017-02-25T08:37:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2t6vn000hr7fys2xe8fev","content":"<p>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。</p>\n<p>Webpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试</p>\n<p>具体配置参考：<a href=\"http://www.jianshu.com/p/42e11515c10f\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/42e11515c10f</a></p>\n<p>感叹号的作用在于使同一文件能够使用不同类型的loader</p>\n<p>对css 分模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">        test: /\\.css$/,</div><div class=\"line\">        loader: &apos;style!css?modules&apos;//跟前面相比就在后面加上了?modules</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Loaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。</p>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ webpack --config webpack.min.js //另一份配置文件</div><div class=\"line\"></div><div class=\"line\">$ webpack --display-error-details //显示异常信息</div><div class=\"line\"></div><div class=\"line\">$ webpack --watch   //监听变动并自动打包</div><div class=\"line\"> </div><div class=\"line\">$ webpack -p    //压缩混淆脚本，这个非常非常重要！</div><div class=\"line\"> </div><div class=\"line\">$ webpack -d    //生成map映射文件，告知哪些模块被最终打包到哪里了</div></pre></td></tr></table></figure>\n<p>对公共库的封装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">entry: &#123;</div><div class=\"line\">  vendor: [&quot;jquery&quot;, &quot;other-lib&quot;],</div><div class=\"line\">  app: &quot;./entry&quot;</div><div class=\"line\">&#125;</div><div class=\"line\">new CommonsChunkPlugin(&#123;</div><div class=\"line\">  name: &quot;vendor&quot;,</div><div class=\"line\"></div><div class=\"line\">  // filename: &quot;vendor.js&quot;</div><div class=\"line\">  // (Give the chunk a different name)</div><div class=\"line\"></div><div class=\"line\">  minChunks: Infinity,</div><div class=\"line\">  // (with more entries, this ensures that no other module</div><div class=\"line\">  //  goes into the vendor chunk)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>关于express webpack middleware 的配置</p>\n<p><a href=\"http://www.cnblogs.com/linfangshuhellowored/p/5657285.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/linfangshuhellowored/p/5657285.html</a></p>\n<p>给文件自动添加hash后缀</p>\n<p>根据chunkhash的定义知道，chunkhash是根据具体模块文件的内容计算所得的hash值，所以某个文件的改动只会影响它本身的hash指纹，不会影响其他文件。配置webpack的output如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">output: &#123;</div><div class=\"line\">    filename: &apos;[name].[chunkhash:8].js&apos;,</div><div class=\"line\">    path: __dirname + &apos;/built&apos;</div><div class=\"line\">&#125;</div><div class=\"line\">output: &#123;</div><div class=\"line\">    filename: &apos;[name].[hash:8].js&apos;,</div><div class=\"line\">    path: __dirname + &apos;/built&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。</p>\n<p>Webpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试</p>\n<p>具体配置参考：<a href=\"http://www.jianshu.com/p/42e11515c10f\">http://www.jianshu.com/p/42e11515c10f</a></p>\n<p>感叹号的作用在于使同一文件能够使用不同类型的loader</p>\n<p>对css 分模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">        test: /\\.css$/,</div><div class=\"line\">        loader: &apos;style!css?modules&apos;//跟前面相比就在后面加上了?modules</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Loaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。</p>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ webpack --config webpack.min.js //另一份配置文件</div><div class=\"line\"></div><div class=\"line\">$ webpack --display-error-details //显示异常信息</div><div class=\"line\"></div><div class=\"line\">$ webpack --watch   //监听变动并自动打包</div><div class=\"line\"> </div><div class=\"line\">$ webpack -p    //压缩混淆脚本，这个非常非常重要！</div><div class=\"line\"> </div><div class=\"line\">$ webpack -d    //生成map映射文件，告知哪些模块被最终打包到哪里了</div></pre></td></tr></table></figure>\n<p>对公共库的封装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">entry: &#123;</div><div class=\"line\">  vendor: [&quot;jquery&quot;, &quot;other-lib&quot;],</div><div class=\"line\">  app: &quot;./entry&quot;</div><div class=\"line\">&#125;</div><div class=\"line\">new CommonsChunkPlugin(&#123;</div><div class=\"line\">  name: &quot;vendor&quot;,</div><div class=\"line\"></div><div class=\"line\">  // filename: &quot;vendor.js&quot;</div><div class=\"line\">  // (Give the chunk a different name)</div><div class=\"line\"></div><div class=\"line\">  minChunks: Infinity,</div><div class=\"line\">  // (with more entries, this ensures that no other module</div><div class=\"line\">  //  goes into the vendor chunk)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>关于express webpack middleware 的配置</p>\n<p><a href=\"http://www.cnblogs.com/linfangshuhellowored/p/5657285.html\">http://www.cnblogs.com/linfangshuhellowored/p/5657285.html</a></p>\n<p>给文件自动添加hash后缀</p>\n<p>根据chunkhash的定义知道，chunkhash是根据具体模块文件的内容计算所得的hash值，所以某个文件的改动只会影响它本身的hash指纹，不会影响其他文件。配置webpack的output如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">output: &#123;</div><div class=\"line\">    filename: &apos;[name].[chunkhash:8].js&apos;,</div><div class=\"line\">    path: __dirname + &apos;/built&apos;</div><div class=\"line\">&#125;</div><div class=\"line\">output: &#123;</div><div class=\"line\">    filename: &apos;[name].[hash:8].js&apos;,</div><div class=\"line\">    path: __dirname + &apos;/built&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}