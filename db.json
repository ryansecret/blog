{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/asset/eventloop.jpg","path":"asset/eventloop.jpg","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1593411744364},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1593411744364},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1593411744369},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1593411744365},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1593411744364},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1593411744364},{"_id":"source/_posts/cookies.md","hash":"7e6980e6be6b86ee0e8f88d4a9e969740756f4dd","modified":1619781160388},{"_id":"source/_posts/Let's Encrypt SSL.md","hash":"5e638f906e622817ab93fe64d640477c06213e6d","modified":1593411744359},{"_id":"source/_posts/css.md","hash":"dbfb94c396ba51ea76ce1e917eeccf3678afc604","modified":1598408435523},{"_id":"source/_posts/docker.md","hash":"b073b3d18f350b12fafb88c094aa65f13d05d40e","modified":1593411744360},{"_id":"source/_posts/encoding.md","hash":"5e0c545a8f40974922640cd0a3900df059f797e9","modified":1593411744360},{"_id":"source/_posts/cloud.md","hash":"bffd5864e77721317cb64a6e92e12591ab652393","modified":1604979286003},{"_id":"source/_posts/es6.md","hash":"22a8a6fada6f91119f3f9528cabcc61cfa480a1a","modified":1597739838147},{"_id":"source/_posts/es8.md","hash":"3bf925cc89354e04c865a4568ec27fa40c46b9ef","modified":1593411744360},{"_id":"source/_posts/eslint.md","hash":"f63c0eef0f9062e5850f00bc3435aa02f0261bb8","modified":1593760365925},{"_id":"source/_posts/graphql.md","hash":"89cf554cba1910b0bf8ff13d3bd63816904409b8","modified":1593411744361},{"_id":"source/_posts/hexo.md","hash":"1010707ca170d6de3a91c19aed39e79558a0bc9a","modified":1593411744361},{"_id":"source/_posts/fresh.md","hash":"85c13de45df37ebca714079637d615946f59ed99","modified":1600865676982},{"_id":"source/_posts/gitInfo.md","hash":"2211ed79e405d66f08cd7208a1b746b888d8b142","modified":1640178532753},{"_id":"source/_posts/interview.md","hash":"9019e1d46a6e4a351bd9a98fb882e5f850312430","modified":1597717233076},{"_id":"source/_posts/http.md","hash":"28d5bc9990d48a4e8042208f1f1d5d42c753ebda","modified":1619781288275},{"_id":"source/_posts/k8s.md","hash":"241168a5356e424f14555a035eb3eb697c0c4a01","modified":1689307702949},{"_id":"source/_posts/html.md","hash":"f38249e9ae065de0690e86487cdce0173d52bd76","modified":1597746528648},{"_id":"source/_posts/investment.md","hash":"3bad26a6b24cc50a3b70120f7d6b98bc06f09dd3","modified":1610071452452},{"_id":"source/_posts/js.md","hash":"3ff6944cf3bbd8efefbeb90a72bfaa162ebfcd87","modified":1598234621383},{"_id":"source/_posts/loadtest.md","hash":"430b59a7b6776d600d67a6f6a0051bb0b758338f","modified":1593411744361},{"_id":"source/_posts/linux.md","hash":"f4feba47126a7d1f86a8e14ead36c2b5e9c96dac","modified":1640178532754},{"_id":"source/_posts/node.md","hash":"5e2f02b0f28a1a39be5a148a65b8b93a16c5772b","modified":1597312133556},{"_id":"source/_posts/overview.md","hash":"c92d2c08c9521e2a326d7664439a6e792f2e8c5a","modified":1731406296712},{"_id":"source/_posts/package.md","hash":"38acf8c207dcc74f7410074137864f4207bc18c2","modified":1731401434703},{"_id":"source/_posts/manage.md","hash":"f99befa2f1a1517c32cfdeeddd255652789ad2cc","modified":1619780272461},{"_id":"source/_posts/pattern.md","hash":"85ff08997e08d562362138ed63a097f5b4cf3de6","modified":1593411744362},{"_id":"source/_posts/pm2.md","hash":"c8fc02c5bff7e9dc766e78c52456ccb4f62b7426","modified":1593411744362},{"_id":"source/_posts/postgre.md","hash":"58288a0cd5d4992365d259d095a3b2a469667ff5","modified":1593411744362},{"_id":"source/_posts/security-1.md","hash":"1793db36167b31517ed2036a01f47c1cc236b1db","modified":1593411744362},{"_id":"source/_posts/stringencode.md","hash":"e7cc592266e91977e449f8c2bbad243d14ac1053","modified":1593411744363},{"_id":"source/_posts/regex.md","hash":"d010078bf537fa54171ec402dc2ba74cc0573f6b","modified":1640241460458},{"_id":"source/_posts/security.md","hash":"1e5e9232a3c8c5114dcc498a47d3347b1a4c3456","modified":1597888763888},{"_id":"source/_posts/typescript.md","hash":"7de3284a07085eb11fd734aaca0b65780f8f566f","modified":1593411744363},{"_id":"source/categories/index.md","hash":"d51db580efc1edca02813a5939b51abb9333c3c2","modified":1593411744364},{"_id":"source/tags/index.md","hash":"ba27695f1572dff9ace58e82b5a66c43840fe56c","modified":1593411744364},{"_id":"source/about/index.md","hash":"0330b10bfb69136ccca8e2b04cf01353c89d26cb","modified":1593411744363},{"_id":"source/_posts/vue.md","hash":"d1218f0fd180eb9b7e4200de014faf544ca5aa22","modified":1640178532757},{"_id":"source/_posts/stock.md","hash":"2d7b017337a85f5e3a948409ee900b2fec4eaf6c","modified":1625796413112},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1593411744370},{"_id":"source/_posts/webpack.md","hash":"f5b44b217688d97bd587174ef624540ca1e18709","modified":1597716854754},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1593411744369},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1593411744369},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1593411744369},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1593411744369},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1593411744369},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1593411744369},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1593411744365},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1593411744369},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1593411744365},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1593411744365},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1593411744365},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1593411744365},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1593411744365},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1593411744366},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1593411744370},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1593411744372},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1593411744379},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1593411744379},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1593411744379},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1593411744379},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1593411744379},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1593411744379},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1593411744381},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1593411744382},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1593411744381},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1593411744380},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1593411744381},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"dc5d69f1bef3499d7d56c03727e178f3d56b40f7","modified":1593411744366},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1593411744366},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1593411744366},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1593411744366},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1593411744366},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1593411744366},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"83a1ab12eb2a871bddf0620f611a97f13ebd731d","modified":1593411744367},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1593411744367},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1593411744367},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1593411744368},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1593411744368},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1593411744368},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1593411744368},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1593411744368},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1593411744368},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1593411744370},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1593411744370},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1593411744370},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1593411744370},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1593411744371},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1593411744371},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1593411744371},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1593411744371},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1593411744371},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1593411744371},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1593411744371},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1593411744372},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1593411744373},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1593411744377},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1593411744380},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1593411744380},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1593411744380},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1593411744380},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1593411744381},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1593411744380},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1593411744367},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1593411744367},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1593411744367},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1593411744367},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1593411744367},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1593411744368},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1593411744373},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1593411744377},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1593411744375},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1593411744378},{"_id":"source/asset/eventloop.jpg","hash":"397acedd56e075f1c7332b887ce2ee6a1897db68","modified":1593677432000},{"_id":"public/categories/index.html","hash":"9ce16b70594f8518bd2ba2764c72c8bfb7ebfd5b","modified":1731406344871},{"_id":"public/tags/index.html","hash":"090bf9d208675325140e7b592bcb0ceacd770c46","modified":1731406344871},{"_id":"public/2021/12/13/overview/index.html","hash":"bbf3aed68d1330d5f2c68f959155f3d65b4bd945","modified":1731406344871},{"_id":"public/about/index.html","hash":"88ed13bfd3cc365c6324d46abbe4910e42129690","modified":1731406344871},{"_id":"public/2021/11/18/k8s/index.html","hash":"6160324e3594771deb772002a06f8cd82f003fe1","modified":1731406344871},{"_id":"public/2021/07/09/stock/index.html","hash":"ee71e7e5c0b3a4a29347fd69ce72f45f83d090b5","modified":1731406344871},{"_id":"public/2021/01/08/investment/index.html","hash":"4f2a2bf32ad0b3fdd28b9e2faab7f2d153f95d64","modified":1731406344871},{"_id":"public/2021/04/30/manage/index.html","hash":"8bca3062b253ebaf265de68b9a685efa773de2e2","modified":1731406344871},{"_id":"public/2020/11/10/cloud/index.html","hash":"90cb072c104d6cd9550ee64a67ac24e3f7aed834","modified":1731406344871},{"_id":"public/2020/08/13/node/index.html","hash":"eff502022856424f25f7f19c8fd37d6357755d5d","modified":1731406344871},{"_id":"public/2020/08/13/html/index.html","hash":"03f796928d41822739985bad323bf375c4b42777","modified":1731406344871},{"_id":"public/2020/08/13/js/index.html","hash":"330204491b5f7c1b29241611b6a570a22a155e22","modified":1731406344871},{"_id":"public/2020/06/04/fresh/index.html","hash":"bc52eb33e4a51dcfd27e545eb52d00583196526c","modified":1731406344871},{"_id":"public/2019/12/10/stringencode/index.html","hash":"8baea2b3f1b8200729cd3dc54217e7aa83521302","modified":1731406344871},{"_id":"public/2019/12/09/security-1/index.html","hash":"d957a8ad7f75ee2eb16929b1d2dab4279a0cf2b3","modified":1731406344871},{"_id":"public/2019/11/08/encoding/index.html","hash":"7ccb8584a8f3d34c503a725fbcc43d3b749c3056","modified":1731406344871},{"_id":"public/2019/08/23/graphql/index.html","hash":"3ce4650b1c7bd31fd2b18339d0dbdc4b25c6ea91","modified":1731406344871},{"_id":"public/2019/07/02/linux/index.html","hash":"ac9f96ab3dfba7cc6d3d16b508cd40720a4c2d14","modified":1731406344871},{"_id":"public/2019/07/02/es8/index.html","hash":"9d02ae8a089223bd48820ab926b5e2a0343be629","modified":1731406344871},{"_id":"public/2019/06/28/es6/index.html","hash":"d51a41872b7321bf805bae966766e81606afab4d","modified":1731406344871},{"_id":"public/2019/06/24/cookies/index.html","hash":"eb1862a24d90d629874dc517b48f1b846dd6b9ba","modified":1731406344871},{"_id":"public/2019/06/24/regex/index.html","hash":"b5a66b00d714d908dbd0b0d65d813199bb69a360","modified":1731406344871},{"_id":"public/2019/05/14/http/index.html","hash":"824ec73b4685b8535256edf41fd9668342fc9702","modified":1731406344871},{"_id":"public/2019/05/07/css/index.html","hash":"aebd803208467f30eb0cae7bfcac9cec86d73b51","modified":1731406344871},{"_id":"public/2019/04/25/security/index.html","hash":"e95ce42e3bc43dee3c60dbc4b798168c8634bc82","modified":1731406344871},{"_id":"public/2019/02/25/typescript/index.html","hash":"3afc5cbe493e294d5e0cf7785d412592da1d0bb1","modified":1731406344871},{"_id":"public/2019/02/14/package/index.html","hash":"e0d26602112010fe136cf45df3ae69a001503315","modified":1731406344871},{"_id":"public/2019/02/20/gitInfo/index.html","hash":"18f7aeab4ded80e7b06c1faf5c14c53c44d44087","modified":1731406344871},{"_id":"public/2017/02/21/postgre/index.html","hash":"678225009b9f073907e3c446e21a4d4778c2156e","modified":1731406344871},{"_id":"public/2017/01/23/interview/index.html","hash":"e599dd59ea3dc4c4386522eca214e3672b7c35d0","modified":1731406344871},{"_id":"public/2017/01/19/vue/index.html","hash":"f651e709920e57882e9e72e166ab1e9ed4e30c18","modified":1731406344871},{"_id":"public/2017/01/17/webpack/index.html","hash":"53886eb7755c016f0dfb593af20ac0e0cb3a9024","modified":1731406344871},{"_id":"public/2017/01/17/loadtest/index.html","hash":"bbc7db7699587d168776c509a77e2400ffdd4ce6","modified":1731406344871},{"_id":"public/2016/12/29/pm2/index.html","hash":"66dfbd4558d5783fb13fcd500cea07ebc8d90192","modified":1731406344871},{"_id":"public/2016/12/26/pattern/index.html","hash":"343bbe8d26fa4bfea86ae78cd61487eb59ec9b24","modified":1731406344871},{"_id":"public/2016/12/25/eslint/index.html","hash":"4270955e888de203d25d7b8a8cd9ece5c507cc36","modified":1731406344871},{"_id":"public/2016/12/21/Let's Encrypt SSL/index.html","hash":"fc4e2e3191e5db67d48e355e8606a6999a067b8a","modified":1731406344871},{"_id":"public/2016/12/21/hexo/index.html","hash":"965fb8d82ed15d066e7198e8b8f00030c9f9a046","modified":1731406344871},{"_id":"public/2016/12/14/docker/index.html","hash":"58d26e344580a7f4b16425a090cbfdee804b23df","modified":1731406344871},{"_id":"public/tags/零碎/index.html","hash":"ee191139659243dd2094394d8986e22d3795e0dd","modified":1731406344871},{"_id":"public/tags/css/index.html","hash":"50711a167126615fc6e35066c081d3727f77a868","modified":1731406344871},{"_id":"public/tags/https/index.html","hash":"686dc05a04c73dc5fad984f105343193e3ecc2e7","modified":1731406344871},{"_id":"public/tags/docker/index.html","hash":"275f1368d8e71c93b140e551ee58334939d0ba3a","modified":1731406344871},{"_id":"public/tags/es/index.html","hash":"04d13ef3b7b07fd94193f98db2b3c3b645bb47b2","modified":1731406344871},{"_id":"public/tags/eslint/index.html","hash":"343eb3e8643200aff5017bb326b0eff972f4a071","modified":1731406344871},{"_id":"public/tags/hexo/index.html","hash":"ed51b0e82c1e422b442918f762a4af23c2c1e6e5","modified":1731406344871},{"_id":"public/tags/git/index.html","hash":"e12e86146a5005dedd70c88b51e2c79ea4a0bddf","modified":1731406344871},{"_id":"public/tags/interview/index.html","hash":"0525e79b361d91e8d866884d14c5f18324f8798e","modified":1731406344871},{"_id":"public/tags/http/index.html","hash":"92dc91ba4768f98cf3de0306bd5a25e2cf6763ba","modified":1731406344871},{"_id":"public/tags/k8s/index.html","hash":"838e763f3515ea3627287c70bec1e5a95f824843","modified":1731406344871},{"_id":"public/tags/html/index.html","hash":"7fe6aecb67fe3c77a911fcc0556bc78da8d20559","modified":1731406344871},{"_id":"public/tags/stock/index.html","hash":"5eeee3628ab62b2231f74636ea945a8ff9236e8f","modified":1731406344871},{"_id":"public/tags/loadtest/index.html","hash":"41dfa3c5d453fb971714cfa2f0657372cad03309","modified":1731406344871},{"_id":"public/tags/ops/index.html","hash":"e6967072e7c481d0917137f73743534311a5613a","modified":1731406344871},{"_id":"public/tags/node、egg/index.html","hash":"09d33bc5837c29ed9933f0ec53f98a98fdb7ede3","modified":1731406344871},{"_id":"public/tags/overview/index.html","hash":"8439fb9a00229ceef9725b1151c9cb41a82da5ae","modified":1731406344871},{"_id":"public/tags/useful-package/index.html","hash":"7ef418e1a16587518130bd94e58558d50837a4fb","modified":1731406344871},{"_id":"public/tags/pattern/index.html","hash":"ed7c975757dd5e016f64cd4698ab4644dafd8b7f","modified":1731406344871},{"_id":"public/tags/pm2/index.html","hash":"38ed6a85e32f5625eea67fcb925caa41327dc0ca","modified":1731406344871},{"_id":"public/tags/postgre/index.html","hash":"c2bd1014a7e5971c04c32dcc9ac1cab42e85eacc","modified":1731406344871},{"_id":"public/tags/web-安全/index.html","hash":"ec0a0a17a1f8f1badef11206620fdac0118de5b0","modified":1731406344871},{"_id":"public/tags/regex/index.html","hash":"425e68afdaaffa638d1cb3d34badcacfafc52812","modified":1731406344871},{"_id":"public/tags/encode-decode/index.html","hash":"1d4fda2bd9d83c05ce1dbd5d60787197ad5faf73","modified":1731406344871},{"_id":"public/tags/安全/index.html","hash":"ddcc628d2063f58e8ca0a428a10a42520da235ae","modified":1731406344871},{"_id":"public/tags/ts/index.html","hash":"bf1d3d1687830a35067551ac6735c47ff395a51e","modified":1731406344871},{"_id":"public/tags/vue-eventloop-js/index.html","hash":"b4960e554fe6409c06e644620220568296ad1e1e","modified":1731406344871},{"_id":"public/tags/webpack/index.html","hash":"7501cf4c5ef7ab52c998e1f12ae99a18d359ef43","modified":1731406344871},{"_id":"public/index.html","hash":"5e7cb8555212a3831950cf985b5a4dda42b513e9","modified":1731406344871},{"_id":"public/page/2/index.html","hash":"eef5aba2a16bbfd7c4d7270c788c2dfde8f16aa0","modified":1731406344871},{"_id":"public/page/3/index.html","hash":"754982945377eaab28ab65f6e8994a5cf452934a","modified":1731406344871},{"_id":"public/page/4/index.html","hash":"0cc01c34c736c90d353ffd4fd5d6ec7bb6259e41","modified":1731406344871},{"_id":"public/archives/index.html","hash":"77945545dde6cecd4fb8e69a3256280f70d8fd52","modified":1731406344871},{"_id":"public/archives/page/2/index.html","hash":"24ad281bee9c90e7b750aa4c7a0fb60e55c32065","modified":1731406344871},{"_id":"public/archives/page/3/index.html","hash":"986b3ee46a91cda17aa37614b6fa0372ed7714be","modified":1731406344871},{"_id":"public/archives/page/4/index.html","hash":"f0eaf678ff26791db649028027eb4d3f920048f1","modified":1731406344871},{"_id":"public/archives/2016/index.html","hash":"9fd87964e185edeff83b88ecc7116d9d8d01f96d","modified":1731406344871},{"_id":"public/archives/2016/12/index.html","hash":"49b2931ef39554a54a4c0c9cbc0192ba43f46065","modified":1731406344871},{"_id":"public/archives/2017/index.html","hash":"c320988e19f64d8eee56ba8477b285e777a97aab","modified":1731406344871},{"_id":"public/archives/2017/01/index.html","hash":"7e91169457b41bf3a31f6cad645ad58941ef2de6","modified":1731406344871},{"_id":"public/archives/2017/02/index.html","hash":"85b8af1f6634fedb9d6e6b3a356eb6d7758ab2f1","modified":1731406344871},{"_id":"public/archives/2019/index.html","hash":"11dcdd33416c2ed153eb4ddb80d61e43dc423f61","modified":1731406344871},{"_id":"public/archives/2019/page/2/index.html","hash":"51cf87f9133f8f486a10777fdaf05293e8d162f4","modified":1731406344871},{"_id":"public/archives/2019/02/index.html","hash":"287d8e10c55e671f06b695a64a7214b93d80b840","modified":1731406344871},{"_id":"public/archives/2019/04/index.html","hash":"fc5e909b5a27bb328c3b74c6cf1c6307543c6e81","modified":1731406344871},{"_id":"public/archives/2019/05/index.html","hash":"0a2d96292b0c1bd03513f841607215b60dc4b023","modified":1731406344871},{"_id":"public/archives/2019/06/index.html","hash":"aefa33c4342b8ced71317dee044eb8be37074498","modified":1731406344871},{"_id":"public/archives/2019/07/index.html","hash":"50050f10f38bd656551bf5e2ca7772f3beaa2ca8","modified":1731406344871},{"_id":"public/archives/2019/08/index.html","hash":"0bd782cda25491835c67f46e26e123c0c5f3cf56","modified":1731406344871},{"_id":"public/archives/2019/11/index.html","hash":"951ecf70fee16914841f75772a0262a3318b1fef","modified":1731406344871},{"_id":"public/archives/2019/12/index.html","hash":"7c1cb1acb4410813e94c2a49648f868be42dc1e2","modified":1731406344871},{"_id":"public/archives/2020/index.html","hash":"a5cc2a35c3db9f78bb34d9233d711ab3d836c00a","modified":1731406344871},{"_id":"public/archives/2020/08/index.html","hash":"e42563fe24ef61d98c41d2d40f593cb273e1dcc5","modified":1731406344871},{"_id":"public/archives/2020/06/index.html","hash":"cae316cc303595358eee3e1e5ebdb7a71151175c","modified":1731406344871},{"_id":"public/archives/2020/11/index.html","hash":"a781edaa9713fd253bdea2fcfa94f7c14479e9ee","modified":1731406344871},{"_id":"public/archives/2021/index.html","hash":"f23410b767a73f03d5d421b0ca8c5bb6e2ec1e53","modified":1731406344871},{"_id":"public/archives/2021/01/index.html","hash":"89328904245d1116d22e10678d6c413d5e873e2e","modified":1731406344871},{"_id":"public/archives/2021/04/index.html","hash":"ab6fe2dd6cddd87c44cb5ef7c758038fb4d924d9","modified":1731406344871},{"_id":"public/archives/2021/07/index.html","hash":"aa79298bc3b2c58837d891a5b57b6fef7771048b","modified":1731406344871},{"_id":"public/archives/2021/11/index.html","hash":"5e1a2cccddd234c511e6f50513c52a59bf7d9c16","modified":1731406344871},{"_id":"public/archives/2021/12/index.html","hash":"a189f6b4e7636f61493de2ba3d0145bc7c02b92c","modified":1731406344871},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1731406344871},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1731406344871},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1731406344871},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1731406344871},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1731406344871},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1731406344871},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1731406344871},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1731406344871},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1731406344871},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1731406344871},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1731406344871},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1731406344871},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1731406344871},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1731406344871},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1731406344871},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1731406344871},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1731406344871},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1731406344871},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1731406344871},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1731406344871},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1731406344871},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1731406344871},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1731406344871},{"_id":"public/asset/eventloop.jpg","hash":"397acedd56e075f1c7332b887ce2ee6a1897db68","modified":1731406344871},{"_id":"source/_posts/vite.md","hash":"1e3484e90173e375d715285cbe3ee6ad4dd1a7ce","modified":1654501971570},{"_id":"public/2022/06/06/vite/index.html","hash":"939382ab44755224626f8bd20de385f791076cfe","modified":1731406344871},{"_id":"public/archives/2022/index.html","hash":"7794aef79e37cec3092f1634abc5c0b95750fca3","modified":1731406344871},{"_id":"public/archives/2022/06/index.html","hash":"46259d6adfb25b172212d9fa5ca07a5ba11f927c","modified":1731406344871},{"_id":"source/_posts/yanbao.md","hash":"272352fe172e7dba7575b6721c15958db594c3cc","modified":1727319457950},{"_id":"public/2022/07/06/yanbao/index.html","hash":"6fa8e4c881d06841be2838588bf456c9615317dc","modified":1731406344871},{"_id":"public/archives/2022/07/index.html","hash":"3ec8fdb0925746ef2f7fd3d6de6c864afa2ae603","modified":1731406344871},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"618ea653d36f4444a0768513788a3f11beaddd16","modified":499162500000},{"_id":"node_modules/hexo-theme-next/package.json","hash":"4cdf28232ac2e9f5aca6aac62edb7569a5a2905b","modified":1727319823524},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":499162500000},{"_id":"node_modules/hexo-theme-next/README.md","hash":"56638e4978154a2f2a3f03ba84047b77b4a499cc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"66d8d7c5d4fe4458b0f1ce7e22b039198aa7eb1b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"fccbf2855392186e11daa8590121073594037b7b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"b813da5aed9d73b809133db4dfb08f90ec56afd9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"819c19eb9d142e5411f77cf3821d90f740ee114a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"8c2b6361f2de17561c1a3eede2bf47b4e2ba6ce5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"519239e35c3bda7b62b00ff5d34644f45b16fe6a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"6c82bfd2ec8248c248da701f091b548a7a133580","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"6c40aa438c658eb7f0cd0f6a759f18b43e7e8f93","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"ccf27b9249524b9fec1c15497b4353c8d1748c6c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"434b3e76a040a816169e1929657e4176e7b8164c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"3ce10d4cce94e3d4c482c2e18bb6f0f0ca380d3d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"f160e39943e39d7276da86adb47c3f08e5f22c7a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"30e03a1d4828259f82d46e64cbfe2955b6cff9a9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"226fccbe9c93265e65a300e3cb4bf6f9065cfdd7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"32d31cb5a155681c19f5ad0bb56dcb08429f93ef","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"263eddabfae40e54c0591e7baa8403ade8cdd56d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"f7c825cbff11885fa0dffa64824fd00e505d6a8d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"0ba2bf0266f1fcb8edbd961869f8521b29685c56","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"aff4613756456be26415febc668860fdab8d33c5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"200088bfd042f5304b2a04befab0829148845e0e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"57eca76cfbbe9a65bc2a77f1deebf003ed335673","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"3d8591bb92df77ceb9d5b07bc76da1ca89e5bd76","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"314805f0186e9f6208c845f0757fdb7891c540f6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"c8b59b404f5d2a0b3b5cd1a6c9a10af5f30e43b5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"ec996d0673f766167c86df0966e9da1ae036e103","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"64e4024376b51fe81be7ad80235abdf0a83853bd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"62faf6b0b0020066a0dec1f0123cf1fee3198e7e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"9794bd4fc6a458322949d6a0ade89cd1026bc69f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"163c7441d777bee87042d475e6ce0fde199add28","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"be6cf377ae8f4a01ee76f9b3014e74161d4d5d17","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"33a82207a15aad9d1c8fb2251f9e3eba50452932","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"d757768a58743601d0d84158ba955eb15d4c3c01","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"979486a41a81f2a9fd8b0b87c4f87d6416c68c7d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"ff642130354a0b3be0d708c43044ed4d710b5e83","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"759e582d34d08e3386c55d87a835a9523608619f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"670fc109b56a010b166b86b616823a1aae97a738","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"f2328caa94645836e06fb39a6a9c9a84ed68a8b5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":499162500000},{"_id":"public/search.xml","hash":"4d39fd4b97cc40ba178e2e1091f590478664bbe6","modified":1731406344871},{"_id":"source/_posts/image-2.png","hash":"983b1949e849e1e32924029cc3e080052478cf69","modified":1669003636163},{"_id":"source/_posts/image-1.png","hash":"006ec758b8c5594f210af91863ff89cbbe533f3c","modified":1668915903534},{"_id":"source/_posts/image.png","hash":"15aa9c7837bd3423d6607e04f7667adb9cc7be21","modified":1668914766971},{"_id":"source/_posts/yuyan.md","hash":"99e6b4eb0d5fc6b86a564b075313348d4ce086b3","modified":1727319457951},{"_id":"source/_posts/image-3.png","hash":"ed7a531f2fc2fd8eea4efe36c877c5c3370f6f0c","modified":1673402207816},{"_id":"source/_posts/image-4.png","hash":"c83992b1c93d032b47f7b400aace62f89da00f6c","modified":1673488510453},{"_id":"public/2022/12/28/yuyan/index.html","hash":"3c8bd636b12b7b403d15aa09f4b9114e8fb95332","modified":1731406344871},{"_id":"public/archives/2022/12/index.html","hash":"b2c5031e7490be11519ee6f63ac19fde895b50d7","modified":1731406344871},{"_id":"source/_posts/yanbao1.md","hash":"696e1bd9f3b2a05bbf2f5f249dc7b0b0ced38fa8","modified":1729999563320},{"_id":"source/_posts/image-12.png","hash":"74bcc30608e38402f7272726b05ce8c5f22ae20f","modified":1727319457936},{"_id":"source/_posts/image-13.png","hash":"5233dce3768793a5849112cf57ad027f25f71959","modified":1727319457936},{"_id":"source/_posts/image-11.png","hash":"86e20932eca223e5f85c7bd7df3b22e572875284","modified":1727319457935},{"_id":"source/_posts/image-5.png","hash":"e534f951d120d3c6ca01b63137c927743e5438df","modified":1727319457940},{"_id":"source/_posts/image-9.png","hash":"861213a83ad78e8c8634f0f9b095785fe1e2c54d","modified":1727319457948},{"_id":"source/_posts/image-7.png","hash":"494ebc9fc397d2c9296c4454dbfb700361d4f0f3","modified":1727319457945},{"_id":"source/_posts/image-8.png","hash":"3396c56e78c5c4d318d0fc0a0cd6271b3545f32b","modified":1727319457946},{"_id":"source/_posts/image-6.png","hash":"ecd8c48c26810efaeffaad6982d5e788abab3acd","modified":1727319457944},{"_id":"source/_posts/image-10.png","hash":"a6a79056f5a4fa8179c6716c1fc484ef2a42ccce","modified":1727319457934},{"_id":"public/archives/2024/index.html","hash":"efc186ed9e7be37deb4204af1326883bb2e10b81","modified":1731406344871},{"_id":"public/archives/2024/01/index.html","hash":"2d210bd571aa77f4291495dbe1f5c630e0c4089e","modified":1731406344871},{"_id":"public/2024/01/28/yanbao1/index.html","hash":"39d5a6b0407686027283c3da056067315cd8a27b","modified":1731406344871},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1731406344871},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1731406344871},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1731406344871},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1731406344871},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1731406344871},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1731406344871},{"_id":"public/css/noscript.css","hash":"ec89b3425fbce20863d554c6fd495ea29c3c303d","modified":1731406344871},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1731406344871},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1731406344871},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1731406344871},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1731406344871},{"_id":"public/js/motion.js","hash":"f7c825cbff11885fa0dffa64824fd00e505d6a8d","modified":1731406344871},{"_id":"public/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1731406344871},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1731406344871},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1731406344871},{"_id":"public/js/utils.js","hash":"200088bfd042f5304b2a04befab0829148845e0e","modified":1731406344871},{"_id":"public/js/schemes/muse.js","hash":"9794bd4fc6a458322949d6a0ade89cd1026bc69f","modified":1731406344871},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1731406344871},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1731406344871},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1731406344871},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1731406344871},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1731406344871},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1731406344871},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1731406344871},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1731406344871},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1731406344871},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1731406344871},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1731406344871},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1731406344871},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1731406344871},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1731406344871},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"33a82207a15aad9d1c8fb2251f9e3eba50452932","modified":1731406344871},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1731406344871},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1731406344871},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1731406344871},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1731406344871},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1731406344871},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1731406344871},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1731406344871},{"_id":"public/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1731406344871},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1731406344871},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1731406344871},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1731406344871},{"_id":"public/css/main.css","hash":"614f635a8ba76c8b46bd39357552953ad0b65e97","modified":1731406344871}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2017-01-19T08:52:48.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-01-19 16:52:48\ntype: \"categories\"\n---\n","updated":"2020-06-29T06:22:24.364Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckzf5sdzu0012yy8k9vt66ykq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-01-19T08:53:34.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-01-19 16:53:34\ntype: \"tags\"\n---\n","updated":"2020-06-29T06:22:24.364Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckzf5sdzv0014yy8k1yzy6ze3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2017-01-19T08:44:34.000Z","_content":"adfsdfffffffff","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-01-19 16:44:34\n---\nadfsdfffffffff","updated":"2020-06-29T06:22:24.363Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckzf5sdzx0017yy8k8ej38z7t","content":"<p>adfsdfffffffff</p>\n","site":{"data":{}},"excerpt":"","more":"<p>adfsdfffffffff</p>\n"}],"Post":[{"title":"cookies","date":"2019-06-24T06:40:18.000Z","_content":"\n:smile:\n### 发版\n1. 发布阶段：更新chagelog ,打 git tag 。\n\n### react \n1.  useMemo是将父组件传递给子组件的值缓存起来,useMemo 是在DOM渲染之前执行的\n2.  usecallback是将父组件传给子组件的方法给缓存下来\n3.  dva   connect Model 的组件通过 props 可以访问到 dispatch，可以调用 Model 中的 Reducer 或者 Effects\n4.  向主进程发送消息   ipcRenderer.send(channel, ...args)\n5.  webContens.send  向渲染进程发送消息 \n### word\n1. analogy 类比 [əˈnælədʒi]\n1. pache [ə’pætʃɪ]\n2. deflate 放气，紧缩\n3. Sanitize 消毒，净化\n4. access [‘ækses]\n5. Azure [‘æʒə]\n6. avatar [‘ævətɑː]\n7. ASCII [‘æski]\n8. archive [‘ɑːkaɪv]\n9. debt  [det]\n10. typical [‘tɪpɪkl]  \n11. parameter [pə’ræmɪtə] \n12. integer  [‘ɪntɪdʒə]\n13. height [haɪt]\n14. shallow  肤浅的 \n15. tenant  租户，房客\n16. coerce [kəʊˈɜːs]  强制 \n17. indeterminate  [ˌɪndɪˈtɜːrmɪnət]\n18. sup 一口；饮酒  \n19. crumb 面包屑   \n20. prune  修剪；减少；\n21. Unify 整合、统一 \n22. contiguous  kənˈtɪɡjuəs\n \n23. 无论你使用的是解释型语言(JavaScript、Python、Ruby)还是编译型语言(c#、Java、Rust)，都有一个共同的部分:将源代码作为纯文本解析为 抽象语法树(abstract syntax tree, AST) 的数据结构。\n\n24. AST 不仅以结构化的方式显示源代码，而且在语义分析中扮演着重要角色。在语义分析中，编译器验证程序和语言元素的语法使用是否正确。之后，使用 AST 来生成实际的字节码或者机器码。\n\n25. 要应用更新，Virtual DOM核心功能将发挥作用，即 协调算法，它的工作是提供最优的解决方案来解决以前和当前虚拟DOM 状态之间的差异。\n\n## opentracing\n1. Opentracing 的carrier 有多种实现，tracer 的inject（客户端进程） 和 extract（服务端进程），这样 客户端和服务端 就可以拥有相同的trace context。\n1. Server 首先extract check 有没有注入的span，没有的话启动一个新的span\n\n## mac\n1. Mac 设置path  export PATH=$PATH:\n1.  查看端口占用：lsof -i:3001\n1. export http_proxy=\"http://localhost:8899\"\n1. Grep -A 5 显示后面5行信息\n1. Mac 配置：\n   Oh my zsh \n   brew install autojump  \n   \n   git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n\n   git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n   plugins=(\n     git zsh-autosuggestions autojump zsh-syntax-highlighting\n   )\n   \n   \n## npm\n1. npm config edit\n1. npm config set init.author.name \"ryansecreat\"\n1. npm config set init.email='chenjingnan@jd.com’\n1. npm config set init.license \"MIT\"\n1. npm start --prefix path/to/your/folder   //指定目录下运行\n1. npm repo   浏览器中打开repo\n1. npm publish --registry=http://registry.npmjs.org  --registry=https://registry.npm.taobao.org\n1. npm outdated  查看过时package\n1. npm publish --tag=beta.\n1. npm version patch -m \"Upgrade to %s for reasons”\n1. npm dist-tag add n-n-n-n@1.0.2-1 latest  将某个预发版本更新为最新   \n1. npm ping [--registry <registry>]\n1. Npm install  --unsafe-perm\n \n\n  \n### vim \nj: 下移一行；\n\nk: 上移一行；\n\nw: 前移一个单词，光标停在下一个单词开头；\n\ne: 前移一个单词，光标停在下一个单词末尾；\n\n0: 移动到行首。\n\n$: 移动到行尾。\n\nn|: 把光标移到递n列上\n\nzz: 将当前行移动到屏幕中央。\n\no: 在下面新建一行插入；\n\nO: 在上面新建一行插入；\n\na: 在光标后插入；\n\nA: 在当前行最后插入；\n\nu: 取消一(n)个改动。\n\nctrl + r: 重做最后的改动。","source":"_posts/cookies.md","raw":"---\ntitle: cookies\ndate: 2019-06-24 14:40:18\ntags: 零碎\n---\n\n:smile:\n### 发版\n1. 发布阶段：更新chagelog ,打 git tag 。\n\n### react \n1.  useMemo是将父组件传递给子组件的值缓存起来,useMemo 是在DOM渲染之前执行的\n2.  usecallback是将父组件传给子组件的方法给缓存下来\n3.  dva   connect Model 的组件通过 props 可以访问到 dispatch，可以调用 Model 中的 Reducer 或者 Effects\n4.  向主进程发送消息   ipcRenderer.send(channel, ...args)\n5.  webContens.send  向渲染进程发送消息 \n### word\n1. analogy 类比 [əˈnælədʒi]\n1. pache [ə’pætʃɪ]\n2. deflate 放气，紧缩\n3. Sanitize 消毒，净化\n4. access [‘ækses]\n5. Azure [‘æʒə]\n6. avatar [‘ævətɑː]\n7. ASCII [‘æski]\n8. archive [‘ɑːkaɪv]\n9. debt  [det]\n10. typical [‘tɪpɪkl]  \n11. parameter [pə’ræmɪtə] \n12. integer  [‘ɪntɪdʒə]\n13. height [haɪt]\n14. shallow  肤浅的 \n15. tenant  租户，房客\n16. coerce [kəʊˈɜːs]  强制 \n17. indeterminate  [ˌɪndɪˈtɜːrmɪnət]\n18. sup 一口；饮酒  \n19. crumb 面包屑   \n20. prune  修剪；减少；\n21. Unify 整合、统一 \n22. contiguous  kənˈtɪɡjuəs\n \n23. 无论你使用的是解释型语言(JavaScript、Python、Ruby)还是编译型语言(c#、Java、Rust)，都有一个共同的部分:将源代码作为纯文本解析为 抽象语法树(abstract syntax tree, AST) 的数据结构。\n\n24. AST 不仅以结构化的方式显示源代码，而且在语义分析中扮演着重要角色。在语义分析中，编译器验证程序和语言元素的语法使用是否正确。之后，使用 AST 来生成实际的字节码或者机器码。\n\n25. 要应用更新，Virtual DOM核心功能将发挥作用，即 协调算法，它的工作是提供最优的解决方案来解决以前和当前虚拟DOM 状态之间的差异。\n\n## opentracing\n1. Opentracing 的carrier 有多种实现，tracer 的inject（客户端进程） 和 extract（服务端进程），这样 客户端和服务端 就可以拥有相同的trace context。\n1. Server 首先extract check 有没有注入的span，没有的话启动一个新的span\n\n## mac\n1. Mac 设置path  export PATH=$PATH:\n1.  查看端口占用：lsof -i:3001\n1. export http_proxy=\"http://localhost:8899\"\n1. Grep -A 5 显示后面5行信息\n1. Mac 配置：\n   Oh my zsh \n   brew install autojump  \n   \n   git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n\n   git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n   plugins=(\n     git zsh-autosuggestions autojump zsh-syntax-highlighting\n   )\n   \n   \n## npm\n1. npm config edit\n1. npm config set init.author.name \"ryansecreat\"\n1. npm config set init.email='chenjingnan@jd.com’\n1. npm config set init.license \"MIT\"\n1. npm start --prefix path/to/your/folder   //指定目录下运行\n1. npm repo   浏览器中打开repo\n1. npm publish --registry=http://registry.npmjs.org  --registry=https://registry.npm.taobao.org\n1. npm outdated  查看过时package\n1. npm publish --tag=beta.\n1. npm version patch -m \"Upgrade to %s for reasons”\n1. npm dist-tag add n-n-n-n@1.0.2-1 latest  将某个预发版本更新为最新   \n1. npm ping [--registry <registry>]\n1. Npm install  --unsafe-perm\n \n\n  \n### vim \nj: 下移一行；\n\nk: 上移一行；\n\nw: 前移一个单词，光标停在下一个单词开头；\n\ne: 前移一个单词，光标停在下一个单词末尾；\n\n0: 移动到行首。\n\n$: 移动到行尾。\n\nn|: 把光标移到递n列上\n\nzz: 将当前行移动到屏幕中央。\n\no: 在下面新建一行插入；\n\nO: 在上面新建一行插入；\n\na: 在光标后插入；\n\nA: 在当前行最后插入；\n\nu: 取消一(n)个改动。\n\nctrl + r: 重做最后的改动。","slug":"cookies","published":1,"updated":"2021-04-30T11:12:40.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5sdyt0000yy8kmd769rti","content":"<p>:smile:</p>\n<h3 id=\"发版\"><a href=\"#发版\" class=\"headerlink\" title=\"发版\"></a>发版</h3><ol>\n<li>发布阶段：更新chagelog ,打 git tag 。</li>\n</ol>\n<h3 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h3><ol>\n<li>useMemo是将父组件传递给子组件的值缓存起来,useMemo 是在DOM渲染之前执行的</li>\n<li>usecallback是将父组件传给子组件的方法给缓存下来</li>\n<li>dva   connect Model 的组件通过 props 可以访问到 dispatch，可以调用 Model 中的 Reducer 或者 Effects</li>\n<li>向主进程发送消息   ipcRenderer.send(channel, …args)</li>\n<li>webContens.send  向渲染进程发送消息 <h3 id=\"word\"><a href=\"#word\" class=\"headerlink\" title=\"word\"></a>word</h3></li>\n<li>analogy 类比 [əˈnælədʒi]</li>\n<li>pache [ə’pætʃɪ]</li>\n<li>deflate 放气，紧缩</li>\n<li>Sanitize 消毒，净化</li>\n<li>access [‘ækses]</li>\n<li>Azure [‘æʒə]</li>\n<li>avatar [‘ævətɑː]</li>\n<li>ASCII [‘æski]</li>\n<li>archive [‘ɑːkaɪv]</li>\n<li>debt  [det]</li>\n<li>typical [‘tɪpɪkl]  </li>\n<li>parameter [pə’ræmɪtə] </li>\n<li>integer  [‘ɪntɪdʒə]</li>\n<li>height [haɪt]</li>\n<li>shallow  肤浅的 </li>\n<li>tenant  租户，房客</li>\n<li>coerce [kəʊˈɜːs]  强制 </li>\n<li>indeterminate  [ˌɪndɪˈtɜːrmɪnət]</li>\n<li>sup 一口；饮酒  </li>\n<li>crumb 面包屑   </li>\n<li>prune  修剪；减少；</li>\n<li>Unify 整合、统一 </li>\n<li><p>contiguous  kənˈtɪɡjuəs</p>\n</li>\n<li><p>无论你使用的是解释型语言(JavaScript、Python、Ruby)还是编译型语言(c#、Java、Rust)，都有一个共同的部分:将源代码作为纯文本解析为 抽象语法树(abstract syntax tree, AST) 的数据结构。</p>\n</li>\n<li><p>AST 不仅以结构化的方式显示源代码，而且在语义分析中扮演着重要角色。在语义分析中，编译器验证程序和语言元素的语法使用是否正确。之后，使用 AST 来生成实际的字节码或者机器码。</p>\n</li>\n<li><p>要应用更新，Virtual DOM核心功能将发挥作用，即 协调算法，它的工作是提供最优的解决方案来解决以前和当前虚拟DOM 状态之间的差异。</p>\n</li>\n</ol>\n<h2 id=\"opentracing\"><a href=\"#opentracing\" class=\"headerlink\" title=\"opentracing\"></a>opentracing</h2><ol>\n<li>Opentracing 的carrier 有多种实现，tracer 的inject（客户端进程） 和 extract（服务端进程），这样 客户端和服务端 就可以拥有相同的trace context。</li>\n<li>Server 首先extract check 有没有注入的span，没有的话启动一个新的span</li>\n</ol>\n<h2 id=\"mac\"><a href=\"#mac\" class=\"headerlink\" title=\"mac\"></a>mac</h2><ol>\n<li>Mac 设置path  export PATH=$PATH:</li>\n<li>查看端口占用：lsof -i:3001</li>\n<li>export http_proxy=”<a href=\"http://localhost:8899&quot;\" target=\"_blank\" rel=\"noopener\">http://localhost:8899&quot;</a></li>\n<li>Grep -A 5 显示后面5行信息</li>\n<li><p>Mac 配置：<br>Oh my zsh<br>brew install autojump  </p>\n<p>git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</p>\n<p>git clone <a href=\"https://github.com/zsh-users/zsh-syntax-highlighting.git\" target=\"_blank\" rel=\"noopener\">https://github.com/zsh-users/zsh-syntax-highlighting.git</a> ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</p>\n<p>plugins=(<br>  git zsh-autosuggestions autojump zsh-syntax-highlighting<br>)</p>\n</li>\n</ol>\n<h2 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h2><ol>\n<li>npm config edit</li>\n<li>npm config set init.author.name “ryansecreat”</li>\n<li>npm config set <a href=\"mailto:init.email=&#39;chenjingnan@jd.com\" target=\"_blank\" rel=\"noopener\">init.email=&#39;chenjingnan@jd.com</a>’</li>\n<li>npm config set init.license “MIT”</li>\n<li>npm start –prefix path/to/your/folder   //指定目录下运行</li>\n<li>npm repo   浏览器中打开repo</li>\n<li>npm publish –registry=<a href=\"http://registry.npmjs.org\" target=\"_blank\" rel=\"noopener\">http://registry.npmjs.org</a>  –registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a></li>\n<li>npm outdated  查看过时package</li>\n<li>npm publish –tag=beta.</li>\n<li>npm version patch -m “Upgrade to %s for reasons”</li>\n<li>npm dist-tag add <a href=\"mailto:n-n-n-n@1.0.2-1\" target=\"_blank\" rel=\"noopener\">n-n-n-n@1.0.2-1</a> latest  将某个预发版本更新为最新   </li>\n<li>npm ping [–registry <registry>]</registry></li>\n<li>Npm install  –unsafe-perm</li>\n</ol>\n<h3 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a>vim</h3><p>j: 下移一行；</p>\n<p>k: 上移一行；</p>\n<p>w: 前移一个单词，光标停在下一个单词开头；</p>\n<p>e: 前移一个单词，光标停在下一个单词末尾；</p>\n<p>0: 移动到行首。</p>\n<p>$: 移动到行尾。</p>\n<p>n|: 把光标移到递n列上</p>\n<p>zz: 将当前行移动到屏幕中央。</p>\n<p>o: 在下面新建一行插入；</p>\n<p>O: 在上面新建一行插入；</p>\n<p>a: 在光标后插入；</p>\n<p>A: 在当前行最后插入；</p>\n<p>u: 取消一(n)个改动。</p>\n<p>ctrl + r: 重做最后的改动。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>:smile:</p>\n<h3 id=\"发版\"><a href=\"#发版\" class=\"headerlink\" title=\"发版\"></a>发版</h3><ol>\n<li>发布阶段：更新chagelog ,打 git tag 。</li>\n</ol>\n<h3 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h3><ol>\n<li>useMemo是将父组件传递给子组件的值缓存起来,useMemo 是在DOM渲染之前执行的</li>\n<li>usecallback是将父组件传给子组件的方法给缓存下来</li>\n<li>dva   connect Model 的组件通过 props 可以访问到 dispatch，可以调用 Model 中的 Reducer 或者 Effects</li>\n<li>向主进程发送消息   ipcRenderer.send(channel, …args)</li>\n<li>webContens.send  向渲染进程发送消息 <h3 id=\"word\"><a href=\"#word\" class=\"headerlink\" title=\"word\"></a>word</h3></li>\n<li>analogy 类比 [əˈnælədʒi]</li>\n<li>pache [ə’pætʃɪ]</li>\n<li>deflate 放气，紧缩</li>\n<li>Sanitize 消毒，净化</li>\n<li>access [‘ækses]</li>\n<li>Azure [‘æʒə]</li>\n<li>avatar [‘ævətɑː]</li>\n<li>ASCII [‘æski]</li>\n<li>archive [‘ɑːkaɪv]</li>\n<li>debt  [det]</li>\n<li>typical [‘tɪpɪkl]  </li>\n<li>parameter [pə’ræmɪtə] </li>\n<li>integer  [‘ɪntɪdʒə]</li>\n<li>height [haɪt]</li>\n<li>shallow  肤浅的 </li>\n<li>tenant  租户，房客</li>\n<li>coerce [kəʊˈɜːs]  强制 </li>\n<li>indeterminate  [ˌɪndɪˈtɜːrmɪnət]</li>\n<li>sup 一口；饮酒  </li>\n<li>crumb 面包屑   </li>\n<li>prune  修剪；减少；</li>\n<li>Unify 整合、统一 </li>\n<li><p>contiguous  kənˈtɪɡjuəs</p>\n</li>\n<li><p>无论你使用的是解释型语言(JavaScript、Python、Ruby)还是编译型语言(c#、Java、Rust)，都有一个共同的部分:将源代码作为纯文本解析为 抽象语法树(abstract syntax tree, AST) 的数据结构。</p>\n</li>\n<li><p>AST 不仅以结构化的方式显示源代码，而且在语义分析中扮演着重要角色。在语义分析中，编译器验证程序和语言元素的语法使用是否正确。之后，使用 AST 来生成实际的字节码或者机器码。</p>\n</li>\n<li><p>要应用更新，Virtual DOM核心功能将发挥作用，即 协调算法，它的工作是提供最优的解决方案来解决以前和当前虚拟DOM 状态之间的差异。</p>\n</li>\n</ol>\n<h2 id=\"opentracing\"><a href=\"#opentracing\" class=\"headerlink\" title=\"opentracing\"></a>opentracing</h2><ol>\n<li>Opentracing 的carrier 有多种实现，tracer 的inject（客户端进程） 和 extract（服务端进程），这样 客户端和服务端 就可以拥有相同的trace context。</li>\n<li>Server 首先extract check 有没有注入的span，没有的话启动一个新的span</li>\n</ol>\n<h2 id=\"mac\"><a href=\"#mac\" class=\"headerlink\" title=\"mac\"></a>mac</h2><ol>\n<li>Mac 设置path  export PATH=$PATH:</li>\n<li>查看端口占用：lsof -i:3001</li>\n<li>export http_proxy=”<a href=\"http://localhost:8899&quot;\" target=\"_blank\" rel=\"noopener\">http://localhost:8899&quot;</a></li>\n<li>Grep -A 5 显示后面5行信息</li>\n<li><p>Mac 配置：<br>Oh my zsh<br>brew install autojump  </p>\n<p>git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</p>\n<p>git clone <a href=\"https://github.com/zsh-users/zsh-syntax-highlighting.git\" target=\"_blank\" rel=\"noopener\">https://github.com/zsh-users/zsh-syntax-highlighting.git</a> ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</p>\n<p>plugins=(<br>  git zsh-autosuggestions autojump zsh-syntax-highlighting<br>)</p>\n</li>\n</ol>\n<h2 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h2><ol>\n<li>npm config edit</li>\n<li>npm config set init.author.name “ryansecreat”</li>\n<li>npm config set <a href=\"mailto:init.email=&#39;chenjingnan@jd.com\" target=\"_blank\" rel=\"noopener\">init.email=&#39;chenjingnan@jd.com</a>’</li>\n<li>npm config set init.license “MIT”</li>\n<li>npm start –prefix path/to/your/folder   //指定目录下运行</li>\n<li>npm repo   浏览器中打开repo</li>\n<li>npm publish –registry=<a href=\"http://registry.npmjs.org\" target=\"_blank\" rel=\"noopener\">http://registry.npmjs.org</a>  –registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a></li>\n<li>npm outdated  查看过时package</li>\n<li>npm publish –tag=beta.</li>\n<li>npm version patch -m “Upgrade to %s for reasons”</li>\n<li>npm dist-tag add <a href=\"mailto:n-n-n-n@1.0.2-1\" target=\"_blank\" rel=\"noopener\">n-n-n-n@1.0.2-1</a> latest  将某个预发版本更新为最新   </li>\n<li>npm ping [–registry <registry>]</registry></li>\n<li>Npm install  –unsafe-perm</li>\n</ol>\n<h3 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a>vim</h3><p>j: 下移一行；</p>\n<p>k: 上移一行；</p>\n<p>w: 前移一个单词，光标停在下一个单词开头；</p>\n<p>e: 前移一个单词，光标停在下一个单词末尾；</p>\n<p>0: 移动到行首。</p>\n<p>$: 移动到行尾。</p>\n<p>n|: 把光标移到递n列上</p>\n<p>zz: 将当前行移动到屏幕中央。</p>\n<p>o: 在下面新建一行插入；</p>\n<p>O: 在上面新建一行插入；</p>\n<p>a: 在光标后插入；</p>\n<p>A: 在当前行最后插入；</p>\n<p>u: 取消一(n)个改动。</p>\n<p>ctrl + r: 重做最后的改动。</p>\n"},{"title":"Let's Encrypt","date":"2016-12-21T03:47:39.000Z","_content":"\n### 使用Let's Encrypt生成免费SSL证书\n\n官网：[Let's Encrypt](https://letsencrypt.org/)\n\nLet's Encrypt是由互联网安全研究小组（ISRG，一个公益组织）提供的服务。提供免费、自动化、开放的证书签发服务。\n\nLet's Encrypt颁发的证书有期是90天，需要在过期前进行续期，好在Let's Encrypt已经提供了自动续期的脚本。\n\n官网推荐使用[Certbot](https://certbot.eff.org/)工具来部署Https证书。在Certbot首页上选择Web服务器及服务器OS类型，我们在这里以Nginx + CentOS 6为例来说明。\n\n原文链接：[https://certbot.eff.org/#centos6-nginx](https://certbot.eff.org/#centos6-nginx)\n\n0. #### 生成证书\n\n\t0. 安装证书生成工具certbot-auto：\n\n\t\t```\n\t\twget https://dl.eff.org/certbot-auto\n\t\tchmod a+x certbot-auto\n\t\t```\n\t0. 安装依赖\n\n\t\t运行```./certbot-auto```，安装所有依赖项。过程中可能会提示```Virtualenv Command Not Found```，需要[安装pip](https://pip.pypa.io/en/stable/installing/)、virtualenv包：```pip install virtualenv```。\n\n\t0. 配置Nginx\n\t\t\n\t\t为需要配置https的站点添加以下配置，将访问/.well-known的请求指向本地目录。Let's Encrypt在生成证书的过程中，会在/var/www/www.xxx.com/.well-known目录生成一个临时文件，并且会访问类似于http://www.xxx.com/.well-known/acme-challenge/HGr8U1IeTW4kY_Z6UIyaakzOkyQgPr_7ArlLgtZE8SX的url，来检查域名配置是否有效。\n\n\t\t添加以下配置，并重启Nginx：nginx -s reload，如果reload不生效，可以试试restart。\n\t\t\n\t\t```\n\t\tserver {\n\n\t\t\t...\t\t\t\n\n\t\t\tlocation /.well-known {\n\t        \talias /var/www/www.xxx.com/.well-known;\n\t    \t}\n\n\t\t\t...\n\n\t\t}\n\t\t```\n\n\t\t*即使证书生成之后，也需要保留Nginx的这一个配置，因为证书的续期还需要这一个配置。*\n\n\t0. 通过向导生成证书\n\n\t\t运行```./certbot-auto certonly```，会通过向导方式一步一步来生成证书。过程中间会用到上一步在Nginx中配置的本地目录。\n\n\t\t**对证书生成过程和原理比较熟悉的话，可以不使用向导方式，直接使用certbot-auto命令```./certbot-auto certonly --webroot -w /var/www/www.xxx.com -d xxx.com -d www.xxx.com -w /var/www/thing -d thing.is -d m.thing.is```可以快速高效地生成证书**\n\n\t\t生成的证书默认在/etc/letsencrypt/live/www.xxx.com/目录。\n\n0. #### 配置Nginx使用证书\n\n\t添加以下配置，并重启Nginx：```nginx -s reload```，如果reload不生效，可以试试restart。\n\n\t```\n\tserver {\n\n\t\t...\n\t\tlisten 443;\n\n\t    ssl on;\n        ssl_stapling_verify on;\n        ssl_certificate         /etc/letsencrypt/live/www.xxx.com/fullchain.pem;\n        ssl_certificate_key     /etc/letsencrypt/live/www.xxx.com/privkey.pem;\n\n\t\t...\n\n\t}\n\t```\n\n0. #### 检查证书的有效性\n\n\t打开浏览器，检查证书的有效性。\n\n0. #### 证书续期\n\n\tLet's Encrypt颁发的证书有期是90天，需要在过期前进行续期，好在Let's Encrypt已经提供了自动续期的脚本。\n\n\t官网说明，可以一天调用两次，如果检测到证书不需要更新，是什么都不做的，以减少意外造成的故障。\n\n\t先运行```certbot-auto renew --dry-run```命令检查证书自动续期是否正常，如果正常，将```certbot-auto renew --quiet```命令添加到系统的计划任务cron中，就可以实现证书自动续期了。\n\n\t```\n\t01 1 * * * ./path/to/certbot-auto renew --quiet\n\t```\n\t表示每天的1点1分自动执行续期脚本。\n\n\n\n\n\n","source":"_posts/Let's Encrypt SSL.md","raw":"---\ntitle: Let's Encrypt\ndate: 2016-12-21 11:47:39\ntags: https\n---\n\n### 使用Let's Encrypt生成免费SSL证书\n\n官网：[Let's Encrypt](https://letsencrypt.org/)\n\nLet's Encrypt是由互联网安全研究小组（ISRG，一个公益组织）提供的服务。提供免费、自动化、开放的证书签发服务。\n\nLet's Encrypt颁发的证书有期是90天，需要在过期前进行续期，好在Let's Encrypt已经提供了自动续期的脚本。\n\n官网推荐使用[Certbot](https://certbot.eff.org/)工具来部署Https证书。在Certbot首页上选择Web服务器及服务器OS类型，我们在这里以Nginx + CentOS 6为例来说明。\n\n原文链接：[https://certbot.eff.org/#centos6-nginx](https://certbot.eff.org/#centos6-nginx)\n\n0. #### 生成证书\n\n\t0. 安装证书生成工具certbot-auto：\n\n\t\t```\n\t\twget https://dl.eff.org/certbot-auto\n\t\tchmod a+x certbot-auto\n\t\t```\n\t0. 安装依赖\n\n\t\t运行```./certbot-auto```，安装所有依赖项。过程中可能会提示```Virtualenv Command Not Found```，需要[安装pip](https://pip.pypa.io/en/stable/installing/)、virtualenv包：```pip install virtualenv```。\n\n\t0. 配置Nginx\n\t\t\n\t\t为需要配置https的站点添加以下配置，将访问/.well-known的请求指向本地目录。Let's Encrypt在生成证书的过程中，会在/var/www/www.xxx.com/.well-known目录生成一个临时文件，并且会访问类似于http://www.xxx.com/.well-known/acme-challenge/HGr8U1IeTW4kY_Z6UIyaakzOkyQgPr_7ArlLgtZE8SX的url，来检查域名配置是否有效。\n\n\t\t添加以下配置，并重启Nginx：nginx -s reload，如果reload不生效，可以试试restart。\n\t\t\n\t\t```\n\t\tserver {\n\n\t\t\t...\t\t\t\n\n\t\t\tlocation /.well-known {\n\t        \talias /var/www/www.xxx.com/.well-known;\n\t    \t}\n\n\t\t\t...\n\n\t\t}\n\t\t```\n\n\t\t*即使证书生成之后，也需要保留Nginx的这一个配置，因为证书的续期还需要这一个配置。*\n\n\t0. 通过向导生成证书\n\n\t\t运行```./certbot-auto certonly```，会通过向导方式一步一步来生成证书。过程中间会用到上一步在Nginx中配置的本地目录。\n\n\t\t**对证书生成过程和原理比较熟悉的话，可以不使用向导方式，直接使用certbot-auto命令```./certbot-auto certonly --webroot -w /var/www/www.xxx.com -d xxx.com -d www.xxx.com -w /var/www/thing -d thing.is -d m.thing.is```可以快速高效地生成证书**\n\n\t\t生成的证书默认在/etc/letsencrypt/live/www.xxx.com/目录。\n\n0. #### 配置Nginx使用证书\n\n\t添加以下配置，并重启Nginx：```nginx -s reload```，如果reload不生效，可以试试restart。\n\n\t```\n\tserver {\n\n\t\t...\n\t\tlisten 443;\n\n\t    ssl on;\n        ssl_stapling_verify on;\n        ssl_certificate         /etc/letsencrypt/live/www.xxx.com/fullchain.pem;\n        ssl_certificate_key     /etc/letsencrypt/live/www.xxx.com/privkey.pem;\n\n\t\t...\n\n\t}\n\t```\n\n0. #### 检查证书的有效性\n\n\t打开浏览器，检查证书的有效性。\n\n0. #### 证书续期\n\n\tLet's Encrypt颁发的证书有期是90天，需要在过期前进行续期，好在Let's Encrypt已经提供了自动续期的脚本。\n\n\t官网说明，可以一天调用两次，如果检测到证书不需要更新，是什么都不做的，以减少意外造成的故障。\n\n\t先运行```certbot-auto renew --dry-run```命令检查证书自动续期是否正常，如果正常，将```certbot-auto renew --quiet```命令添加到系统的计划任务cron中，就可以实现证书自动续期了。\n\n\t```\n\t01 1 * * * ./path/to/certbot-auto renew --quiet\n\t```\n\t表示每天的1点1分自动执行续期脚本。\n\n\n\n\n\n","slug":"Let's Encrypt SSL","published":1,"updated":"2020-06-29T06:22:24.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5sdyx0001yy8kr15yui10","content":"<h3 id=\"使用Let’s-Encrypt生成免费SSL证书\"><a href=\"#使用Let’s-Encrypt生成免费SSL证书\" class=\"headerlink\" title=\"使用Let’s Encrypt生成免费SSL证书\"></a>使用Let’s Encrypt生成免费SSL证书</h3><p>官网：<a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt</a></p>\n<p>Let’s Encrypt是由互联网安全研究小组（ISRG，一个公益组织）提供的服务。提供免费、自动化、开放的证书签发服务。</p>\n<p>Let’s Encrypt颁发的证书有期是90天，需要在过期前进行续期，好在Let’s Encrypt已经提供了自动续期的脚本。</p>\n<p>官网推荐使用<a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"noopener\">Certbot</a>工具来部署Https证书。在Certbot首页上选择Web服务器及服务器OS类型，我们在这里以Nginx + CentOS 6为例来说明。</p>\n<p>原文链接：<a href=\"https://certbot.eff.org/#centos6-nginx\" target=\"_blank\" rel=\"noopener\">https://certbot.eff.org/#centos6-nginx</a></p>\n<ol start=\"0\">\n<li><h4 id=\"生成证书\"><a href=\"#生成证书\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h4><ol start=\"0\">\n<li><p>安装证书生成工具certbot-auto：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.eff.org/certbot-auto</span><br><span class=\"line\">chmod a+x certbot-auto</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装依赖</p>\n<p> 运行<figure class=\"highlight plain\"><figcaption><span>Command Not Found```，需要[安装pip](https://pip.pypa.io/en/stable/installing/)、virtualenv包：```pip install virtualenv```。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">0. 配置Nginx</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t为需要配置https的站点添加以下配置，将访问/.well-known的请求指向本地目录。Let&apos;s Encrypt在生成证书的过程中，会在/var/www/www.xxx.com/.well-known目录生成一个临时文件，并且会访问类似于http://www.xxx.com/.well-known/acme-challenge/HGr8U1IeTW4kY_Z6UIyaakzOkyQgPr_7ArlLgtZE8SX的url，来检查域名配置是否有效。</span><br><span class=\"line\"></span><br><span class=\"line\">\t添加以下配置，并重启Nginx：nginx -s reload，如果reload不生效，可以试试restart。</span><br></pre></td></tr></table></figure></p>\n<p> server {</p>\n<pre><code>...            \n\nlocation /.well-known {\n    alias /var/www/www.xxx.com/.well-known;\n}\n\n...\n</code></pre><p> }</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\t\t*即使证书生成之后，也需要保留Nginx的这一个配置，因为证书的续期还需要这一个配置。*</span><br><span class=\"line\"></span><br><span class=\"line\">\t0. 通过向导生成证书</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t运行```./certbot-auto certonly```，会通过向导方式一步一步来生成证书。过程中间会用到上一步在Nginx中配置的本地目录。</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t**对证书生成过程和原理比较熟悉的话，可以不使用向导方式，直接使用certbot-auto命令```./certbot-auto certonly --webroot -w /var/www/www.xxx.com -d xxx.com -d www.xxx.com -w /var/www/thing -d thing.is -d m.thing.is```可以快速高效地生成证书**</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t生成的证书默认在/etc/letsencrypt/live/www.xxx.com/目录。</span><br><span class=\"line\"></span><br><span class=\"line\">0. #### 配置Nginx使用证书</span><br><span class=\"line\"></span><br><span class=\"line\">\t添加以下配置，并重启Nginx：```nginx -s reload```，如果reload不生效，可以试试restart。</span><br></pre></td></tr></table></figure>\n<p>server {</p>\n<p> …<br> listen 443;</p>\n<p> ssl on;<br> ssl_stapling_verify on;<br> ssl_certificate         /etc/letsencrypt/live/<a href=\"http://www.xxx.com/fullchain.pem\" target=\"_blank\" rel=\"noopener\">www.xxx.com/fullchain.pem</a>;<br> ssl_certificate_key     /etc/letsencrypt/live/<a href=\"http://www.xxx.com/privkey.pem\" target=\"_blank\" rel=\"noopener\">www.xxx.com/privkey.pem</a>;</p>\n<p> …</p>\n<p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">0. #### 检查证书的有效性</span><br><span class=\"line\"></span><br><span class=\"line\">\t打开浏览器，检查证书的有效性。</span><br><span class=\"line\"></span><br><span class=\"line\">0. #### 证书续期</span><br><span class=\"line\"></span><br><span class=\"line\">\tLet&apos;s Encrypt颁发的证书有期是90天，需要在过期前进行续期，好在Let&apos;s Encrypt已经提供了自动续期的脚本。</span><br><span class=\"line\"></span><br><span class=\"line\">\t官网说明，可以一天调用两次，如果检测到证书不需要更新，是什么都不做的，以减少意外造成的故障。</span><br><span class=\"line\"></span><br><span class=\"line\">\t先运行```certbot-auto renew --dry-run```命令检查证书自动续期是否正常，如果正常，将```certbot-auto renew --quiet```命令添加到系统的计划任务cron中，就可以实现证书自动续期了。</span><br></pre></td></tr></table></figure>\n<p>01 1 <em> </em> * ./path/to/certbot-auto renew –quiet<br><code>`</code><br>表示每天的1点1分自动执行续期脚本。</p>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"使用Let’s-Encrypt生成免费SSL证书\"><a href=\"#使用Let’s-Encrypt生成免费SSL证书\" class=\"headerlink\" title=\"使用Let’s Encrypt生成免费SSL证书\"></a>使用Let’s Encrypt生成免费SSL证书</h3><p>官网：<a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt</a></p>\n<p>Let’s Encrypt是由互联网安全研究小组（ISRG，一个公益组织）提供的服务。提供免费、自动化、开放的证书签发服务。</p>\n<p>Let’s Encrypt颁发的证书有期是90天，需要在过期前进行续期，好在Let’s Encrypt已经提供了自动续期的脚本。</p>\n<p>官网推荐使用<a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"noopener\">Certbot</a>工具来部署Https证书。在Certbot首页上选择Web服务器及服务器OS类型，我们在这里以Nginx + CentOS 6为例来说明。</p>\n<p>原文链接：<a href=\"https://certbot.eff.org/#centos6-nginx\" target=\"_blank\" rel=\"noopener\">https://certbot.eff.org/#centos6-nginx</a></p>\n<ol start=\"0\">\n<li><h4 id=\"生成证书\"><a href=\"#生成证书\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h4><ol start=\"0\">\n<li><p>安装证书生成工具certbot-auto：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.eff.org/certbot-auto</span><br><span class=\"line\">chmod a+x certbot-auto</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装依赖</p>\n<p> 运行<figure class=\"highlight plain\"><figcaption><span>Command Not Found```，需要[安装pip](https://pip.pypa.io/en/stable/installing/)、virtualenv包：```pip install virtualenv```。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">0. 配置Nginx</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t为需要配置https的站点添加以下配置，将访问/.well-known的请求指向本地目录。Let&apos;s Encrypt在生成证书的过程中，会在/var/www/www.xxx.com/.well-known目录生成一个临时文件，并且会访问类似于http://www.xxx.com/.well-known/acme-challenge/HGr8U1IeTW4kY_Z6UIyaakzOkyQgPr_7ArlLgtZE8SX的url，来检查域名配置是否有效。</span><br><span class=\"line\"></span><br><span class=\"line\">\t添加以下配置，并重启Nginx：nginx -s reload，如果reload不生效，可以试试restart。</span><br></pre></td></tr></table></figure></p>\n<p> server {</p>\n<pre><code>...            \n\nlocation /.well-known {\n    alias /var/www/www.xxx.com/.well-known;\n}\n\n...\n</code></pre><p> }</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\t\t*即使证书生成之后，也需要保留Nginx的这一个配置，因为证书的续期还需要这一个配置。*</span><br><span class=\"line\"></span><br><span class=\"line\">\t0. 通过向导生成证书</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t运行```./certbot-auto certonly```，会通过向导方式一步一步来生成证书。过程中间会用到上一步在Nginx中配置的本地目录。</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t**对证书生成过程和原理比较熟悉的话，可以不使用向导方式，直接使用certbot-auto命令```./certbot-auto certonly --webroot -w /var/www/www.xxx.com -d xxx.com -d www.xxx.com -w /var/www/thing -d thing.is -d m.thing.is```可以快速高效地生成证书**</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t生成的证书默认在/etc/letsencrypt/live/www.xxx.com/目录。</span><br><span class=\"line\"></span><br><span class=\"line\">0. #### 配置Nginx使用证书</span><br><span class=\"line\"></span><br><span class=\"line\">\t添加以下配置，并重启Nginx：```nginx -s reload```，如果reload不生效，可以试试restart。</span><br></pre></td></tr></table></figure>\n<p>server {</p>\n<p> …<br> listen 443;</p>\n<p> ssl on;<br> ssl_stapling_verify on;<br> ssl_certificate         /etc/letsencrypt/live/<a href=\"http://www.xxx.com/fullchain.pem\" target=\"_blank\" rel=\"noopener\">www.xxx.com/fullchain.pem</a>;<br> ssl_certificate_key     /etc/letsencrypt/live/<a href=\"http://www.xxx.com/privkey.pem\" target=\"_blank\" rel=\"noopener\">www.xxx.com/privkey.pem</a>;</p>\n<p> …</p>\n<p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">0. #### 检查证书的有效性</span><br><span class=\"line\"></span><br><span class=\"line\">\t打开浏览器，检查证书的有效性。</span><br><span class=\"line\"></span><br><span class=\"line\">0. #### 证书续期</span><br><span class=\"line\"></span><br><span class=\"line\">\tLet&apos;s Encrypt颁发的证书有期是90天，需要在过期前进行续期，好在Let&apos;s Encrypt已经提供了自动续期的脚本。</span><br><span class=\"line\"></span><br><span class=\"line\">\t官网说明，可以一天调用两次，如果检测到证书不需要更新，是什么都不做的，以减少意外造成的故障。</span><br><span class=\"line\"></span><br><span class=\"line\">\t先运行```certbot-auto renew --dry-run```命令检查证书自动续期是否正常，如果正常，将```certbot-auto renew --quiet```命令添加到系统的计划任务cron中，就可以实现证书自动续期了。</span><br></pre></td></tr></table></figure>\n<p>01 1 <em> </em> * ./path/to/certbot-auto renew –quiet<br><code>`</code><br>表示每天的1点1分自动执行续期脚本。</p>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"css","date":"2019-05-07T07:12:57.000Z","_content":"1. 它的定位效果完全受限于父级元素们。如果父元素的overflow属性设置了scroll，auto,overlay值，那么，粘性定位将会失效\n\n  当粘性约束矩形在可视范围内为relative，反之，则为fixed\n1. Webpack会先用css-loader去解析这个文件，遇到@import等语句就将相应样式文件引入，最后所有的CSS将使用style-loader生成一个内容为最终解析完的CSS代码的Style标签，放到head标签里。\n1. link属于HTML标签，而@import是css提供的；\n   页面被加载时，link会同时被加载，而 @import引用的css会等到页面被加载完再加载；\n   @import只在IE5以上才能识别，而link是XHTML标签，无兼容问题；\n   link方式的样式的权重高于@import的权重。\n1.  块级元素垂直居中—-高度不固定：transform(0,-50%) 或者 display:  table-cell vertical:middle\n1. flex-basis  可以设置比例\n1. 内联 > ID选择器 > 类选择器 > 标签选择器。\n1. transform 属于合成属性（composite property），对合成属性进行 transition/animation 动画将会创建一个合成层（composite layer），这使得被动画元素在一个独立的层中进行动画。通常情况下，浏览器会将一个层的内容先绘制进一个位图中，然后再作为纹理（texture）上传到 GPU，只要该层的内容不发生改变，就没必要进行重绘（repaint），浏览器会通过重新复合（recomposite）来形成一个新的帧。\n1. CSS3中，伪类与伪元素在语法上也有所区别，伪元素修改为以::开头。\n   \n``` text\n伪元素控制的内容和元素是没有差别的，但是它本身只是基于元素的抽象，并不存在于⽂档中，所以称为伪元素。⽤于将特殊的效果添加到某些选择器\n伪类：其核⼼就是⽤来选择DOM树之外的信息,不能够被普通选择器选择的⽂档之外的元素，⽤来添加⼀些选择器的特殊效果。\n⽐如:hover :active :visited :link :visited :first-child :focus :lang等\n\n伪类和伪元素都不出现在源⽂件和DOM树中。也就是说在html源⽂件中是看不到伪类和伪元素的。\n不同之处：\n伪类其实就是基于普通DOM元素⽽产⽣的不同状态，他是DOM元素的某⼀特征。\n伪元素能够创建在DOM树中不存在的抽象对象，⽽且这些抽象对象是能够访问到的。\n```\n\n1. Bem 是块（block）、元素（element）、修饰符（modifier）的简写，由 Yandex 团队提出的一种前端 CSS 命名方法论。\n   \n   `-` 中划线 ：仅作为连字符使用，表示某个块或者某个子元素的多单词之间的连接记号。\n\n   __ 双下划线：双下划线用来连接块和块的子元素\n\n   _ 单下划线：单下划线用来描述一个块或者块的子元素的一种状态\n\n2.  HTMLElement.offsetParent 是一个只读属性，返回一个指向最近的（指包含层级上的最近）包含该元素的定位元素或者最近的 table,td,th,body元素。当元素的 style.display 设置为 \"none\" 时，offsetParent 返回 null。offsetParent 很有用，因为 offsetTop 和 offsetLeft 都是相对于其内边距边界的。\n \n4. flex-basis 分配多余空间之前占据的主轴空间。\n5. 多行文本溢出隐藏变为...\n     p {\n       overflow: hidden;\n       \n       /* 限制在一个块元素显示的文本的行数，即行数设置 */\n       line-clamp: 3;\n      \n     }\n6. !important，作用是提高指定样式规则的应用优先权\n7. $border-color:#ccc !default; //声明变量 !default只能使用与变量中\n8.  sass 的控制指令\n```text \n      .el-col-0 {\n         display: none;\n       }\n\n       @for $i from 0 through 24 {\n         .el-col-#{$i} {\n           width: (1 / 24 * $i * 100) * 1%;\n         }\n       }\n ```\n1. 使用%定义一个被继承的样式，类似静态语言中的抽象类，他本身不起作用，只用于被其他人继承。\n  \n2. SCSS 是 Sass 3 引入新的语法，其语法完全兼容 CSS3，并且继承了 Sass 的强大功能。也就是说，任何标准的 CSS3 样式表都是具有相同语义的有效的 SCSS 文件\n\n3. SCSS提供了一个选择器可以选中当前元素的父元素，使用&表示.\n4. CSS的transition-delay属性规定了在过渡效果开始作用之前需要等待的时间。\n5. object-fit CSS 属性指定可替换元素的内容应该如何适应到其使用的高度和宽度确定的框。\n6. transform-origin CSS属性让你更改一个元素变形的原点。\n7.  响应式图像 srcSet \n```javastript\nreturn <img\n     src={src}\n     onError={this.handleError}\n     alt={alt}\n     srcSet={srcSet}\n     style={{ 'object-fit': fit }}/>;\n```\n1. CSS 的 outline 属性是在一条声明中设置多个轮廓属性的简写属性 ， 例如 outline-style, outline-width 和 outline-color。\n2. transition-property transition-duration transition-timing-function and transition-delay.\n1. cursor: not-allowed;\n1. inline-block的默认对齐方式是vertical-block：baseline，  vertical-align :middle\n1. !default 声明赋值的变量赋值，此时，如果变量已经被赋值，不会再被重新赋值，但是如果变量还没有被赋值，则会被赋予新的值。\n2. 属性嵌套：\n```css\ndiv {  \n\n  font: {  \n\n    size: 10px;  \n\n    weight: bold;  \n\n  }  }\n```\n\n4.   @minxin @include  @extend \n ```css\n @for $i from 1 through 1000 {\n    .#{unique-id()}-#{$i} {\n        ...\n    }\n}\n ```\n\n\n1. 支持布尔型的 and or 以及 not 运算。  @if  or or \n```css\n$i: 6;\n@while $i > 0 {\n  .item-#{$i} { width: 2em * $i; }\n  $i: $i - 2;\n}\n\n@for $i from 1 through 3 {\n  .item-#{$i} { width: 2em * $i; }\n}\n\n@each $animal in puma, sea-slug, egret, salamander {\n  .#{$animal}-icon {\n    background-image: url('/images/#{$animal}.png');\n  }\n}\n\n@each $animal, $color, $cursor in (puma, black, default),\n                                  (sea-slug, blue, pointer),\n                                  (egret, white, move) {\n  .#{$animal}-icon {\n    background-image: url('/images/#{$animal}.png');\n    border: 2px solid $color;\n    cursor: $cursor;\n  }\n}\n```\n1. css3 选择器\n```text\n:first-of-type\tp:first-of-type\t选择属于其父元素的首个 <p> 元素的每个 <p> 元素。\n:last-of-type\tp:last-of-type\t选择属于其父元素的最后 <p> 元素的每个 <p> 元素。\n\nelement element\tdiv p\t选择 <div> 元素内部的所有 <p> 元素。\t\nelement>element\tdiv>p\t选择父元素为 <div> 元素的所有 <p> 元素。\t\nelement+element\tdiv+p\t选择紧接在 <div> 元素之后的所有 <p> 元素。\n```\n1. scss \n   >@content\n ```text\n   @mixin colors($color: blue) {\n  background-color: $color;\n  @content;\n  border-color: $color;\n}\n.colors {\n  @include colors { color: $color; }\n}\n```\n1. async 会打乱html解析，defer 总是在html解析完成后执行。\n1. 伪元素(Pseudo-elements)\nDOM树没有定义的虚拟元素\n```text\n核⼼就是需要创建通常不存在于⽂档中的元素，\n\n```\n1.  fr 关键字：Grid 布局还引入了一个另外的长度单位来帮助我们创建灵活的网格轨道。fr 单位代表网格容器中可用空间的一等份。grid-template-columns: 200px 1fr 2fr 表示第一个列宽设置为 200px，后面剩余的宽度分为两部分，宽度分别为剩余宽度的 1/3 和 2/3。\n1. auto-fill 关键字：表示自动填充，让一行（或者一列）中尽可能的容纳更多的单元格。grid-template-columns: repeat(auto-fill, 200px) 表示列宽是 200 px，但列的数量是不固定的，只要浏览器能够容纳得下，就可以放置元素\n   \n2. flex Flex-grow flex-shrink flex-basis\n3. Flex 主轴（x）、交叉轴(y)\n4. calc函数是css3新增的功能，可以使用calc()计算border、margin、pading、font-size和width等属性设置动态值。   width: calc(100% - 200px);\n\n5. 触发BFC条件  BFC（Block Formatting Context）格式化上下文，把它理解成是一个独立的容器，并且这个容器里box的布局与这个容器外的box毫不相干。\n\n6. 递归 o(2**n)-》带备忘录 o(n),自顶向下-》动态规划（自底向上）\n  ```text\n  根元素\n  float的值不为none\n  overflow的值不为visible\n  display的值为inline-block、table-cell、table-caption\n  position的值为absolute、fixed\n  弹性盒（flex或inline-flex）\n  display: flow-root\n```\n\n1. Stylelint css 的lint  \n1. 多行文本： Table cell 垂直居中  vertical-align\n1. 块级：1. position absolute margin-top:-50px(translate(0,-50%))  2. Top 0 bottom 0  margin:auto\n1. 当元素浮动后不会影响块级元素的布局 只会影响内联元素的布局\n   \n   双飞布局时中间栏内容部分为两边腾开位置。\n\n1. 使用vw设置，vw也是一个相对单位，100vw等于屏幕宽度\n \n1. max-width/min-width > flex-basis > width > box\n \n1. writing-mode: vertical-rl;  设置文字方向\n1. text-align-last  描述的是一段文本中最后一行在被强制换行之前的对齐规则\n```text\njustify\n\n最后一行文字的开头与内容盒子的左侧对齐，末尾与右侧对齐\n\n```\n1.设置打印样式\n  \n  @media print {\n    /* print styles here. */\n  }. \n1. line-clamp 定义文字显示行数\n1. pointer-events: none; 禁用点击事件\n1. focus-within是一个伪类，现在已经被列入到CSS选择器中。当元素本身或其后代元素获得焦点时，:focus-within伪类的元素就会有效。 \n \n1. 但是有个好处是当元素没有内容时候，设置height:100%该元素不会被撑开，\n   \n   但是设置height:100vh，该元素会被撑开屏幕高度一致。 \n\n1. 伪类：\n   https://user-gold-cdn.xitu.io/2019/12/12/16ef8eecad4f1adb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\n   \n1. 伪元素用于创建一些不在文档树中的元素，并为其添加样式。比如说，我们可以通过:before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。常见的伪元素有：::before，::after，::first-line，::first-letter，::selection、::placeholder等. 伪类和伪元素的区别在于有没有创建一个文档书之外的元素。\n1.    \n1. 这是一个叫做@font-face 的CSS @规则 ，它允许网页开发者为其网页指定在线字体。 通过这种作者自备字体的方式，@font-face 可以消除对用户电脑字体的依赖。\n\n2. overflow:https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow\n\n3. Element.scrollTop 属性可以获取或设置一个元素的内容垂直滚动的像素数。\n\n   offsetTop: 当前元素顶部距离最近父元素顶部的距离,和有没有滚动条没有关系。单位px，只读元素。\n\n  scrollHeight: 因为子元素比父元素高，父元素不想被子元素撑的一样高就显示出了滚动条，在滚动的过程中本元素有部分被隐藏了，scrollHeight代表包括当前不可见部分的元素的高度。而可见部分的高度其实就是clientHeight，也就是scrollHeight>=clientHeight恒成立。在有滚动条时讨论scrollHeight才有意义，在没有滚动条时scrollHeight==clientHeight恒成立。单位px，只读元素。\n\n   https://imweb.io/topic/57c5409e808fd2fb204eef52\n\n   clientheight offsetheight \n\n\n1. 相对位置：\nhttps://developer.mozilla.org/zh-CN/docs/Web/CSS/position\n\n1. Image alt 属性是一个必需的属性，它规定在图像无法显示时的替代文本。\n\ntext-decoration 设置下划线等\nhttps://jsfiddle.net/ryansecreat/58um7k43/\n\n document​.active​Element\n\n 返回当前页面中获得焦点的元素,也就是说,如果此时用户按下了键盘上某个键,会在该元素上触发键盘事件.该属性是只读的.\n \n #### 性能  \n1. 尽量使用 flexbox 而不是老的布局模型。它运行速度更快，可为你的应用程序创造巨大的性能优势。\n1. 根据 Google Developer，渲染线程分为 主线程 (main thread) 和 合成线程 (compositor thread)。如果 CSS 动画只是改变 transforms 和 opacity，这时整个 CSS 动画得以在 合成线程完成（而JS动画则会在 主线程 执行，然后触发合成线程进行下一步操作），在 JS 执行一些昂贵的任务时，主线程繁忙，CSS 动画由于使用了合成线程可以保持流畅\n1. CSS动画有天然事件支持（TransitionEnd、AnimationEnd，但是它们都需要针对浏览器加前缀），JS则需要自己写事件。\n1. 在实现一些小的交互动效的时候，就多考虑考虑 CSS 动画。对于一些复杂控制的动画，使用 javascript 比较可靠。\n\n \n#### 内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main axis）对齐。\n       \n   align-items 设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式。\n\n   设置\"margin\"值为\"auto\"值，自动获取弹性容器中剩余的空间。所以设置垂直方向margin值为\"auto\"，可以使弹性子元素在弹性容器的两上轴方向都完全居中。 当容器为flex时会自动居中。\n   \n   如果在元素上设置了 box-sizing: border-box; 则 padding(内边距) 和 border(边框) 也包含在 width 和 height 中:\n   \n   transform: rotateX(120deg);  x轴旋转 \n   \n#### 不被选中\nbody{\n\n-webkit-touch-callout: none;\n\n-webkit-user-select: none;\n\n-khtml-user-select: none;\n\n-moz-user-select: none;\n\n-ms-user-select: none;\n\nuser-select: none;\n\n}\n\n#### 隐藏\n\n1.opacity：0,该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定了一些事件，如click事件也能触发 2.visibility:hidden,该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已经绑定的事件 3.display:node, 把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素删掉\n#### html 生成\n将html代码按照深度优先遍历来生成DOM树。 css文件下载完后也会进行渲染，生成相应的CSSOM。 当所有的css文件下载完且所有的CSSOM构建结束后，就会和DOM一起生成Render Tree。 接下来，浏览器就会进入Layout环节，将所有的节点位置计算出来。 最后，通过Painting环节将所有的节点内容呈现到屏幕上。\n #### base64\n TMLCanvasElement.toDataURL() 方法返回一个包含图片展示的 data URI 。可以使用 type 参数其类型，默认为 PNG 格式。图片的分辨率为96dpi。\n \n#### base64 渲染图片\n\n使用 Base64 编码渲染图片有以下优点：\n\n有效减少 HTTP 请求次数\n可对数据进行简单加密，无法肉眼获取信息\n没有跨域问题，无需考虑图片缓存\n凡事皆有利弊，使用 Base64 编码同时也会带来一些问题：\n\n编码后文件体积增大，仅适用于小体积图片编码\n增加了编码和解码的工作量\n不支持 IE 8.0 以下版本   \n\n#### 单位\n\n1. px：绝对单位，页面按精确像素展示\n2. em：相对单位，基准点为父节点字体的大小，如果自身定义了font-size按自身来计算（浏览器默认字体是16px），整个页面内1em不是一个固定的值\n3. rem：相对单位，可理解为”root em”, 相对根节点html的字体大小来计算，CSS3新加属性，chrome/firefox/IE9+支持\n4. vw：viewpoint width，视窗宽度，1vw等于视窗宽度的1%\n5. vh：viewpoint height，视窗高度，1vh等于视窗高度的1%\n6. vmin：vw和vh中较小的那个\n7. vmax：vw和vh中较大的那个\n8. %:百分比\n\n","source":"_posts/css.md","raw":"---\ntitle: css\ndate: 2019-05-07 15:12:57\ntags: css\n---\n1. 它的定位效果完全受限于父级元素们。如果父元素的overflow属性设置了scroll，auto,overlay值，那么，粘性定位将会失效\n\n  当粘性约束矩形在可视范围内为relative，反之，则为fixed\n1. Webpack会先用css-loader去解析这个文件，遇到@import等语句就将相应样式文件引入，最后所有的CSS将使用style-loader生成一个内容为最终解析完的CSS代码的Style标签，放到head标签里。\n1. link属于HTML标签，而@import是css提供的；\n   页面被加载时，link会同时被加载，而 @import引用的css会等到页面被加载完再加载；\n   @import只在IE5以上才能识别，而link是XHTML标签，无兼容问题；\n   link方式的样式的权重高于@import的权重。\n1.  块级元素垂直居中—-高度不固定：transform(0,-50%) 或者 display:  table-cell vertical:middle\n1. flex-basis  可以设置比例\n1. 内联 > ID选择器 > 类选择器 > 标签选择器。\n1. transform 属于合成属性（composite property），对合成属性进行 transition/animation 动画将会创建一个合成层（composite layer），这使得被动画元素在一个独立的层中进行动画。通常情况下，浏览器会将一个层的内容先绘制进一个位图中，然后再作为纹理（texture）上传到 GPU，只要该层的内容不发生改变，就没必要进行重绘（repaint），浏览器会通过重新复合（recomposite）来形成一个新的帧。\n1. CSS3中，伪类与伪元素在语法上也有所区别，伪元素修改为以::开头。\n   \n``` text\n伪元素控制的内容和元素是没有差别的，但是它本身只是基于元素的抽象，并不存在于⽂档中，所以称为伪元素。⽤于将特殊的效果添加到某些选择器\n伪类：其核⼼就是⽤来选择DOM树之外的信息,不能够被普通选择器选择的⽂档之外的元素，⽤来添加⼀些选择器的特殊效果。\n⽐如:hover :active :visited :link :visited :first-child :focus :lang等\n\n伪类和伪元素都不出现在源⽂件和DOM树中。也就是说在html源⽂件中是看不到伪类和伪元素的。\n不同之处：\n伪类其实就是基于普通DOM元素⽽产⽣的不同状态，他是DOM元素的某⼀特征。\n伪元素能够创建在DOM树中不存在的抽象对象，⽽且这些抽象对象是能够访问到的。\n```\n\n1. Bem 是块（block）、元素（element）、修饰符（modifier）的简写，由 Yandex 团队提出的一种前端 CSS 命名方法论。\n   \n   `-` 中划线 ：仅作为连字符使用，表示某个块或者某个子元素的多单词之间的连接记号。\n\n   __ 双下划线：双下划线用来连接块和块的子元素\n\n   _ 单下划线：单下划线用来描述一个块或者块的子元素的一种状态\n\n2.  HTMLElement.offsetParent 是一个只读属性，返回一个指向最近的（指包含层级上的最近）包含该元素的定位元素或者最近的 table,td,th,body元素。当元素的 style.display 设置为 \"none\" 时，offsetParent 返回 null。offsetParent 很有用，因为 offsetTop 和 offsetLeft 都是相对于其内边距边界的。\n \n4. flex-basis 分配多余空间之前占据的主轴空间。\n5. 多行文本溢出隐藏变为...\n     p {\n       overflow: hidden;\n       \n       /* 限制在一个块元素显示的文本的行数，即行数设置 */\n       line-clamp: 3;\n      \n     }\n6. !important，作用是提高指定样式规则的应用优先权\n7. $border-color:#ccc !default; //声明变量 !default只能使用与变量中\n8.  sass 的控制指令\n```text \n      .el-col-0 {\n         display: none;\n       }\n\n       @for $i from 0 through 24 {\n         .el-col-#{$i} {\n           width: (1 / 24 * $i * 100) * 1%;\n         }\n       }\n ```\n1. 使用%定义一个被继承的样式，类似静态语言中的抽象类，他本身不起作用，只用于被其他人继承。\n  \n2. SCSS 是 Sass 3 引入新的语法，其语法完全兼容 CSS3，并且继承了 Sass 的强大功能。也就是说，任何标准的 CSS3 样式表都是具有相同语义的有效的 SCSS 文件\n\n3. SCSS提供了一个选择器可以选中当前元素的父元素，使用&表示.\n4. CSS的transition-delay属性规定了在过渡效果开始作用之前需要等待的时间。\n5. object-fit CSS 属性指定可替换元素的内容应该如何适应到其使用的高度和宽度确定的框。\n6. transform-origin CSS属性让你更改一个元素变形的原点。\n7.  响应式图像 srcSet \n```javastript\nreturn <img\n     src={src}\n     onError={this.handleError}\n     alt={alt}\n     srcSet={srcSet}\n     style={{ 'object-fit': fit }}/>;\n```\n1. CSS 的 outline 属性是在一条声明中设置多个轮廓属性的简写属性 ， 例如 outline-style, outline-width 和 outline-color。\n2. transition-property transition-duration transition-timing-function and transition-delay.\n1. cursor: not-allowed;\n1. inline-block的默认对齐方式是vertical-block：baseline，  vertical-align :middle\n1. !default 声明赋值的变量赋值，此时，如果变量已经被赋值，不会再被重新赋值，但是如果变量还没有被赋值，则会被赋予新的值。\n2. 属性嵌套：\n```css\ndiv {  \n\n  font: {  \n\n    size: 10px;  \n\n    weight: bold;  \n\n  }  }\n```\n\n4.   @minxin @include  @extend \n ```css\n @for $i from 1 through 1000 {\n    .#{unique-id()}-#{$i} {\n        ...\n    }\n}\n ```\n\n\n1. 支持布尔型的 and or 以及 not 运算。  @if  or or \n```css\n$i: 6;\n@while $i > 0 {\n  .item-#{$i} { width: 2em * $i; }\n  $i: $i - 2;\n}\n\n@for $i from 1 through 3 {\n  .item-#{$i} { width: 2em * $i; }\n}\n\n@each $animal in puma, sea-slug, egret, salamander {\n  .#{$animal}-icon {\n    background-image: url('/images/#{$animal}.png');\n  }\n}\n\n@each $animal, $color, $cursor in (puma, black, default),\n                                  (sea-slug, blue, pointer),\n                                  (egret, white, move) {\n  .#{$animal}-icon {\n    background-image: url('/images/#{$animal}.png');\n    border: 2px solid $color;\n    cursor: $cursor;\n  }\n}\n```\n1. css3 选择器\n```text\n:first-of-type\tp:first-of-type\t选择属于其父元素的首个 <p> 元素的每个 <p> 元素。\n:last-of-type\tp:last-of-type\t选择属于其父元素的最后 <p> 元素的每个 <p> 元素。\n\nelement element\tdiv p\t选择 <div> 元素内部的所有 <p> 元素。\t\nelement>element\tdiv>p\t选择父元素为 <div> 元素的所有 <p> 元素。\t\nelement+element\tdiv+p\t选择紧接在 <div> 元素之后的所有 <p> 元素。\n```\n1. scss \n   >@content\n ```text\n   @mixin colors($color: blue) {\n  background-color: $color;\n  @content;\n  border-color: $color;\n}\n.colors {\n  @include colors { color: $color; }\n}\n```\n1. async 会打乱html解析，defer 总是在html解析完成后执行。\n1. 伪元素(Pseudo-elements)\nDOM树没有定义的虚拟元素\n```text\n核⼼就是需要创建通常不存在于⽂档中的元素，\n\n```\n1.  fr 关键字：Grid 布局还引入了一个另外的长度单位来帮助我们创建灵活的网格轨道。fr 单位代表网格容器中可用空间的一等份。grid-template-columns: 200px 1fr 2fr 表示第一个列宽设置为 200px，后面剩余的宽度分为两部分，宽度分别为剩余宽度的 1/3 和 2/3。\n1. auto-fill 关键字：表示自动填充，让一行（或者一列）中尽可能的容纳更多的单元格。grid-template-columns: repeat(auto-fill, 200px) 表示列宽是 200 px，但列的数量是不固定的，只要浏览器能够容纳得下，就可以放置元素\n   \n2. flex Flex-grow flex-shrink flex-basis\n3. Flex 主轴（x）、交叉轴(y)\n4. calc函数是css3新增的功能，可以使用calc()计算border、margin、pading、font-size和width等属性设置动态值。   width: calc(100% - 200px);\n\n5. 触发BFC条件  BFC（Block Formatting Context）格式化上下文，把它理解成是一个独立的容器，并且这个容器里box的布局与这个容器外的box毫不相干。\n\n6. 递归 o(2**n)-》带备忘录 o(n),自顶向下-》动态规划（自底向上）\n  ```text\n  根元素\n  float的值不为none\n  overflow的值不为visible\n  display的值为inline-block、table-cell、table-caption\n  position的值为absolute、fixed\n  弹性盒（flex或inline-flex）\n  display: flow-root\n```\n\n1. Stylelint css 的lint  \n1. 多行文本： Table cell 垂直居中  vertical-align\n1. 块级：1. position absolute margin-top:-50px(translate(0,-50%))  2. Top 0 bottom 0  margin:auto\n1. 当元素浮动后不会影响块级元素的布局 只会影响内联元素的布局\n   \n   双飞布局时中间栏内容部分为两边腾开位置。\n\n1. 使用vw设置，vw也是一个相对单位，100vw等于屏幕宽度\n \n1. max-width/min-width > flex-basis > width > box\n \n1. writing-mode: vertical-rl;  设置文字方向\n1. text-align-last  描述的是一段文本中最后一行在被强制换行之前的对齐规则\n```text\njustify\n\n最后一行文字的开头与内容盒子的左侧对齐，末尾与右侧对齐\n\n```\n1.设置打印样式\n  \n  @media print {\n    /* print styles here. */\n  }. \n1. line-clamp 定义文字显示行数\n1. pointer-events: none; 禁用点击事件\n1. focus-within是一个伪类，现在已经被列入到CSS选择器中。当元素本身或其后代元素获得焦点时，:focus-within伪类的元素就会有效。 \n \n1. 但是有个好处是当元素没有内容时候，设置height:100%该元素不会被撑开，\n   \n   但是设置height:100vh，该元素会被撑开屏幕高度一致。 \n\n1. 伪类：\n   https://user-gold-cdn.xitu.io/2019/12/12/16ef8eecad4f1adb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\n   \n1. 伪元素用于创建一些不在文档树中的元素，并为其添加样式。比如说，我们可以通过:before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。常见的伪元素有：::before，::after，::first-line，::first-letter，::selection、::placeholder等. 伪类和伪元素的区别在于有没有创建一个文档书之外的元素。\n1.    \n1. 这是一个叫做@font-face 的CSS @规则 ，它允许网页开发者为其网页指定在线字体。 通过这种作者自备字体的方式，@font-face 可以消除对用户电脑字体的依赖。\n\n2. overflow:https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow\n\n3. Element.scrollTop 属性可以获取或设置一个元素的内容垂直滚动的像素数。\n\n   offsetTop: 当前元素顶部距离最近父元素顶部的距离,和有没有滚动条没有关系。单位px，只读元素。\n\n  scrollHeight: 因为子元素比父元素高，父元素不想被子元素撑的一样高就显示出了滚动条，在滚动的过程中本元素有部分被隐藏了，scrollHeight代表包括当前不可见部分的元素的高度。而可见部分的高度其实就是clientHeight，也就是scrollHeight>=clientHeight恒成立。在有滚动条时讨论scrollHeight才有意义，在没有滚动条时scrollHeight==clientHeight恒成立。单位px，只读元素。\n\n   https://imweb.io/topic/57c5409e808fd2fb204eef52\n\n   clientheight offsetheight \n\n\n1. 相对位置：\nhttps://developer.mozilla.org/zh-CN/docs/Web/CSS/position\n\n1. Image alt 属性是一个必需的属性，它规定在图像无法显示时的替代文本。\n\ntext-decoration 设置下划线等\nhttps://jsfiddle.net/ryansecreat/58um7k43/\n\n document​.active​Element\n\n 返回当前页面中获得焦点的元素,也就是说,如果此时用户按下了键盘上某个键,会在该元素上触发键盘事件.该属性是只读的.\n \n #### 性能  \n1. 尽量使用 flexbox 而不是老的布局模型。它运行速度更快，可为你的应用程序创造巨大的性能优势。\n1. 根据 Google Developer，渲染线程分为 主线程 (main thread) 和 合成线程 (compositor thread)。如果 CSS 动画只是改变 transforms 和 opacity，这时整个 CSS 动画得以在 合成线程完成（而JS动画则会在 主线程 执行，然后触发合成线程进行下一步操作），在 JS 执行一些昂贵的任务时，主线程繁忙，CSS 动画由于使用了合成线程可以保持流畅\n1. CSS动画有天然事件支持（TransitionEnd、AnimationEnd，但是它们都需要针对浏览器加前缀），JS则需要自己写事件。\n1. 在实现一些小的交互动效的时候，就多考虑考虑 CSS 动画。对于一些复杂控制的动画，使用 javascript 比较可靠。\n\n \n#### 内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main axis）对齐。\n       \n   align-items 设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式。\n\n   设置\"margin\"值为\"auto\"值，自动获取弹性容器中剩余的空间。所以设置垂直方向margin值为\"auto\"，可以使弹性子元素在弹性容器的两上轴方向都完全居中。 当容器为flex时会自动居中。\n   \n   如果在元素上设置了 box-sizing: border-box; 则 padding(内边距) 和 border(边框) 也包含在 width 和 height 中:\n   \n   transform: rotateX(120deg);  x轴旋转 \n   \n#### 不被选中\nbody{\n\n-webkit-touch-callout: none;\n\n-webkit-user-select: none;\n\n-khtml-user-select: none;\n\n-moz-user-select: none;\n\n-ms-user-select: none;\n\nuser-select: none;\n\n}\n\n#### 隐藏\n\n1.opacity：0,该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定了一些事件，如click事件也能触发 2.visibility:hidden,该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已经绑定的事件 3.display:node, 把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素删掉\n#### html 生成\n将html代码按照深度优先遍历来生成DOM树。 css文件下载完后也会进行渲染，生成相应的CSSOM。 当所有的css文件下载完且所有的CSSOM构建结束后，就会和DOM一起生成Render Tree。 接下来，浏览器就会进入Layout环节，将所有的节点位置计算出来。 最后，通过Painting环节将所有的节点内容呈现到屏幕上。\n #### base64\n TMLCanvasElement.toDataURL() 方法返回一个包含图片展示的 data URI 。可以使用 type 参数其类型，默认为 PNG 格式。图片的分辨率为96dpi。\n \n#### base64 渲染图片\n\n使用 Base64 编码渲染图片有以下优点：\n\n有效减少 HTTP 请求次数\n可对数据进行简单加密，无法肉眼获取信息\n没有跨域问题，无需考虑图片缓存\n凡事皆有利弊，使用 Base64 编码同时也会带来一些问题：\n\n编码后文件体积增大，仅适用于小体积图片编码\n增加了编码和解码的工作量\n不支持 IE 8.0 以下版本   \n\n#### 单位\n\n1. px：绝对单位，页面按精确像素展示\n2. em：相对单位，基准点为父节点字体的大小，如果自身定义了font-size按自身来计算（浏览器默认字体是16px），整个页面内1em不是一个固定的值\n3. rem：相对单位，可理解为”root em”, 相对根节点html的字体大小来计算，CSS3新加属性，chrome/firefox/IE9+支持\n4. vw：viewpoint width，视窗宽度，1vw等于视窗宽度的1%\n5. vh：viewpoint height，视窗高度，1vh等于视窗高度的1%\n6. vmin：vw和vh中较小的那个\n7. vmax：vw和vh中较大的那个\n8. %:百分比\n\n","slug":"css","published":1,"updated":"2020-08-26T02:20:35.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5sdz00003yy8kwrbubbr1","content":"<ol>\n<li><p>它的定位效果完全受限于父级元素们。如果父元素的overflow属性设置了scroll，auto,overlay值，那么，粘性定位将会失效</p>\n<p>当粘性约束矩形在可视范围内为relative，反之，则为fixed</p>\n</li>\n<li>Webpack会先用css-loader去解析这个文件，遇到@import等语句就将相应样式文件引入，最后所有的CSS将使用style-loader生成一个内容为最终解析完的CSS代码的Style标签，放到head标签里。</li>\n<li>link属于HTML标签，而@import是css提供的；<br>页面被加载时，link会同时被加载，而 @import引用的css会等到页面被加载完再加载；<br>@import只在IE5以上才能识别，而link是XHTML标签，无兼容问题；<br>link方式的样式的权重高于@import的权重。</li>\n<li>块级元素垂直居中—-高度不固定：transform(0,-50%) 或者 display:  table-cell vertical:middle</li>\n<li>flex-basis  可以设置比例</li>\n<li>内联 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器。</li>\n<li>transform 属于合成属性（composite property），对合成属性进行 transition/animation 动画将会创建一个合成层（composite layer），这使得被动画元素在一个独立的层中进行动画。通常情况下，浏览器会将一个层的内容先绘制进一个位图中，然后再作为纹理（texture）上传到 GPU，只要该层的内容不发生改变，就没必要进行重绘（repaint），浏览器会通过重新复合（recomposite）来形成一个新的帧。</li>\n<li>CSS3中，伪类与伪元素在语法上也有所区别，伪元素修改为以::开头。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">伪元素控制的内容和元素是没有差别的，但是它本身只是基于元素的抽象，并不存在于⽂档中，所以称为伪元素。⽤于将特殊的效果添加到某些选择器</span><br><span class=\"line\">伪类：其核⼼就是⽤来选择DOM树之外的信息,不能够被普通选择器选择的⽂档之外的元素，⽤来添加⼀些选择器的特殊效果。</span><br><span class=\"line\">⽐如:hover :active :visited :link :visited :first-child :focus :lang等</span><br><span class=\"line\"></span><br><span class=\"line\">伪类和伪元素都不出现在源⽂件和DOM树中。也就是说在html源⽂件中是看不到伪类和伪元素的。</span><br><span class=\"line\">不同之处：</span><br><span class=\"line\">伪类其实就是基于普通DOM元素⽽产⽣的不同状态，他是DOM元素的某⼀特征。</span><br><span class=\"line\">伪元素能够创建在DOM树中不存在的抽象对象，⽽且这些抽象对象是能够访问到的。</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>Bem 是块（block）、元素（element）、修饰符（modifier）的简写，由 Yandex 团队提出的一种前端 CSS 命名方法论。</p>\n<p><code>-</code> 中划线 ：仅作为连字符使用，表示某个块或者某个子元素的多单词之间的连接记号。</p>\n<p>__ 双下划线：双下划线用来连接块和块的子元素</p>\n<p>_ 单下划线：单下划线用来描述一个块或者块的子元素的一种状态</p>\n</li>\n<li><p>HTMLElement.offsetParent 是一个只读属性，返回一个指向最近的（指包含层级上的最近）包含该元素的定位元素或者最近的 table,td,th,body元素。当元素的 style.display 设置为 “none” 时，offsetParent 返回 null。offsetParent 很有用，因为 offsetTop 和 offsetLeft 都是相对于其内边距边界的。</p>\n</li>\n<li><p>flex-basis 分配多余空间之前占据的主轴空间。</p>\n</li>\n<li><p>多行文本溢出隐藏变为…<br>  p {</p>\n<pre><code>overflow: hidden;\n\n/* 限制在一个块元素显示的文本的行数，即行数设置 */\nline-clamp: 3;\n</code></pre><p>  }</p>\n</li>\n<li>!important，作用是提高指定样式规则的应用优先权</li>\n<li>$border-color:#ccc !default; //声明变量 !default只能使用与变量中</li>\n<li><p>sass 的控制指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.el-col-0 &#123;</span><br><span class=\"line\">   display: none;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> @for $i from 0 through 24 &#123;</span><br><span class=\"line\">   .el-col-#&#123;$i&#125; &#123;</span><br><span class=\"line\">     width: (1 / 24 * $i * 100) * 1%;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用%定义一个被继承的样式，类似静态语言中的抽象类，他本身不起作用，只用于被其他人继承。</p>\n</li>\n<li><p>SCSS 是 Sass 3 引入新的语法，其语法完全兼容 CSS3，并且继承了 Sass 的强大功能。也就是说，任何标准的 CSS3 样式表都是具有相同语义的有效的 SCSS 文件</p>\n</li>\n<li><p>SCSS提供了一个选择器可以选中当前元素的父元素，使用&amp;表示.</p>\n</li>\n<li>CSS的transition-delay属性规定了在过渡效果开始作用之前需要等待的时间。</li>\n<li>object-fit CSS 属性指定可替换元素的内容应该如何适应到其使用的高度和宽度确定的框。</li>\n<li>transform-origin CSS属性让你更改一个元素变形的原点。</li>\n<li><p>响应式图像 srcSet </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return &lt;img</span><br><span class=\"line\">     src=&#123;src&#125;</span><br><span class=\"line\">     onError=&#123;this.handleError&#125;</span><br><span class=\"line\">     alt=&#123;alt&#125;</span><br><span class=\"line\">     srcSet=&#123;srcSet&#125;</span><br><span class=\"line\">     style=&#123;&#123; &apos;object-fit&apos;: fit &#125;&#125;/&gt;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>CSS 的 outline 属性是在一条声明中设置多个轮廓属性的简写属性 ， 例如 outline-style, outline-width 和 outline-color。</p>\n</li>\n<li>transition-property transition-duration transition-timing-function and transition-delay.</li>\n<li>cursor: not-allowed;</li>\n<li>inline-block的默认对齐方式是vertical-block：baseline，  vertical-align :middle</li>\n<li>!default 声明赋值的变量赋值，此时，如果变量已经被赋值，不会再被重新赋值，但是如果变量还没有被赋值，则会被赋予新的值。</li>\n<li><p>属性嵌套：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">font</span>: &#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    size: <span class=\"number\">10px</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">weight</span>: bold;  </span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>@minxin @include  @extend </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">@for</span> $i from <span class=\"number\">1</span> through <span class=\"number\">1000</span> &#123;</span><br><span class=\"line\">    .#&#123;unique-id()&#125;-#&#123;$i&#125; &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>支持布尔型的 and or 以及 not 运算。  @if  or or </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$i: 6;</span><br><span class=\"line\"><span class=\"keyword\">@while</span> $i &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">  .item-#&#123;$i&#125; &#123; width: 2em * $i; &#125;</span><br><span class=\"line\">  $i: $i - 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@for</span> $i from <span class=\"number\">1</span> through <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">  .item-#&#123;$i&#125; &#123; width: 2em * $i; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@each</span> $animal in puma, sea-slug, egret, salamander &#123;</span><br><span class=\"line\">  .#&#123;$animal&#125;-icon &#123;</span><br><span class=\"line\">    background-image: url('/images/#&#123;$animal&#125;.png');</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@each</span> $animal, $color, $cursor in (puma, black, default),</span><br><span class=\"line\">                                  (sea-slug, blue, pointer),</span><br><span class=\"line\">                                  (egret, white, move) &#123;</span><br><span class=\"line\">  .#&#123;$animal&#125;-icon &#123;</span><br><span class=\"line\">    background-image: url('/images/#&#123;$animal&#125;.png');</span><br><span class=\"line\">    border: 2px solid $color;</span><br><span class=\"line\">    cursor: $cursor;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>css3 选择器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:first-of-type\tp:first-of-type\t选择属于其父元素的首个 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。</span><br><span class=\"line\">:last-of-type\tp:last-of-type\t选择属于其父元素的最后 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。</span><br><span class=\"line\"></span><br><span class=\"line\">element element\tdiv p\t选择 &lt;div&gt; 元素内部的所有 &lt;p&gt; 元素。\t</span><br><span class=\"line\">element&gt;element\tdiv&gt;p\t选择父元素为 &lt;div&gt; 元素的所有 &lt;p&gt; 元素。\t</span><br><span class=\"line\">element+element\tdiv+p\t选择紧接在 &lt;div&gt; 元素之后的所有 &lt;p&gt; 元素。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>scss </p>\n<blockquote>\n<p>@content</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   @mixin colors($color: blue) &#123;</span><br><span class=\"line\">  background-color: $color;</span><br><span class=\"line\">  @content;</span><br><span class=\"line\">  border-color: $color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.colors &#123;</span><br><span class=\"line\">  @include colors &#123; color: $color; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>async 会打乱html解析，defer 总是在html解析完成后执行。</p>\n</li>\n<li><p>伪元素(Pseudo-elements)<br>DOM树没有定义的虚拟元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">核⼼就是需要创建通常不存在于⽂档中的元素，</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>fr 关键字：Grid 布局还引入了一个另外的长度单位来帮助我们创建灵活的网格轨道。fr 单位代表网格容器中可用空间的一等份。grid-template-columns: 200px 1fr 2fr 表示第一个列宽设置为 200px，后面剩余的宽度分为两部分，宽度分别为剩余宽度的 1/3 和 2/3。</p>\n</li>\n<li><p>auto-fill 关键字：表示自动填充，让一行（或者一列）中尽可能的容纳更多的单元格。grid-template-columns: repeat(auto-fill, 200px) 表示列宽是 200 px，但列的数量是不固定的，只要浏览器能够容纳得下，就可以放置元素</p>\n</li>\n<li><p>flex Flex-grow flex-shrink flex-basis</p>\n</li>\n<li>Flex 主轴（x）、交叉轴(y)</li>\n<li><p>calc函数是css3新增的功能，可以使用calc()计算border、margin、pading、font-size和width等属性设置动态值。   width: calc(100% - 200px);</p>\n</li>\n<li><p>触发BFC条件  BFC（Block Formatting Context）格式化上下文，把它理解成是一个独立的容器，并且这个容器里box的布局与这个容器外的box毫不相干。</p>\n</li>\n<li><p>递归 o(2**n)-》带备忘录 o(n),自顶向下-》动态规划（自底向上）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">根元素</span><br><span class=\"line\">float的值不为none</span><br><span class=\"line\">overflow的值不为visible</span><br><span class=\"line\">display的值为inline-block、table-cell、table-caption</span><br><span class=\"line\">position的值为absolute、fixed</span><br><span class=\"line\">弹性盒（flex或inline-flex）</span><br><span class=\"line\">display: flow-root</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Stylelint css 的lint  </p>\n</li>\n<li>多行文本： Table cell 垂直居中  vertical-align</li>\n<li>块级：1. position absolute margin-top:-50px(translate(0,-50%))  2. Top 0 bottom 0  margin:auto</li>\n<li><p>当元素浮动后不会影响块级元素的布局 只会影响内联元素的布局</p>\n<p>双飞布局时中间栏内容部分为两边腾开位置。</p>\n</li>\n<li><p>使用vw设置，vw也是一个相对单位，100vw等于屏幕宽度</p>\n</li>\n<li><p>max-width/min-width &gt; flex-basis &gt; width &gt; box</p>\n</li>\n<li><p>writing-mode: vertical-rl;  设置文字方向</p>\n</li>\n<li>text-align-last  描述的是一段文本中最后一行在被强制换行之前的对齐规则<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justify</span><br><span class=\"line\"></span><br><span class=\"line\">最后一行文字的开头与内容盒子的左侧对齐，末尾与右侧对齐</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>1.设置打印样式</p>\n<p>  @media print {<br>    /<em> print styles here. </em>/<br>  }. </p>\n<ol>\n<li>line-clamp 定义文字显示行数</li>\n<li>pointer-events: none; 禁用点击事件</li>\n<li><p>focus-within是一个伪类，现在已经被列入到CSS选择器中。当元素本身或其后代元素获得焦点时，:focus-within伪类的元素就会有效。 </p>\n</li>\n<li><p>但是有个好处是当元素没有内容时候，设置height:100%该元素不会被撑开，</p>\n<p>但是设置height:100vh，该元素会被撑开屏幕高度一致。 </p>\n</li>\n<li><p>伪类：<br><a href=\"https://user-gold-cdn.xitu.io/2019/12/12/16ef8eecad4f1adb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" target=\"_blank\" rel=\"noopener\">https://user-gold-cdn.xitu.io/2019/12/12/16ef8eecad4f1adb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1</a></p>\n</li>\n<li><p>伪元素用于创建一些不在文档树中的元素，并为其添加样式。比如说，我们可以通过:before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。常见的伪元素有：::before，::after，::first-line，::first-letter，::selection、::placeholder等. 伪类和伪元素的区别在于有没有创建一个文档书之外的元素。</p>\n</li>\n<li></li>\n<li><p>这是一个叫做@font-face 的CSS @规则 ，它允许网页开发者为其网页指定在线字体。 通过这种作者自备字体的方式，@font-face 可以消除对用户电脑字体的依赖。</p>\n</li>\n<li><p>overflow:<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow</a></p>\n</li>\n<li><p>Element.scrollTop 属性可以获取或设置一个元素的内容垂直滚动的像素数。</p>\n<p>offsetTop: 当前元素顶部距离最近父元素顶部的距离,和有没有滚动条没有关系。单位px，只读元素。</p>\n<p>scrollHeight: 因为子元素比父元素高，父元素不想被子元素撑的一样高就显示出了滚动条，在滚动的过程中本元素有部分被隐藏了，scrollHeight代表包括当前不可见部分的元素的高度。而可见部分的高度其实就是clientHeight，也就是scrollHeight&gt;=clientHeight恒成立。在有滚动条时讨论scrollHeight才有意义，在没有滚动条时scrollHeight==clientHeight恒成立。单位px，只读元素。</p>\n<p><a href=\"https://imweb.io/topic/57c5409e808fd2fb204eef52\" target=\"_blank\" rel=\"noopener\">https://imweb.io/topic/57c5409e808fd2fb204eef52</a></p>\n<p>clientheight offsetheight </p>\n</li>\n</ol>\n<ol>\n<li><p>相对位置：<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/position\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/position</a></p>\n</li>\n<li><p>Image alt 属性是一个必需的属性，它规定在图像无法显示时的替代文本。</p>\n</li>\n</ol>\n<p>text-decoration 设置下划线等<br><a href=\"https://jsfiddle.net/ryansecreat/58um7k43/\" target=\"_blank\" rel=\"noopener\">https://jsfiddle.net/ryansecreat/58um7k43/</a></p>\n<p> document​.active​Element</p>\n<p> 返回当前页面中获得焦点的元素,也就是说,如果此时用户按下了键盘上某个键,会在该元素上触发键盘事件.该属性是只读的.</p>\n<h4 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h4><ol>\n<li>尽量使用 flexbox 而不是老的布局模型。它运行速度更快，可为你的应用程序创造巨大的性能优势。</li>\n<li>根据 Google Developer，渲染线程分为 主线程 (main thread) 和 合成线程 (compositor thread)。如果 CSS 动画只是改变 transforms 和 opacity，这时整个 CSS 动画得以在 合成线程完成（而JS动画则会在 主线程 执行，然后触发合成线程进行下一步操作），在 JS 执行一些昂贵的任务时，主线程繁忙，CSS 动画由于使用了合成线程可以保持流畅</li>\n<li>CSS动画有天然事件支持（TransitionEnd、AnimationEnd，但是它们都需要针对浏览器加前缀），JS则需要自己写事件。</li>\n<li>在实现一些小的交互动效的时候，就多考虑考虑 CSS 动画。对于一些复杂控制的动画，使用 javascript 比较可靠。</li>\n</ol>\n<h4 id=\"内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main-axis）对齐。\"><a href=\"#内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main-axis）对齐。\" class=\"headerlink\" title=\"内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main axis）对齐。\"></a>内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main axis）对齐。</h4><p>   align-items 设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式。</p>\n<p>   设置”margin”值为”auto”值，自动获取弹性容器中剩余的空间。所以设置垂直方向margin值为”auto”，可以使弹性子元素在弹性容器的两上轴方向都完全居中。 当容器为flex时会自动居中。</p>\n<p>   如果在元素上设置了 box-sizing: border-box; 则 padding(内边距) 和 border(边框) 也包含在 width 和 height 中:</p>\n<p>   transform: rotateX(120deg);  x轴旋转 </p>\n<h4 id=\"不被选中\"><a href=\"#不被选中\" class=\"headerlink\" title=\"不被选中\"></a>不被选中</h4><p>body{</p>\n<p>-webkit-touch-callout: none;</p>\n<p>-webkit-user-select: none;</p>\n<p>-khtml-user-select: none;</p>\n<p>-moz-user-select: none;</p>\n<p>-ms-user-select: none;</p>\n<p>user-select: none;</p>\n<p>}</p>\n<h4 id=\"隐藏\"><a href=\"#隐藏\" class=\"headerlink\" title=\"隐藏\"></a>隐藏</h4><p>1.opacity：0,该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定了一些事件，如click事件也能触发 2.visibility:hidden,该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已经绑定的事件 3.display:node, 把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素删掉</p>\n<h4 id=\"html-生成\"><a href=\"#html-生成\" class=\"headerlink\" title=\"html 生成\"></a>html 生成</h4><p>将html代码按照深度优先遍历来生成DOM树。 css文件下载完后也会进行渲染，生成相应的CSSOM。 当所有的css文件下载完且所有的CSSOM构建结束后，就会和DOM一起生成Render Tree。 接下来，浏览器就会进入Layout环节，将所有的节点位置计算出来。 最后，通过Painting环节将所有的节点内容呈现到屏幕上。</p>\n<h4 id=\"base64\"><a href=\"#base64\" class=\"headerlink\" title=\"base64\"></a>base64</h4><p> TMLCanvasElement.toDataURL() 方法返回一个包含图片展示的 data URI 。可以使用 type 参数其类型，默认为 PNG 格式。图片的分辨率为96dpi。</p>\n<h4 id=\"base64-渲染图片\"><a href=\"#base64-渲染图片\" class=\"headerlink\" title=\"base64 渲染图片\"></a>base64 渲染图片</h4><p>使用 Base64 编码渲染图片有以下优点：</p>\n<p>有效减少 HTTP 请求次数<br>可对数据进行简单加密，无法肉眼获取信息<br>没有跨域问题，无需考虑图片缓存<br>凡事皆有利弊，使用 Base64 编码同时也会带来一些问题：</p>\n<p>编码后文件体积增大，仅适用于小体积图片编码<br>增加了编码和解码的工作量<br>不支持 IE 8.0 以下版本   </p>\n<h4 id=\"单位\"><a href=\"#单位\" class=\"headerlink\" title=\"单位\"></a>单位</h4><ol>\n<li>px：绝对单位，页面按精确像素展示</li>\n<li>em：相对单位，基准点为父节点字体的大小，如果自身定义了font-size按自身来计算（浏览器默认字体是16px），整个页面内1em不是一个固定的值</li>\n<li>rem：相对单位，可理解为”root em”, 相对根节点html的字体大小来计算，CSS3新加属性，chrome/firefox/IE9+支持</li>\n<li>vw：viewpoint width，视窗宽度，1vw等于视窗宽度的1%</li>\n<li>vh：viewpoint height，视窗高度，1vh等于视窗高度的1%</li>\n<li>vmin：vw和vh中较小的那个</li>\n<li>vmax：vw和vh中较大的那个</li>\n<li>%:百分比</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>它的定位效果完全受限于父级元素们。如果父元素的overflow属性设置了scroll，auto,overlay值，那么，粘性定位将会失效</p>\n<p>当粘性约束矩形在可视范围内为relative，反之，则为fixed</p>\n</li>\n<li>Webpack会先用css-loader去解析这个文件，遇到@import等语句就将相应样式文件引入，最后所有的CSS将使用style-loader生成一个内容为最终解析完的CSS代码的Style标签，放到head标签里。</li>\n<li>link属于HTML标签，而@import是css提供的；<br>页面被加载时，link会同时被加载，而 @import引用的css会等到页面被加载完再加载；<br>@import只在IE5以上才能识别，而link是XHTML标签，无兼容问题；<br>link方式的样式的权重高于@import的权重。</li>\n<li>块级元素垂直居中—-高度不固定：transform(0,-50%) 或者 display:  table-cell vertical:middle</li>\n<li>flex-basis  可以设置比例</li>\n<li>内联 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器。</li>\n<li>transform 属于合成属性（composite property），对合成属性进行 transition/animation 动画将会创建一个合成层（composite layer），这使得被动画元素在一个独立的层中进行动画。通常情况下，浏览器会将一个层的内容先绘制进一个位图中，然后再作为纹理（texture）上传到 GPU，只要该层的内容不发生改变，就没必要进行重绘（repaint），浏览器会通过重新复合（recomposite）来形成一个新的帧。</li>\n<li>CSS3中，伪类与伪元素在语法上也有所区别，伪元素修改为以::开头。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">伪元素控制的内容和元素是没有差别的，但是它本身只是基于元素的抽象，并不存在于⽂档中，所以称为伪元素。⽤于将特殊的效果添加到某些选择器</span><br><span class=\"line\">伪类：其核⼼就是⽤来选择DOM树之外的信息,不能够被普通选择器选择的⽂档之外的元素，⽤来添加⼀些选择器的特殊效果。</span><br><span class=\"line\">⽐如:hover :active :visited :link :visited :first-child :focus :lang等</span><br><span class=\"line\"></span><br><span class=\"line\">伪类和伪元素都不出现在源⽂件和DOM树中。也就是说在html源⽂件中是看不到伪类和伪元素的。</span><br><span class=\"line\">不同之处：</span><br><span class=\"line\">伪类其实就是基于普通DOM元素⽽产⽣的不同状态，他是DOM元素的某⼀特征。</span><br><span class=\"line\">伪元素能够创建在DOM树中不存在的抽象对象，⽽且这些抽象对象是能够访问到的。</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>Bem 是块（block）、元素（element）、修饰符（modifier）的简写，由 Yandex 团队提出的一种前端 CSS 命名方法论。</p>\n<p><code>-</code> 中划线 ：仅作为连字符使用，表示某个块或者某个子元素的多单词之间的连接记号。</p>\n<p>__ 双下划线：双下划线用来连接块和块的子元素</p>\n<p>_ 单下划线：单下划线用来描述一个块或者块的子元素的一种状态</p>\n</li>\n<li><p>HTMLElement.offsetParent 是一个只读属性，返回一个指向最近的（指包含层级上的最近）包含该元素的定位元素或者最近的 table,td,th,body元素。当元素的 style.display 设置为 “none” 时，offsetParent 返回 null。offsetParent 很有用，因为 offsetTop 和 offsetLeft 都是相对于其内边距边界的。</p>\n</li>\n<li><p>flex-basis 分配多余空间之前占据的主轴空间。</p>\n</li>\n<li><p>多行文本溢出隐藏变为…<br>  p {</p>\n<pre><code>overflow: hidden;\n\n/* 限制在一个块元素显示的文本的行数，即行数设置 */\nline-clamp: 3;\n</code></pre><p>  }</p>\n</li>\n<li>!important，作用是提高指定样式规则的应用优先权</li>\n<li>$border-color:#ccc !default; //声明变量 !default只能使用与变量中</li>\n<li><p>sass 的控制指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.el-col-0 &#123;</span><br><span class=\"line\">   display: none;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> @for $i from 0 through 24 &#123;</span><br><span class=\"line\">   .el-col-#&#123;$i&#125; &#123;</span><br><span class=\"line\">     width: (1 / 24 * $i * 100) * 1%;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用%定义一个被继承的样式，类似静态语言中的抽象类，他本身不起作用，只用于被其他人继承。</p>\n</li>\n<li><p>SCSS 是 Sass 3 引入新的语法，其语法完全兼容 CSS3，并且继承了 Sass 的强大功能。也就是说，任何标准的 CSS3 样式表都是具有相同语义的有效的 SCSS 文件</p>\n</li>\n<li><p>SCSS提供了一个选择器可以选中当前元素的父元素，使用&amp;表示.</p>\n</li>\n<li>CSS的transition-delay属性规定了在过渡效果开始作用之前需要等待的时间。</li>\n<li>object-fit CSS 属性指定可替换元素的内容应该如何适应到其使用的高度和宽度确定的框。</li>\n<li>transform-origin CSS属性让你更改一个元素变形的原点。</li>\n<li><p>响应式图像 srcSet </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return &lt;img</span><br><span class=\"line\">     src=&#123;src&#125;</span><br><span class=\"line\">     onError=&#123;this.handleError&#125;</span><br><span class=\"line\">     alt=&#123;alt&#125;</span><br><span class=\"line\">     srcSet=&#123;srcSet&#125;</span><br><span class=\"line\">     style=&#123;&#123; &apos;object-fit&apos;: fit &#125;&#125;/&gt;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>CSS 的 outline 属性是在一条声明中设置多个轮廓属性的简写属性 ， 例如 outline-style, outline-width 和 outline-color。</p>\n</li>\n<li>transition-property transition-duration transition-timing-function and transition-delay.</li>\n<li>cursor: not-allowed;</li>\n<li>inline-block的默认对齐方式是vertical-block：baseline，  vertical-align :middle</li>\n<li>!default 声明赋值的变量赋值，此时，如果变量已经被赋值，不会再被重新赋值，但是如果变量还没有被赋值，则会被赋予新的值。</li>\n<li><p>属性嵌套：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">font</span>: &#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    size: <span class=\"number\">10px</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">weight</span>: bold;  </span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>@minxin @include  @extend </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">@for</span> $i from <span class=\"number\">1</span> through <span class=\"number\">1000</span> &#123;</span><br><span class=\"line\">    .#&#123;unique-id()&#125;-#&#123;$i&#125; &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>支持布尔型的 and or 以及 not 运算。  @if  or or </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$i: 6;</span><br><span class=\"line\"><span class=\"keyword\">@while</span> $i &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">  .item-#&#123;$i&#125; &#123; width: 2em * $i; &#125;</span><br><span class=\"line\">  $i: $i - 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@for</span> $i from <span class=\"number\">1</span> through <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">  .item-#&#123;$i&#125; &#123; width: 2em * $i; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@each</span> $animal in puma, sea-slug, egret, salamander &#123;</span><br><span class=\"line\">  .#&#123;$animal&#125;-icon &#123;</span><br><span class=\"line\">    background-image: url('/images/#&#123;$animal&#125;.png');</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@each</span> $animal, $color, $cursor in (puma, black, default),</span><br><span class=\"line\">                                  (sea-slug, blue, pointer),</span><br><span class=\"line\">                                  (egret, white, move) &#123;</span><br><span class=\"line\">  .#&#123;$animal&#125;-icon &#123;</span><br><span class=\"line\">    background-image: url('/images/#&#123;$animal&#125;.png');</span><br><span class=\"line\">    border: 2px solid $color;</span><br><span class=\"line\">    cursor: $cursor;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>css3 选择器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:first-of-type\tp:first-of-type\t选择属于其父元素的首个 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。</span><br><span class=\"line\">:last-of-type\tp:last-of-type\t选择属于其父元素的最后 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。</span><br><span class=\"line\"></span><br><span class=\"line\">element element\tdiv p\t选择 &lt;div&gt; 元素内部的所有 &lt;p&gt; 元素。\t</span><br><span class=\"line\">element&gt;element\tdiv&gt;p\t选择父元素为 &lt;div&gt; 元素的所有 &lt;p&gt; 元素。\t</span><br><span class=\"line\">element+element\tdiv+p\t选择紧接在 &lt;div&gt; 元素之后的所有 &lt;p&gt; 元素。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>scss </p>\n<blockquote>\n<p>@content</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   @mixin colors($color: blue) &#123;</span><br><span class=\"line\">  background-color: $color;</span><br><span class=\"line\">  @content;</span><br><span class=\"line\">  border-color: $color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.colors &#123;</span><br><span class=\"line\">  @include colors &#123; color: $color; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>async 会打乱html解析，defer 总是在html解析完成后执行。</p>\n</li>\n<li><p>伪元素(Pseudo-elements)<br>DOM树没有定义的虚拟元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">核⼼就是需要创建通常不存在于⽂档中的元素，</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>fr 关键字：Grid 布局还引入了一个另外的长度单位来帮助我们创建灵活的网格轨道。fr 单位代表网格容器中可用空间的一等份。grid-template-columns: 200px 1fr 2fr 表示第一个列宽设置为 200px，后面剩余的宽度分为两部分，宽度分别为剩余宽度的 1/3 和 2/3。</p>\n</li>\n<li><p>auto-fill 关键字：表示自动填充，让一行（或者一列）中尽可能的容纳更多的单元格。grid-template-columns: repeat(auto-fill, 200px) 表示列宽是 200 px，但列的数量是不固定的，只要浏览器能够容纳得下，就可以放置元素</p>\n</li>\n<li><p>flex Flex-grow flex-shrink flex-basis</p>\n</li>\n<li>Flex 主轴（x）、交叉轴(y)</li>\n<li><p>calc函数是css3新增的功能，可以使用calc()计算border、margin、pading、font-size和width等属性设置动态值。   width: calc(100% - 200px);</p>\n</li>\n<li><p>触发BFC条件  BFC（Block Formatting Context）格式化上下文，把它理解成是一个独立的容器，并且这个容器里box的布局与这个容器外的box毫不相干。</p>\n</li>\n<li><p>递归 o(2**n)-》带备忘录 o(n),自顶向下-》动态规划（自底向上）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">根元素</span><br><span class=\"line\">float的值不为none</span><br><span class=\"line\">overflow的值不为visible</span><br><span class=\"line\">display的值为inline-block、table-cell、table-caption</span><br><span class=\"line\">position的值为absolute、fixed</span><br><span class=\"line\">弹性盒（flex或inline-flex）</span><br><span class=\"line\">display: flow-root</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Stylelint css 的lint  </p>\n</li>\n<li>多行文本： Table cell 垂直居中  vertical-align</li>\n<li>块级：1. position absolute margin-top:-50px(translate(0,-50%))  2. Top 0 bottom 0  margin:auto</li>\n<li><p>当元素浮动后不会影响块级元素的布局 只会影响内联元素的布局</p>\n<p>双飞布局时中间栏内容部分为两边腾开位置。</p>\n</li>\n<li><p>使用vw设置，vw也是一个相对单位，100vw等于屏幕宽度</p>\n</li>\n<li><p>max-width/min-width &gt; flex-basis &gt; width &gt; box</p>\n</li>\n<li><p>writing-mode: vertical-rl;  设置文字方向</p>\n</li>\n<li>text-align-last  描述的是一段文本中最后一行在被强制换行之前的对齐规则<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justify</span><br><span class=\"line\"></span><br><span class=\"line\">最后一行文字的开头与内容盒子的左侧对齐，末尾与右侧对齐</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>1.设置打印样式</p>\n<p>  @media print {<br>    /<em> print styles here. </em>/<br>  }. </p>\n<ol>\n<li>line-clamp 定义文字显示行数</li>\n<li>pointer-events: none; 禁用点击事件</li>\n<li><p>focus-within是一个伪类，现在已经被列入到CSS选择器中。当元素本身或其后代元素获得焦点时，:focus-within伪类的元素就会有效。 </p>\n</li>\n<li><p>但是有个好处是当元素没有内容时候，设置height:100%该元素不会被撑开，</p>\n<p>但是设置height:100vh，该元素会被撑开屏幕高度一致。 </p>\n</li>\n<li><p>伪类：<br><a href=\"https://user-gold-cdn.xitu.io/2019/12/12/16ef8eecad4f1adb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" target=\"_blank\" rel=\"noopener\">https://user-gold-cdn.xitu.io/2019/12/12/16ef8eecad4f1adb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1</a></p>\n</li>\n<li><p>伪元素用于创建一些不在文档树中的元素，并为其添加样式。比如说，我们可以通过:before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。常见的伪元素有：::before，::after，::first-line，::first-letter，::selection、::placeholder等. 伪类和伪元素的区别在于有没有创建一个文档书之外的元素。</p>\n</li>\n<li></li>\n<li><p>这是一个叫做@font-face 的CSS @规则 ，它允许网页开发者为其网页指定在线字体。 通过这种作者自备字体的方式，@font-face 可以消除对用户电脑字体的依赖。</p>\n</li>\n<li><p>overflow:<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow</a></p>\n</li>\n<li><p>Element.scrollTop 属性可以获取或设置一个元素的内容垂直滚动的像素数。</p>\n<p>offsetTop: 当前元素顶部距离最近父元素顶部的距离,和有没有滚动条没有关系。单位px，只读元素。</p>\n<p>scrollHeight: 因为子元素比父元素高，父元素不想被子元素撑的一样高就显示出了滚动条，在滚动的过程中本元素有部分被隐藏了，scrollHeight代表包括当前不可见部分的元素的高度。而可见部分的高度其实就是clientHeight，也就是scrollHeight&gt;=clientHeight恒成立。在有滚动条时讨论scrollHeight才有意义，在没有滚动条时scrollHeight==clientHeight恒成立。单位px，只读元素。</p>\n<p><a href=\"https://imweb.io/topic/57c5409e808fd2fb204eef52\" target=\"_blank\" rel=\"noopener\">https://imweb.io/topic/57c5409e808fd2fb204eef52</a></p>\n<p>clientheight offsetheight </p>\n</li>\n</ol>\n<ol>\n<li><p>相对位置：<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/position\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/position</a></p>\n</li>\n<li><p>Image alt 属性是一个必需的属性，它规定在图像无法显示时的替代文本。</p>\n</li>\n</ol>\n<p>text-decoration 设置下划线等<br><a href=\"https://jsfiddle.net/ryansecreat/58um7k43/\" target=\"_blank\" rel=\"noopener\">https://jsfiddle.net/ryansecreat/58um7k43/</a></p>\n<p> document​.active​Element</p>\n<p> 返回当前页面中获得焦点的元素,也就是说,如果此时用户按下了键盘上某个键,会在该元素上触发键盘事件.该属性是只读的.</p>\n<h4 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h4><ol>\n<li>尽量使用 flexbox 而不是老的布局模型。它运行速度更快，可为你的应用程序创造巨大的性能优势。</li>\n<li>根据 Google Developer，渲染线程分为 主线程 (main thread) 和 合成线程 (compositor thread)。如果 CSS 动画只是改变 transforms 和 opacity，这时整个 CSS 动画得以在 合成线程完成（而JS动画则会在 主线程 执行，然后触发合成线程进行下一步操作），在 JS 执行一些昂贵的任务时，主线程繁忙，CSS 动画由于使用了合成线程可以保持流畅</li>\n<li>CSS动画有天然事件支持（TransitionEnd、AnimationEnd，但是它们都需要针对浏览器加前缀），JS则需要自己写事件。</li>\n<li>在实现一些小的交互动效的时候，就多考虑考虑 CSS 动画。对于一些复杂控制的动画，使用 javascript 比较可靠。</li>\n</ol>\n<h4 id=\"内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main-axis）对齐。\"><a href=\"#内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main-axis）对齐。\" class=\"headerlink\" title=\"内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main axis）对齐。\"></a>内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main axis）对齐。</h4><p>   align-items 设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式。</p>\n<p>   设置”margin”值为”auto”值，自动获取弹性容器中剩余的空间。所以设置垂直方向margin值为”auto”，可以使弹性子元素在弹性容器的两上轴方向都完全居中。 当容器为flex时会自动居中。</p>\n<p>   如果在元素上设置了 box-sizing: border-box; 则 padding(内边距) 和 border(边框) 也包含在 width 和 height 中:</p>\n<p>   transform: rotateX(120deg);  x轴旋转 </p>\n<h4 id=\"不被选中\"><a href=\"#不被选中\" class=\"headerlink\" title=\"不被选中\"></a>不被选中</h4><p>body{</p>\n<p>-webkit-touch-callout: none;</p>\n<p>-webkit-user-select: none;</p>\n<p>-khtml-user-select: none;</p>\n<p>-moz-user-select: none;</p>\n<p>-ms-user-select: none;</p>\n<p>user-select: none;</p>\n<p>}</p>\n<h4 id=\"隐藏\"><a href=\"#隐藏\" class=\"headerlink\" title=\"隐藏\"></a>隐藏</h4><p>1.opacity：0,该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定了一些事件，如click事件也能触发 2.visibility:hidden,该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已经绑定的事件 3.display:node, 把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素删掉</p>\n<h4 id=\"html-生成\"><a href=\"#html-生成\" class=\"headerlink\" title=\"html 生成\"></a>html 生成</h4><p>将html代码按照深度优先遍历来生成DOM树。 css文件下载完后也会进行渲染，生成相应的CSSOM。 当所有的css文件下载完且所有的CSSOM构建结束后，就会和DOM一起生成Render Tree。 接下来，浏览器就会进入Layout环节，将所有的节点位置计算出来。 最后，通过Painting环节将所有的节点内容呈现到屏幕上。</p>\n<h4 id=\"base64\"><a href=\"#base64\" class=\"headerlink\" title=\"base64\"></a>base64</h4><p> TMLCanvasElement.toDataURL() 方法返回一个包含图片展示的 data URI 。可以使用 type 参数其类型，默认为 PNG 格式。图片的分辨率为96dpi。</p>\n<h4 id=\"base64-渲染图片\"><a href=\"#base64-渲染图片\" class=\"headerlink\" title=\"base64 渲染图片\"></a>base64 渲染图片</h4><p>使用 Base64 编码渲染图片有以下优点：</p>\n<p>有效减少 HTTP 请求次数<br>可对数据进行简单加密，无法肉眼获取信息<br>没有跨域问题，无需考虑图片缓存<br>凡事皆有利弊，使用 Base64 编码同时也会带来一些问题：</p>\n<p>编码后文件体积增大，仅适用于小体积图片编码<br>增加了编码和解码的工作量<br>不支持 IE 8.0 以下版本   </p>\n<h4 id=\"单位\"><a href=\"#单位\" class=\"headerlink\" title=\"单位\"></a>单位</h4><ol>\n<li>px：绝对单位，页面按精确像素展示</li>\n<li>em：相对单位，基准点为父节点字体的大小，如果自身定义了font-size按自身来计算（浏览器默认字体是16px），整个页面内1em不是一个固定的值</li>\n<li>rem：相对单位，可理解为”root em”, 相对根节点html的字体大小来计算，CSS3新加属性，chrome/firefox/IE9+支持</li>\n<li>vw：viewpoint width，视窗宽度，1vw等于视窗宽度的1%</li>\n<li>vh：viewpoint height，视窗高度，1vh等于视窗高度的1%</li>\n<li>vmin：vw和vh中较小的那个</li>\n<li>vmax：vw和vh中较大的那个</li>\n<li>%:百分比</li>\n</ol>\n"},{"title":"docker 常用命令","date":"2016-12-14T09:56:03.000Z","_content":"总结一下常用命令:\n\n其中<>阔起来的参数为必选，[]阔起来为可选\n\ndocker version 查看docker的版本号，包括客户端、服务端、依赖的Go等\ndocker info 查看系统(docker)层面信息，包括管理的images, containers数等\ndocker search <image> 在docker index中搜索image\ndocker pull <image> 从docker registry server 中下拉image\ndocker push <image|repository> 推送一个image或repository到registry\ndocker push <image|repository>:TAG 同上，指定tag\ndocker inspect <image|container> 查看image或container的底层信息\ndocker images TODO filter out the intermediate image layers (intermediate image layers 是什么)\ndocker images -a 列出所有的images\ndocker ps 默认显示正在运行中的container\ndocker ps -l 显示最后一次创建的container，包括未运行的\ndocker ps -a 显示所有的container，包括未运行的\ndocker logs <container> 查看container的日志，也就是执行命令的一些输出\ndocker rm <container...> 删除一个或多个container\ndocker rm `docker ps -a -q` 删除所有的container\ndocker ps -a -q | xargs docker rm 同上, 删除所有的container\ndocker rmi <image...> 删除一个或多个image\ndocker start/stop/restart <container> 开启/停止/重启container\ndocker start -i <container> 启动一个container并进入交互模式\ndocker attach <container> attach一个运行中的container\ndocker run <image> <command> 使用image创建container并执行相应命令，然后停止\ndocker run -i -t <image> /bin/bash 使用image创建container并进入交互模式, login shell是/bin/bash\ndocker run -i -t -p <host_port:contain_port> 将container的端口映射到宿主机的端口\ndocker commit <container> [repo:tag] 将一个container固化为一个新的image，后面的repo:tag可选\ndocker build <path> 寻找path路径下名为的Dockerfile的配置文件，使用此配置生成新的image\ndocker build -t repo[:tag] 同上，可以指定repo和可选的tag\ndocker build - < <dockerfile> 使用指定的dockerfile配置文件，docker以stdin方式获取内容，使用此配置生成新的image\ndocker port <container> <container port> 查看本地哪个端口映射到container的指定端口，其实用docker ps 也可以看到\n\n\n### 安装docker\n1. 利用官方脚本：\n\n```\n$ sudo yum update\n$ sudo curl -sSL https://get.docker.com/ | sh\n```\n2.  用黄狗安装：\n\n```\n$ sudo yum update\n$ sudo yum -y install docker\n$ sudo systemctl start docker\n```\n### 删除操作\n##### 删除所有已经停止的continer  -q 列出所有id\n\n```\ndocker rm $(docker ps -a -q)\n```\n##### 删除所有镜像\n\n```\ndocker rmi $(docker images | grep none | awk '{print $3}' | sort -r)\n```\n### 命令说明\n1. 其中go的语法模板\n \n```\ndocker images --format \"{{.ID}}: {{.Repository}}\"\ndocker images --format \"table {{.ID}}\\t{{.Repository}}\\t{{.Tag}}\"\n```\n2. filter 过滤参数\n \n```\ndocker images -f since=mongo:3.2\n```\n 表示自从3.2 版本以来所有的镜像。\n3. docker run -it --rm --name ryanserver ubuntu:14.04 bash \n   \n   it 表示交互终端 \n   rm 推出后删除\n   ubuntu  镜像名称\n   bash bash命令\n   naem 指定container名称\n```\ndocker run --name webserver -d -p 85:80 nginx\n```\n\n4. docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n- -a :提交的镜像作者；\n- -c :使用Dockerfile指令来创建镜像；\n- -m :提交时的说明文字；\n- -p :在commit时，将容器暂停。\n如：\n\n```\n$ docker commit \\\n    --author \"Tao Wang <twang2218@gmail.com>\" \\\n    --message \"修改了默认网页\" \\\n    webserver \\\n    nginx:v2\n```\n5.通过dockfile制作镜像\n\n```\nFROM nginx\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html\n```\nfrom 指定基础镜像 \n\nDockerfile中每次运行run 都执行了一层。&& 将各个所需命令串联起来\n\nDockerfile 支持 Shell 类的行尾添加 \\ 的命令换行方式，以及行首# 进行注释的格式\n一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。\n\ncopy 文件时可使用通配符，其通配符规则要满足 Go 的 filepath.Match 规则，如：\n\n```\nCOPY hom* /mydir/\nCOPY hom?.txt /mydir/\n```\nAdd 功能和copy 类似，不过自带解压功能：\n\n```\nFROM scratch\nADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /\n```\n###### 环境变量的配置\n格式有两种：\n  ● ENV <key> <value>\n  ● ENV <key1>=<value1> <key2>=<value2>...\n例如 ENV VERSION=1.0 DEBUG=on \\\n     NAME=\"Happy Feet\n######  匿名卷\n在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，\n任何向 /data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：\ndocker run -d -v mydata:/data xxxx\n###### 挂载host目录\n将host机中的文件挂载到container中：\ndocker可以支持把一个宿主机上的目录挂载到镜像里。\n\n```\ndocker run -it -v /home/dock/Downloads:/usr/Downloads ubuntu64 /bin/bash\n```\n\n通过-v参数，冒号前为宿主机目录，必须为绝对路径，冒号后为镜像内挂载的路径。\n\n一个dockfile:\n \n```\nMAINTAINER Anna Doe <anna@example.com>\nnodejs pm2:\nFROM node:0.11.13\n# or just node, without tag\n\nRUN npm install -g pm2\nRUN pm2 dump\n# dump will start pm2 daemon and create everything needed\n\nVOLUME [\"/srv/apps\", \"/srv/logs\", \"/srv/server.json\"]\n# don't put the files in docker container, user -v\n\nEXPOSE 3000\n\nCMD [\"pm2\", \"start\", \"/srv/server.json\", \"--no-daemon\"]\n# no daemon mode for docker\n```\n\n6. docker build -t repo[:tag] . \n   \n可以指定repo和可选的tag\n如果注意，会看到 docker build 命令最后有一个 .。. 表示当前目录\ncopy命令只有在当前上下文有有效\n\n7. 从container中导出\n导出(Export)\nExport命令用于持久化容器（不是镜像）\n接着执行导出：\nsudo docker export <CONTAINER ID> > /home/export.tar\n\n导出后，可以通过docker import   导入，如\n\n```\ncat busy.tar | sudo docker import - busy:v1.0\n\n```\n\n8. 保存镜像\n   sudo docker save busybox-1 > /home/save.tar\n\n\n```\n用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。\n```\n\n9. docker 自启动配置\n\n自动启动container 如下：\n\n```\ndocker run -ti --restart=on-failure:3   \n失败后会启动三次\n```\n10. 用非root用户操作docker\n下面是使用非root用户操作的步骤\n\n```\n创建docker组\nsudo groupadd docker\n将当前用户加入docker组\nsudo gpasswd -a ${USER} docker\n重新启动docker服务（下面是CentOS7的命令）\nsudo systemctl restart docker\n当前用户退出系统重新登陆\n运行docker命令\ndocker ps\n```\n\n11.用docker 启动zookeeper \n\n```\nps -aux | grep docker\ndocker run  --name alizookeeper --restart always -d -P zookeeper\n```\n\n ","source":"_posts/docker.md","raw":"---\ntitle: docker 常用命令\ndate: 2016-12-14 17:56:03\ntags: docker\n---\n总结一下常用命令:\n\n其中<>阔起来的参数为必选，[]阔起来为可选\n\ndocker version 查看docker的版本号，包括客户端、服务端、依赖的Go等\ndocker info 查看系统(docker)层面信息，包括管理的images, containers数等\ndocker search <image> 在docker index中搜索image\ndocker pull <image> 从docker registry server 中下拉image\ndocker push <image|repository> 推送一个image或repository到registry\ndocker push <image|repository>:TAG 同上，指定tag\ndocker inspect <image|container> 查看image或container的底层信息\ndocker images TODO filter out the intermediate image layers (intermediate image layers 是什么)\ndocker images -a 列出所有的images\ndocker ps 默认显示正在运行中的container\ndocker ps -l 显示最后一次创建的container，包括未运行的\ndocker ps -a 显示所有的container，包括未运行的\ndocker logs <container> 查看container的日志，也就是执行命令的一些输出\ndocker rm <container...> 删除一个或多个container\ndocker rm `docker ps -a -q` 删除所有的container\ndocker ps -a -q | xargs docker rm 同上, 删除所有的container\ndocker rmi <image...> 删除一个或多个image\ndocker start/stop/restart <container> 开启/停止/重启container\ndocker start -i <container> 启动一个container并进入交互模式\ndocker attach <container> attach一个运行中的container\ndocker run <image> <command> 使用image创建container并执行相应命令，然后停止\ndocker run -i -t <image> /bin/bash 使用image创建container并进入交互模式, login shell是/bin/bash\ndocker run -i -t -p <host_port:contain_port> 将container的端口映射到宿主机的端口\ndocker commit <container> [repo:tag] 将一个container固化为一个新的image，后面的repo:tag可选\ndocker build <path> 寻找path路径下名为的Dockerfile的配置文件，使用此配置生成新的image\ndocker build -t repo[:tag] 同上，可以指定repo和可选的tag\ndocker build - < <dockerfile> 使用指定的dockerfile配置文件，docker以stdin方式获取内容，使用此配置生成新的image\ndocker port <container> <container port> 查看本地哪个端口映射到container的指定端口，其实用docker ps 也可以看到\n\n\n### 安装docker\n1. 利用官方脚本：\n\n```\n$ sudo yum update\n$ sudo curl -sSL https://get.docker.com/ | sh\n```\n2.  用黄狗安装：\n\n```\n$ sudo yum update\n$ sudo yum -y install docker\n$ sudo systemctl start docker\n```\n### 删除操作\n##### 删除所有已经停止的continer  -q 列出所有id\n\n```\ndocker rm $(docker ps -a -q)\n```\n##### 删除所有镜像\n\n```\ndocker rmi $(docker images | grep none | awk '{print $3}' | sort -r)\n```\n### 命令说明\n1. 其中go的语法模板\n \n```\ndocker images --format \"{{.ID}}: {{.Repository}}\"\ndocker images --format \"table {{.ID}}\\t{{.Repository}}\\t{{.Tag}}\"\n```\n2. filter 过滤参数\n \n```\ndocker images -f since=mongo:3.2\n```\n 表示自从3.2 版本以来所有的镜像。\n3. docker run -it --rm --name ryanserver ubuntu:14.04 bash \n   \n   it 表示交互终端 \n   rm 推出后删除\n   ubuntu  镜像名称\n   bash bash命令\n   naem 指定container名称\n```\ndocker run --name webserver -d -p 85:80 nginx\n```\n\n4. docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n- -a :提交的镜像作者；\n- -c :使用Dockerfile指令来创建镜像；\n- -m :提交时的说明文字；\n- -p :在commit时，将容器暂停。\n如：\n\n```\n$ docker commit \\\n    --author \"Tao Wang <twang2218@gmail.com>\" \\\n    --message \"修改了默认网页\" \\\n    webserver \\\n    nginx:v2\n```\n5.通过dockfile制作镜像\n\n```\nFROM nginx\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html\n```\nfrom 指定基础镜像 \n\nDockerfile中每次运行run 都执行了一层。&& 将各个所需命令串联起来\n\nDockerfile 支持 Shell 类的行尾添加 \\ 的命令换行方式，以及行首# 进行注释的格式\n一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。\n\ncopy 文件时可使用通配符，其通配符规则要满足 Go 的 filepath.Match 规则，如：\n\n```\nCOPY hom* /mydir/\nCOPY hom?.txt /mydir/\n```\nAdd 功能和copy 类似，不过自带解压功能：\n\n```\nFROM scratch\nADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /\n```\n###### 环境变量的配置\n格式有两种：\n  ● ENV <key> <value>\n  ● ENV <key1>=<value1> <key2>=<value2>...\n例如 ENV VERSION=1.0 DEBUG=on \\\n     NAME=\"Happy Feet\n######  匿名卷\n在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，\n任何向 /data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：\ndocker run -d -v mydata:/data xxxx\n###### 挂载host目录\n将host机中的文件挂载到container中：\ndocker可以支持把一个宿主机上的目录挂载到镜像里。\n\n```\ndocker run -it -v /home/dock/Downloads:/usr/Downloads ubuntu64 /bin/bash\n```\n\n通过-v参数，冒号前为宿主机目录，必须为绝对路径，冒号后为镜像内挂载的路径。\n\n一个dockfile:\n \n```\nMAINTAINER Anna Doe <anna@example.com>\nnodejs pm2:\nFROM node:0.11.13\n# or just node, without tag\n\nRUN npm install -g pm2\nRUN pm2 dump\n# dump will start pm2 daemon and create everything needed\n\nVOLUME [\"/srv/apps\", \"/srv/logs\", \"/srv/server.json\"]\n# don't put the files in docker container, user -v\n\nEXPOSE 3000\n\nCMD [\"pm2\", \"start\", \"/srv/server.json\", \"--no-daemon\"]\n# no daemon mode for docker\n```\n\n6. docker build -t repo[:tag] . \n   \n可以指定repo和可选的tag\n如果注意，会看到 docker build 命令最后有一个 .。. 表示当前目录\ncopy命令只有在当前上下文有有效\n\n7. 从container中导出\n导出(Export)\nExport命令用于持久化容器（不是镜像）\n接着执行导出：\nsudo docker export <CONTAINER ID> > /home/export.tar\n\n导出后，可以通过docker import   导入，如\n\n```\ncat busy.tar | sudo docker import - busy:v1.0\n\n```\n\n8. 保存镜像\n   sudo docker save busybox-1 > /home/save.tar\n\n\n```\n用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。\n```\n\n9. docker 自启动配置\n\n自动启动container 如下：\n\n```\ndocker run -ti --restart=on-failure:3   \n失败后会启动三次\n```\n10. 用非root用户操作docker\n下面是使用非root用户操作的步骤\n\n```\n创建docker组\nsudo groupadd docker\n将当前用户加入docker组\nsudo gpasswd -a ${USER} docker\n重新启动docker服务（下面是CentOS7的命令）\nsudo systemctl restart docker\n当前用户退出系统重新登陆\n运行docker命令\ndocker ps\n```\n\n11.用docker 启动zookeeper \n\n```\nps -aux | grep docker\ndocker run  --name alizookeeper --restart always -d -P zookeeper\n```\n\n ","slug":"docker","published":1,"updated":"2020-06-29T06:22:24.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5sdz10004yy8kzjoaknzp","content":"<p>总结一下常用命令:</p>\n<p>其中&lt;&gt;阔起来的参数为必选，[]阔起来为可选</p>\n<p>docker version 查看docker的版本号，包括客户端、服务端、依赖的Go等<br>docker info 查看系统(docker)层面信息，包括管理的images, containers数等<br>docker search <image> 在docker index中搜索image<br>docker pull <image> 从docker registry server 中下拉image<br>docker push &lt;image|repository&gt; 推送一个image或repository到registry<br>docker push &lt;image|repository&gt;:TAG 同上，指定tag<br>docker inspect &lt;image|container&gt; 查看image或container的底层信息<br>docker images TODO filter out the intermediate image layers (intermediate image layers 是什么)<br>docker images -a 列出所有的images<br>docker ps 默认显示正在运行中的container<br>docker ps -l 显示最后一次创建的container，包括未运行的<br>docker ps -a 显示所有的container，包括未运行的<br>docker logs <container> 查看container的日志，也就是执行命令的一些输出<br>docker rm &lt;container…&gt; 删除一个或多个container<br>docker rm <code>docker ps -a -q</code> 删除所有的container<br>docker ps -a -q | xargs docker rm 同上, 删除所有的container<br>docker rmi &lt;image…&gt; 删除一个或多个image<br>docker start/stop/restart <container> 开启/停止/重启container<br>docker start -i <container> 启动一个container并进入交互模式<br>docker attach <container> attach一个运行中的container<br>docker run <image> <command> 使用image创建container并执行相应命令，然后停止<br>docker run -i -t <image> /bin/bash 使用image创建container并进入交互模式, login shell是/bin/bash<br>docker run -i -t -p &lt;host_port:contain_port&gt; 将container的端口映射到宿主机的端口<br>docker commit <container> [repo:tag] 将一个container固化为一个新的image，后面的repo:tag可选<br>docker build <path> 寻找path路径下名为的Dockerfile的配置文件，使用此配置生成新的image<br>docker build -t repo[:tag] 同上，可以指定repo和可选的tag<br>docker build - &lt; <dockerfile> 使用指定的dockerfile配置文件，docker以stdin方式获取内容，使用此配置生成新的image<br>docker port <container> <container port> 查看本地哪个端口映射到container的指定端口，其实用docker ps 也可以看到</container></container></dockerfile></path></container></image></image></container></container></container></container></image></image></p>\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><ol>\n<li>利用官方脚本：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum update</span><br><span class=\"line\">$ sudo curl -sSL https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>用黄狗安装：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum update</span><br><span class=\"line\">$ sudo yum -y install docker</span><br><span class=\"line\">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h3><h5 id=\"删除所有已经停止的continer-q-列出所有id\"><a href=\"#删除所有已经停止的continer-q-列出所有id\" class=\"headerlink\" title=\"删除所有已经停止的continer  -q 列出所有id\"></a>删除所有已经停止的continer  -q 列出所有id</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure>\n<h5 id=\"删除所有镜像\"><a href=\"#删除所有镜像\" class=\"headerlink\" title=\"删除所有镜像\"></a>删除所有镜像</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi $(docker images | grep none | awk &apos;&#123;print $3&#125;&apos; | sort -r)</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令说明\"><a href=\"#命令说明\" class=\"headerlink\" title=\"命令说明\"></a>命令说明</h3><ol>\n<li>其中go的语法模板</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images --format &quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;&quot;</span><br><span class=\"line\">docker images --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Repository&#125;&#125;\\t&#123;&#123;.Tag&#125;&#125;&quot;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>filter 过滤参数</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images -f since=mongo:3.2</span><br></pre></td></tr></table></figure>\n<p> 表示自从3.2 版本以来所有的镜像。</p>\n<ol start=\"3\">\n<li><p>docker run -it –rm –name ryanserver ubuntu:14.04 bash </p>\n<p>it 表示交互终端<br>rm 推出后删除<br>ubuntu  镜像名称<br>bash bash命令<br>naem 指定container名称</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name webserver -d -p 85:80 nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</p>\n</li>\n</ol>\n<ul>\n<li>-a :提交的镜像作者；</li>\n<li>-c :使用Dockerfile指令来创建镜像；</li>\n<li>-m :提交时的说明文字；</li>\n<li>-p :在commit时，将容器暂停。<br>如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker commit \\</span><br><span class=\"line\">    --author &quot;Tao Wang &lt;twang2218@gmail.com&gt;&quot; \\</span><br><span class=\"line\">    --message &quot;修改了默认网页&quot; \\</span><br><span class=\"line\">    webserver \\</span><br><span class=\"line\">    nginx:v2</span><br></pre></td></tr></table></figure>\n<p>5.通过dockfile制作镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM nginx</span><br><span class=\"line\">RUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>\n<p>from 指定基础镜像 </p>\n<p>Dockerfile中每次运行run 都执行了一层。&amp;&amp; 将各个所需命令串联起来</p>\n<p>Dockerfile 支持 Shell 类的行尾添加 \\ 的命令换行方式，以及行首# 进行注释的格式<br>一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。</p>\n<p>copy 文件时可使用通配符，其通配符规则要满足 Go 的 filepath.Match 规则，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY hom* /mydir/</span><br><span class=\"line\">COPY hom?.txt /mydir/</span><br></pre></td></tr></table></figure>\n<p>Add 功能和copy 类似，不过自带解压功能：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM scratch</span><br><span class=\"line\">ADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /</span><br></pre></td></tr></table></figure>\n<h6 id=\"环境变量的配置\"><a href=\"#环境变量的配置\" class=\"headerlink\" title=\"环境变量的配置\"></a>环境变量的配置</h6><p>格式有两种：<br>  ● ENV <key> <value><br>  ● ENV <key1>=<value1> <key2>=<value2>…<br>例如 ENV VERSION=1.0 DEBUG=on \\<br>     NAME=”Happy Feet</value2></key2></value1></key1></value></key></p>\n<h6 id=\"匿名卷\"><a href=\"#匿名卷\" class=\"headerlink\" title=\"匿名卷\"></a>匿名卷</h6><p>在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，<br>任何向 /data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：<br>docker run -d -v mydata:/data xxxx</p>\n<h6 id=\"挂载host目录\"><a href=\"#挂载host目录\" class=\"headerlink\" title=\"挂载host目录\"></a>挂载host目录</h6><p>将host机中的文件挂载到container中：<br>docker可以支持把一个宿主机上的目录挂载到镜像里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -v /home/dock/Downloads:/usr/Downloads ubuntu64 /bin/bash</span><br></pre></td></tr></table></figure>\n<p>通过-v参数，冒号前为宿主机目录，必须为绝对路径，冒号后为镜像内挂载的路径。</p>\n<p>一个dockfile:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAINTAINER Anna Doe &lt;anna@example.com&gt;</span><br><span class=\"line\">nodejs pm2:</span><br><span class=\"line\">FROM node:0.11.13</span><br><span class=\"line\"># or just node, without tag</span><br><span class=\"line\"></span><br><span class=\"line\">RUN npm install -g pm2</span><br><span class=\"line\">RUN pm2 dump</span><br><span class=\"line\"># dump will start pm2 daemon and create everything needed</span><br><span class=\"line\"></span><br><span class=\"line\">VOLUME [&quot;/srv/apps&quot;, &quot;/srv/logs&quot;, &quot;/srv/server.json&quot;]</span><br><span class=\"line\"># don&apos;t put the files in docker container, user -v</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\"></span><br><span class=\"line\">CMD [&quot;pm2&quot;, &quot;start&quot;, &quot;/srv/server.json&quot;, &quot;--no-daemon&quot;]</span><br><span class=\"line\"># no daemon mode for docker</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>docker build -t repo[:tag] . </li>\n</ol>\n<p>可以指定repo和可选的tag<br>如果注意，会看到 docker build 命令最后有一个 .。. 表示当前目录<br>copy命令只有在当前上下文有有效</p>\n<ol start=\"7\">\n<li>从container中导出<br>导出(Export)<br>Export命令用于持久化容器（不是镜像）<br>接着执行导出：<br>sudo docker export <container id> &gt; /home/export.tar</container></li>\n</ol>\n<p>导出后，可以通过docker import   导入，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat busy.tar | sudo docker import - busy:v1.0</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>保存镜像<br>sudo docker save busybox-1 &gt; /home/save.tar</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>docker 自启动配置</li>\n</ol>\n<p>自动启动container 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -ti --restart=on-failure:3   </span><br><span class=\"line\">失败后会启动三次</span><br></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>用非root用户操作docker<br>下面是使用非root用户操作的步骤</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建docker组</span><br><span class=\"line\">sudo groupadd docker</span><br><span class=\"line\">将当前用户加入docker组</span><br><span class=\"line\">sudo gpasswd -a $&#123;USER&#125; docker</span><br><span class=\"line\">重新启动docker服务（下面是CentOS7的命令）</span><br><span class=\"line\">sudo systemctl restart docker</span><br><span class=\"line\">当前用户退出系统重新登陆</span><br><span class=\"line\">运行docker命令</span><br><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n<p>11.用docker 启动zookeeper </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -aux | grep docker</span><br><span class=\"line\">docker run  --name alizookeeper --restart always -d -P zookeeper</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>总结一下常用命令:</p>\n<p>其中&lt;&gt;阔起来的参数为必选，[]阔起来为可选</p>\n<p>docker version 查看docker的版本号，包括客户端、服务端、依赖的Go等<br>docker info 查看系统(docker)层面信息，包括管理的images, containers数等<br>docker search <image> 在docker index中搜索image<br>docker pull <image> 从docker registry server 中下拉image<br>docker push &lt;image|repository&gt; 推送一个image或repository到registry<br>docker push &lt;image|repository&gt;:TAG 同上，指定tag<br>docker inspect &lt;image|container&gt; 查看image或container的底层信息<br>docker images TODO filter out the intermediate image layers (intermediate image layers 是什么)<br>docker images -a 列出所有的images<br>docker ps 默认显示正在运行中的container<br>docker ps -l 显示最后一次创建的container，包括未运行的<br>docker ps -a 显示所有的container，包括未运行的<br>docker logs <container> 查看container的日志，也就是执行命令的一些输出<br>docker rm &lt;container…&gt; 删除一个或多个container<br>docker rm <code>docker ps -a -q</code> 删除所有的container<br>docker ps -a -q | xargs docker rm 同上, 删除所有的container<br>docker rmi &lt;image…&gt; 删除一个或多个image<br>docker start/stop/restart <container> 开启/停止/重启container<br>docker start -i <container> 启动一个container并进入交互模式<br>docker attach <container> attach一个运行中的container<br>docker run <image> <command> 使用image创建container并执行相应命令，然后停止<br>docker run -i -t <image> /bin/bash 使用image创建container并进入交互模式, login shell是/bin/bash<br>docker run -i -t -p &lt;host_port:contain_port&gt; 将container的端口映射到宿主机的端口<br>docker commit <container> [repo:tag] 将一个container固化为一个新的image，后面的repo:tag可选<br>docker build <path> 寻找path路径下名为的Dockerfile的配置文件，使用此配置生成新的image<br>docker build -t repo[:tag] 同上，可以指定repo和可选的tag<br>docker build - &lt; <dockerfile> 使用指定的dockerfile配置文件，docker以stdin方式获取内容，使用此配置生成新的image<br>docker port <container> <container port> 查看本地哪个端口映射到container的指定端口，其实用docker ps 也可以看到</container></container></dockerfile></path></container></image></image></container></container></container></container></image></image></p>\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><ol>\n<li>利用官方脚本：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum update</span><br><span class=\"line\">$ sudo curl -sSL https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>用黄狗安装：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum update</span><br><span class=\"line\">$ sudo yum -y install docker</span><br><span class=\"line\">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h3><h5 id=\"删除所有已经停止的continer-q-列出所有id\"><a href=\"#删除所有已经停止的continer-q-列出所有id\" class=\"headerlink\" title=\"删除所有已经停止的continer  -q 列出所有id\"></a>删除所有已经停止的continer  -q 列出所有id</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure>\n<h5 id=\"删除所有镜像\"><a href=\"#删除所有镜像\" class=\"headerlink\" title=\"删除所有镜像\"></a>删除所有镜像</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi $(docker images | grep none | awk &apos;&#123;print $3&#125;&apos; | sort -r)</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令说明\"><a href=\"#命令说明\" class=\"headerlink\" title=\"命令说明\"></a>命令说明</h3><ol>\n<li>其中go的语法模板</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images --format &quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;&quot;</span><br><span class=\"line\">docker images --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Repository&#125;&#125;\\t&#123;&#123;.Tag&#125;&#125;&quot;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>filter 过滤参数</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images -f since=mongo:3.2</span><br></pre></td></tr></table></figure>\n<p> 表示自从3.2 版本以来所有的镜像。</p>\n<ol start=\"3\">\n<li><p>docker run -it –rm –name ryanserver ubuntu:14.04 bash </p>\n<p>it 表示交互终端<br>rm 推出后删除<br>ubuntu  镜像名称<br>bash bash命令<br>naem 指定container名称</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name webserver -d -p 85:80 nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</p>\n</li>\n</ol>\n<ul>\n<li>-a :提交的镜像作者；</li>\n<li>-c :使用Dockerfile指令来创建镜像；</li>\n<li>-m :提交时的说明文字；</li>\n<li>-p :在commit时，将容器暂停。<br>如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker commit \\</span><br><span class=\"line\">    --author &quot;Tao Wang &lt;twang2218@gmail.com&gt;&quot; \\</span><br><span class=\"line\">    --message &quot;修改了默认网页&quot; \\</span><br><span class=\"line\">    webserver \\</span><br><span class=\"line\">    nginx:v2</span><br></pre></td></tr></table></figure>\n<p>5.通过dockfile制作镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM nginx</span><br><span class=\"line\">RUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>\n<p>from 指定基础镜像 </p>\n<p>Dockerfile中每次运行run 都执行了一层。&amp;&amp; 将各个所需命令串联起来</p>\n<p>Dockerfile 支持 Shell 类的行尾添加 \\ 的命令换行方式，以及行首# 进行注释的格式<br>一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。</p>\n<p>copy 文件时可使用通配符，其通配符规则要满足 Go 的 filepath.Match 规则，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY hom* /mydir/</span><br><span class=\"line\">COPY hom?.txt /mydir/</span><br></pre></td></tr></table></figure>\n<p>Add 功能和copy 类似，不过自带解压功能：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM scratch</span><br><span class=\"line\">ADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /</span><br></pre></td></tr></table></figure>\n<h6 id=\"环境变量的配置\"><a href=\"#环境变量的配置\" class=\"headerlink\" title=\"环境变量的配置\"></a>环境变量的配置</h6><p>格式有两种：<br>  ● ENV <key> <value><br>  ● ENV <key1>=<value1> <key2>=<value2>…<br>例如 ENV VERSION=1.0 DEBUG=on \\<br>     NAME=”Happy Feet</value2></key2></value1></key1></value></key></p>\n<h6 id=\"匿名卷\"><a href=\"#匿名卷\" class=\"headerlink\" title=\"匿名卷\"></a>匿名卷</h6><p>在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，<br>任何向 /data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：<br>docker run -d -v mydata:/data xxxx</p>\n<h6 id=\"挂载host目录\"><a href=\"#挂载host目录\" class=\"headerlink\" title=\"挂载host目录\"></a>挂载host目录</h6><p>将host机中的文件挂载到container中：<br>docker可以支持把一个宿主机上的目录挂载到镜像里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -v /home/dock/Downloads:/usr/Downloads ubuntu64 /bin/bash</span><br></pre></td></tr></table></figure>\n<p>通过-v参数，冒号前为宿主机目录，必须为绝对路径，冒号后为镜像内挂载的路径。</p>\n<p>一个dockfile:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAINTAINER Anna Doe &lt;anna@example.com&gt;</span><br><span class=\"line\">nodejs pm2:</span><br><span class=\"line\">FROM node:0.11.13</span><br><span class=\"line\"># or just node, without tag</span><br><span class=\"line\"></span><br><span class=\"line\">RUN npm install -g pm2</span><br><span class=\"line\">RUN pm2 dump</span><br><span class=\"line\"># dump will start pm2 daemon and create everything needed</span><br><span class=\"line\"></span><br><span class=\"line\">VOLUME [&quot;/srv/apps&quot;, &quot;/srv/logs&quot;, &quot;/srv/server.json&quot;]</span><br><span class=\"line\"># don&apos;t put the files in docker container, user -v</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\"></span><br><span class=\"line\">CMD [&quot;pm2&quot;, &quot;start&quot;, &quot;/srv/server.json&quot;, &quot;--no-daemon&quot;]</span><br><span class=\"line\"># no daemon mode for docker</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>docker build -t repo[:tag] . </li>\n</ol>\n<p>可以指定repo和可选的tag<br>如果注意，会看到 docker build 命令最后有一个 .。. 表示当前目录<br>copy命令只有在当前上下文有有效</p>\n<ol start=\"7\">\n<li>从container中导出<br>导出(Export)<br>Export命令用于持久化容器（不是镜像）<br>接着执行导出：<br>sudo docker export <container id> &gt; /home/export.tar</container></li>\n</ol>\n<p>导出后，可以通过docker import   导入，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat busy.tar | sudo docker import - busy:v1.0</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>保存镜像<br>sudo docker save busybox-1 &gt; /home/save.tar</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>docker 自启动配置</li>\n</ol>\n<p>自动启动container 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -ti --restart=on-failure:3   </span><br><span class=\"line\">失败后会启动三次</span><br></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>用非root用户操作docker<br>下面是使用非root用户操作的步骤</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建docker组</span><br><span class=\"line\">sudo groupadd docker</span><br><span class=\"line\">将当前用户加入docker组</span><br><span class=\"line\">sudo gpasswd -a $&#123;USER&#125; docker</span><br><span class=\"line\">重新启动docker服务（下面是CentOS7的命令）</span><br><span class=\"line\">sudo systemctl restart docker</span><br><span class=\"line\">当前用户退出系统重新登陆</span><br><span class=\"line\">运行docker命令</span><br><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n<p>11.用docker 启动zookeeper </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -aux | grep docker</span><br><span class=\"line\">docker run  --name alizookeeper --restart always -d -P zookeeper</span><br></pre></td></tr></table></figure>\n"},{"title":"encoding","date":"2019-11-08T06:11:43.000Z","_content":"1. charCodeAt() 返回表示给定索引的字符的Unicode的值。 codePointAt() 返回使用UTF-16编码的给定位置的值的非负整数。\n1. Transfer-Encoding   数据以一系列分块的形式进行发送。 Content-Length 首部在这种情况下不被发送。。在每一个分块的开头需要添加当前分块的长度，以十六进制的形式表示，后面紧跟着 '\\r\\n' ，之后是分块本身，后面也是'\\r\\n' 。终止块是一个常规的分块，不同之处在于其长度为0。终止块后面是一个挂载（trailer），由一系列（或者为空）的实体消息首部构成。\n1. ascii 第一个bit为0，也就是当第一个bit是0时仍表示之前那些常用的字符.当为1时就表示其他补充的字符，例如西欧国家的文字。\n1. utf-8  Refer:https://segmentfault.com/a/1190000014324711\n```text\n0xxxxxxx,如果是这样的01串,也就是以0开头后面是啥就不用管了XX代表任意bit.就表示把一个字节做为一个单元.就跟ASCII完全一样.\n   110xxxxx 10xxxxxx.如果是这样的格式,则把两个字节当一个单元\n   \n   1110xxxx 10xxxxxx 10xxxxxx 如果是这种格式则是三个字节当一个单元\n```   \n\n1. ","source":"_posts/encoding.md","raw":"---\ntitle: encoding\ndate: 2019-11-08 14:11:43\ntags:\n---\n1. charCodeAt() 返回表示给定索引的字符的Unicode的值。 codePointAt() 返回使用UTF-16编码的给定位置的值的非负整数。\n1. Transfer-Encoding   数据以一系列分块的形式进行发送。 Content-Length 首部在这种情况下不被发送。。在每一个分块的开头需要添加当前分块的长度，以十六进制的形式表示，后面紧跟着 '\\r\\n' ，之后是分块本身，后面也是'\\r\\n' 。终止块是一个常规的分块，不同之处在于其长度为0。终止块后面是一个挂载（trailer），由一系列（或者为空）的实体消息首部构成。\n1. ascii 第一个bit为0，也就是当第一个bit是0时仍表示之前那些常用的字符.当为1时就表示其他补充的字符，例如西欧国家的文字。\n1. utf-8  Refer:https://segmentfault.com/a/1190000014324711\n```text\n0xxxxxxx,如果是这样的01串,也就是以0开头后面是啥就不用管了XX代表任意bit.就表示把一个字节做为一个单元.就跟ASCII完全一样.\n   110xxxxx 10xxxxxx.如果是这样的格式,则把两个字节当一个单元\n   \n   1110xxxx 10xxxxxx 10xxxxxx 如果是这种格式则是三个字节当一个单元\n```   \n\n1. ","slug":"encoding","published":1,"updated":"2020-06-29T06:22:24.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5sdz20005yy8kcz7igmby","content":"<ol>\n<li>charCodeAt() 返回表示给定索引的字符的Unicode的值。 codePointAt() 返回使用UTF-16编码的给定位置的值的非负整数。</li>\n<li>Transfer-Encoding   数据以一系列分块的形式进行发送。 Content-Length 首部在这种情况下不被发送。。在每一个分块的开头需要添加当前分块的长度，以十六进制的形式表示，后面紧跟着 ‘\\r\\n’ ，之后是分块本身，后面也是’\\r\\n’ 。终止块是一个常规的分块，不同之处在于其长度为0。终止块后面是一个挂载（trailer），由一系列（或者为空）的实体消息首部构成。</li>\n<li>ascii 第一个bit为0，也就是当第一个bit是0时仍表示之前那些常用的字符.当为1时就表示其他补充的字符，例如西欧国家的文字。</li>\n<li><p>utf-8  Refer:<a href=\"https://segmentfault.com/a/1190000014324711\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000014324711</a></p>\n<pre><code class=\"text\">0xxxxxxx,如果是这样的01串,也就是以0开头后面是啥就不用管了XX代表任意bit.就表示把一个字节做为一个单元.就跟ASCII完全一样.\n110xxxxx 10xxxxxx.如果是这样的格式,则把两个字节当一个单元\n\n1110xxxx 10xxxxxx 10xxxxxx 如果是这种格式则是三个字节当一个单元\n</code></pre>\n</li>\n<li></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>charCodeAt() 返回表示给定索引的字符的Unicode的值。 codePointAt() 返回使用UTF-16编码的给定位置的值的非负整数。</li>\n<li>Transfer-Encoding   数据以一系列分块的形式进行发送。 Content-Length 首部在这种情况下不被发送。。在每一个分块的开头需要添加当前分块的长度，以十六进制的形式表示，后面紧跟着 ‘\\r\\n’ ，之后是分块本身，后面也是’\\r\\n’ 。终止块是一个常规的分块，不同之处在于其长度为0。终止块后面是一个挂载（trailer），由一系列（或者为空）的实体消息首部构成。</li>\n<li>ascii 第一个bit为0，也就是当第一个bit是0时仍表示之前那些常用的字符.当为1时就表示其他补充的字符，例如西欧国家的文字。</li>\n<li><p>utf-8  Refer:<a href=\"https://segmentfault.com/a/1190000014324711\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000014324711</a></p>\n<pre><code class=\"text\">0xxxxxxx,如果是这样的01串,也就是以0开头后面是啥就不用管了XX代表任意bit.就表示把一个字节做为一个单元.就跟ASCII完全一样.\n110xxxxx 10xxxxxx.如果是这样的格式,则把两个字节当一个单元\n\n1110xxxx 10xxxxxx 10xxxxxx 如果是这种格式则是三个字节当一个单元\n</code></pre>\n</li>\n<li></li>\n</ol>\n"},{"title":"cloud","date":"2020-11-10T03:06:58.000Z","_content":"\n1. 增量数据迁移\n\n数据复制：由于业务原因，需要将数据从一个空间迁移至另一个空间。\n\n合规性要求：合规性要求所规定的数据需要跨一定距离保存一份副本。\n\n数据备份与容灾：如果您对所有写入的数据都希望在异地存储区域维护一份副本，以备发生如海啸、地震等特大灾难导致存储区域损毁时，还能启用异地存储区域的备份数据。\n\n最大限度减少延迟：用户处于两个地理位置。为了最大限度缩短访问对象时的延迟，可以在地理位置与用户较近的存储区域维护对象副本。\n\n2. 增量数据同步是跨不同的Bucket自动、异步复制文件，它会将对源Bucket中的对象的改动（除删除操作）同步到目标Bucket。\n\n3. 对象锁定\n\n对象锁定功能可以禁止文件的删除和覆盖，以保障数据可靠性和满足某些行业的合规性要求，实现一次写入，多次读取（WORM）模式。\n部分行业规定要求重要数据必须保存一定的时间后才可以被删除，如金融服务，医疗、政务部门等；为了满足该场景，对象存储需要支持WORM(对象锁定)模式，即一次写入，多次读取。\n\n除特殊行业的强制需求外，如有其他需求需要在一定时间或永久禁止某些文件的删除和覆盖，也可以使用对象锁定功能。\n\n4. \n动态加速：通过路由优化、传输优化等动态加速技术解决跨运营商、网络不稳定等因素导致的响应慢、丢包、服务不稳定等问题，适用于较差网络环境下上传下载的场景。\n\n大文件下载加速：通过CDN边缘节点缓存源站内容来实现文件加速分发，提供低成本、高性能、可扩展的互联网内容分发服务，适用于相同内容反复下载的使用场景\n\n5.\n管理元数据\n管理元数据功能可以修改文件的HTTP响应头，实现控制客户端缓存时间、文件强制下载等策略。除一些通用响应头外，还支持配置自定义元数据。\n\nContent-Disposition 响应头指示回复的内容该以何种形式展示，是以内联的形式（即网页或者页面的一部分），还是以附件的形式下载并保存到本地。","source":"_posts/cloud.md","raw":"---\ntitle: cloud\ndate: 2020-11-10 11:06:58\ntags:\n---\n\n1. 增量数据迁移\n\n数据复制：由于业务原因，需要将数据从一个空间迁移至另一个空间。\n\n合规性要求：合规性要求所规定的数据需要跨一定距离保存一份副本。\n\n数据备份与容灾：如果您对所有写入的数据都希望在异地存储区域维护一份副本，以备发生如海啸、地震等特大灾难导致存储区域损毁时，还能启用异地存储区域的备份数据。\n\n最大限度减少延迟：用户处于两个地理位置。为了最大限度缩短访问对象时的延迟，可以在地理位置与用户较近的存储区域维护对象副本。\n\n2. 增量数据同步是跨不同的Bucket自动、异步复制文件，它会将对源Bucket中的对象的改动（除删除操作）同步到目标Bucket。\n\n3. 对象锁定\n\n对象锁定功能可以禁止文件的删除和覆盖，以保障数据可靠性和满足某些行业的合规性要求，实现一次写入，多次读取（WORM）模式。\n部分行业规定要求重要数据必须保存一定的时间后才可以被删除，如金融服务，医疗、政务部门等；为了满足该场景，对象存储需要支持WORM(对象锁定)模式，即一次写入，多次读取。\n\n除特殊行业的强制需求外，如有其他需求需要在一定时间或永久禁止某些文件的删除和覆盖，也可以使用对象锁定功能。\n\n4. \n动态加速：通过路由优化、传输优化等动态加速技术解决跨运营商、网络不稳定等因素导致的响应慢、丢包、服务不稳定等问题，适用于较差网络环境下上传下载的场景。\n\n大文件下载加速：通过CDN边缘节点缓存源站内容来实现文件加速分发，提供低成本、高性能、可扩展的互联网内容分发服务，适用于相同内容反复下载的使用场景\n\n5.\n管理元数据\n管理元数据功能可以修改文件的HTTP响应头，实现控制客户端缓存时间、文件强制下载等策略。除一些通用响应头外，还支持配置自定义元数据。\n\nContent-Disposition 响应头指示回复的内容该以何种形式展示，是以内联的形式（即网页或者页面的一部分），还是以附件的形式下载并保存到本地。","slug":"cloud","published":1,"updated":"2020-11-10T03:34:46.003Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5sdz40008yy8kebjjnfxb","content":"<ol>\n<li>增量数据迁移</li>\n</ol>\n<p>数据复制：由于业务原因，需要将数据从一个空间迁移至另一个空间。</p>\n<p>合规性要求：合规性要求所规定的数据需要跨一定距离保存一份副本。</p>\n<p>数据备份与容灾：如果您对所有写入的数据都希望在异地存储区域维护一份副本，以备发生如海啸、地震等特大灾难导致存储区域损毁时，还能启用异地存储区域的备份数据。</p>\n<p>最大限度减少延迟：用户处于两个地理位置。为了最大限度缩短访问对象时的延迟，可以在地理位置与用户较近的存储区域维护对象副本。</p>\n<ol start=\"2\">\n<li><p>增量数据同步是跨不同的Bucket自动、异步复制文件，它会将对源Bucket中的对象的改动（除删除操作）同步到目标Bucket。</p>\n</li>\n<li><p>对象锁定</p>\n</li>\n</ol>\n<p>对象锁定功能可以禁止文件的删除和覆盖，以保障数据可靠性和满足某些行业的合规性要求，实现一次写入，多次读取（WORM）模式。<br>部分行业规定要求重要数据必须保存一定的时间后才可以被删除，如金融服务，医疗、政务部门等；为了满足该场景，对象存储需要支持WORM(对象锁定)模式，即一次写入，多次读取。</p>\n<p>除特殊行业的强制需求外，如有其他需求需要在一定时间或永久禁止某些文件的删除和覆盖，也可以使用对象锁定功能。</p>\n<ol start=\"4\">\n<li>动态加速：通过路由优化、传输优化等动态加速技术解决跨运营商、网络不稳定等因素导致的响应慢、丢包、服务不稳定等问题，适用于较差网络环境下上传下载的场景。</li>\n</ol>\n<p>大文件下载加速：通过CDN边缘节点缓存源站内容来实现文件加速分发，提供低成本、高性能、可扩展的互联网内容分发服务，适用于相同内容反复下载的使用场景</p>\n<p>5.<br>管理元数据<br>管理元数据功能可以修改文件的HTTP响应头，实现控制客户端缓存时间、文件强制下载等策略。除一些通用响应头外，还支持配置自定义元数据。</p>\n<p>Content-Disposition 响应头指示回复的内容该以何种形式展示，是以内联的形式（即网页或者页面的一部分），还是以附件的形式下载并保存到本地。</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>增量数据迁移</li>\n</ol>\n<p>数据复制：由于业务原因，需要将数据从一个空间迁移至另一个空间。</p>\n<p>合规性要求：合规性要求所规定的数据需要跨一定距离保存一份副本。</p>\n<p>数据备份与容灾：如果您对所有写入的数据都希望在异地存储区域维护一份副本，以备发生如海啸、地震等特大灾难导致存储区域损毁时，还能启用异地存储区域的备份数据。</p>\n<p>最大限度减少延迟：用户处于两个地理位置。为了最大限度缩短访问对象时的延迟，可以在地理位置与用户较近的存储区域维护对象副本。</p>\n<ol start=\"2\">\n<li><p>增量数据同步是跨不同的Bucket自动、异步复制文件，它会将对源Bucket中的对象的改动（除删除操作）同步到目标Bucket。</p>\n</li>\n<li><p>对象锁定</p>\n</li>\n</ol>\n<p>对象锁定功能可以禁止文件的删除和覆盖，以保障数据可靠性和满足某些行业的合规性要求，实现一次写入，多次读取（WORM）模式。<br>部分行业规定要求重要数据必须保存一定的时间后才可以被删除，如金融服务，医疗、政务部门等；为了满足该场景，对象存储需要支持WORM(对象锁定)模式，即一次写入，多次读取。</p>\n<p>除特殊行业的强制需求外，如有其他需求需要在一定时间或永久禁止某些文件的删除和覆盖，也可以使用对象锁定功能。</p>\n<ol start=\"4\">\n<li>动态加速：通过路由优化、传输优化等动态加速技术解决跨运营商、网络不稳定等因素导致的响应慢、丢包、服务不稳定等问题，适用于较差网络环境下上传下载的场景。</li>\n</ol>\n<p>大文件下载加速：通过CDN边缘节点缓存源站内容来实现文件加速分发，提供低成本、高性能、可扩展的互联网内容分发服务，适用于相同内容反复下载的使用场景</p>\n<p>5.<br>管理元数据<br>管理元数据功能可以修改文件的HTTP响应头，实现控制客户端缓存时间、文件强制下载等策略。除一些通用响应头外，还支持配置自定义元数据。</p>\n<p>Content-Disposition 响应头指示回复的内容该以何种形式展示，是以内联的形式（即网页或者页面的一部分），还是以附件的形式下载并保存到本地。</p>\n"},{"title":"es6","date":"2019-06-28T03:58:20.000Z","_content":"### reflect \n1. 修改某些Object方法的返回结果，让其变得更合理\n```javascript\n// 老写法\ntry {\n  Object.defineProperty(target, property, attributes);\n  // success\n} catch (e) {\n  // failure\n}\n\n// 新写法\nif (Reflect.defineProperty(target, property, attributes)) {\n  // success\n} else {\n  // failure\n}\n```\n\n1. Reflect对象的方法与Proxy对象的方法一一对应\n```javascript\nProxy(target, {\n  set: function(target, name, value, receiver) {\n    var success = Reflect.set(target, name, value, receiver);\n    if (success) {\n      console.log('property ' + name + ' on ' + target + ' set to ' + value);\n    }\n    return success;\n  }\n});\n```\n \n### lit\n1. 数组的空位 [,,,]\n\n1. parentheses to be omitted, as in\n\ntry {\n  // ...\n} catch {\n  // ...\n}\n\n \n### proxy\n\n1. Proxy 的 construct 用于拦截 new()\n   isExtensible方法拦截Object.isExtensible操作。\n   ownKeys方法用来拦截对象自身属性的读取操作。具体来说，拦截以下操作。\n   \n   Object.getOwnPropertyNames()\n   Object.getOwnPropertySymbols()\n   Object.keys()\n   for...in循环\n```javascript\nvar obj = new Proxy({}, {\n     get: function (target, key, receiver) {\n       console.log(`getting ${key}!`);\n       return Reflect.get(target, key, receiver);\n     },\n     set: function (target, key, value, receiver) {\n       console.log(`setting ${key}!`);\n       return Reflect.set(target, key, value, receiver);\n     }\n   });\n```\n\n1. 绑定上下文\n\n```javascript\nfunction selfish (target) {\n  const cache = new WeakMap();\n  const handler = {\n    get (target, key) {\n      const value = Reflect.get(target, key);\n      if (typeof value !== 'function') {\n        return value;\n      }\n      if (!cache.has(value)) {\n        cache.set(value, value.bind(target));\n      }\n      return cache.get(value);\n    }\n  };\n  const proxy = new Proxy(target, handler);\n  return proxy;\n}\n\nconst logger = selfish(new Logger());\n```   \n\n#### console \n```javascript\n\nconsole.table()\nconsole.dir()\nconsole.count()\nConsole.time() \nconsoel.timeLog()\nconsole.time(\"answer time\");\nalert(\"Click to continue\");\nconsole.timeEnd(\"answer time”);\n\n```","source":"_posts/es6.md","raw":"---\ntitle: es6\ndate: 2019-06-28 11:58:20\ntags: es\n---\n### reflect \n1. 修改某些Object方法的返回结果，让其变得更合理\n```javascript\n// 老写法\ntry {\n  Object.defineProperty(target, property, attributes);\n  // success\n} catch (e) {\n  // failure\n}\n\n// 新写法\nif (Reflect.defineProperty(target, property, attributes)) {\n  // success\n} else {\n  // failure\n}\n```\n\n1. Reflect对象的方法与Proxy对象的方法一一对应\n```javascript\nProxy(target, {\n  set: function(target, name, value, receiver) {\n    var success = Reflect.set(target, name, value, receiver);\n    if (success) {\n      console.log('property ' + name + ' on ' + target + ' set to ' + value);\n    }\n    return success;\n  }\n});\n```\n \n### lit\n1. 数组的空位 [,,,]\n\n1. parentheses to be omitted, as in\n\ntry {\n  // ...\n} catch {\n  // ...\n}\n\n \n### proxy\n\n1. Proxy 的 construct 用于拦截 new()\n   isExtensible方法拦截Object.isExtensible操作。\n   ownKeys方法用来拦截对象自身属性的读取操作。具体来说，拦截以下操作。\n   \n   Object.getOwnPropertyNames()\n   Object.getOwnPropertySymbols()\n   Object.keys()\n   for...in循环\n```javascript\nvar obj = new Proxy({}, {\n     get: function (target, key, receiver) {\n       console.log(`getting ${key}!`);\n       return Reflect.get(target, key, receiver);\n     },\n     set: function (target, key, value, receiver) {\n       console.log(`setting ${key}!`);\n       return Reflect.set(target, key, value, receiver);\n     }\n   });\n```\n\n1. 绑定上下文\n\n```javascript\nfunction selfish (target) {\n  const cache = new WeakMap();\n  const handler = {\n    get (target, key) {\n      const value = Reflect.get(target, key);\n      if (typeof value !== 'function') {\n        return value;\n      }\n      if (!cache.has(value)) {\n        cache.set(value, value.bind(target));\n      }\n      return cache.get(value);\n    }\n  };\n  const proxy = new Proxy(target, handler);\n  return proxy;\n}\n\nconst logger = selfish(new Logger());\n```   \n\n#### console \n```javascript\n\nconsole.table()\nconsole.dir()\nconsole.count()\nConsole.time() \nconsoel.timeLog()\nconsole.time(\"answer time\");\nalert(\"Click to continue\");\nconsole.timeEnd(\"answer time”);\n\n```","slug":"es6","published":1,"updated":"2020-08-18T08:37:18.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5sdz50009yy8kz8op9s2m","content":"<h3 id=\"reflect\"><a href=\"#reflect\" class=\"headerlink\" title=\"reflect\"></a>reflect</h3><ol>\n<li><p>修改某些Object方法的返回结果，让其变得更合理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 老写法</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(target, property, attributes);</span><br><span class=\"line\">  <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新写法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.defineProperty(target, property, attributes)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect对象的方法与Proxy对象的方法一一对应</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Proxy</span>(target, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(target, name, value, receiver) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> success = <span class=\"built_in\">Reflect</span>.set(target, name, value, receiver);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'property '</span> + name + <span class=\"string\">' on '</span> + target + <span class=\"string\">' set to '</span> + value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"lit\"><a href=\"#lit\" class=\"headerlink\" title=\"lit\"></a>lit</h3><ol>\n<li><p>数组的空位 [,,,]</p>\n</li>\n<li><p>parentheses to be omitted, as in</p>\n</li>\n</ol>\n<p>try {<br>  // …<br>} catch {<br>  // …<br>}</p>\n<h3 id=\"proxy\"><a href=\"#proxy\" class=\"headerlink\" title=\"proxy\"></a>proxy</h3><ol>\n<li><p>Proxy 的 construct 用于拦截 new()<br>isExtensible方法拦截Object.isExtensible操作。<br>ownKeys方法用来拦截对象自身属性的读取操作。具体来说，拦截以下操作。</p>\n<p>Object.getOwnPropertyNames()<br>Object.getOwnPropertySymbols()<br>Object.keys()<br>for…in循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">     <span class=\"keyword\">get</span>: function (target, key, receiver) &#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">`getting <span class=\"subst\">$&#123;key&#125;</span>!`</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, key, receiver);</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     <span class=\"keyword\">set</span>: function (target, key, value, receiver) &#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">`setting <span class=\"subst\">$&#123;key&#125;</span>!`</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target, key, value, receiver);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>绑定上下文</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selfish</span> (<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cache = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> (target, key) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = <span class=\"built_in\">Reflect</span>.get(target, key);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!cache.has(value)) &#123;</span><br><span class=\"line\">        cache.set(value, value.bind(target));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cache.get(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> logger = selfish(<span class=\"keyword\">new</span> Logger());</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### console </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>javascript</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.table()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.count()</span><br><span class=\"line\">Console.time() </span><br><span class=\"line\">consoel.timeLog()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">\"answer time\"</span>);</span><br><span class=\"line\">alert(<span class=\"string\">\"Click to continue\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">\"answer time”);</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"reflect\"><a href=\"#reflect\" class=\"headerlink\" title=\"reflect\"></a>reflect</h3><ol>\n<li><p>修改某些Object方法的返回结果，让其变得更合理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 老写法</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(target, property, attributes);</span><br><span class=\"line\">  <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新写法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.defineProperty(target, property, attributes)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Reflect对象的方法与Proxy对象的方法一一对应</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Proxy</span>(target, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(target, name, value, receiver) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> success = <span class=\"built_in\">Reflect</span>.set(target, name, value, receiver);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'property '</span> + name + <span class=\"string\">' on '</span> + target + <span class=\"string\">' set to '</span> + value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"lit\"><a href=\"#lit\" class=\"headerlink\" title=\"lit\"></a>lit</h3><ol>\n<li><p>数组的空位 [,,,]</p>\n</li>\n<li><p>parentheses to be omitted, as in</p>\n</li>\n</ol>\n<p>try {<br>  // …<br>} catch {<br>  // …<br>}</p>\n<h3 id=\"proxy\"><a href=\"#proxy\" class=\"headerlink\" title=\"proxy\"></a>proxy</h3><ol>\n<li><p>Proxy 的 construct 用于拦截 new()<br>isExtensible方法拦截Object.isExtensible操作。<br>ownKeys方法用来拦截对象自身属性的读取操作。具体来说，拦截以下操作。</p>\n<p>Object.getOwnPropertyNames()<br>Object.getOwnPropertySymbols()<br>Object.keys()<br>for…in循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">     <span class=\"keyword\">get</span>: function (target, key, receiver) &#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">`getting <span class=\"subst\">$&#123;key&#125;</span>!`</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, key, receiver);</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     <span class=\"keyword\">set</span>: function (target, key, value, receiver) &#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">`setting <span class=\"subst\">$&#123;key&#125;</span>!`</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target, key, value, receiver);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>绑定上下文</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selfish</span> (<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cache = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> (target, key) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = <span class=\"built_in\">Reflect</span>.get(target, key);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!cache.has(value)) &#123;</span><br><span class=\"line\">        cache.set(value, value.bind(target));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cache.get(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> logger = selfish(<span class=\"keyword\">new</span> Logger());</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### console </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>javascript</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.table()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.count()</span><br><span class=\"line\">Console.time() </span><br><span class=\"line\">consoel.timeLog()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">\"answer time\"</span>);</span><br><span class=\"line\">alert(<span class=\"string\">\"Click to continue\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">\"answer time”);</span></span><br></pre></td></tr></table></figure>"},{"title":"es8","date":"2019-07-02T03:37:11.000Z","_content":"\n1. Stage 0: strawman——最初想法的提交。\n   Stage 1: proposal（提案）——由TC39至少一名成员倡导的正式提案文件，该文件包括API事例。\n   Stage 2: draft（草案）——功能规范的初始版本，该版本包含功能规范的两个实验实现。\n   Stage 3: candidate（候选）——提案规范通过审查并从厂商那里收集反馈\n   Stage 4: finished（完成）——提案准备加入ECMAScript，但是到浏览器或者Nodejs中可能需要更长的时间\n   \n2. es2018(es9) \n promise.finally  正则表达式匹配组 \n regex 先行断言和反向断言、dotall  \n \n1. Template Literals\n\n1. \n \n","source":"_posts/es8.md","raw":"---\ntitle: es8\ndate: 2019-07-02 11:37:11\ntags: es\n---\n\n1. Stage 0: strawman——最初想法的提交。\n   Stage 1: proposal（提案）——由TC39至少一名成员倡导的正式提案文件，该文件包括API事例。\n   Stage 2: draft（草案）——功能规范的初始版本，该版本包含功能规范的两个实验实现。\n   Stage 3: candidate（候选）——提案规范通过审查并从厂商那里收集反馈\n   Stage 4: finished（完成）——提案准备加入ECMAScript，但是到浏览器或者Nodejs中可能需要更长的时间\n   \n2. es2018(es9) \n promise.finally  正则表达式匹配组 \n regex 先行断言和反向断言、dotall  \n \n1. Template Literals\n\n1. \n \n","slug":"es8","published":1,"updated":"2020-06-29T06:22:24.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5sdz7000byy8kfpyjem2w","content":"<ol>\n<li><p>Stage 0: strawman——最初想法的提交。<br>Stage 1: proposal（提案）——由TC39至少一名成员倡导的正式提案文件，该文件包括API事例。<br>Stage 2: draft（草案）——功能规范的初始版本，该版本包含功能规范的两个实验实现。<br>Stage 3: candidate（候选）——提案规范通过审查并从厂商那里收集反馈<br>Stage 4: finished（完成）——提案准备加入ECMAScript，但是到浏览器或者Nodejs中可能需要更长的时间</p>\n</li>\n<li><p>es2018(es9)<br>promise.finally  正则表达式匹配组<br>regex 先行断言和反向断言、dotall  </p>\n</li>\n<li><p>Template Literals</p>\n</li>\n<li></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>Stage 0: strawman——最初想法的提交。<br>Stage 1: proposal（提案）——由TC39至少一名成员倡导的正式提案文件，该文件包括API事例。<br>Stage 2: draft（草案）——功能规范的初始版本，该版本包含功能规范的两个实验实现。<br>Stage 3: candidate（候选）——提案规范通过审查并从厂商那里收集反馈<br>Stage 4: finished（完成）——提案准备加入ECMAScript，但是到浏览器或者Nodejs中可能需要更长的时间</p>\n</li>\n<li><p>es2018(es9)<br>promise.finally  正则表达式匹配组<br>regex 先行断言和反向断言、dotall  </p>\n</li>\n<li><p>Template Literals</p>\n</li>\n<li></li>\n</ol>\n"},{"title":"eslint","date":"2016-12-25T05:31:39.000Z","_content":"\nESLint 一旦发现配置文件中有 \"root\": true，它就会停止在父级目录中寻找。\n\n```\n\n在整个文件中取消eslint检查：\n\n/* eslint-disable */\n\n// Disables all rules for the rest of the file \nalert(‘foo’);\n\n在整个文件中禁用某一项eslint规则的检查：\n\n/* eslint-disable no-alert */\n\n// Disables no-alert for the rest of the file \nalert(‘foo’);\n\n针对某一行禁用eslint检查：\n\nalert(‘foo’); // eslint-disable-line\n\n// eslint-disable-next-line \nalert(‘foo’);\n\n针对某一行的某一具体规则禁用eslint检查：\n\nalert(‘foo’); // eslint-disable-line no-alert\n\n// eslint-disable-next-line no-alert \nalert(‘foo’);\n\n针对某一行禁用多项具体规则的检查：\n\nalert(‘foo’); // eslint-disable-line no-alert, quotes, semi\n\n// eslint-disable-next-line no-alert, quotes, semi \nalert(‘foo’);\n```\n\n```\n行内配置\n\n\n/*eslint-disable*/ 和 /*eslint-enable*/\n\n/*global*/\n/*eslint*/\n/*eslint-env*/\n\n\n命令行选项：\n\n--global\n--rule\n--env\n\n-c、--config\n\n\n\n项目级配置：\n\n与要检测的文件在同一目录下的 .eslintrc.* 或 package.json 文件\n继续在父级目录寻找 .eslintrc 或 package.json文件，直到根目录（包括根目录）或直到发现一个有\"root\": true的配置。\n如果不是（1）到（3）中的任何一种情况，退回到 ~/.eslintrc 中自定义的默认配置。\n\n```\n\nglob 模式的配置\n```json  \n{\n  \"rules\": {\n    \"quotes\": [ 2, \"double\" ]\n  },\n\n  \"overrides\": [\n    {\n      \"files\": [ \"bin/*.js\", \"lib/*.js\" ],\n      \"excludedFiles\": \"*.test.js\",\n      \"rules\": {\n        \"quotes\": [ 2, \"single\" ]\n      }\n    }\n  ]\n}\n\n```\n\nignore 文件配置：\n\n# Ignore built files except build/index.js\nbuild/*\n!build/index.js\n\n全局变量\n```javascript\n  globals: {\n        MyGlobal: true\n    }\n```\n\n\n ","source":"_posts/eslint.md","raw":"---\ntitle: eslint\ndate: 2016-12-25 13:31:39\ntags: eslint\n---\n\nESLint 一旦发现配置文件中有 \"root\": true，它就会停止在父级目录中寻找。\n\n```\n\n在整个文件中取消eslint检查：\n\n/* eslint-disable */\n\n// Disables all rules for the rest of the file \nalert(‘foo’);\n\n在整个文件中禁用某一项eslint规则的检查：\n\n/* eslint-disable no-alert */\n\n// Disables no-alert for the rest of the file \nalert(‘foo’);\n\n针对某一行禁用eslint检查：\n\nalert(‘foo’); // eslint-disable-line\n\n// eslint-disable-next-line \nalert(‘foo’);\n\n针对某一行的某一具体规则禁用eslint检查：\n\nalert(‘foo’); // eslint-disable-line no-alert\n\n// eslint-disable-next-line no-alert \nalert(‘foo’);\n\n针对某一行禁用多项具体规则的检查：\n\nalert(‘foo’); // eslint-disable-line no-alert, quotes, semi\n\n// eslint-disable-next-line no-alert, quotes, semi \nalert(‘foo’);\n```\n\n```\n行内配置\n\n\n/*eslint-disable*/ 和 /*eslint-enable*/\n\n/*global*/\n/*eslint*/\n/*eslint-env*/\n\n\n命令行选项：\n\n--global\n--rule\n--env\n\n-c、--config\n\n\n\n项目级配置：\n\n与要检测的文件在同一目录下的 .eslintrc.* 或 package.json 文件\n继续在父级目录寻找 .eslintrc 或 package.json文件，直到根目录（包括根目录）或直到发现一个有\"root\": true的配置。\n如果不是（1）到（3）中的任何一种情况，退回到 ~/.eslintrc 中自定义的默认配置。\n\n```\n\nglob 模式的配置\n```json  \n{\n  \"rules\": {\n    \"quotes\": [ 2, \"double\" ]\n  },\n\n  \"overrides\": [\n    {\n      \"files\": [ \"bin/*.js\", \"lib/*.js\" ],\n      \"excludedFiles\": \"*.test.js\",\n      \"rules\": {\n        \"quotes\": [ 2, \"single\" ]\n      }\n    }\n  ]\n}\n\n```\n\nignore 文件配置：\n\n# Ignore built files except build/index.js\nbuild/*\n!build/index.js\n\n全局变量\n```javascript\n  globals: {\n        MyGlobal: true\n    }\n```\n\n\n ","slug":"eslint","published":1,"updated":"2020-07-03T07:12:45.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5sdz8000dyy8k29g6ve88","content":"<p>ESLint 一旦发现配置文件中有 “root”: true，它就会停止在父级目录中寻找。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">在整个文件中取消eslint检查：</span><br><span class=\"line\"></span><br><span class=\"line\">/* eslint-disable */</span><br><span class=\"line\"></span><br><span class=\"line\">// Disables all rules for the rest of the file </span><br><span class=\"line\">alert(‘foo’);</span><br><span class=\"line\"></span><br><span class=\"line\">在整个文件中禁用某一项eslint规则的检查：</span><br><span class=\"line\"></span><br><span class=\"line\">/* eslint-disable no-alert */</span><br><span class=\"line\"></span><br><span class=\"line\">// Disables no-alert for the rest of the file </span><br><span class=\"line\">alert(‘foo’);</span><br><span class=\"line\"></span><br><span class=\"line\">针对某一行禁用eslint检查：</span><br><span class=\"line\"></span><br><span class=\"line\">alert(‘foo’); // eslint-disable-line</span><br><span class=\"line\"></span><br><span class=\"line\">// eslint-disable-next-line </span><br><span class=\"line\">alert(‘foo’);</span><br><span class=\"line\"></span><br><span class=\"line\">针对某一行的某一具体规则禁用eslint检查：</span><br><span class=\"line\"></span><br><span class=\"line\">alert(‘foo’); // eslint-disable-line no-alert</span><br><span class=\"line\"></span><br><span class=\"line\">// eslint-disable-next-line no-alert </span><br><span class=\"line\">alert(‘foo’);</span><br><span class=\"line\"></span><br><span class=\"line\">针对某一行禁用多项具体规则的检查：</span><br><span class=\"line\"></span><br><span class=\"line\">alert(‘foo’); // eslint-disable-line no-alert, quotes, semi</span><br><span class=\"line\"></span><br><span class=\"line\">// eslint-disable-next-line no-alert, quotes, semi </span><br><span class=\"line\">alert(‘foo’);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">行内配置</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/*eslint-disable*/ 和 /*eslint-enable*/</span><br><span class=\"line\"></span><br><span class=\"line\">/*global*/</span><br><span class=\"line\">/*eslint*/</span><br><span class=\"line\">/*eslint-env*/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">命令行选项：</span><br><span class=\"line\"></span><br><span class=\"line\">--global</span><br><span class=\"line\">--rule</span><br><span class=\"line\">--env</span><br><span class=\"line\"></span><br><span class=\"line\">-c、--config</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">项目级配置：</span><br><span class=\"line\"></span><br><span class=\"line\">与要检测的文件在同一目录下的 .eslintrc.* 或 package.json 文件</span><br><span class=\"line\">继续在父级目录寻找 .eslintrc 或 package.json文件，直到根目录（包括根目录）或直到发现一个有&quot;root&quot;: true的配置。</span><br><span class=\"line\">如果不是（1）到（3）中的任何一种情况，退回到 ~/.eslintrc 中自定义的默认配置。</span><br></pre></td></tr></table></figure>\n<p>glob 模式的配置<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"rules\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"quotes\"</span>: [ <span class=\"number\">2</span>, <span class=\"string\">\"double\"</span> ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">\"overrides\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"files\"</span>: [ <span class=\"string\">\"bin/*.js\"</span>, <span class=\"string\">\"lib/*.js\"</span> ],</span><br><span class=\"line\">      <span class=\"attr\">\"excludedFiles\"</span>: <span class=\"string\">\"*.test.js\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"rules\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"quotes\"</span>: [ <span class=\"number\">2</span>, <span class=\"string\">\"single\"</span> ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ignore 文件配置：</p>\n<h1 id=\"Ignore-built-files-except-build-index-js\"><a href=\"#Ignore-built-files-except-build-index-js\" class=\"headerlink\" title=\"Ignore built files except build/index.js\"></a>Ignore built files except build/index.js</h1><p>build/*<br>!build/index.js</p>\n<p>全局变量<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">globals: &#123;</span><br><span class=\"line\">      MyGlobal: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>ESLint 一旦发现配置文件中有 “root”: true，它就会停止在父级目录中寻找。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">在整个文件中取消eslint检查：</span><br><span class=\"line\"></span><br><span class=\"line\">/* eslint-disable */</span><br><span class=\"line\"></span><br><span class=\"line\">// Disables all rules for the rest of the file </span><br><span class=\"line\">alert(‘foo’);</span><br><span class=\"line\"></span><br><span class=\"line\">在整个文件中禁用某一项eslint规则的检查：</span><br><span class=\"line\"></span><br><span class=\"line\">/* eslint-disable no-alert */</span><br><span class=\"line\"></span><br><span class=\"line\">// Disables no-alert for the rest of the file </span><br><span class=\"line\">alert(‘foo’);</span><br><span class=\"line\"></span><br><span class=\"line\">针对某一行禁用eslint检查：</span><br><span class=\"line\"></span><br><span class=\"line\">alert(‘foo’); // eslint-disable-line</span><br><span class=\"line\"></span><br><span class=\"line\">// eslint-disable-next-line </span><br><span class=\"line\">alert(‘foo’);</span><br><span class=\"line\"></span><br><span class=\"line\">针对某一行的某一具体规则禁用eslint检查：</span><br><span class=\"line\"></span><br><span class=\"line\">alert(‘foo’); // eslint-disable-line no-alert</span><br><span class=\"line\"></span><br><span class=\"line\">// eslint-disable-next-line no-alert </span><br><span class=\"line\">alert(‘foo’);</span><br><span class=\"line\"></span><br><span class=\"line\">针对某一行禁用多项具体规则的检查：</span><br><span class=\"line\"></span><br><span class=\"line\">alert(‘foo’); // eslint-disable-line no-alert, quotes, semi</span><br><span class=\"line\"></span><br><span class=\"line\">// eslint-disable-next-line no-alert, quotes, semi </span><br><span class=\"line\">alert(‘foo’);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">行内配置</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/*eslint-disable*/ 和 /*eslint-enable*/</span><br><span class=\"line\"></span><br><span class=\"line\">/*global*/</span><br><span class=\"line\">/*eslint*/</span><br><span class=\"line\">/*eslint-env*/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">命令行选项：</span><br><span class=\"line\"></span><br><span class=\"line\">--global</span><br><span class=\"line\">--rule</span><br><span class=\"line\">--env</span><br><span class=\"line\"></span><br><span class=\"line\">-c、--config</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">项目级配置：</span><br><span class=\"line\"></span><br><span class=\"line\">与要检测的文件在同一目录下的 .eslintrc.* 或 package.json 文件</span><br><span class=\"line\">继续在父级目录寻找 .eslintrc 或 package.json文件，直到根目录（包括根目录）或直到发现一个有&quot;root&quot;: true的配置。</span><br><span class=\"line\">如果不是（1）到（3）中的任何一种情况，退回到 ~/.eslintrc 中自定义的默认配置。</span><br></pre></td></tr></table></figure>\n<p>glob 模式的配置<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"rules\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"quotes\"</span>: [ <span class=\"number\">2</span>, <span class=\"string\">\"double\"</span> ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">\"overrides\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"files\"</span>: [ <span class=\"string\">\"bin/*.js\"</span>, <span class=\"string\">\"lib/*.js\"</span> ],</span><br><span class=\"line\">      <span class=\"attr\">\"excludedFiles\"</span>: <span class=\"string\">\"*.test.js\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"rules\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"quotes\"</span>: [ <span class=\"number\">2</span>, <span class=\"string\">\"single\"</span> ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ignore 文件配置：</p>\n<h1 id=\"Ignore-built-files-except-build-index-js\"><a href=\"#Ignore-built-files-except-build-index-js\" class=\"headerlink\" title=\"Ignore built files except build/index.js\"></a>Ignore built files except build/index.js</h1><p>build/*<br>!build/index.js</p>\n<p>全局变量<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">globals: &#123;</span><br><span class=\"line\">      MyGlobal: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"graphql","date":"2019-08-23T08:19:28.000Z","_content":"1. \n```text\nfunction(parent, args, ctx, info) {\n    …\n其中的参数的意义如下：\n\nparent: 当前上一个Resolver的返回值\nargs: 传入某个Query中的函数（比如上面例子中article(id: Int)中的id）\nctx: 在Resolver解析链中不断传递的中间变量（类似中间件架构中的context）\ninfo: 当前Query的AST对象\n}\n```\n2. query（查询）：当获取数据时，应当选取Query类型\n\n   mutation（更改）：当尝试修改数据时，应当使用mutation类型\n   \n   subscription（订阅）：当希望数据更改时，可以进行消息推送，使用subscription类型\n","source":"_posts/graphql.md","raw":"---\ntitle: graphql\ndate: 2019-08-23 16:19:28\ntags:\n---\n1. \n```text\nfunction(parent, args, ctx, info) {\n    …\n其中的参数的意义如下：\n\nparent: 当前上一个Resolver的返回值\nargs: 传入某个Query中的函数（比如上面例子中article(id: Int)中的id）\nctx: 在Resolver解析链中不断传递的中间变量（类似中间件架构中的context）\ninfo: 当前Query的AST对象\n}\n```\n2. query（查询）：当获取数据时，应当选取Query类型\n\n   mutation（更改）：当尝试修改数据时，应当使用mutation类型\n   \n   subscription（订阅）：当希望数据更改时，可以进行消息推送，使用subscription类型\n","slug":"graphql","published":1,"updated":"2020-06-29T06:22:24.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5sdz9000fyy8k63fh6ysm","content":"<ol>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function(parent, args, ctx, info) &#123;</span><br><span class=\"line\">    …</span><br><span class=\"line\">其中的参数的意义如下：</span><br><span class=\"line\"></span><br><span class=\"line\">parent: 当前上一个Resolver的返回值</span><br><span class=\"line\">args: 传入某个Query中的函数（比如上面例子中article(id: Int)中的id）</span><br><span class=\"line\">ctx: 在Resolver解析链中不断传递的中间变量（类似中间件架构中的context）</span><br><span class=\"line\">info: 当前Query的AST对象</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>query（查询）：当获取数据时，应当选取Query类型</p>\n<p>mutation（更改）：当尝试修改数据时，应当使用mutation类型</p>\n<p>subscription（订阅）：当希望数据更改时，可以进行消息推送，使用subscription类型</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function(parent, args, ctx, info) &#123;</span><br><span class=\"line\">    …</span><br><span class=\"line\">其中的参数的意义如下：</span><br><span class=\"line\"></span><br><span class=\"line\">parent: 当前上一个Resolver的返回值</span><br><span class=\"line\">args: 传入某个Query中的函数（比如上面例子中article(id: Int)中的id）</span><br><span class=\"line\">ctx: 在Resolver解析链中不断传递的中间变量（类似中间件架构中的context）</span><br><span class=\"line\">info: 当前Query的AST对象</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>query（查询）：当获取数据时，应当选取Query类型</p>\n<p>mutation（更改）：当尝试修改数据时，应当使用mutation类型</p>\n<p>subscription（订阅）：当希望数据更改时，可以进行消息推送，使用subscription类型</p>\n</li>\n</ol>\n"},{"title":"hexo","date":"2016-12-21T03:47:39.000Z","_content":"# install\nNode和Git都安装好后,首先创建一个文件夹,如blog,用户存放hexo的配置文件,然后进入blog里安装Hexo。\n\n执行如下命令安装Hexo：\n\nsudo npm install -g hexo\n\n初始化然后，执行init命令初始化hexo,命令：\n\nhexo init\n\n好啦，至此，全部安装工作已经完成！blog就是你的博客根目录，所有的操作都在里面进行。\n\n生成静态页面\n\nhexo generate（hexo g也可以）\n\n本地启动\n\n启动本地服务，进行文章预览调试，命令：\n\nhexo server\n\n浏览器输入http://localhost:4000\n\n我不知道你们能不能，反正我不能，因为我还有环境没配置好\n\n# 配置Github\n建立Repository\n\n建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法\n\n然后建立关联，我的blog在本地/Users/leopard/blog，blog是我之前建的东西也全在这里面，有：\n\n    _config.yml    node_modules    public      source\n\n    db.json        package.json    scaffolds  themes\n\n现在我们需要_config.yml文件，来建立关联，命令：\n\nvim _config.yml\n\n翻到最下面，改成我这样子的\n\ndeploy:\n\n     type: git\n\n     repo: https://github.com/leopardpan/leopardpan.github.io.git\n\n     branch: master\n\n然后执行命令：\n\nnpm install hexo-deployer-git --save\n\n \n# 一些常用命令：\n\nhexo new\"postName\" #新建文章\n\nhexo new page\"pageName\" #新建页面\n\nhexo generate #生成静态页面至public目录\n\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo help # 查看帮助\n\nhexo version #查看Hexo的版本\n\n ","source":"_posts/hexo.md","raw":"---\ntitle: hexo\ndate: 2016-12-21 11:47:39\ntags: hexo \n---\n# install\nNode和Git都安装好后,首先创建一个文件夹,如blog,用户存放hexo的配置文件,然后进入blog里安装Hexo。\n\n执行如下命令安装Hexo：\n\nsudo npm install -g hexo\n\n初始化然后，执行init命令初始化hexo,命令：\n\nhexo init\n\n好啦，至此，全部安装工作已经完成！blog就是你的博客根目录，所有的操作都在里面进行。\n\n生成静态页面\n\nhexo generate（hexo g也可以）\n\n本地启动\n\n启动本地服务，进行文章预览调试，命令：\n\nhexo server\n\n浏览器输入http://localhost:4000\n\n我不知道你们能不能，反正我不能，因为我还有环境没配置好\n\n# 配置Github\n建立Repository\n\n建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法\n\n然后建立关联，我的blog在本地/Users/leopard/blog，blog是我之前建的东西也全在这里面，有：\n\n    _config.yml    node_modules    public      source\n\n    db.json        package.json    scaffolds  themes\n\n现在我们需要_config.yml文件，来建立关联，命令：\n\nvim _config.yml\n\n翻到最下面，改成我这样子的\n\ndeploy:\n\n     type: git\n\n     repo: https://github.com/leopardpan/leopardpan.github.io.git\n\n     branch: master\n\n然后执行命令：\n\nnpm install hexo-deployer-git --save\n\n \n# 一些常用命令：\n\nhexo new\"postName\" #新建文章\n\nhexo new page\"pageName\" #新建页面\n\nhexo generate #生成静态页面至public目录\n\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo help # 查看帮助\n\nhexo version #查看Hexo的版本\n\n ","slug":"hexo","published":1,"updated":"2020-06-29T06:22:24.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5sdza000hyy8ktd9jwllr","content":"<h1 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h1><p>Node和Git都安装好后,首先创建一个文件夹,如blog,用户存放hexo的配置文件,然后进入blog里安装Hexo。</p>\n<p>执行如下命令安装Hexo：</p>\n<p>sudo npm install -g hexo</p>\n<p>初始化然后，执行init命令初始化hexo,命令：</p>\n<p>hexo init</p>\n<p>好啦，至此，全部安装工作已经完成！blog就是你的博客根目录，所有的操作都在里面进行。</p>\n<p>生成静态页面</p>\n<p>hexo generate（hexo g也可以）</p>\n<p>本地启动</p>\n<p>启动本地服务，进行文章预览调试，命令：</p>\n<p>hexo server</p>\n<p>浏览器输入<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a></p>\n<p>我不知道你们能不能，反正我不能，因为我还有环境没配置好</p>\n<h1 id=\"配置Github\"><a href=\"#配置Github\" class=\"headerlink\" title=\"配置Github\"></a>配置Github</h1><p>建立Repository</p>\n<p>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法</p>\n<p>然后建立关联，我的blog在本地/Users/leopard/blog，blog是我之前建的东西也全在这里面，有：</p>\n<pre><code>_config.yml    node_modules    public      source\n\ndb.json        package.json    scaffolds  themes\n</code></pre><p>现在我们需要_config.yml文件，来建立关联，命令：</p>\n<p>vim _config.yml</p>\n<p>翻到最下面，改成我这样子的</p>\n<p>deploy:</p>\n<pre><code>type: git\n\nrepo: https://github.com/leopardpan/leopardpan.github.io.git\n\nbranch: master\n</code></pre><p>然后执行命令：</p>\n<p>npm install hexo-deployer-git –save</p>\n<h1 id=\"一些常用命令：\"><a href=\"#一些常用命令：\" class=\"headerlink\" title=\"一些常用命令：\"></a>一些常用命令：</h1><p>hexo new”postName” #新建文章</p>\n<p>hexo new page”pageName” #新建页面</p>\n<p>hexo generate #生成静态页面至public目录</p>\n<p>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p>\n<p>hexo deploy #将.deploy目录部署到GitHub</p>\n<p>hexo help # 查看帮助</p>\n<p>hexo version #查看Hexo的版本</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h1><p>Node和Git都安装好后,首先创建一个文件夹,如blog,用户存放hexo的配置文件,然后进入blog里安装Hexo。</p>\n<p>执行如下命令安装Hexo：</p>\n<p>sudo npm install -g hexo</p>\n<p>初始化然后，执行init命令初始化hexo,命令：</p>\n<p>hexo init</p>\n<p>好啦，至此，全部安装工作已经完成！blog就是你的博客根目录，所有的操作都在里面进行。</p>\n<p>生成静态页面</p>\n<p>hexo generate（hexo g也可以）</p>\n<p>本地启动</p>\n<p>启动本地服务，进行文章预览调试，命令：</p>\n<p>hexo server</p>\n<p>浏览器输入<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a></p>\n<p>我不知道你们能不能，反正我不能，因为我还有环境没配置好</p>\n<h1 id=\"配置Github\"><a href=\"#配置Github\" class=\"headerlink\" title=\"配置Github\"></a>配置Github</h1><p>建立Repository</p>\n<p>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法</p>\n<p>然后建立关联，我的blog在本地/Users/leopard/blog，blog是我之前建的东西也全在这里面，有：</p>\n<pre><code>_config.yml    node_modules    public      source\n\ndb.json        package.json    scaffolds  themes\n</code></pre><p>现在我们需要_config.yml文件，来建立关联，命令：</p>\n<p>vim _config.yml</p>\n<p>翻到最下面，改成我这样子的</p>\n<p>deploy:</p>\n<pre><code>type: git\n\nrepo: https://github.com/leopardpan/leopardpan.github.io.git\n\nbranch: master\n</code></pre><p>然后执行命令：</p>\n<p>npm install hexo-deployer-git –save</p>\n<h1 id=\"一些常用命令：\"><a href=\"#一些常用命令：\" class=\"headerlink\" title=\"一些常用命令：\"></a>一些常用命令：</h1><p>hexo new”postName” #新建文章</p>\n<p>hexo new page”pageName” #新建页面</p>\n<p>hexo generate #生成静态页面至public目录</p>\n<p>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p>\n<p>hexo deploy #将.deploy目录部署到GitHub</p>\n<p>hexo help # 查看帮助</p>\n<p>hexo version #查看Hexo的版本</p>\n"},{"title":"fresh","date":"2020-06-04T02:33:26.000Z","_content":"\n1. ① 不能通过 new 关键字调用, 没有原型\n   ② 不可以改变 this 绑定，由外层非箭头函数决定，所以使用 call, apply, bind 也不会影响\n   ③ 不支持 arguments，所以根据作用域链，会拿到外层函数的 arguments\n   ④ 不支持重复命名参数\n   ⑤ 隐式返回\n1. v-once v-pre\n1. readystate  \n```text\n 是HTTP请求的状态，当一个XMLHttpRequest初次创建时，这个属性的值从0开始，直到接收到完整的HTTP响应，这个值增加到4\n \n4：（完成）数据接收完毕，此时可以通过responseXml和responseText获取完整的回应数据\n```\n1. babel-register 则提供了动态编译。换句话说，我们的源代码能够真正运行在生产环境下，不需要 babel 编译这一环节。坏处是动态编译，导致程序在速度、性能上有所损耗。（ npx babel-node app.js） babel-node\n\n1. UMD先判断是否支持Node.js的模块（exports）是否存在，存在则使用Node.js模块模式。再判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块。\n1. Ztext.js 3d化文本支持中文\n1. Data URLs 由四个部分组成：前缀(data:)、指示数据类型的MIME类型、如果非文本则为可选的base64标记、数据本身：\n```text\ndata:[<mediatype>][;base64],<data>\nmediatype 是个 MIME 类型的字符串，例如 \"image/jpeg\" 表示 JPEG 图像文件。如果被省略，则默认值为 text/plain;charset=US-ASCII\n\n如果数据是文本类型，你可以直接将文本嵌入 (根据文档类型，使用合适的实体字符或转义字符)。如果是二进制数据，你可以将数据进行base64编码之后再进行嵌入。\n\n下面是一些示例：\n\ndata:,Hello%2C%20World!\n简单的 text/plain 类型数据\ndata:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D\n上一条示例的 base64 编码版本\ndata:text/html,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E\n一个HTML文档源代码 <h1>Hello, World</h1>\ndata:text/html,<script>alert('hi');</script>\n一个会执行 JavaScript alert 的 HTML 文档。注意 script 标签必须封闭。\n\n```\n1. Url-loader 是将资源转换为base64\n4. 浏览器进程 1. 插件 2. 网络 3.Gpu 4.浏览器 5.渲染进程 浏览器为每个tab创建一个渲染进程，运行在沙箱模式下。包括 gui 线程等。\n\n1.  jest.spyOn()方法同样创建一个mock函数，但是该mock函数不仅能够捕获函数的调用情况，还可以正常的执行被spy的函数。实际上，jest.spyOn()是jest.fn()的语法糖，它创建了一个和被spy的函数具有相同内部代码的mock函数。\n \n2.  Vue Test Utils 允许你通过 shallowMount 方法只挂载一个组件而不渲染其子组件 (即保留它们的存根)：\n    \n\n12. 而对于作用域插槽，父组件在编译和渲染阶段并不会直接生成 vnodes，而是在父节点 vnode 的 data 中保留一个 scopedSlots 对象，存储着不同名称的插槽以及它们对应的渲染函数，\n只有在编译和渲染子组件阶段才会执行这个渲染函数生成 vnodes，由于是在子组件环境执行的，所以对应的数据作用域是子组件实例。\n\n\n1. 红黑树\n其实红黑树和上面的平衡二叉树类似，本质上都是为了解决排序二叉树在极端情况下退化成链表导致检索效率大大降低的问题，\n```text\n1.节点是红色或黑色。\n\n2.根节点是黑色。\n\n3.每个叶子节点都是黑色的空节点（NIL节点）。\n\n4 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)\n\n5.从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。\n\n```\n\n\n\n2. 这种可以并行执行、交换执行权的线程（或函数），就称为协程。\n   \n   从实现上看，在内存中，子例程只使用一个栈（stack），而协程是同时存在多个栈，但只有一个栈是在运行状态，也就是说，协程是以多占用内存为代价，实现多任务的并行。\n   普通的线程是抢先式的，到底哪个线程优先得到资源，必须由运行环境决定，但是协程是合作式的，执行权由协程自己分配。\n   \n \n\n\n","source":"_posts/fresh.md","raw":"---\ntitle: fresh\ndate: 2020-06-04 10:33:26\ntags:\n---\n\n1. ① 不能通过 new 关键字调用, 没有原型\n   ② 不可以改变 this 绑定，由外层非箭头函数决定，所以使用 call, apply, bind 也不会影响\n   ③ 不支持 arguments，所以根据作用域链，会拿到外层函数的 arguments\n   ④ 不支持重复命名参数\n   ⑤ 隐式返回\n1. v-once v-pre\n1. readystate  \n```text\n 是HTTP请求的状态，当一个XMLHttpRequest初次创建时，这个属性的值从0开始，直到接收到完整的HTTP响应，这个值增加到4\n \n4：（完成）数据接收完毕，此时可以通过responseXml和responseText获取完整的回应数据\n```\n1. babel-register 则提供了动态编译。换句话说，我们的源代码能够真正运行在生产环境下，不需要 babel 编译这一环节。坏处是动态编译，导致程序在速度、性能上有所损耗。（ npx babel-node app.js） babel-node\n\n1. UMD先判断是否支持Node.js的模块（exports）是否存在，存在则使用Node.js模块模式。再判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块。\n1. Ztext.js 3d化文本支持中文\n1. Data URLs 由四个部分组成：前缀(data:)、指示数据类型的MIME类型、如果非文本则为可选的base64标记、数据本身：\n```text\ndata:[<mediatype>][;base64],<data>\nmediatype 是个 MIME 类型的字符串，例如 \"image/jpeg\" 表示 JPEG 图像文件。如果被省略，则默认值为 text/plain;charset=US-ASCII\n\n如果数据是文本类型，你可以直接将文本嵌入 (根据文档类型，使用合适的实体字符或转义字符)。如果是二进制数据，你可以将数据进行base64编码之后再进行嵌入。\n\n下面是一些示例：\n\ndata:,Hello%2C%20World!\n简单的 text/plain 类型数据\ndata:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D\n上一条示例的 base64 编码版本\ndata:text/html,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E\n一个HTML文档源代码 <h1>Hello, World</h1>\ndata:text/html,<script>alert('hi');</script>\n一个会执行 JavaScript alert 的 HTML 文档。注意 script 标签必须封闭。\n\n```\n1. Url-loader 是将资源转换为base64\n4. 浏览器进程 1. 插件 2. 网络 3.Gpu 4.浏览器 5.渲染进程 浏览器为每个tab创建一个渲染进程，运行在沙箱模式下。包括 gui 线程等。\n\n1.  jest.spyOn()方法同样创建一个mock函数，但是该mock函数不仅能够捕获函数的调用情况，还可以正常的执行被spy的函数。实际上，jest.spyOn()是jest.fn()的语法糖，它创建了一个和被spy的函数具有相同内部代码的mock函数。\n \n2.  Vue Test Utils 允许你通过 shallowMount 方法只挂载一个组件而不渲染其子组件 (即保留它们的存根)：\n    \n\n12. 而对于作用域插槽，父组件在编译和渲染阶段并不会直接生成 vnodes，而是在父节点 vnode 的 data 中保留一个 scopedSlots 对象，存储着不同名称的插槽以及它们对应的渲染函数，\n只有在编译和渲染子组件阶段才会执行这个渲染函数生成 vnodes，由于是在子组件环境执行的，所以对应的数据作用域是子组件实例。\n\n\n1. 红黑树\n其实红黑树和上面的平衡二叉树类似，本质上都是为了解决排序二叉树在极端情况下退化成链表导致检索效率大大降低的问题，\n```text\n1.节点是红色或黑色。\n\n2.根节点是黑色。\n\n3.每个叶子节点都是黑色的空节点（NIL节点）。\n\n4 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)\n\n5.从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。\n\n```\n\n\n\n2. 这种可以并行执行、交换执行权的线程（或函数），就称为协程。\n   \n   从实现上看，在内存中，子例程只使用一个栈（stack），而协程是同时存在多个栈，但只有一个栈是在运行状态，也就是说，协程是以多占用内存为代价，实现多任务的并行。\n   普通的线程是抢先式的，到底哪个线程优先得到资源，必须由运行环境决定，但是协程是合作式的，执行权由协程自己分配。\n   \n \n\n\n","slug":"fresh","published":1,"updated":"2020-09-23T12:54:36.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5sdzb000jyy8kz036vf77","content":"<ol>\n<li>① 不能通过 new 关键字调用, 没有原型<br>② 不可以改变 this 绑定，由外层非箭头函数决定，所以使用 call, apply, bind 也不会影响<br>③ 不支持 arguments，所以根据作用域链，会拿到外层函数的 arguments<br>④ 不支持重复命名参数<br>⑤ 隐式返回</li>\n<li>v-once v-pre</li>\n<li><p>readystate  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 是HTTP请求的状态，当一个XMLHttpRequest初次创建时，这个属性的值从0开始，直到接收到完整的HTTP响应，这个值增加到4</span><br><span class=\"line\"> </span><br><span class=\"line\">4：（完成）数据接收完毕，此时可以通过responseXml和responseText获取完整的回应数据</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>babel-register 则提供了动态编译。换句话说，我们的源代码能够真正运行在生产环境下，不需要 babel 编译这一环节。坏处是动态编译，导致程序在速度、性能上有所损耗。（ npx babel-node app.js） babel-node</p>\n</li>\n<li><p>UMD先判断是否支持Node.js的模块（exports）是否存在，存在则使用Node.js模块模式。再判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块。</p>\n</li>\n<li>Ztext.js 3d化文本支持中文</li>\n<li><p>Data URLs 由四个部分组成：前缀(data:)、指示数据类型的MIME类型、如果非文本则为可选的base64标记、数据本身：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data:[&lt;mediatype&gt;][;base64],&lt;data&gt;</span><br><span class=\"line\">mediatype 是个 MIME 类型的字符串，例如 &quot;image/jpeg&quot; 表示 JPEG 图像文件。如果被省略，则默认值为 text/plain;charset=US-ASCII</span><br><span class=\"line\"></span><br><span class=\"line\">如果数据是文本类型，你可以直接将文本嵌入 (根据文档类型，使用合适的实体字符或转义字符)。如果是二进制数据，你可以将数据进行base64编码之后再进行嵌入。</span><br><span class=\"line\"></span><br><span class=\"line\">下面是一些示例：</span><br><span class=\"line\"></span><br><span class=\"line\">data:,Hello%2C%20World!</span><br><span class=\"line\">简单的 text/plain 类型数据</span><br><span class=\"line\">data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D</span><br><span class=\"line\">上一条示例的 base64 编码版本</span><br><span class=\"line\">data:text/html,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E</span><br><span class=\"line\">一个HTML文档源代码 &lt;h1&gt;Hello, World&lt;/h1&gt;</span><br><span class=\"line\">data:text/html,&lt;script&gt;alert(&apos;hi&apos;);&lt;/script&gt;</span><br><span class=\"line\">一个会执行 JavaScript alert 的 HTML 文档。注意 script 标签必须封闭。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Url-loader 是将资源转换为base64</p>\n</li>\n<li><p>浏览器进程 1. 插件 2. 网络 3.Gpu 4.浏览器 5.渲染进程 浏览器为每个tab创建一个渲染进程，运行在沙箱模式下。包括 gui 线程等。</p>\n</li>\n<li><p>jest.spyOn()方法同样创建一个mock函数，但是该mock函数不仅能够捕获函数的调用情况，还可以正常的执行被spy的函数。实际上，jest.spyOn()是jest.fn()的语法糖，它创建了一个和被spy的函数具有相同内部代码的mock函数。</p>\n</li>\n<li><p>Vue Test Utils 允许你通过 shallowMount 方法只挂载一个组件而不渲染其子组件 (即保留它们的存根)：</p>\n</li>\n</ol>\n<ol start=\"12\">\n<li>而对于作用域插槽，父组件在编译和渲染阶段并不会直接生成 vnodes，而是在父节点 vnode 的 data 中保留一个 scopedSlots 对象，存储着不同名称的插槽以及它们对应的渲染函数，<br>只有在编译和渲染子组件阶段才会执行这个渲染函数生成 vnodes，由于是在子组件环境执行的，所以对应的数据作用域是子组件实例。</li>\n</ol>\n<ol>\n<li><p>红黑树<br>其实红黑树和上面的平衡二叉树类似，本质上都是为了解决排序二叉树在极端情况下退化成链表导致检索效率大大降低的问题，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.节点是红色或黑色。</span><br><span class=\"line\"></span><br><span class=\"line\">2.根节点是黑色。</span><br><span class=\"line\"></span><br><span class=\"line\">3.每个叶子节点都是黑色的空节点（NIL节点）。</span><br><span class=\"line\"></span><br><span class=\"line\">4 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)</span><br><span class=\"line\"></span><br><span class=\"line\">5.从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这种可以并行执行、交换执行权的线程（或函数），就称为协程。</p>\n<p>从实现上看，在内存中，子例程只使用一个栈（stack），而协程是同时存在多个栈，但只有一个栈是在运行状态，也就是说，协程是以多占用内存为代价，实现多任务的并行。<br>普通的线程是抢先式的，到底哪个线程优先得到资源，必须由运行环境决定，但是协程是合作式的，执行权由协程自己分配。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>① 不能通过 new 关键字调用, 没有原型<br>② 不可以改变 this 绑定，由外层非箭头函数决定，所以使用 call, apply, bind 也不会影响<br>③ 不支持 arguments，所以根据作用域链，会拿到外层函数的 arguments<br>④ 不支持重复命名参数<br>⑤ 隐式返回</li>\n<li>v-once v-pre</li>\n<li><p>readystate  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 是HTTP请求的状态，当一个XMLHttpRequest初次创建时，这个属性的值从0开始，直到接收到完整的HTTP响应，这个值增加到4</span><br><span class=\"line\"> </span><br><span class=\"line\">4：（完成）数据接收完毕，此时可以通过responseXml和responseText获取完整的回应数据</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>babel-register 则提供了动态编译。换句话说，我们的源代码能够真正运行在生产环境下，不需要 babel 编译这一环节。坏处是动态编译，导致程序在速度、性能上有所损耗。（ npx babel-node app.js） babel-node</p>\n</li>\n<li><p>UMD先判断是否支持Node.js的模块（exports）是否存在，存在则使用Node.js模块模式。再判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块。</p>\n</li>\n<li>Ztext.js 3d化文本支持中文</li>\n<li><p>Data URLs 由四个部分组成：前缀(data:)、指示数据类型的MIME类型、如果非文本则为可选的base64标记、数据本身：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data:[&lt;mediatype&gt;][;base64],&lt;data&gt;</span><br><span class=\"line\">mediatype 是个 MIME 类型的字符串，例如 &quot;image/jpeg&quot; 表示 JPEG 图像文件。如果被省略，则默认值为 text/plain;charset=US-ASCII</span><br><span class=\"line\"></span><br><span class=\"line\">如果数据是文本类型，你可以直接将文本嵌入 (根据文档类型，使用合适的实体字符或转义字符)。如果是二进制数据，你可以将数据进行base64编码之后再进行嵌入。</span><br><span class=\"line\"></span><br><span class=\"line\">下面是一些示例：</span><br><span class=\"line\"></span><br><span class=\"line\">data:,Hello%2C%20World!</span><br><span class=\"line\">简单的 text/plain 类型数据</span><br><span class=\"line\">data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D</span><br><span class=\"line\">上一条示例的 base64 编码版本</span><br><span class=\"line\">data:text/html,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E</span><br><span class=\"line\">一个HTML文档源代码 &lt;h1&gt;Hello, World&lt;/h1&gt;</span><br><span class=\"line\">data:text/html,&lt;script&gt;alert(&apos;hi&apos;);&lt;/script&gt;</span><br><span class=\"line\">一个会执行 JavaScript alert 的 HTML 文档。注意 script 标签必须封闭。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Url-loader 是将资源转换为base64</p>\n</li>\n<li><p>浏览器进程 1. 插件 2. 网络 3.Gpu 4.浏览器 5.渲染进程 浏览器为每个tab创建一个渲染进程，运行在沙箱模式下。包括 gui 线程等。</p>\n</li>\n<li><p>jest.spyOn()方法同样创建一个mock函数，但是该mock函数不仅能够捕获函数的调用情况，还可以正常的执行被spy的函数。实际上，jest.spyOn()是jest.fn()的语法糖，它创建了一个和被spy的函数具有相同内部代码的mock函数。</p>\n</li>\n<li><p>Vue Test Utils 允许你通过 shallowMount 方法只挂载一个组件而不渲染其子组件 (即保留它们的存根)：</p>\n</li>\n</ol>\n<ol start=\"12\">\n<li>而对于作用域插槽，父组件在编译和渲染阶段并不会直接生成 vnodes，而是在父节点 vnode 的 data 中保留一个 scopedSlots 对象，存储着不同名称的插槽以及它们对应的渲染函数，<br>只有在编译和渲染子组件阶段才会执行这个渲染函数生成 vnodes，由于是在子组件环境执行的，所以对应的数据作用域是子组件实例。</li>\n</ol>\n<ol>\n<li><p>红黑树<br>其实红黑树和上面的平衡二叉树类似，本质上都是为了解决排序二叉树在极端情况下退化成链表导致检索效率大大降低的问题，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.节点是红色或黑色。</span><br><span class=\"line\"></span><br><span class=\"line\">2.根节点是黑色。</span><br><span class=\"line\"></span><br><span class=\"line\">3.每个叶子节点都是黑色的空节点（NIL节点）。</span><br><span class=\"line\"></span><br><span class=\"line\">4 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)</span><br><span class=\"line\"></span><br><span class=\"line\">5.从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这种可以并行执行、交换执行权的线程（或函数），就称为协程。</p>\n<p>从实现上看，在内存中，子例程只使用一个栈（stack），而协程是同时存在多个栈，但只有一个栈是在运行状态，也就是说，协程是以多占用内存为代价，实现多任务的并行。<br>普通的线程是抢先式的，到底哪个线程优先得到资源，必须由运行环境决定，但是协程是合作式的，执行权由协程自己分配。</p>\n</li>\n</ol>\n"},{"title":"gitInfo","date":"2019-02-20T09:58:18.000Z","_content":"1. git reflog 命令获取到的内容为本地仓库所有发生过的变更\n1. git branch -m feature/stor-13711 feature/story-13711  修改分支名称\n1. git config --global --edit\n1. git rm --cached  从git索引和缓存中删除 \n2. git mv 重命名或者移动文件\n3. git reset --soft \"HEAD^\" 留下当前变更内容\n4. git reset head 从当前缓存区删除\n5. git checkout .  撤销当前工作区修改\n6. git commit --amend 修改上次提交信息\n7. git log --oneline/--raw \n8. checkout只会移动HEAD指针，reset会改变HEAD的引用值。\n9. git config --global user.name [user.email]\n10. git tag -a 'annotate' -m 'message'\n11. git remote set-url --add <name> <newurl>  添加多个url\n12. git tag -d <tag-name>  \n13. git status --ignored  显示忽略掉文件\n14. git checkout --orphan <branch-name>  新建没有commit的分支\n1. git push origin :refs/tags/<tag-name>  删除远程tag\n2. git branch -u <origin/mybranch> 设置远程分支 \n2. git branch -vv 查看本地分之关联情况\n2. git checkout -  最近两个分子间切换\n1. git commit -m \"Big-ass commit\" --allow-empty\n1. git commit --amend，撤销上一次提交到暂存区，并重新提交内容；\n1. 修改分支名称\n```\ngit branch -m feature-modifySpec feature-tpaas-modifySpec  \ngit push origin -u feature-tpaas-modifySpec    \n```\n1. ","source":"_posts/gitInfo.md","raw":"---\ntitle: gitInfo\ndate: 2019-02-20 17:58:18\ntags: git\n---\n1. git reflog 命令获取到的内容为本地仓库所有发生过的变更\n1. git branch -m feature/stor-13711 feature/story-13711  修改分支名称\n1. git config --global --edit\n1. git rm --cached  从git索引和缓存中删除 \n2. git mv 重命名或者移动文件\n3. git reset --soft \"HEAD^\" 留下当前变更内容\n4. git reset head 从当前缓存区删除\n5. git checkout .  撤销当前工作区修改\n6. git commit --amend 修改上次提交信息\n7. git log --oneline/--raw \n8. checkout只会移动HEAD指针，reset会改变HEAD的引用值。\n9. git config --global user.name [user.email]\n10. git tag -a 'annotate' -m 'message'\n11. git remote set-url --add <name> <newurl>  添加多个url\n12. git tag -d <tag-name>  \n13. git status --ignored  显示忽略掉文件\n14. git checkout --orphan <branch-name>  新建没有commit的分支\n1. git push origin :refs/tags/<tag-name>  删除远程tag\n2. git branch -u <origin/mybranch> 设置远程分支 \n2. git branch -vv 查看本地分之关联情况\n2. git checkout -  最近两个分子间切换\n1. git commit -m \"Big-ass commit\" --allow-empty\n1. git commit --amend，撤销上一次提交到暂存区，并重新提交内容；\n1. 修改分支名称\n```\ngit branch -m feature-modifySpec feature-tpaas-modifySpec  \ngit push origin -u feature-tpaas-modifySpec    \n```\n1. ","slug":"gitInfo","published":1,"updated":"2021-12-22T13:08:52.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5sdzc000lyy8k9vpw6foi","content":"<ol>\n<li>git reflog 命令获取到的内容为本地仓库所有发生过的变更</li>\n<li>git branch -m feature/stor-13711 feature/story-13711  修改分支名称</li>\n<li>git config –global –edit</li>\n<li>git rm –cached  从git索引和缓存中删除 </li>\n<li>git mv 重命名或者移动文件</li>\n<li>git reset –soft “HEAD^” 留下当前变更内容</li>\n<li>git reset head 从当前缓存区删除</li>\n<li>git checkout .  撤销当前工作区修改</li>\n<li>git commit –amend 修改上次提交信息</li>\n<li>git log –oneline/–raw </li>\n<li>checkout只会移动HEAD指针，reset会改变HEAD的引用值。</li>\n<li>git config –global user.name [user.email]</li>\n<li>git tag -a ‘annotate’ -m ‘message’</li>\n<li>git remote set-url –add <name> <newurl>  添加多个url</newurl></name></li>\n<li>git tag -d <tag-name>  </tag-name></li>\n<li>git status –ignored  显示忽略掉文件</li>\n<li>git checkout –orphan <branch-name>  新建没有commit的分支</branch-name></li>\n<li>git push origin :refs/tags/<tag-name>  删除远程tag</tag-name></li>\n<li>git branch -u &lt;origin/mybranch&gt; 设置远程分支 </li>\n<li>git branch -vv 查看本地分之关联情况</li>\n<li>git checkout -  最近两个分子间切换</li>\n<li>git commit -m “Big-ass commit” –allow-empty</li>\n<li>git commit –amend，撤销上一次提交到暂存区，并重新提交内容；</li>\n<li><p>修改分支名称</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m feature-modifySpec feature-tpaas-modifySpec  </span><br><span class=\"line\">git push origin -u feature-tpaas-modifySpec</span><br></pre></td></tr></table></figure>\n</li>\n<li></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>git reflog 命令获取到的内容为本地仓库所有发生过的变更</li>\n<li>git branch -m feature/stor-13711 feature/story-13711  修改分支名称</li>\n<li>git config –global –edit</li>\n<li>git rm –cached  从git索引和缓存中删除 </li>\n<li>git mv 重命名或者移动文件</li>\n<li>git reset –soft “HEAD^” 留下当前变更内容</li>\n<li>git reset head 从当前缓存区删除</li>\n<li>git checkout .  撤销当前工作区修改</li>\n<li>git commit –amend 修改上次提交信息</li>\n<li>git log –oneline/–raw </li>\n<li>checkout只会移动HEAD指针，reset会改变HEAD的引用值。</li>\n<li>git config –global user.name [user.email]</li>\n<li>git tag -a ‘annotate’ -m ‘message’</li>\n<li>git remote set-url –add <name> <newurl>  添加多个url</newurl></name></li>\n<li>git tag -d <tag-name>  </tag-name></li>\n<li>git status –ignored  显示忽略掉文件</li>\n<li>git checkout –orphan <branch-name>  新建没有commit的分支</branch-name></li>\n<li>git push origin :refs/tags/<tag-name>  删除远程tag</tag-name></li>\n<li>git branch -u &lt;origin/mybranch&gt; 设置远程分支 </li>\n<li>git branch -vv 查看本地分之关联情况</li>\n<li>git checkout -  最近两个分子间切换</li>\n<li>git commit -m “Big-ass commit” –allow-empty</li>\n<li>git commit –amend，撤销上一次提交到暂存区，并重新提交内容；</li>\n<li><p>修改分支名称</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m feature-modifySpec feature-tpaas-modifySpec  </span><br><span class=\"line\">git push origin -u feature-tpaas-modifySpec</span><br></pre></td></tr></table></figure>\n</li>\n<li></li>\n</ol>\n"},{"title":"interview","date":"2017-01-23T10:25:52.000Z","_content":"\n\n1. 企业级的特点：\n```text\n是高效 + 成熟方案的整合\n关注生产的整个链路，而不是某个环节\n有更强的约束和限制\n更严苛的要求。性能、可扩展性(以应对不同的需求)、健壮性、稳定性、可用性、安全性\n标准化\n经过生产环境验证, 有较多用例保证\n\n```\n1. Last-Modified,Etag,Expires 三个同时使用时。先判断 Expire ，然后发送 Http 请求，服务器先判断 last-modified ，再判断 Etag ，必须都没有过期，才能返回 304 响应\n\n1. \n\n1. \n 而在底层，Node.js借助libuv来作为抽象封装层， 从而屏蔽不同操作系统的差异，Node可以借助livuv来来实现多线程。\n \n ![image](http://www.admin10000.com/UploadFiles/Document/201509/30/20150930072020634231.PNG)\n \n 事件循环是单线程的，从下图可以看出\n \n ![image](http://www.admin10000.com/UploadFiles/Document/201509/30/20150930072028113909.PNG)\n \n 所有的同步任务在主线程上执行，形成一个任务栈。所有的异步任务的回调在另一队列中，只有执行完\n \n tTimeout()只是将事件插入了\"任务队列\"，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。\n \n Node.js也是单线程的Event Loop，但是它的运行机制不同于浏览器环境。\n \n ![image](http://image.beekka.com/blog/2014/bg2014100803.png)\n \n\n```\nprocess.nextTick(function A() {\n  console.log(1);\n  process.nextTick(function B(){console.log(2);});\n});\n\nsetTimeout(function timeout() {\n  console.log('TIMEOUT FIRED');\n}, 0)\n// 1\n// 2\n// TIMEOUT FIRED\n```\n\n上面代码中，由于process.nextTick方法指定的回调函数，总是在当前\"执行栈\"的尾部触发，所以不仅函数A比setTimeout指定的回调函数timeout先执行，而且函数B也比timeout先执行。这说明，如果有多个process.nextTick语句（不管它们是否嵌套），将全部在当前\"执行栈\"执行。   setImmediate总是将事件注册到下一轮Event Loop\n\n\n　测试金字塔指的是： 当我们在编写测试用例时，底层的单元测试应该远比上层的端到端测试要多。\n　\n\n数组的shift和unshift  push 和 pop \n\nnode 优势：非阻塞IO、高并发、丰富的生态环境\n\n node有哪些全局对象?\n参考答案: process, console, Buffer和exports\n![image](https://camo.githubusercontent.com/233315761d49d4c75fe7969e36bda22ecf5bbc0f/687474703a2f2f6a6f616f7073696c76612e6769746875622e696f2f74616c6b732f456e642d746f2d456e642d4a6176615363726970742d776974682d7468652d4d45414e2d537461636b2f696d672f6e6f64656a732d617263682d7070742e706e67)\n\nprocess有哪些常用方法?\n参考答案: process.stdin, process.stdout, process.stderr, process.on, process.env, process.argv, process.arch, process.platform, process.exit\n\n通过domain获取eventemmiter 的异常：\n\n```\nvar domain = require('domain');\n    var myDomain = domain.create();\n    myDomain.on('error', function(err){\n        console.log('domain接收到的错误事件:', err);\n    }); // 接收事件并打印\n    myDomain.run(function(){\n        var emitter1 = new MyEmitter();\n        emitter1.emit('error', '错误事件来自emitter1');\n        emitter2 = new MyEmitter();\n        emitter2.emit('error', '错误事件来自emitter2');\n    });\n```\n\nsupper 代表父类构造函数和原形\n\n\n原生构造函数：\nBoolean()\nNumber()\nString()\nArray()\nDate()\nFunction()\nRegExp()\nError()\nObject()\n\nEs6 可以继承这些原生的构造函数\n \n```\nclass MyArray extends Array {\n  constructor(...args) {\n    super(...args);\n  }\n}\n\nvar arr = new MyArray();\narr[0] = 12;\narr.length // 1\n\narr.length = 0;\narr[0] // undefined\n```\n\n```\nclass ExtendableError extends Error {\n  constructor(message) {\n    super();\n    this.message = message;\n    this.stack = (new Error()).stack;\n    this.name = this.constructor.name;\n  }\n}\n\nclass MyError extends ExtendableError {\n  constructor(m) {\n    super(m);\n  }\n}\n\nvar myerror = new MyError('ll');\nmyerror.message // \"ll\"\nmyerror instanceof Error // true\nmyerror.name // \"MyError\"\nmyerror.stack\n```\n\nStream有什么好处?\n参考答案: 非阻塞式数据处理提升效率，片断处理节省内存，管道处理方便可扩展等.\n\n\nfs.watch和fs.watchFile有什么区别，怎么应用?\n参考答案: 二者主要用来监听文件变动．fs.watch利用操作系统原生机制来监听，可能不适用网络文件系统; fs.watchFile则是定期检查文件状态变更，适用于网络文件系统，但是相比fs.watch有些慢，因为不是实时机制．\n\n实现一个简单的HTTP 服务器。\nrequire('http').createServer(function(req,res){}).listen(300);\n\nspawn应用来运行返回大量数据的子进程，如图像处理，文件读取等。而exec则应用来运行只返回少量返回值的子进程，如只返回一个状态码。\n\n有哪些常用方法可以防止程序崩溃?\n\n参考答案: 1) try-catch-finally 2) EventEmitter/Stream error事件处理 3) domain统一控制 4) jshint静态检查 5) jasmine/mocha进行单元测试\n\n\n要监控nodejs的内存使用的话，需要安装memwathch 模块\n\nnodejs C++ 扩展的实现：\nhttps://my.oschina.net/yushulx/blog/423704\n\nprocess.argv 数组的第一个元素永远都会是 node，并且第二个参数总是指向你的程序的路径，所以，你应该从第三个元素\n\n \n使用 socket.write(data) 可以写数据到 socket 中，用 socket.end() 可以关闭一个 socket。另外， .end() 方法也可以接收一个数据对象作为参数，因此，你可简单地使用 socket.end(data) 来完成写数据和关闭两个操作。\n\nconcat-stream：会连接多个stream,参数中不指定encoding 的话，会自行推断。\n\n```\nvar arrays = concat({ encoding: 'array' }, function(out) {\n    t.deepEqual(out, [1,2,3,4,5,6])\n  })\n  arrays.write([1,2,3])\n  arrays.write([4,5,6])\n  arrays.end()\n```\n\n```\nfs.createReadStream(file).pipe(process.stdout);\n```\n使用through2 对流数据进行转换：\n\n通过split 将流中的数据分行：\n\nYou can use the `split` module to split input by newlines. For example:\n```\n    var split = require('split');\n    process.stdin\n        .pipe(split())\n        .pipe(through2(function (line, _, next) {\n            console.dir(line.toString());\n            next();\n        }))\n    ;\n```","source":"_posts/interview.md","raw":"---\ntitle: interview\ndate: 2017-01-23 18:25:52\ntags: interview\n---\n\n\n1. 企业级的特点：\n```text\n是高效 + 成熟方案的整合\n关注生产的整个链路，而不是某个环节\n有更强的约束和限制\n更严苛的要求。性能、可扩展性(以应对不同的需求)、健壮性、稳定性、可用性、安全性\n标准化\n经过生产环境验证, 有较多用例保证\n\n```\n1. Last-Modified,Etag,Expires 三个同时使用时。先判断 Expire ，然后发送 Http 请求，服务器先判断 last-modified ，再判断 Etag ，必须都没有过期，才能返回 304 响应\n\n1. \n\n1. \n 而在底层，Node.js借助libuv来作为抽象封装层， 从而屏蔽不同操作系统的差异，Node可以借助livuv来来实现多线程。\n \n ![image](http://www.admin10000.com/UploadFiles/Document/201509/30/20150930072020634231.PNG)\n \n 事件循环是单线程的，从下图可以看出\n \n ![image](http://www.admin10000.com/UploadFiles/Document/201509/30/20150930072028113909.PNG)\n \n 所有的同步任务在主线程上执行，形成一个任务栈。所有的异步任务的回调在另一队列中，只有执行完\n \n tTimeout()只是将事件插入了\"任务队列\"，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。\n \n Node.js也是单线程的Event Loop，但是它的运行机制不同于浏览器环境。\n \n ![image](http://image.beekka.com/blog/2014/bg2014100803.png)\n \n\n```\nprocess.nextTick(function A() {\n  console.log(1);\n  process.nextTick(function B(){console.log(2);});\n});\n\nsetTimeout(function timeout() {\n  console.log('TIMEOUT FIRED');\n}, 0)\n// 1\n// 2\n// TIMEOUT FIRED\n```\n\n上面代码中，由于process.nextTick方法指定的回调函数，总是在当前\"执行栈\"的尾部触发，所以不仅函数A比setTimeout指定的回调函数timeout先执行，而且函数B也比timeout先执行。这说明，如果有多个process.nextTick语句（不管它们是否嵌套），将全部在当前\"执行栈\"执行。   setImmediate总是将事件注册到下一轮Event Loop\n\n\n　测试金字塔指的是： 当我们在编写测试用例时，底层的单元测试应该远比上层的端到端测试要多。\n　\n\n数组的shift和unshift  push 和 pop \n\nnode 优势：非阻塞IO、高并发、丰富的生态环境\n\n node有哪些全局对象?\n参考答案: process, console, Buffer和exports\n![image](https://camo.githubusercontent.com/233315761d49d4c75fe7969e36bda22ecf5bbc0f/687474703a2f2f6a6f616f7073696c76612e6769746875622e696f2f74616c6b732f456e642d746f2d456e642d4a6176615363726970742d776974682d7468652d4d45414e2d537461636b2f696d672f6e6f64656a732d617263682d7070742e706e67)\n\nprocess有哪些常用方法?\n参考答案: process.stdin, process.stdout, process.stderr, process.on, process.env, process.argv, process.arch, process.platform, process.exit\n\n通过domain获取eventemmiter 的异常：\n\n```\nvar domain = require('domain');\n    var myDomain = domain.create();\n    myDomain.on('error', function(err){\n        console.log('domain接收到的错误事件:', err);\n    }); // 接收事件并打印\n    myDomain.run(function(){\n        var emitter1 = new MyEmitter();\n        emitter1.emit('error', '错误事件来自emitter1');\n        emitter2 = new MyEmitter();\n        emitter2.emit('error', '错误事件来自emitter2');\n    });\n```\n\nsupper 代表父类构造函数和原形\n\n\n原生构造函数：\nBoolean()\nNumber()\nString()\nArray()\nDate()\nFunction()\nRegExp()\nError()\nObject()\n\nEs6 可以继承这些原生的构造函数\n \n```\nclass MyArray extends Array {\n  constructor(...args) {\n    super(...args);\n  }\n}\n\nvar arr = new MyArray();\narr[0] = 12;\narr.length // 1\n\narr.length = 0;\narr[0] // undefined\n```\n\n```\nclass ExtendableError extends Error {\n  constructor(message) {\n    super();\n    this.message = message;\n    this.stack = (new Error()).stack;\n    this.name = this.constructor.name;\n  }\n}\n\nclass MyError extends ExtendableError {\n  constructor(m) {\n    super(m);\n  }\n}\n\nvar myerror = new MyError('ll');\nmyerror.message // \"ll\"\nmyerror instanceof Error // true\nmyerror.name // \"MyError\"\nmyerror.stack\n```\n\nStream有什么好处?\n参考答案: 非阻塞式数据处理提升效率，片断处理节省内存，管道处理方便可扩展等.\n\n\nfs.watch和fs.watchFile有什么区别，怎么应用?\n参考答案: 二者主要用来监听文件变动．fs.watch利用操作系统原生机制来监听，可能不适用网络文件系统; fs.watchFile则是定期检查文件状态变更，适用于网络文件系统，但是相比fs.watch有些慢，因为不是实时机制．\n\n实现一个简单的HTTP 服务器。\nrequire('http').createServer(function(req,res){}).listen(300);\n\nspawn应用来运行返回大量数据的子进程，如图像处理，文件读取等。而exec则应用来运行只返回少量返回值的子进程，如只返回一个状态码。\n\n有哪些常用方法可以防止程序崩溃?\n\n参考答案: 1) try-catch-finally 2) EventEmitter/Stream error事件处理 3) domain统一控制 4) jshint静态检查 5) jasmine/mocha进行单元测试\n\n\n要监控nodejs的内存使用的话，需要安装memwathch 模块\n\nnodejs C++ 扩展的实现：\nhttps://my.oschina.net/yushulx/blog/423704\n\nprocess.argv 数组的第一个元素永远都会是 node，并且第二个参数总是指向你的程序的路径，所以，你应该从第三个元素\n\n \n使用 socket.write(data) 可以写数据到 socket 中，用 socket.end() 可以关闭一个 socket。另外， .end() 方法也可以接收一个数据对象作为参数，因此，你可简单地使用 socket.end(data) 来完成写数据和关闭两个操作。\n\nconcat-stream：会连接多个stream,参数中不指定encoding 的话，会自行推断。\n\n```\nvar arrays = concat({ encoding: 'array' }, function(out) {\n    t.deepEqual(out, [1,2,3,4,5,6])\n  })\n  arrays.write([1,2,3])\n  arrays.write([4,5,6])\n  arrays.end()\n```\n\n```\nfs.createReadStream(file).pipe(process.stdout);\n```\n使用through2 对流数据进行转换：\n\n通过split 将流中的数据分行：\n\nYou can use the `split` module to split input by newlines. For example:\n```\n    var split = require('split');\n    process.stdin\n        .pipe(split())\n        .pipe(through2(function (line, _, next) {\n            console.dir(line.toString());\n            next();\n        }))\n    ;\n```","slug":"interview","published":1,"updated":"2020-08-18T02:20:33.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5sdzd000myy8k7p79iiia","content":"<ol>\n<li><p>企业级的特点：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是高效 + 成熟方案的整合</span><br><span class=\"line\">关注生产的整个链路，而不是某个环节</span><br><span class=\"line\">有更强的约束和限制</span><br><span class=\"line\">更严苛的要求。性能、可扩展性(以应对不同的需求)、健壮性、稳定性、可用性、安全性</span><br><span class=\"line\">标准化</span><br><span class=\"line\">经过生产环境验证, 有较多用例保证</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Last-Modified,Etag,Expires 三个同时使用时。先判断 Expire ，然后发送 Http 请求，服务器先判断 last-modified ，再判断 Etag ，必须都没有过期，才能返回 304 响应</p>\n</li>\n<li></li>\n<li><p>而在底层，Node.js借助libuv来作为抽象封装层， 从而屏蔽不同操作系统的差异，Node可以借助livuv来来实现多线程。</p>\n<p><img src=\"http://www.admin10000.com/UploadFiles/Document/201509/30/20150930072020634231.PNG\" alt=\"image\"></p>\n<p>事件循环是单线程的，从下图可以看出</p>\n<p><img src=\"http://www.admin10000.com/UploadFiles/Document/201509/30/20150930072028113909.PNG\" alt=\"image\"></p>\n<p>所有的同步任务在主线程上执行，形成一个任务栈。所有的异步任务的回调在另一队列中，只有执行完</p>\n<p>tTimeout()只是将事件插入了”任务队列”，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。</p>\n<p>Node.js也是单线程的Event Loop，但是它的运行机制不同于浏览器环境。</p>\n<p><img src=\"http://image.beekka.com/blog/2014/bg2014100803.png\" alt=\"image\"></p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.nextTick(function A() &#123;</span><br><span class=\"line\">  console.log(1);</span><br><span class=\"line\">  process.nextTick(function B()&#123;console.log(2);&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(function timeout() &#123;</span><br><span class=\"line\">  console.log(&apos;TIMEOUT FIRED&apos;);</span><br><span class=\"line\">&#125;, 0)</span><br><span class=\"line\">// 1</span><br><span class=\"line\">// 2</span><br><span class=\"line\">// TIMEOUT FIRED</span><br></pre></td></tr></table></figure>\n<p>上面代码中，由于process.nextTick方法指定的回调函数，总是在当前”执行栈”的尾部触发，所以不仅函数A比setTimeout指定的回调函数timeout先执行，而且函数B也比timeout先执行。这说明，如果有多个process.nextTick语句（不管它们是否嵌套），将全部在当前”执行栈”执行。   setImmediate总是将事件注册到下一轮Event Loop</p>\n<p>　测试金字塔指的是： 当我们在编写测试用例时，底层的单元测试应该远比上层的端到端测试要多。\n　</p>\n<p>数组的shift和unshift  push 和 pop </p>\n<p>node 优势：非阻塞IO、高并发、丰富的生态环境</p>\n<p> node有哪些全局对象?<br>参考答案: process, console, Buffer和exports<br><img src=\"https://camo.githubusercontent.com/233315761d49d4c75fe7969e36bda22ecf5bbc0f/687474703a2f2f6a6f616f7073696c76612e6769746875622e696f2f74616c6b732f456e642d746f2d456e642d4a6176615363726970742d776974682d7468652d4d45414e2d537461636b2f696d672f6e6f64656a732d617263682d7070742e706e67\" alt=\"image\"></p>\n<p>process有哪些常用方法?<br>参考答案: process.stdin, process.stdout, process.stderr, process.on, process.env, process.argv, process.arch, process.platform, process.exit</p>\n<p>通过domain获取eventemmiter 的异常：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var domain = require(&apos;domain&apos;);</span><br><span class=\"line\">    var myDomain = domain.create();</span><br><span class=\"line\">    myDomain.on(&apos;error&apos;, function(err)&#123;</span><br><span class=\"line\">        console.log(&apos;domain接收到的错误事件:&apos;, err);</span><br><span class=\"line\">    &#125;); // 接收事件并打印</span><br><span class=\"line\">    myDomain.run(function()&#123;</span><br><span class=\"line\">        var emitter1 = new MyEmitter();</span><br><span class=\"line\">        emitter1.emit(&apos;error&apos;, &apos;错误事件来自emitter1&apos;);</span><br><span class=\"line\">        emitter2 = new MyEmitter();</span><br><span class=\"line\">        emitter2.emit(&apos;error&apos;, &apos;错误事件来自emitter2&apos;);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>supper 代表父类构造函数和原形</p>\n<p>原生构造函数：<br>Boolean()<br>Number()<br>String()<br>Array()<br>Date()<br>Function()<br>RegExp()<br>Error()<br>Object()</p>\n<p>Es6 可以继承这些原生的构造函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MyArray extends Array &#123;</span><br><span class=\"line\">  constructor(...args) &#123;</span><br><span class=\"line\">    super(...args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var arr = new MyArray();</span><br><span class=\"line\">arr[0] = 12;</span><br><span class=\"line\">arr.length // 1</span><br><span class=\"line\"></span><br><span class=\"line\">arr.length = 0;</span><br><span class=\"line\">arr[0] // undefined</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ExtendableError extends Error &#123;</span><br><span class=\"line\">  constructor(message) &#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.message = message;</span><br><span class=\"line\">    this.stack = (new Error()).stack;</span><br><span class=\"line\">    this.name = this.constructor.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyError extends ExtendableError &#123;</span><br><span class=\"line\">  constructor(m) &#123;</span><br><span class=\"line\">    super(m);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var myerror = new MyError(&apos;ll&apos;);</span><br><span class=\"line\">myerror.message // &quot;ll&quot;</span><br><span class=\"line\">myerror instanceof Error // true</span><br><span class=\"line\">myerror.name // &quot;MyError&quot;</span><br><span class=\"line\">myerror.stack</span><br></pre></td></tr></table></figure>\n<p>Stream有什么好处?<br>参考答案: 非阻塞式数据处理提升效率，片断处理节省内存，管道处理方便可扩展等.</p>\n<p>fs.watch和fs.watchFile有什么区别，怎么应用?<br>参考答案: 二者主要用来监听文件变动．fs.watch利用操作系统原生机制来监听，可能不适用网络文件系统; fs.watchFile则是定期检查文件状态变更，适用于网络文件系统，但是相比fs.watch有些慢，因为不是实时机制．</p>\n<p>实现一个简单的HTTP 服务器。<br>require(‘http’).createServer(function(req,res){}).listen(300);</p>\n<p>spawn应用来运行返回大量数据的子进程，如图像处理，文件读取等。而exec则应用来运行只返回少量返回值的子进程，如只返回一个状态码。</p>\n<p>有哪些常用方法可以防止程序崩溃?</p>\n<p>参考答案: 1) try-catch-finally 2) EventEmitter/Stream error事件处理 3) domain统一控制 4) jshint静态检查 5) jasmine/mocha进行单元测试</p>\n<p>要监控nodejs的内存使用的话，需要安装memwathch 模块</p>\n<p>nodejs C++ 扩展的实现：<br><a href=\"https://my.oschina.net/yushulx/blog/423704\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/yushulx/blog/423704</a></p>\n<p>process.argv 数组的第一个元素永远都会是 node，并且第二个参数总是指向你的程序的路径，所以，你应该从第三个元素</p>\n<p>使用 socket.write(data) 可以写数据到 socket 中，用 socket.end() 可以关闭一个 socket。另外， .end() 方法也可以接收一个数据对象作为参数，因此，你可简单地使用 socket.end(data) 来完成写数据和关闭两个操作。</p>\n<p>concat-stream：会连接多个stream,参数中不指定encoding 的话，会自行推断。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arrays = concat(&#123; encoding: &apos;array&apos; &#125;, function(out) &#123;</span><br><span class=\"line\">    t.deepEqual(out, [1,2,3,4,5,6])</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  arrays.write([1,2,3])</span><br><span class=\"line\">  arrays.write([4,5,6])</span><br><span class=\"line\">  arrays.end()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.createReadStream(file).pipe(process.stdout);</span><br></pre></td></tr></table></figure>\n<p>使用through2 对流数据进行转换：</p>\n<p>通过split 将流中的数据分行：</p>\n<p>You can use the <code>split</code> module to split input by newlines. For example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var split = require(&apos;split&apos;);</span><br><span class=\"line\">process.stdin</span><br><span class=\"line\">    .pipe(split())</span><br><span class=\"line\">    .pipe(through2(function (line, _, next) &#123;</span><br><span class=\"line\">        console.dir(line.toString());</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>企业级的特点：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是高效 + 成熟方案的整合</span><br><span class=\"line\">关注生产的整个链路，而不是某个环节</span><br><span class=\"line\">有更强的约束和限制</span><br><span class=\"line\">更严苛的要求。性能、可扩展性(以应对不同的需求)、健壮性、稳定性、可用性、安全性</span><br><span class=\"line\">标准化</span><br><span class=\"line\">经过生产环境验证, 有较多用例保证</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Last-Modified,Etag,Expires 三个同时使用时。先判断 Expire ，然后发送 Http 请求，服务器先判断 last-modified ，再判断 Etag ，必须都没有过期，才能返回 304 响应</p>\n</li>\n<li></li>\n<li><p>而在底层，Node.js借助libuv来作为抽象封装层， 从而屏蔽不同操作系统的差异，Node可以借助livuv来来实现多线程。</p>\n<p><img src=\"http://www.admin10000.com/UploadFiles/Document/201509/30/20150930072020634231.PNG\" alt=\"image\"></p>\n<p>事件循环是单线程的，从下图可以看出</p>\n<p><img src=\"http://www.admin10000.com/UploadFiles/Document/201509/30/20150930072028113909.PNG\" alt=\"image\"></p>\n<p>所有的同步任务在主线程上执行，形成一个任务栈。所有的异步任务的回调在另一队列中，只有执行完</p>\n<p>tTimeout()只是将事件插入了”任务队列”，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。</p>\n<p>Node.js也是单线程的Event Loop，但是它的运行机制不同于浏览器环境。</p>\n<p><img src=\"http://image.beekka.com/blog/2014/bg2014100803.png\" alt=\"image\"></p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.nextTick(function A() &#123;</span><br><span class=\"line\">  console.log(1);</span><br><span class=\"line\">  process.nextTick(function B()&#123;console.log(2);&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(function timeout() &#123;</span><br><span class=\"line\">  console.log(&apos;TIMEOUT FIRED&apos;);</span><br><span class=\"line\">&#125;, 0)</span><br><span class=\"line\">// 1</span><br><span class=\"line\">// 2</span><br><span class=\"line\">// TIMEOUT FIRED</span><br></pre></td></tr></table></figure>\n<p>上面代码中，由于process.nextTick方法指定的回调函数，总是在当前”执行栈”的尾部触发，所以不仅函数A比setTimeout指定的回调函数timeout先执行，而且函数B也比timeout先执行。这说明，如果有多个process.nextTick语句（不管它们是否嵌套），将全部在当前”执行栈”执行。   setImmediate总是将事件注册到下一轮Event Loop</p>\n<p>　测试金字塔指的是： 当我们在编写测试用例时，底层的单元测试应该远比上层的端到端测试要多。\n　</p>\n<p>数组的shift和unshift  push 和 pop </p>\n<p>node 优势：非阻塞IO、高并发、丰富的生态环境</p>\n<p> node有哪些全局对象?<br>参考答案: process, console, Buffer和exports<br><img src=\"https://camo.githubusercontent.com/233315761d49d4c75fe7969e36bda22ecf5bbc0f/687474703a2f2f6a6f616f7073696c76612e6769746875622e696f2f74616c6b732f456e642d746f2d456e642d4a6176615363726970742d776974682d7468652d4d45414e2d537461636b2f696d672f6e6f64656a732d617263682d7070742e706e67\" alt=\"image\"></p>\n<p>process有哪些常用方法?<br>参考答案: process.stdin, process.stdout, process.stderr, process.on, process.env, process.argv, process.arch, process.platform, process.exit</p>\n<p>通过domain获取eventemmiter 的异常：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var domain = require(&apos;domain&apos;);</span><br><span class=\"line\">    var myDomain = domain.create();</span><br><span class=\"line\">    myDomain.on(&apos;error&apos;, function(err)&#123;</span><br><span class=\"line\">        console.log(&apos;domain接收到的错误事件:&apos;, err);</span><br><span class=\"line\">    &#125;); // 接收事件并打印</span><br><span class=\"line\">    myDomain.run(function()&#123;</span><br><span class=\"line\">        var emitter1 = new MyEmitter();</span><br><span class=\"line\">        emitter1.emit(&apos;error&apos;, &apos;错误事件来自emitter1&apos;);</span><br><span class=\"line\">        emitter2 = new MyEmitter();</span><br><span class=\"line\">        emitter2.emit(&apos;error&apos;, &apos;错误事件来自emitter2&apos;);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>supper 代表父类构造函数和原形</p>\n<p>原生构造函数：<br>Boolean()<br>Number()<br>String()<br>Array()<br>Date()<br>Function()<br>RegExp()<br>Error()<br>Object()</p>\n<p>Es6 可以继承这些原生的构造函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MyArray extends Array &#123;</span><br><span class=\"line\">  constructor(...args) &#123;</span><br><span class=\"line\">    super(...args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var arr = new MyArray();</span><br><span class=\"line\">arr[0] = 12;</span><br><span class=\"line\">arr.length // 1</span><br><span class=\"line\"></span><br><span class=\"line\">arr.length = 0;</span><br><span class=\"line\">arr[0] // undefined</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ExtendableError extends Error &#123;</span><br><span class=\"line\">  constructor(message) &#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.message = message;</span><br><span class=\"line\">    this.stack = (new Error()).stack;</span><br><span class=\"line\">    this.name = this.constructor.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyError extends ExtendableError &#123;</span><br><span class=\"line\">  constructor(m) &#123;</span><br><span class=\"line\">    super(m);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var myerror = new MyError(&apos;ll&apos;);</span><br><span class=\"line\">myerror.message // &quot;ll&quot;</span><br><span class=\"line\">myerror instanceof Error // true</span><br><span class=\"line\">myerror.name // &quot;MyError&quot;</span><br><span class=\"line\">myerror.stack</span><br></pre></td></tr></table></figure>\n<p>Stream有什么好处?<br>参考答案: 非阻塞式数据处理提升效率，片断处理节省内存，管道处理方便可扩展等.</p>\n<p>fs.watch和fs.watchFile有什么区别，怎么应用?<br>参考答案: 二者主要用来监听文件变动．fs.watch利用操作系统原生机制来监听，可能不适用网络文件系统; fs.watchFile则是定期检查文件状态变更，适用于网络文件系统，但是相比fs.watch有些慢，因为不是实时机制．</p>\n<p>实现一个简单的HTTP 服务器。<br>require(‘http’).createServer(function(req,res){}).listen(300);</p>\n<p>spawn应用来运行返回大量数据的子进程，如图像处理，文件读取等。而exec则应用来运行只返回少量返回值的子进程，如只返回一个状态码。</p>\n<p>有哪些常用方法可以防止程序崩溃?</p>\n<p>参考答案: 1) try-catch-finally 2) EventEmitter/Stream error事件处理 3) domain统一控制 4) jshint静态检查 5) jasmine/mocha进行单元测试</p>\n<p>要监控nodejs的内存使用的话，需要安装memwathch 模块</p>\n<p>nodejs C++ 扩展的实现：<br><a href=\"https://my.oschina.net/yushulx/blog/423704\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/yushulx/blog/423704</a></p>\n<p>process.argv 数组的第一个元素永远都会是 node，并且第二个参数总是指向你的程序的路径，所以，你应该从第三个元素</p>\n<p>使用 socket.write(data) 可以写数据到 socket 中，用 socket.end() 可以关闭一个 socket。另外， .end() 方法也可以接收一个数据对象作为参数，因此，你可简单地使用 socket.end(data) 来完成写数据和关闭两个操作。</p>\n<p>concat-stream：会连接多个stream,参数中不指定encoding 的话，会自行推断。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arrays = concat(&#123; encoding: &apos;array&apos; &#125;, function(out) &#123;</span><br><span class=\"line\">    t.deepEqual(out, [1,2,3,4,5,6])</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  arrays.write([1,2,3])</span><br><span class=\"line\">  arrays.write([4,5,6])</span><br><span class=\"line\">  arrays.end()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.createReadStream(file).pipe(process.stdout);</span><br></pre></td></tr></table></figure>\n<p>使用through2 对流数据进行转换：</p>\n<p>通过split 将流中的数据分行：</p>\n<p>You can use the <code>split</code> module to split input by newlines. For example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var split = require(&apos;split&apos;);</span><br><span class=\"line\">process.stdin</span><br><span class=\"line\">    .pipe(split())</span><br><span class=\"line\">    .pipe(through2(function (line, _, next) &#123;</span><br><span class=\"line\">        console.dir(line.toString());</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"http","date":"2019-05-14T07:17:39.000Z","_content":"1. Origin:scheme, host, and port.\n    same origin 更加严格 \n#### Quic \n1. 多路复用，避免队头阻塞\n1. 减少 RTT，请求更快速\n1. 快速迭代，广泛支持\n\n传统的 HTTP2 + SSL + TCP 协议栈有哪些缺点？\n1.SSL 的会话恢复依然需要一个 RTT，而且难以合并到 TCP 层\n1. TCP 的滑动窗口存在队头阻塞问题\n1. TCP 的重传纠错会浪费一个 RTT\n\n网络请求中一个常见的名词是 RTT(Round Trip Time)，表示客户端从发出一个请求数据，到接收到响应数据之间间隔的时间。\n\n#### Dns 本地dns解析器和host->本地dns服务器 \n#### http 请求限制\n默认情况下，浏览器会针对这些情况使用同一个连接：\n\n同一域名下的资源；\n\n不同域名下的资源，但是满足两个条件：1）解析到同一个 IP；2）使用同一个证书；\n\n使用多域名加上相同的 IP 和证书部署 Web 服务有特殊的意义：让支持 HTTP/2 的终端只建立一个连接，用上 HTTP/2 协议带来的各种好处；而只支持 HTTP/1.1 的终端则会建立多个连接，达到同时更多并发请求的目的。这在 HTTP/2 完全普及前也是一个不错的选择。\n\n####cors\n简单请求 可以直接发不用预检。简单请求\n1. Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain\n1. Method head,get,post\n\n\n####XST 的全称是 Cross-Site Tracing\n\n    客户端发 TRACE 请求至服务器，如果服务器按照标准实现了 TRACE 响应，则在 response body 里会返回此次请求的完整头信息。通过这种方式，客户端可以获取某些敏感的头字段，例如 httpOnly 的 Cookie。\n\n    TRACE方法让客户端测试到服务器的网络通路，回路的意思如发送一个请返回一个响应，这就是一个请求响应回路\n\n####Set-Cookie\n    用于设置Cookie。\n    \n    Set-Cookie: name=value; secure; HttpOnly\n    secure 只在进行HTTP通信时发送Cookie。\n    HttpOnly 指定不能从JavaScript脚本代码访问Cookie值。\n    \n ####X-Download-Options: noopen\n    noopen 用于指定IE 8以上版本的用户不打开文件而直接保存文件。在下载对话框中不显示“打开”选项。\n \n ####keepalive \n \n    若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;   \n    http 1.0中默认是关闭的，需要在http头加入\"Connection: Keep-Alive\"，才能启用Keep-Alive；http 1.1中默认启用Keep-Alive，如果加入\"Connection: close \"，才关闭。目前大部分浏览器都是用http1.1协议，也就是说默认都会发起Keep-Alive的连接请求了，所以是否能完成一个完整的Keep-Alive连接就看服务器设置情况。\n    \n ####headers\n \n Accept-Charset： 浏览器申明自己接收的字符集 \n Accept-Encoding： 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate） \n \n  Age：当代理服务器用自己缓存的实体去响应请求时，用该头部表明该实体从产生到现在经过多长时间了。   \n  \n   http header 中使用location 进行302跳转 \n   \n   URL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的URL 对象表示指定的 File 对象或 Blob 对象。\n\n####http \n```text\nhttp 1.1 添加cache-contol \n\n长连接：HTTP1.0需要使用keep-alive参数来告知服务器建立一个长连接，而HTP1.1默认支持长连接\n节约宽带：HTTP1.1支持只发送一个header信息（不带任何body信息）\nhost域（设置虚拟站点，也就是说，web server上的多个虚拟站点可以共享同一个ip端口）：HTTP1.0没有host域\n\n\nhttp 2.0\n采用二进制格式传输;\n多路复用，其实就是将请求数据分成帧乱序发送到 TCP 中。TCP 只能有一个 steam，所以还是会阻塞;\n报头压缩;\n服务器推送主动向 B 端发送静态资源，避免往返延迟。\n1.http2采用的二进制文本传输数据，而非http1文本格式，二进制在协议的解析和扩展更好\n2.数据压缩：对信息头采用了HPACK进行压缩传输，节省了信息头带来的网络流量\n3.多路复用：一个连接可以并发处理多个请求\n4.服务器推送：我们对支持HTTP2.0的web server请求数据的时候，服务器会顺便把一些客户端需要的资源一起推送到客户端，免得客户端再次创建连接发送请求到服务器端获取。这种方式非常合适加载静态资源\n\nhttp 3.0\n采用 QUIC 协议,自定义连接机制;自定义重传机制;无阻塞的多路复用\n\n2.按缓存分：强缓存和协商缓存：\n2.1强缓存：利用 cache-control 和 expires 设置，直接返回一个过期时间，所以在缓存期间不请求，If-modify-since；\n2.2协商缓存：响应头返回 etag 或 last-modified 的哈希值，第二次请求头 If-none-match 或 IF-modify-since 携带上次哈希值，一致则返回 304。\nF5 刷新会忽略强缓存不会忽略协商缓存，ctrl+f5 都失效\n```       \n\n1. Https https://zhuanlan.zhihu.com/p/27395037    https://blog.51cto.com/11883699/2160032\n1. Ca 使用证书颁发机构的证书中的公钥去解密被颁发者的指纹算法和指纹，并计算比对指纹，正确才能验证身份\n\n1. 缓存的分类：\n```text\n   强缓存：在缓存数据未失效的情况下，不需要再和服务器发生交互.cache-control :no-cache 走协商缓存\n   协商缓存：需要与服务端校验是否使用缓存。etag If-None-Match HTTP 请求头内提供 ETag\n```\n\n\n1. https \n```text\n这些ＣＡ本身也有证书来证明自己的身份，并且ＣＡ的信用是像树一样分级的，高层的ＣＡ给底层的ＣＡ做信用背书，而操作系统／浏览器中会内置一些顶层的ＣＡ的证书，相当于你自动信任了他们。　\n\n公钥+个人信息+其它信息—》hash 算法 —》信息摘要-》用ca的私钥加密—》数字签名   签名+信息=数字证书 \nCa 的公钥解密—》hash hash 算法 —》信息摘要-》对比是否一致\n\n```\n\n1. content-type\n```text\nmultipart/form-data\n\n请求消息头中, Content-Type: multipart/form-data; boundary=----WebKitFormBoundarykALcKBgBaI9xA79y\nboundary为分隔符.\n\napplication/x-www-form-urlencoded\n```\n\n1. Nat network adreess translation 网络地址转换.\n  当访问外网时自动分配一个端口，这个端口和内网的机器建立了映射关系。\n1. Defer\n\n   这个属性的用途是表明脚本在执行时不会影响页面的构造。也就是说，脚本会被延迟到整个页面都解析完毕后再运行。因此，在script元素中设置defer属性，相当于告诉浏览器立即下载，但延迟执行。\n   但与defer不同的是，标记为async的脚本并不保证按照它们的先后顺序执行。\n1.    在 http 1.1 中，在响应头中设置 keep-alive 可以在一个 TCP 连接上发送多个 http 请求\n      \n      避免了重开 TCP 连接的开销\n      避免了刷新时重新建立 SSL 连接的开销\n      避免了QPS过大时，服务器的连接数过大\n      \n1. 缓存协商\n \n ```text\n我们知道协商缓存有两种方式\n\nLast-Modified/if-Modified-Since  ** Last-Modified 是由一个 unix timestamp 表示，则意味着它只能作用于秒级的改变**\nETag/If-None-Match\n```     \n1. window.opener 表示打开当前窗体页面的的父窗体的是谁。例如，在 A 页面中，通过一个带有 target=\"_blank\" 的 a 标签打开了一个新的页面 B，那么在 B 页面里，window.opener 的值为 A 页面的 window 对象。   rel=noopener 规定禁止新页面传递源页面的地址，通过设置了此属性的链接打开的页面，其 window.opener 的值为 null。\n1. Gzip 不要使用再图片以及其它二进制文件上\n\n1. 302 临时重定向会改变method  \n502  收到了上游相应但是无法解析  \n504 上游解析超时\n1. gzip 使用了 LZ77 算法与 Huffman 编码来压缩文件，重复度越高的文件可压缩的空间就越大\n1. Etag etag = '{:x}-{:x}'.format(header.last_modified, header.content_lenth)\n1. Mtime 文件最近内容改变的时间\n1. https 解决三个安全问题 1. 内容隐私 2. 防篡改 3.身份认证\n1. LRU AND LFU  最久未使用 最少使用\n1. [浏览器进程](https://user-gold-cdn.xitu.io/2020/1/7/16f7ee19a85b3c8f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n1. \nHTTP/2引入二进制数据帧和流的概念，其中帧对数据进行顺序标识，如下图所示，这样浏览器收到数据之后，就可以按照序列对数据进行合并，而不会出现合并后数据错乱的情况。同样是因为有了序列，服务器就可以并行的传输数据，这就是流所做的事情。http2 静态资源的推送\n1. 查看network请求发现，每一个文件都有etag响应头，如果Nginx使用了已有的gz文件，那么这个请求的etag值不带有W/，反之，如果是文件是Nginx压缩的，etag值则会带有W/\n\n1. 总是设置 Vary: Origin，避免 CDN 缓存破坏 CORS 配置\n2. QUIC 基于 UDP，UDP 的数据包在接收端没有处理顺序，即使中间 丢失一个包，也不会阻塞整条连接，其他的资源会被正常处理。\n1. 30X 区分\n```text\n301，Moved Permanently。永久重定向，该操作比较危险，需要谨慎操作：如果设置了301，但是一段时间后又想取消，但是浏览器中已经有了缓存，还是会重定向。\n302，Fount。临时重定向，但是会在重定向的时候改变 method: 把 POST 改成 GET，于是有了 307\n307，Temporary Redirect。临时重定向，在重定向时不会改变 method\n```\n\n1.  Tcp 的滑动窗口增大了吞吐量，但是并没有解决队头堵塞得问题\n1.  http 挥手 主动关闭有个time_wait,这个标准的持续时间是4分钟\n\n      ISN(Initial Sequence Number) 是固定的么，\n     \n      客户端的syn_send 状态、服务端的syn_rcvd\n      \n      Tcp 报文段：tcp 首部+tcp 数据部分\n     \n      半链接队列—超时重传\n      \n      等待2个msl 确保服务端能收到ack,能正常关闭\n     \n      关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。\n2. 如果 300 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错。 \n\n3. 而HTTP的204(No Content)响应, 就表示执行成功, 但是没有数据, 浏览器不用刷新页面.也不用导向新的页面.  \n     205 Reset Content, 表示执行成功, 重置页面(Form表单).\n\n1. 子网是所属VPC IP地址范围内的 IP 地址块。目前私有网络中的云资源部署在子网内，如云主机、容器、负载均衡等。子网：子网是对VPC地址空间的再一次划分，用户可以在子网中创建云主机。\n\n1. 可用区（Availability Zone）是电力及网络之间互相独立的物理区域，相同可用区内的实例之间较之同地域不同可用区内实例之间的网络延时更小。同地域内不同可用区之间提供内网互通环境，可用区之间可做到故障隔离。\n  若您的业务要求有较低网络时延，建议将实例或者Pod部署在同一可用区内。\n  \n1. VPC：VPC是用户网络在京东云上的表现形式，包含了一系列的网络功能，与其他的VPC逻辑隔离。VPC有一个网络地址空间，用户可以在其中继续划分子网。\n\n1. NAT 地址网络转换，通过在路由器上安装 NAT 软件，它至少有一个有效的公网 IP 地址，通过 NAT 路由器将内部私有 IP 转换成公网 IP。它的问题在于 NAT 设备自动屏蔽了非内网主机主动发起的连接，也就是说，从外网发往内网的数据包将被 NAT 设备丢弃，这使得位于不同 NAT 设备之后的主机之间无法直接交换信息.\n  \n1. 503 服务器资源不足问题导致的拒绝服务，比如熔断。\n1. Options  \n```text\n   1. 检测服务支持的method\n   2. Cors 预检\n```\n1. HTTP HEAD 方法 请求资源的头部信息, 并且这些头部与 HTTP GET 方法请求时返回的一致. 该请求方法的一个使用场景是在下载一个大文件前先获取其大小再决定是否要下载, 以此可以节约带宽资源.\n1. WebSocket是基于Http协议的，或者说借用了Http协议来完成一部分握手，在握手阶段与Http是相同的。我们来看一个websocket握手协议的实现，基本是2个属性，upgrade，connection。\n```text\nUpgrade:webSocket\nConnection:Upgrade\n```     ","source":"_posts/http.md","raw":"---\ntitle: http\ndate: 2019-05-14 15:17:39\ntags: http\n---\n1. Origin:scheme, host, and port.\n    same origin 更加严格 \n#### Quic \n1. 多路复用，避免队头阻塞\n1. 减少 RTT，请求更快速\n1. 快速迭代，广泛支持\n\n传统的 HTTP2 + SSL + TCP 协议栈有哪些缺点？\n1.SSL 的会话恢复依然需要一个 RTT，而且难以合并到 TCP 层\n1. TCP 的滑动窗口存在队头阻塞问题\n1. TCP 的重传纠错会浪费一个 RTT\n\n网络请求中一个常见的名词是 RTT(Round Trip Time)，表示客户端从发出一个请求数据，到接收到响应数据之间间隔的时间。\n\n#### Dns 本地dns解析器和host->本地dns服务器 \n#### http 请求限制\n默认情况下，浏览器会针对这些情况使用同一个连接：\n\n同一域名下的资源；\n\n不同域名下的资源，但是满足两个条件：1）解析到同一个 IP；2）使用同一个证书；\n\n使用多域名加上相同的 IP 和证书部署 Web 服务有特殊的意义：让支持 HTTP/2 的终端只建立一个连接，用上 HTTP/2 协议带来的各种好处；而只支持 HTTP/1.1 的终端则会建立多个连接，达到同时更多并发请求的目的。这在 HTTP/2 完全普及前也是一个不错的选择。\n\n####cors\n简单请求 可以直接发不用预检。简单请求\n1. Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain\n1. Method head,get,post\n\n\n####XST 的全称是 Cross-Site Tracing\n\n    客户端发 TRACE 请求至服务器，如果服务器按照标准实现了 TRACE 响应，则在 response body 里会返回此次请求的完整头信息。通过这种方式，客户端可以获取某些敏感的头字段，例如 httpOnly 的 Cookie。\n\n    TRACE方法让客户端测试到服务器的网络通路，回路的意思如发送一个请返回一个响应，这就是一个请求响应回路\n\n####Set-Cookie\n    用于设置Cookie。\n    \n    Set-Cookie: name=value; secure; HttpOnly\n    secure 只在进行HTTP通信时发送Cookie。\n    HttpOnly 指定不能从JavaScript脚本代码访问Cookie值。\n    \n ####X-Download-Options: noopen\n    noopen 用于指定IE 8以上版本的用户不打开文件而直接保存文件。在下载对话框中不显示“打开”选项。\n \n ####keepalive \n \n    若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;   \n    http 1.0中默认是关闭的，需要在http头加入\"Connection: Keep-Alive\"，才能启用Keep-Alive；http 1.1中默认启用Keep-Alive，如果加入\"Connection: close \"，才关闭。目前大部分浏览器都是用http1.1协议，也就是说默认都会发起Keep-Alive的连接请求了，所以是否能完成一个完整的Keep-Alive连接就看服务器设置情况。\n    \n ####headers\n \n Accept-Charset： 浏览器申明自己接收的字符集 \n Accept-Encoding： 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate） \n \n  Age：当代理服务器用自己缓存的实体去响应请求时，用该头部表明该实体从产生到现在经过多长时间了。   \n  \n   http header 中使用location 进行302跳转 \n   \n   URL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的URL 对象表示指定的 File 对象或 Blob 对象。\n\n####http \n```text\nhttp 1.1 添加cache-contol \n\n长连接：HTTP1.0需要使用keep-alive参数来告知服务器建立一个长连接，而HTP1.1默认支持长连接\n节约宽带：HTTP1.1支持只发送一个header信息（不带任何body信息）\nhost域（设置虚拟站点，也就是说，web server上的多个虚拟站点可以共享同一个ip端口）：HTTP1.0没有host域\n\n\nhttp 2.0\n采用二进制格式传输;\n多路复用，其实就是将请求数据分成帧乱序发送到 TCP 中。TCP 只能有一个 steam，所以还是会阻塞;\n报头压缩;\n服务器推送主动向 B 端发送静态资源，避免往返延迟。\n1.http2采用的二进制文本传输数据，而非http1文本格式，二进制在协议的解析和扩展更好\n2.数据压缩：对信息头采用了HPACK进行压缩传输，节省了信息头带来的网络流量\n3.多路复用：一个连接可以并发处理多个请求\n4.服务器推送：我们对支持HTTP2.0的web server请求数据的时候，服务器会顺便把一些客户端需要的资源一起推送到客户端，免得客户端再次创建连接发送请求到服务器端获取。这种方式非常合适加载静态资源\n\nhttp 3.0\n采用 QUIC 协议,自定义连接机制;自定义重传机制;无阻塞的多路复用\n\n2.按缓存分：强缓存和协商缓存：\n2.1强缓存：利用 cache-control 和 expires 设置，直接返回一个过期时间，所以在缓存期间不请求，If-modify-since；\n2.2协商缓存：响应头返回 etag 或 last-modified 的哈希值，第二次请求头 If-none-match 或 IF-modify-since 携带上次哈希值，一致则返回 304。\nF5 刷新会忽略强缓存不会忽略协商缓存，ctrl+f5 都失效\n```       \n\n1. Https https://zhuanlan.zhihu.com/p/27395037    https://blog.51cto.com/11883699/2160032\n1. Ca 使用证书颁发机构的证书中的公钥去解密被颁发者的指纹算法和指纹，并计算比对指纹，正确才能验证身份\n\n1. 缓存的分类：\n```text\n   强缓存：在缓存数据未失效的情况下，不需要再和服务器发生交互.cache-control :no-cache 走协商缓存\n   协商缓存：需要与服务端校验是否使用缓存。etag If-None-Match HTTP 请求头内提供 ETag\n```\n\n\n1. https \n```text\n这些ＣＡ本身也有证书来证明自己的身份，并且ＣＡ的信用是像树一样分级的，高层的ＣＡ给底层的ＣＡ做信用背书，而操作系统／浏览器中会内置一些顶层的ＣＡ的证书，相当于你自动信任了他们。　\n\n公钥+个人信息+其它信息—》hash 算法 —》信息摘要-》用ca的私钥加密—》数字签名   签名+信息=数字证书 \nCa 的公钥解密—》hash hash 算法 —》信息摘要-》对比是否一致\n\n```\n\n1. content-type\n```text\nmultipart/form-data\n\n请求消息头中, Content-Type: multipart/form-data; boundary=----WebKitFormBoundarykALcKBgBaI9xA79y\nboundary为分隔符.\n\napplication/x-www-form-urlencoded\n```\n\n1. Nat network adreess translation 网络地址转换.\n  当访问外网时自动分配一个端口，这个端口和内网的机器建立了映射关系。\n1. Defer\n\n   这个属性的用途是表明脚本在执行时不会影响页面的构造。也就是说，脚本会被延迟到整个页面都解析完毕后再运行。因此，在script元素中设置defer属性，相当于告诉浏览器立即下载，但延迟执行。\n   但与defer不同的是，标记为async的脚本并不保证按照它们的先后顺序执行。\n1.    在 http 1.1 中，在响应头中设置 keep-alive 可以在一个 TCP 连接上发送多个 http 请求\n      \n      避免了重开 TCP 连接的开销\n      避免了刷新时重新建立 SSL 连接的开销\n      避免了QPS过大时，服务器的连接数过大\n      \n1. 缓存协商\n \n ```text\n我们知道协商缓存有两种方式\n\nLast-Modified/if-Modified-Since  ** Last-Modified 是由一个 unix timestamp 表示，则意味着它只能作用于秒级的改变**\nETag/If-None-Match\n```     \n1. window.opener 表示打开当前窗体页面的的父窗体的是谁。例如，在 A 页面中，通过一个带有 target=\"_blank\" 的 a 标签打开了一个新的页面 B，那么在 B 页面里，window.opener 的值为 A 页面的 window 对象。   rel=noopener 规定禁止新页面传递源页面的地址，通过设置了此属性的链接打开的页面，其 window.opener 的值为 null。\n1. Gzip 不要使用再图片以及其它二进制文件上\n\n1. 302 临时重定向会改变method  \n502  收到了上游相应但是无法解析  \n504 上游解析超时\n1. gzip 使用了 LZ77 算法与 Huffman 编码来压缩文件，重复度越高的文件可压缩的空间就越大\n1. Etag etag = '{:x}-{:x}'.format(header.last_modified, header.content_lenth)\n1. Mtime 文件最近内容改变的时间\n1. https 解决三个安全问题 1. 内容隐私 2. 防篡改 3.身份认证\n1. LRU AND LFU  最久未使用 最少使用\n1. [浏览器进程](https://user-gold-cdn.xitu.io/2020/1/7/16f7ee19a85b3c8f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n1. \nHTTP/2引入二进制数据帧和流的概念，其中帧对数据进行顺序标识，如下图所示，这样浏览器收到数据之后，就可以按照序列对数据进行合并，而不会出现合并后数据错乱的情况。同样是因为有了序列，服务器就可以并行的传输数据，这就是流所做的事情。http2 静态资源的推送\n1. 查看network请求发现，每一个文件都有etag响应头，如果Nginx使用了已有的gz文件，那么这个请求的etag值不带有W/，反之，如果是文件是Nginx压缩的，etag值则会带有W/\n\n1. 总是设置 Vary: Origin，避免 CDN 缓存破坏 CORS 配置\n2. QUIC 基于 UDP，UDP 的数据包在接收端没有处理顺序，即使中间 丢失一个包，也不会阻塞整条连接，其他的资源会被正常处理。\n1. 30X 区分\n```text\n301，Moved Permanently。永久重定向，该操作比较危险，需要谨慎操作：如果设置了301，但是一段时间后又想取消，但是浏览器中已经有了缓存，还是会重定向。\n302，Fount。临时重定向，但是会在重定向的时候改变 method: 把 POST 改成 GET，于是有了 307\n307，Temporary Redirect。临时重定向，在重定向时不会改变 method\n```\n\n1.  Tcp 的滑动窗口增大了吞吐量，但是并没有解决队头堵塞得问题\n1.  http 挥手 主动关闭有个time_wait,这个标准的持续时间是4分钟\n\n      ISN(Initial Sequence Number) 是固定的么，\n     \n      客户端的syn_send 状态、服务端的syn_rcvd\n      \n      Tcp 报文段：tcp 首部+tcp 数据部分\n     \n      半链接队列—超时重传\n      \n      等待2个msl 确保服务端能收到ack,能正常关闭\n     \n      关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。\n2. 如果 300 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错。 \n\n3. 而HTTP的204(No Content)响应, 就表示执行成功, 但是没有数据, 浏览器不用刷新页面.也不用导向新的页面.  \n     205 Reset Content, 表示执行成功, 重置页面(Form表单).\n\n1. 子网是所属VPC IP地址范围内的 IP 地址块。目前私有网络中的云资源部署在子网内，如云主机、容器、负载均衡等。子网：子网是对VPC地址空间的再一次划分，用户可以在子网中创建云主机。\n\n1. 可用区（Availability Zone）是电力及网络之间互相独立的物理区域，相同可用区内的实例之间较之同地域不同可用区内实例之间的网络延时更小。同地域内不同可用区之间提供内网互通环境，可用区之间可做到故障隔离。\n  若您的业务要求有较低网络时延，建议将实例或者Pod部署在同一可用区内。\n  \n1. VPC：VPC是用户网络在京东云上的表现形式，包含了一系列的网络功能，与其他的VPC逻辑隔离。VPC有一个网络地址空间，用户可以在其中继续划分子网。\n\n1. NAT 地址网络转换，通过在路由器上安装 NAT 软件，它至少有一个有效的公网 IP 地址，通过 NAT 路由器将内部私有 IP 转换成公网 IP。它的问题在于 NAT 设备自动屏蔽了非内网主机主动发起的连接，也就是说，从外网发往内网的数据包将被 NAT 设备丢弃，这使得位于不同 NAT 设备之后的主机之间无法直接交换信息.\n  \n1. 503 服务器资源不足问题导致的拒绝服务，比如熔断。\n1. Options  \n```text\n   1. 检测服务支持的method\n   2. Cors 预检\n```\n1. HTTP HEAD 方法 请求资源的头部信息, 并且这些头部与 HTTP GET 方法请求时返回的一致. 该请求方法的一个使用场景是在下载一个大文件前先获取其大小再决定是否要下载, 以此可以节约带宽资源.\n1. WebSocket是基于Http协议的，或者说借用了Http协议来完成一部分握手，在握手阶段与Http是相同的。我们来看一个websocket握手协议的实现，基本是2个属性，upgrade，connection。\n```text\nUpgrade:webSocket\nConnection:Upgrade\n```     ","slug":"http","published":1,"updated":"2021-04-30T11:14:48.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5sdzf000pyy8ka3xwt8wg","content":"<ol>\n<li>Origin:scheme, host, and port.<br> same origin 更加严格 <h4 id=\"Quic\"><a href=\"#Quic\" class=\"headerlink\" title=\"Quic\"></a>Quic</h4></li>\n<li>多路复用，避免队头阻塞</li>\n<li>减少 RTT，请求更快速</li>\n<li>快速迭代，广泛支持</li>\n</ol>\n<p>传统的 HTTP2 + SSL + TCP 协议栈有哪些缺点？<br>1.SSL 的会话恢复依然需要一个 RTT，而且难以合并到 TCP 层</p>\n<ol>\n<li>TCP 的滑动窗口存在队头阻塞问题</li>\n<li>TCP 的重传纠错会浪费一个 RTT</li>\n</ol>\n<p>网络请求中一个常见的名词是 RTT(Round Trip Time)，表示客户端从发出一个请求数据，到接收到响应数据之间间隔的时间。</p>\n<h4 id=\"Dns-本地dns解析器和host-gt-本地dns服务器\"><a href=\"#Dns-本地dns解析器和host-gt-本地dns服务器\" class=\"headerlink\" title=\"Dns 本地dns解析器和host-&gt;本地dns服务器\"></a>Dns 本地dns解析器和host-&gt;本地dns服务器</h4><h4 id=\"http-请求限制\"><a href=\"#http-请求限制\" class=\"headerlink\" title=\"http 请求限制\"></a>http 请求限制</h4><p>默认情况下，浏览器会针对这些情况使用同一个连接：</p>\n<p>同一域名下的资源；</p>\n<p>不同域名下的资源，但是满足两个条件：1）解析到同一个 IP；2）使用同一个证书；</p>\n<p>使用多域名加上相同的 IP 和证书部署 Web 服务有特殊的意义：让支持 HTTP/2 的终端只建立一个连接，用上 HTTP/2 协议带来的各种好处；而只支持 HTTP/1.1 的终端则会建立多个连接，达到同时更多并发请求的目的。这在 HTTP/2 完全普及前也是一个不错的选择。</p>\n<p>####cors<br>简单请求 可以直接发不用预检。简单请求</p>\n<ol>\n<li>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</li>\n<li>Method head,get,post</li>\n</ol>\n<p>####XST 的全称是 Cross-Site Tracing</p>\n<pre><code>客户端发 TRACE 请求至服务器，如果服务器按照标准实现了 TRACE 响应，则在 response body 里会返回此次请求的完整头信息。通过这种方式，客户端可以获取某些敏感的头字段，例如 httpOnly 的 Cookie。\n\nTRACE方法让客户端测试到服务器的网络通路，回路的意思如发送一个请返回一个响应，这就是一个请求响应回路\n</code></pre><p>####Set-Cookie<br>    用于设置Cookie。</p>\n<pre><code>Set-Cookie: name=value; secure; HttpOnly\nsecure 只在进行HTTP通信时发送Cookie。\nHttpOnly 指定不能从JavaScript脚本代码访问Cookie值。\n</code></pre><p> ####X-Download-Options: noopen<br>    noopen 用于指定IE 8以上版本的用户不打开文件而直接保存文件。在下载对话框中不显示“打开”选项。</p>\n<p> ####keepalive </p>\n<pre><code>若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;   \nhttp 1.0中默认是关闭的，需要在http头加入&quot;Connection: Keep-Alive&quot;，才能启用Keep-Alive；http 1.1中默认启用Keep-Alive，如果加入&quot;Connection: close &quot;，才关闭。目前大部分浏览器都是用http1.1协议，也就是说默认都会发起Keep-Alive的连接请求了，所以是否能完成一个完整的Keep-Alive连接就看服务器设置情况。\n</code></pre><p> ####headers</p>\n<p> Accept-Charset： 浏览器申明自己接收的字符集<br> Accept-Encoding： 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate） </p>\n<p>  Age：当代理服务器用自己缓存的实体去响应请求时，用该头部表明该实体从产生到现在经过多长时间了。   </p>\n<p>   http header 中使用location 进行302跳转 </p>\n<p>   URL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的URL 对象表示指定的 File 对象或 Blob 对象。</p>\n<p>####http<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http 1.1 添加cache-contol </span><br><span class=\"line\"></span><br><span class=\"line\">长连接：HTTP1.0需要使用keep-alive参数来告知服务器建立一个长连接，而HTP1.1默认支持长连接</span><br><span class=\"line\">节约宽带：HTTP1.1支持只发送一个header信息（不带任何body信息）</span><br><span class=\"line\">host域（设置虚拟站点，也就是说，web server上的多个虚拟站点可以共享同一个ip端口）：HTTP1.0没有host域</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http 2.0</span><br><span class=\"line\">采用二进制格式传输;</span><br><span class=\"line\">多路复用，其实就是将请求数据分成帧乱序发送到 TCP 中。TCP 只能有一个 steam，所以还是会阻塞;</span><br><span class=\"line\">报头压缩;</span><br><span class=\"line\">服务器推送主动向 B 端发送静态资源，避免往返延迟。</span><br><span class=\"line\">1.http2采用的二进制文本传输数据，而非http1文本格式，二进制在协议的解析和扩展更好</span><br><span class=\"line\">2.数据压缩：对信息头采用了HPACK进行压缩传输，节省了信息头带来的网络流量</span><br><span class=\"line\">3.多路复用：一个连接可以并发处理多个请求</span><br><span class=\"line\">4.服务器推送：我们对支持HTTP2.0的web server请求数据的时候，服务器会顺便把一些客户端需要的资源一起推送到客户端，免得客户端再次创建连接发送请求到服务器端获取。这种方式非常合适加载静态资源</span><br><span class=\"line\"></span><br><span class=\"line\">http 3.0</span><br><span class=\"line\">采用 QUIC 协议,自定义连接机制;自定义重传机制;无阻塞的多路复用</span><br><span class=\"line\"></span><br><span class=\"line\">2.按缓存分：强缓存和协商缓存：</span><br><span class=\"line\">2.1强缓存：利用 cache-control 和 expires 设置，直接返回一个过期时间，所以在缓存期间不请求，If-modify-since；</span><br><span class=\"line\">2.2协商缓存：响应头返回 etag 或 last-modified 的哈希值，第二次请求头 If-none-match 或 IF-modify-since 携带上次哈希值，一致则返回 304。</span><br><span class=\"line\">F5 刷新会忽略强缓存不会忽略协商缓存，ctrl+f5 都失效</span><br><span class=\"line\">```       </span><br><span class=\"line\"></span><br><span class=\"line\">1. Https https://zhuanlan.zhihu.com/p/27395037    https://blog.51cto.com/11883699/2160032</span><br><span class=\"line\">1. Ca 使用证书颁发机构的证书中的公钥去解密被颁发者的指纹算法和指纹，并计算比对指纹，正确才能验证身份</span><br><span class=\"line\"></span><br><span class=\"line\">1. 缓存的分类：</span><br><span class=\"line\">```text</span><br><span class=\"line\">   强缓存：在缓存数据未失效的情况下，不需要再和服务器发生交互.cache-control :no-cache 走协商缓存</span><br><span class=\"line\">   协商缓存：需要与服务端校验是否使用缓存。etag If-None-Match HTTP 请求头内提供 ETag</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><p>https </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这些ＣＡ本身也有证书来证明自己的身份，并且ＣＡ的信用是像树一样分级的，高层的ＣＡ给底层的ＣＡ做信用背书，而操作系统／浏览器中会内置一些顶层的ＣＡ的证书，相当于你自动信任了他们。　</span><br><span class=\"line\"></span><br><span class=\"line\">公钥+个人信息+其它信息—》hash 算法 —》信息摘要-》用ca的私钥加密—》数字签名   签名+信息=数字证书 </span><br><span class=\"line\">Ca 的公钥解密—》hash hash 算法 —》信息摘要-》对比是否一致</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>content-type</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">multipart/form-data</span><br><span class=\"line\"></span><br><span class=\"line\">请求消息头中, Content-Type: multipart/form-data; boundary=----WebKitFormBoundarykALcKBgBaI9xA79y</span><br><span class=\"line\">boundary为分隔符.</span><br><span class=\"line\"></span><br><span class=\"line\">application/x-www-form-urlencoded</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Nat network adreess translation 网络地址转换.<br>当访问外网时自动分配一个端口，这个端口和内网的机器建立了映射关系。</p>\n</li>\n<li><p>Defer</p>\n<p>这个属性的用途是表明脚本在执行时不会影响页面的构造。也就是说，脚本会被延迟到整个页面都解析完毕后再运行。因此，在script元素中设置defer属性，相当于告诉浏览器立即下载，但延迟执行。<br>但与defer不同的是，标记为async的脚本并不保证按照它们的先后顺序执行。</p>\n</li>\n<li><p>在 http 1.1 中，在响应头中设置 keep-alive 可以在一个 TCP 连接上发送多个 http 请求</p>\n<p>避免了重开 TCP 连接的开销<br>避免了刷新时重新建立 SSL 连接的开销<br>避免了QPS过大时，服务器的连接数过大</p>\n</li>\n<li><p>缓存协商</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们知道协商缓存有两种方式</span><br><span class=\"line\"></span><br><span class=\"line\">Last-Modified/if-Modified-Since  ** Last-Modified 是由一个 unix timestamp 表示，则意味着它只能作用于秒级的改变**</span><br><span class=\"line\">ETag/If-None-Match</span><br><span class=\"line\">```     </span><br><span class=\"line\">1. window.opener 表示打开当前窗体页面的的父窗体的是谁。例如，在 A 页面中，通过一个带有 target=&quot;_blank&quot; 的 a 标签打开了一个新的页面 B，那么在 B 页面里，window.opener 的值为 A 页面的 window 对象。   rel=noopener 规定禁止新页面传递源页面的地址，通过设置了此属性的链接打开的页面，其 window.opener 的值为 null。</span><br><span class=\"line\">1. Gzip 不要使用再图片以及其它二进制文件上</span><br><span class=\"line\"></span><br><span class=\"line\">1. 302 临时重定向会改变method  </span><br><span class=\"line\">502  收到了上游相应但是无法解析  </span><br><span class=\"line\">504 上游解析超时</span><br><span class=\"line\">1. gzip 使用了 LZ77 算法与 Huffman 编码来压缩文件，重复度越高的文件可压缩的空间就越大</span><br><span class=\"line\">1. Etag etag = &apos;&#123;:x&#125;-&#123;:x&#125;&apos;.format(header.last_modified, header.content_lenth)</span><br><span class=\"line\">1. Mtime 文件最近内容改变的时间</span><br><span class=\"line\">1. https 解决三个安全问题 1. 内容隐私 2. 防篡改 3.身份认证</span><br><span class=\"line\">1. LRU AND LFU  最久未使用 最少使用</span><br><span class=\"line\">1. [浏览器进程](https://user-gold-cdn.xitu.io/2020/1/7/16f7ee19a85b3c8f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)</span><br><span class=\"line\">1. </span><br><span class=\"line\">HTTP/2引入二进制数据帧和流的概念，其中帧对数据进行顺序标识，如下图所示，这样浏览器收到数据之后，就可以按照序列对数据进行合并，而不会出现合并后数据错乱的情况。同样是因为有了序列，服务器就可以并行的传输数据，这就是流所做的事情。http2 静态资源的推送</span><br><span class=\"line\">1. 查看network请求发现，每一个文件都有etag响应头，如果Nginx使用了已有的gz文件，那么这个请求的etag值不带有W/，反之，如果是文件是Nginx压缩的，etag值则会带有W/</span><br><span class=\"line\"></span><br><span class=\"line\">1. 总是设置 Vary: Origin，避免 CDN 缓存破坏 CORS 配置</span><br><span class=\"line\">2. QUIC 基于 UDP，UDP 的数据包在接收端没有处理顺序，即使中间 丢失一个包，也不会阻塞整条连接，其他的资源会被正常处理。</span><br><span class=\"line\">1. 30X 区分</span><br><span class=\"line\">```text</span><br><span class=\"line\">301，Moved Permanently。永久重定向，该操作比较危险，需要谨慎操作：如果设置了301，但是一段时间后又想取消，但是浏览器中已经有了缓存，还是会重定向。</span><br><span class=\"line\">302，Fount。临时重定向，但是会在重定向的时候改变 method: 把 POST 改成 GET，于是有了 307</span><br><span class=\"line\">307，Temporary Redirect。临时重定向，在重定向时不会改变 method</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Tcp 的滑动窗口增大了吞吐量，但是并没有解决队头堵塞得问题</p>\n</li>\n<li><p>http 挥手 主动关闭有个time_wait,这个标准的持续时间是4分钟</p>\n<p>  ISN(Initial Sequence Number) 是固定的么，</p>\n<p>  客户端的syn_send 状态、服务端的syn_rcvd</p>\n<p>  Tcp 报文段：tcp 首部+tcp 数据部分</p>\n<p>  半链接队列—超时重传</p>\n<p>  等待2个msl 确保服务端能收到ack,能正常关闭</p>\n<p>  关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。</p>\n</li>\n<li><p>如果 300 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错。 </p>\n</li>\n<li><p>而HTTP的204(No Content)响应, 就表示执行成功, 但是没有数据, 浏览器不用刷新页面.也不用导向新的页面.<br>  205 Reset Content, 表示执行成功, 重置页面(Form表单).</p>\n</li>\n<li><p>子网是所属VPC IP地址范围内的 IP 地址块。目前私有网络中的云资源部署在子网内，如云主机、容器、负载均衡等。子网：子网是对VPC地址空间的再一次划分，用户可以在子网中创建云主机。</p>\n</li>\n<li><p>可用区（Availability Zone）是电力及网络之间互相独立的物理区域，相同可用区内的实例之间较之同地域不同可用区内实例之间的网络延时更小。同地域内不同可用区之间提供内网互通环境，可用区之间可做到故障隔离。<br>若您的业务要求有较低网络时延，建议将实例或者Pod部署在同一可用区内。</p>\n</li>\n<li><p>VPC：VPC是用户网络在京东云上的表现形式，包含了一系列的网络功能，与其他的VPC逻辑隔离。VPC有一个网络地址空间，用户可以在其中继续划分子网。</p>\n</li>\n<li><p>NAT 地址网络转换，通过在路由器上安装 NAT 软件，它至少有一个有效的公网 IP 地址，通过 NAT 路由器将内部私有 IP 转换成公网 IP。它的问题在于 NAT 设备自动屏蔽了非内网主机主动发起的连接，也就是说，从外网发往内网的数据包将被 NAT 设备丢弃，这使得位于不同 NAT 设备之后的主机之间无法直接交换信息.</p>\n</li>\n<li><p>503 服务器资源不足问题导致的拒绝服务，比如熔断。</p>\n</li>\n<li><p>Options  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 检测服务支持的method</span><br><span class=\"line\">2. Cors 预检</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>HTTP HEAD 方法 请求资源的头部信息, 并且这些头部与 HTTP GET 方法请求时返回的一致. 该请求方法的一个使用场景是在下载一个大文件前先获取其大小再决定是否要下载, 以此可以节约带宽资源.</p>\n</li>\n<li>WebSocket是基于Http协议的，或者说借用了Http协议来完成一部分握手，在握手阶段与Http是相同的。我们来看一个websocket握手协议的实现，基本是2个属性，upgrade，connection。<pre><code class=\"text\">Upgrade:webSocket\nConnection:Upgrade\n</code></pre>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>Origin:scheme, host, and port.<br> same origin 更加严格 <h4 id=\"Quic\"><a href=\"#Quic\" class=\"headerlink\" title=\"Quic\"></a>Quic</h4></li>\n<li>多路复用，避免队头阻塞</li>\n<li>减少 RTT，请求更快速</li>\n<li>快速迭代，广泛支持</li>\n</ol>\n<p>传统的 HTTP2 + SSL + TCP 协议栈有哪些缺点？<br>1.SSL 的会话恢复依然需要一个 RTT，而且难以合并到 TCP 层</p>\n<ol>\n<li>TCP 的滑动窗口存在队头阻塞问题</li>\n<li>TCP 的重传纠错会浪费一个 RTT</li>\n</ol>\n<p>网络请求中一个常见的名词是 RTT(Round Trip Time)，表示客户端从发出一个请求数据，到接收到响应数据之间间隔的时间。</p>\n<h4 id=\"Dns-本地dns解析器和host-gt-本地dns服务器\"><a href=\"#Dns-本地dns解析器和host-gt-本地dns服务器\" class=\"headerlink\" title=\"Dns 本地dns解析器和host-&gt;本地dns服务器\"></a>Dns 本地dns解析器和host-&gt;本地dns服务器</h4><h4 id=\"http-请求限制\"><a href=\"#http-请求限制\" class=\"headerlink\" title=\"http 请求限制\"></a>http 请求限制</h4><p>默认情况下，浏览器会针对这些情况使用同一个连接：</p>\n<p>同一域名下的资源；</p>\n<p>不同域名下的资源，但是满足两个条件：1）解析到同一个 IP；2）使用同一个证书；</p>\n<p>使用多域名加上相同的 IP 和证书部署 Web 服务有特殊的意义：让支持 HTTP/2 的终端只建立一个连接，用上 HTTP/2 协议带来的各种好处；而只支持 HTTP/1.1 的终端则会建立多个连接，达到同时更多并发请求的目的。这在 HTTP/2 完全普及前也是一个不错的选择。</p>\n<p>####cors<br>简单请求 可以直接发不用预检。简单请求</p>\n<ol>\n<li>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</li>\n<li>Method head,get,post</li>\n</ol>\n<p>####XST 的全称是 Cross-Site Tracing</p>\n<pre><code>客户端发 TRACE 请求至服务器，如果服务器按照标准实现了 TRACE 响应，则在 response body 里会返回此次请求的完整头信息。通过这种方式，客户端可以获取某些敏感的头字段，例如 httpOnly 的 Cookie。\n\nTRACE方法让客户端测试到服务器的网络通路，回路的意思如发送一个请返回一个响应，这就是一个请求响应回路\n</code></pre><p>####Set-Cookie<br>    用于设置Cookie。</p>\n<pre><code>Set-Cookie: name=value; secure; HttpOnly\nsecure 只在进行HTTP通信时发送Cookie。\nHttpOnly 指定不能从JavaScript脚本代码访问Cookie值。\n</code></pre><p> ####X-Download-Options: noopen<br>    noopen 用于指定IE 8以上版本的用户不打开文件而直接保存文件。在下载对话框中不显示“打开”选项。</p>\n<p> ####keepalive </p>\n<pre><code>若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;   \nhttp 1.0中默认是关闭的，需要在http头加入&quot;Connection: Keep-Alive&quot;，才能启用Keep-Alive；http 1.1中默认启用Keep-Alive，如果加入&quot;Connection: close &quot;，才关闭。目前大部分浏览器都是用http1.1协议，也就是说默认都会发起Keep-Alive的连接请求了，所以是否能完成一个完整的Keep-Alive连接就看服务器设置情况。\n</code></pre><p> ####headers</p>\n<p> Accept-Charset： 浏览器申明自己接收的字符集<br> Accept-Encoding： 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate） </p>\n<p>  Age：当代理服务器用自己缓存的实体去响应请求时，用该头部表明该实体从产生到现在经过多长时间了。   </p>\n<p>   http header 中使用location 进行302跳转 </p>\n<p>   URL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的URL 对象表示指定的 File 对象或 Blob 对象。</p>\n<p>####http<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http 1.1 添加cache-contol </span><br><span class=\"line\"></span><br><span class=\"line\">长连接：HTTP1.0需要使用keep-alive参数来告知服务器建立一个长连接，而HTP1.1默认支持长连接</span><br><span class=\"line\">节约宽带：HTTP1.1支持只发送一个header信息（不带任何body信息）</span><br><span class=\"line\">host域（设置虚拟站点，也就是说，web server上的多个虚拟站点可以共享同一个ip端口）：HTTP1.0没有host域</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http 2.0</span><br><span class=\"line\">采用二进制格式传输;</span><br><span class=\"line\">多路复用，其实就是将请求数据分成帧乱序发送到 TCP 中。TCP 只能有一个 steam，所以还是会阻塞;</span><br><span class=\"line\">报头压缩;</span><br><span class=\"line\">服务器推送主动向 B 端发送静态资源，避免往返延迟。</span><br><span class=\"line\">1.http2采用的二进制文本传输数据，而非http1文本格式，二进制在协议的解析和扩展更好</span><br><span class=\"line\">2.数据压缩：对信息头采用了HPACK进行压缩传输，节省了信息头带来的网络流量</span><br><span class=\"line\">3.多路复用：一个连接可以并发处理多个请求</span><br><span class=\"line\">4.服务器推送：我们对支持HTTP2.0的web server请求数据的时候，服务器会顺便把一些客户端需要的资源一起推送到客户端，免得客户端再次创建连接发送请求到服务器端获取。这种方式非常合适加载静态资源</span><br><span class=\"line\"></span><br><span class=\"line\">http 3.0</span><br><span class=\"line\">采用 QUIC 协议,自定义连接机制;自定义重传机制;无阻塞的多路复用</span><br><span class=\"line\"></span><br><span class=\"line\">2.按缓存分：强缓存和协商缓存：</span><br><span class=\"line\">2.1强缓存：利用 cache-control 和 expires 设置，直接返回一个过期时间，所以在缓存期间不请求，If-modify-since；</span><br><span class=\"line\">2.2协商缓存：响应头返回 etag 或 last-modified 的哈希值，第二次请求头 If-none-match 或 IF-modify-since 携带上次哈希值，一致则返回 304。</span><br><span class=\"line\">F5 刷新会忽略强缓存不会忽略协商缓存，ctrl+f5 都失效</span><br><span class=\"line\">```       </span><br><span class=\"line\"></span><br><span class=\"line\">1. Https https://zhuanlan.zhihu.com/p/27395037    https://blog.51cto.com/11883699/2160032</span><br><span class=\"line\">1. Ca 使用证书颁发机构的证书中的公钥去解密被颁发者的指纹算法和指纹，并计算比对指纹，正确才能验证身份</span><br><span class=\"line\"></span><br><span class=\"line\">1. 缓存的分类：</span><br><span class=\"line\">```text</span><br><span class=\"line\">   强缓存：在缓存数据未失效的情况下，不需要再和服务器发生交互.cache-control :no-cache 走协商缓存</span><br><span class=\"line\">   协商缓存：需要与服务端校验是否使用缓存。etag If-None-Match HTTP 请求头内提供 ETag</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><p>https </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这些ＣＡ本身也有证书来证明自己的身份，并且ＣＡ的信用是像树一样分级的，高层的ＣＡ给底层的ＣＡ做信用背书，而操作系统／浏览器中会内置一些顶层的ＣＡ的证书，相当于你自动信任了他们。　</span><br><span class=\"line\"></span><br><span class=\"line\">公钥+个人信息+其它信息—》hash 算法 —》信息摘要-》用ca的私钥加密—》数字签名   签名+信息=数字证书 </span><br><span class=\"line\">Ca 的公钥解密—》hash hash 算法 —》信息摘要-》对比是否一致</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>content-type</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">multipart/form-data</span><br><span class=\"line\"></span><br><span class=\"line\">请求消息头中, Content-Type: multipart/form-data; boundary=----WebKitFormBoundarykALcKBgBaI9xA79y</span><br><span class=\"line\">boundary为分隔符.</span><br><span class=\"line\"></span><br><span class=\"line\">application/x-www-form-urlencoded</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Nat network adreess translation 网络地址转换.<br>当访问外网时自动分配一个端口，这个端口和内网的机器建立了映射关系。</p>\n</li>\n<li><p>Defer</p>\n<p>这个属性的用途是表明脚本在执行时不会影响页面的构造。也就是说，脚本会被延迟到整个页面都解析完毕后再运行。因此，在script元素中设置defer属性，相当于告诉浏览器立即下载，但延迟执行。<br>但与defer不同的是，标记为async的脚本并不保证按照它们的先后顺序执行。</p>\n</li>\n<li><p>在 http 1.1 中，在响应头中设置 keep-alive 可以在一个 TCP 连接上发送多个 http 请求</p>\n<p>避免了重开 TCP 连接的开销<br>避免了刷新时重新建立 SSL 连接的开销<br>避免了QPS过大时，服务器的连接数过大</p>\n</li>\n<li><p>缓存协商</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们知道协商缓存有两种方式</span><br><span class=\"line\"></span><br><span class=\"line\">Last-Modified/if-Modified-Since  ** Last-Modified 是由一个 unix timestamp 表示，则意味着它只能作用于秒级的改变**</span><br><span class=\"line\">ETag/If-None-Match</span><br><span class=\"line\">```     </span><br><span class=\"line\">1. window.opener 表示打开当前窗体页面的的父窗体的是谁。例如，在 A 页面中，通过一个带有 target=&quot;_blank&quot; 的 a 标签打开了一个新的页面 B，那么在 B 页面里，window.opener 的值为 A 页面的 window 对象。   rel=noopener 规定禁止新页面传递源页面的地址，通过设置了此属性的链接打开的页面，其 window.opener 的值为 null。</span><br><span class=\"line\">1. Gzip 不要使用再图片以及其它二进制文件上</span><br><span class=\"line\"></span><br><span class=\"line\">1. 302 临时重定向会改变method  </span><br><span class=\"line\">502  收到了上游相应但是无法解析  </span><br><span class=\"line\">504 上游解析超时</span><br><span class=\"line\">1. gzip 使用了 LZ77 算法与 Huffman 编码来压缩文件，重复度越高的文件可压缩的空间就越大</span><br><span class=\"line\">1. Etag etag = &apos;&#123;:x&#125;-&#123;:x&#125;&apos;.format(header.last_modified, header.content_lenth)</span><br><span class=\"line\">1. Mtime 文件最近内容改变的时间</span><br><span class=\"line\">1. https 解决三个安全问题 1. 内容隐私 2. 防篡改 3.身份认证</span><br><span class=\"line\">1. LRU AND LFU  最久未使用 最少使用</span><br><span class=\"line\">1. [浏览器进程](https://user-gold-cdn.xitu.io/2020/1/7/16f7ee19a85b3c8f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)</span><br><span class=\"line\">1. </span><br><span class=\"line\">HTTP/2引入二进制数据帧和流的概念，其中帧对数据进行顺序标识，如下图所示，这样浏览器收到数据之后，就可以按照序列对数据进行合并，而不会出现合并后数据错乱的情况。同样是因为有了序列，服务器就可以并行的传输数据，这就是流所做的事情。http2 静态资源的推送</span><br><span class=\"line\">1. 查看network请求发现，每一个文件都有etag响应头，如果Nginx使用了已有的gz文件，那么这个请求的etag值不带有W/，反之，如果是文件是Nginx压缩的，etag值则会带有W/</span><br><span class=\"line\"></span><br><span class=\"line\">1. 总是设置 Vary: Origin，避免 CDN 缓存破坏 CORS 配置</span><br><span class=\"line\">2. QUIC 基于 UDP，UDP 的数据包在接收端没有处理顺序，即使中间 丢失一个包，也不会阻塞整条连接，其他的资源会被正常处理。</span><br><span class=\"line\">1. 30X 区分</span><br><span class=\"line\">```text</span><br><span class=\"line\">301，Moved Permanently。永久重定向，该操作比较危险，需要谨慎操作：如果设置了301，但是一段时间后又想取消，但是浏览器中已经有了缓存，还是会重定向。</span><br><span class=\"line\">302，Fount。临时重定向，但是会在重定向的时候改变 method: 把 POST 改成 GET，于是有了 307</span><br><span class=\"line\">307，Temporary Redirect。临时重定向，在重定向时不会改变 method</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Tcp 的滑动窗口增大了吞吐量，但是并没有解决队头堵塞得问题</p>\n</li>\n<li><p>http 挥手 主动关闭有个time_wait,这个标准的持续时间是4分钟</p>\n<p>  ISN(Initial Sequence Number) 是固定的么，</p>\n<p>  客户端的syn_send 状态、服务端的syn_rcvd</p>\n<p>  Tcp 报文段：tcp 首部+tcp 数据部分</p>\n<p>  半链接队列—超时重传</p>\n<p>  等待2个msl 确保服务端能收到ack,能正常关闭</p>\n<p>  关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。</p>\n</li>\n<li><p>如果 300 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错。 </p>\n</li>\n<li><p>而HTTP的204(No Content)响应, 就表示执行成功, 但是没有数据, 浏览器不用刷新页面.也不用导向新的页面.<br>  205 Reset Content, 表示执行成功, 重置页面(Form表单).</p>\n</li>\n<li><p>子网是所属VPC IP地址范围内的 IP 地址块。目前私有网络中的云资源部署在子网内，如云主机、容器、负载均衡等。子网：子网是对VPC地址空间的再一次划分，用户可以在子网中创建云主机。</p>\n</li>\n<li><p>可用区（Availability Zone）是电力及网络之间互相独立的物理区域，相同可用区内的实例之间较之同地域不同可用区内实例之间的网络延时更小。同地域内不同可用区之间提供内网互通环境，可用区之间可做到故障隔离。<br>若您的业务要求有较低网络时延，建议将实例或者Pod部署在同一可用区内。</p>\n</li>\n<li><p>VPC：VPC是用户网络在京东云上的表现形式，包含了一系列的网络功能，与其他的VPC逻辑隔离。VPC有一个网络地址空间，用户可以在其中继续划分子网。</p>\n</li>\n<li><p>NAT 地址网络转换，通过在路由器上安装 NAT 软件，它至少有一个有效的公网 IP 地址，通过 NAT 路由器将内部私有 IP 转换成公网 IP。它的问题在于 NAT 设备自动屏蔽了非内网主机主动发起的连接，也就是说，从外网发往内网的数据包将被 NAT 设备丢弃，这使得位于不同 NAT 设备之后的主机之间无法直接交换信息.</p>\n</li>\n<li><p>503 服务器资源不足问题导致的拒绝服务，比如熔断。</p>\n</li>\n<li><p>Options  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 检测服务支持的method</span><br><span class=\"line\">2. Cors 预检</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>HTTP HEAD 方法 请求资源的头部信息, 并且这些头部与 HTTP GET 方法请求时返回的一致. 该请求方法的一个使用场景是在下载一个大文件前先获取其大小再决定是否要下载, 以此可以节约带宽资源.</p>\n</li>\n<li>WebSocket是基于Http协议的，或者说借用了Http协议来完成一部分握手，在握手阶段与Http是相同的。我们来看一个websocket握手协议的实现，基本是2个属性，upgrade，connection。<pre><code class=\"text\">Upgrade:webSocket\nConnection:Upgrade\n</code></pre>\n</li>\n</ol>\n"},{"title":"k8s","date":"2021-11-18T09:10:24.000Z","_content":"\n### helm \n1. 获取values helm get values mongodb-back -n tpaas-mongodb\n   \n2. helm pull itg/rds-console —version=XXXX —untar\n\n3. helm uninstall $rds_console_chart_name -n ${{out._predefine.NAMESPACE}}\n\n4. helm add repo\n\n`helm repo add itg ${{helm_repo}} --username ${{cred.helm_zhangchong.username}}   --password ${{cred.helm_zhangchong.password}}  `\n\n`helm repo update`\n\n1. 由 helm install -f 或 helm upgrade -f 提供的 value 文件\n\n```\n# 安装本地 chart\nhelm install -f myvalues.yaml myredis ./redis\n# 指定变量\nhelm install --set name=prod myredis ./redis\n```\n\n### k8s\n\n1. Service的IP地址，此为虚拟IP地址。外部网络无法ping通，只有kubernetes集群内部访问使用。\n\n1. 由于 Kubernetes 集群中每个 Pod（容器组）都有一个唯一的 IP 地址（即使是同一个 Node 上的不同 Pod），我们需要一种机制，为前端系统屏蔽后端系统的 Pod（容器组）在销毁、创建过程中所带来的 IP 地址的变化。\n\n\n1. 可以通过 set-context 命令改变当前 kubectl 上下文 的名称空间，后续所有命令都默认在此名称空间下执行。\n\n1. port表示Service对外提供的端口，可以通过“ClusterIP:端口”访问服务。●targetPort表示对应的后端应用（即Pod）的端口。\n\n1.  Sh  -c string：命令从-c后的字符串读取。\n\n1. helm list是区分命名空间的。默认情况下，Helm将Kubernetes配置文件设置的命名空间作为默认命名空间（通常名为default）。\n\n1.   helm get notes mysite  用来打印发布说明\n\n1. helm -n namespace  get values <release-name>    namespace 很关键不然是默认的ns\n\n1. heml install \n\n```\n使用--generate name标志，我们不再需要提供名称作为helm install的第一个参数。Helm根据chart名称和时间戳的组合生成名称。在前面的输出中，我们可以看到生成的名称：wordpress-1597689085。\n\n通过添加--create-namespace，我们已经向Helm表明，我们知道可能还没有具有该名称的命名空间，只希望创建一个。当然，请确保如果在生产实例上使用此标志，会有其他机制来强制执行此新命名空间的安全性。\n\n```\n\n1. apiVersion告诉Helm此chart使用的是什么结构。apiVerison v2是为Helm v3设计的。\n\n1. appVersion属性是唯一的。它既是描述性的，也是模板中经常使用的。appVersion属性表示主应用程序或组合应用程序的版本。例如，如果被打包的应用程序是WordPress，那么它就是WordPress的版本。\n\n1. 重启Pod  \n\nkubectl get pod {podname} -n {namespace} -o yaml | kubectl replace -f -\n","source":"_posts/k8s.md","raw":"---\ntitle: k8s\ndate: 2021-11-18 17:10:24\ntags: k8s\n---\n\n### helm \n1. 获取values helm get values mongodb-back -n tpaas-mongodb\n   \n2. helm pull itg/rds-console —version=XXXX —untar\n\n3. helm uninstall $rds_console_chart_name -n ${{out._predefine.NAMESPACE}}\n\n4. helm add repo\n\n`helm repo add itg ${{helm_repo}} --username ${{cred.helm_zhangchong.username}}   --password ${{cred.helm_zhangchong.password}}  `\n\n`helm repo update`\n\n1. 由 helm install -f 或 helm upgrade -f 提供的 value 文件\n\n```\n# 安装本地 chart\nhelm install -f myvalues.yaml myredis ./redis\n# 指定变量\nhelm install --set name=prod myredis ./redis\n```\n\n### k8s\n\n1. Service的IP地址，此为虚拟IP地址。外部网络无法ping通，只有kubernetes集群内部访问使用。\n\n1. 由于 Kubernetes 集群中每个 Pod（容器组）都有一个唯一的 IP 地址（即使是同一个 Node 上的不同 Pod），我们需要一种机制，为前端系统屏蔽后端系统的 Pod（容器组）在销毁、创建过程中所带来的 IP 地址的变化。\n\n\n1. 可以通过 set-context 命令改变当前 kubectl 上下文 的名称空间，后续所有命令都默认在此名称空间下执行。\n\n1. port表示Service对外提供的端口，可以通过“ClusterIP:端口”访问服务。●targetPort表示对应的后端应用（即Pod）的端口。\n\n1.  Sh  -c string：命令从-c后的字符串读取。\n\n1. helm list是区分命名空间的。默认情况下，Helm将Kubernetes配置文件设置的命名空间作为默认命名空间（通常名为default）。\n\n1.   helm get notes mysite  用来打印发布说明\n\n1. helm -n namespace  get values <release-name>    namespace 很关键不然是默认的ns\n\n1. heml install \n\n```\n使用--generate name标志，我们不再需要提供名称作为helm install的第一个参数。Helm根据chart名称和时间戳的组合生成名称。在前面的输出中，我们可以看到生成的名称：wordpress-1597689085。\n\n通过添加--create-namespace，我们已经向Helm表明，我们知道可能还没有具有该名称的命名空间，只希望创建一个。当然，请确保如果在生产实例上使用此标志，会有其他机制来强制执行此新命名空间的安全性。\n\n```\n\n1. apiVersion告诉Helm此chart使用的是什么结构。apiVerison v2是为Helm v3设计的。\n\n1. appVersion属性是唯一的。它既是描述性的，也是模板中经常使用的。appVersion属性表示主应用程序或组合应用程序的版本。例如，如果被打包的应用程序是WordPress，那么它就是WordPress的版本。\n\n1. 重启Pod  \n\nkubectl get pod {podname} -n {namespace} -o yaml | kubectl replace -f -\n","slug":"k8s","published":1,"updated":"2023-07-14T04:08:22.949Z","_id":"ckzf5sdzt0011yy8km8m96hpl","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"helm\"><a href=\"#helm\" class=\"headerlink\" title=\"helm\"></a>helm</h3><ol>\n<li><p>获取values helm get values mongodb-back -n tpaas-mongodb</p>\n</li>\n<li><p>helm pull itg&#x2F;rds-console —version&#x3D;XXXX —untar</p>\n</li>\n<li><p>helm uninstall $rds_console_chart_name -n $</p>\n</li>\n<li><p>helm add repo</p>\n</li>\n</ol>\n<p><code>helm repo add itg $&#123;&#123;helm_repo&#125;&#125; --username $&#123;&#123;cred.helm_zhangchong.username&#125;&#125;   --password $&#123;&#123;cred.helm_zhangchong.password&#125;&#125;  </code></p>\n<p><code>helm repo update</code></p>\n<ol>\n<li>由 helm install -f 或 helm upgrade -f 提供的 value 文件</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装本地 chart</span><br><span class=\"line\">helm install -f myvalues.yaml myredis ./redis</span><br><span class=\"line\"># 指定变量</span><br><span class=\"line\">helm install --set name=prod myredis ./redis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"k8s\"><a href=\"#k8s\" class=\"headerlink\" title=\"k8s\"></a>k8s</h3><ol>\n<li><p>Service的IP地址，此为虚拟IP地址。外部网络无法ping通，只有kubernetes集群内部访问使用。</p>\n</li>\n<li><p>由于 Kubernetes 集群中每个 Pod（容器组）都有一个唯一的 IP 地址（即使是同一个 Node 上的不同 Pod），我们需要一种机制，为前端系统屏蔽后端系统的 Pod（容器组）在销毁、创建过程中所带来的 IP 地址的变化。</p>\n</li>\n<li><p>可以通过 set-context 命令改变当前 kubectl 上下文 的名称空间，后续所有命令都默认在此名称空间下执行。</p>\n</li>\n<li><p>port表示Service对外提供的端口，可以通过“ClusterIP:端口”访问服务。●targetPort表示对应的后端应用（即Pod）的端口。</p>\n</li>\n<li><p>Sh  -c string：命令从-c后的字符串读取。</p>\n</li>\n<li><p>helm list是区分命名空间的。默认情况下，Helm将Kubernetes配置文件设置的命名空间作为默认命名空间（通常名为default）。</p>\n</li>\n<li><p>helm get notes mysite  用来打印发布说明</p>\n</li>\n<li><p>helm -n namespace  get values <release-name>    namespace 很关键不然是默认的ns</p>\n</li>\n<li><p>heml install</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用--generate name标志，我们不再需要提供名称作为helm install的第一个参数。Helm根据chart名称和时间戳的组合生成名称。在前面的输出中，我们可以看到生成的名称：wordpress-1597689085。</span><br><span class=\"line\"></span><br><span class=\"line\">通过添加--create-namespace，我们已经向Helm表明，我们知道可能还没有具有该名称的命名空间，只希望创建一个。当然，请确保如果在生产实例上使用此标志，会有其他机制来强制执行此新命名空间的安全性。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>apiVersion告诉Helm此chart使用的是什么结构。apiVerison v2是为Helm v3设计的。</p>\n</li>\n<li><p>appVersion属性是唯一的。它既是描述性的，也是模板中经常使用的。appVersion属性表示主应用程序或组合应用程序的版本。例如，如果被打包的应用程序是WordPress，那么它就是WordPress的版本。</p>\n</li>\n<li><p>重启Pod</p>\n</li>\n</ol>\n<p>kubectl get pod {podname} -n {namespace} -o yaml | kubectl replace -f -</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"helm\"><a href=\"#helm\" class=\"headerlink\" title=\"helm\"></a>helm</h3><ol>\n<li><p>获取values helm get values mongodb-back -n tpaas-mongodb</p>\n</li>\n<li><p>helm pull itg&#x2F;rds-console —version&#x3D;XXXX —untar</p>\n</li>\n<li><p>helm uninstall $rds_console_chart_name -n $</p>\n</li>\n<li><p>helm add repo</p>\n</li>\n</ol>\n<p><code>helm repo add itg $&#123;&#123;helm_repo&#125;&#125; --username $&#123;&#123;cred.helm_zhangchong.username&#125;&#125;   --password $&#123;&#123;cred.helm_zhangchong.password&#125;&#125;  </code></p>\n<p><code>helm repo update</code></p>\n<ol>\n<li>由 helm install -f 或 helm upgrade -f 提供的 value 文件</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装本地 chart</span><br><span class=\"line\">helm install -f myvalues.yaml myredis ./redis</span><br><span class=\"line\"># 指定变量</span><br><span class=\"line\">helm install --set name=prod myredis ./redis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"k8s\"><a href=\"#k8s\" class=\"headerlink\" title=\"k8s\"></a>k8s</h3><ol>\n<li><p>Service的IP地址，此为虚拟IP地址。外部网络无法ping通，只有kubernetes集群内部访问使用。</p>\n</li>\n<li><p>由于 Kubernetes 集群中每个 Pod（容器组）都有一个唯一的 IP 地址（即使是同一个 Node 上的不同 Pod），我们需要一种机制，为前端系统屏蔽后端系统的 Pod（容器组）在销毁、创建过程中所带来的 IP 地址的变化。</p>\n</li>\n<li><p>可以通过 set-context 命令改变当前 kubectl 上下文 的名称空间，后续所有命令都默认在此名称空间下执行。</p>\n</li>\n<li><p>port表示Service对外提供的端口，可以通过“ClusterIP:端口”访问服务。●targetPort表示对应的后端应用（即Pod）的端口。</p>\n</li>\n<li><p>Sh  -c string：命令从-c后的字符串读取。</p>\n</li>\n<li><p>helm list是区分命名空间的。默认情况下，Helm将Kubernetes配置文件设置的命名空间作为默认命名空间（通常名为default）。</p>\n</li>\n<li><p>helm get notes mysite  用来打印发布说明</p>\n</li>\n<li><p>helm -n namespace  get values <release-name>    namespace 很关键不然是默认的ns</p>\n</li>\n<li><p>heml install</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用--generate name标志，我们不再需要提供名称作为helm install的第一个参数。Helm根据chart名称和时间戳的组合生成名称。在前面的输出中，我们可以看到生成的名称：wordpress-1597689085。</span><br><span class=\"line\"></span><br><span class=\"line\">通过添加--create-namespace，我们已经向Helm表明，我们知道可能还没有具有该名称的命名空间，只希望创建一个。当然，请确保如果在生产实例上使用此标志，会有其他机制来强制执行此新命名空间的安全性。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>apiVersion告诉Helm此chart使用的是什么结构。apiVerison v2是为Helm v3设计的。</p>\n</li>\n<li><p>appVersion属性是唯一的。它既是描述性的，也是模板中经常使用的。appVersion属性表示主应用程序或组合应用程序的版本。例如，如果被打包的应用程序是WordPress，那么它就是WordPress的版本。</p>\n</li>\n<li><p>重启Pod</p>\n</li>\n</ol>\n<p>kubectl get pod {podname} -n {namespace} -o yaml | kubectl replace -f -</p>\n"},{"title":"html","date":"2020-08-13T08:17:07.000Z","_content":"1. \n1. 当用户输入关键字并键入回车之后，这意味着当前页面即将要被替换成新的页面，不过在这个流程继续之前，浏览器还给了当前页面一次执行 `beforeunload` 事件的机会，`beforeunload` 事件允许页面在退出之前执行一些数据清理操作，还可以询问用户是否要离开当前页面。\n\n1. 对HTML5有什么了解？\n   \n   良好的移动性，以移动设备为主；\n   响应式设计，以适应自动变化的屏幕尺寸；\n   支持离线缓存技术，webStorage本地缓存；\n   新增了canvas，video，audio等新标签元素；以及特殊内容元素：article，footer，header，nav，section等；以及表单控件：calendar，date，time，email，url，search等；\n   新增webSocket/webWork技术；\n   还有新增的地理位置等。\n1. label 标签来定义表单控制间的关系，当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。    \n1.  最新的HTML5标准中的API是什么\n   \n   Canvas ：Canvas由HTML代码中定义的具有高度和宽度属性的可绘制区域组成。JavaScript代码可以通过一组完整的绘图函数访问该区域，这与其他常见的2D API类似，因此允许动态生成图形。Canvas 的一些预期用途包括构建图形、动画、游戏和图像合成。\n   媒体定时回放；\n   离线存储数据库；\n   文档编辑；\n   拖放；\n   跨文档消息传递；\n   浏览器历史管理；\n   MIME类型和协议处理程序注册；\n1. 对布局属性进行动画，浏览器需要为每一帧进行重绘并上传到 GPU 中\n对合成属性进行动画，浏览器会为元素创建一个独立的复合层，当元素内容没有发生改变，该层就不会被重绘，浏览器会通过重新复合来创建动画帧\n1. HTML5文档类型：<!doctype html>    HTML5使用的编码 <meta charset=”UTF-8”>\n1. Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用 Service Worker的话，传输协议必须为 HTTPS。\n3. visibilitychange,可以用来判断浏览器页签是否显示。\n2. WebP是一种新的图片格式，目标是减少文件大小但达到和JPEG格式相同的图片质量，能够减少网络上的请求时间。\n1. DOMContentLoaded事件触发时：仅当DOM解析完成后，不包括样式表，图片等资源。\n```text\n\nCSS不会阻塞DOM解析，但会阻塞DOM渲染。\nCSS会阻塞JS执行，并不会阻塞JS文件下载\n``` \n1. `<datalist>`标签，用来定义选项列表，与input元素配合使用钙元素，来定义input可能的值。\n  datalist及其选项不会被显示出来，他仅仅是合法的输入列表值。\n  `<input id=\"fruits\" list=\"fruit\" /><datalist id=\"fruit\">  <option value=\"apple\">  <option value=\"orange\">  <option value=\"banana\"></datalist>`\n1. 首屏加载时间\n    performance.timing.domContentLoadedEventStart-performance.timing.navigationStart\n2.  preload 是声明式的 fetch，可以强制浏览器请求资源，同时不阻塞文档 onload 事件。Prefetch 提示浏览器这个资源将来可能需要，但是把决定是否和什么时间加载这个资源的决定权交给浏览器。\n3. 优雅降级 graceful degradation： 一开始就构建完整的功能，然后再针对低版本的浏览器进行兼容。\n4. aside  定义页面的侧边栏内容。\n   progress 原生的进度条\n\n5.  HTML `<sup>` 元素定义了一个文本区域，出于排版的原因，与主要的文本相比，应该展示得更高并且更小。\n6. domPropsInnerHTML  domPropsInnerText\n7. 根据 canvas 可以获取浏览器指纹信息\n```text\n\n绘制 canvas，获取 base64 的 dataurl\n对 dataurl 这个字符串进行 md5 摘要计算，得到指纹信息\n```\n1. 一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。比如VScode采用直接手动操作DOM的方式进行极端的性\n1. 事件传播有三个阶段：\n```text\n捕获阶段–事件从 window 开始，然后向下到每个元素，直到到达目标元素事件或event.target。\n目标阶段–事件已达到目标元素。\n冒泡阶段–事件从目标元素冒泡，然后上升到每个元素，直到到达 window。\n\n```\n\n1.  将图片等未处理的文件放在assets中，打包减少体积。而对于第三方引入的一些资源文件如iconfont.css等可以放在static中，因为这些文件已经经过处理了\n1. 浏览器 Context Group 是一组共享相同上下文的 tab、window或iframe。例如，如果网站（https://a.example）打开弹出窗口（https://b.example），则打开器窗口和弹出窗口共享相同的浏览上下文，并且它们可以通过 DOM API相互访问，例如 window.opener。\n1. 影响dom解析以及渲染都会出现白屏的问题\n1. V8 内存空间越大，执行时间越长，为了性能，限制了\n1. 1.当 onload 事件触发时，页面上所有的DOM，样式表，脚本，图片，flash都已经加载完成了。\n   \n   2.当 DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片，flash。\n1. Host 支持虚拟站点\n1. \n1. 如果有js 在header 中，js会等待css 加载完毕。\n1. Object.prototype 是浏览器底层根据 ECMAScript 规范创造的一个对象。\n1.  重绘 只是影响元素的外观和风格，不影响布局的  回流：元素的布局、隐藏等改变需要重新构建\n1.   data-为前端开发者提供自定义属性，这些属性集可以通过对象的dataset属性获取，\n1. 因为 DOM 是属于渲染引擎中的东西，而 JS 又是 JS 引擎中的东西。当我们通过 JS 操作 DOM 的时候，其实这个操作涉及到了两个线程之间的通信，那么势必会带来一些性能上的损耗。\n2. link属于HTML标签，而@import是CSS提供的页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载。\n3. Web quality  : alt\n4. 该WindowEventHandlers.onstorage属性包含一个在storage事件触发时运行的事件处理程序。当更改存储区域时会发生这种情况（例如，存储新项目）。\n```javascript\n   window.onstorage = function(e) { console.log('The ' + e.key + ' key has been changed from ' + e.oldValue + ' to ' + e.newValue + '.'); };\n```\n1. navigator.sendBeacon() 方法可用于通过HTTP将少量数据异步传输到Web服务器。\n1. preload：  直接请求\n   prefetch： 空闲时间请求\n   \n1. <link rel=\"dns-prefetch\" href=\"//baidu.com”>\n   比较小的图片例如icon，使用base64编码，可以减少一次图片的网络请求；\n1. cache control \n```text\nprivate：客户端可以缓存--打开新的窗口会重新访问、地址栏回车时第一次访问、后退不访问\npublic：客户端和代理服务器都可以缓存\nmax-age=t：缓存内容将在t秒后失效\nno-cache：需要使用协商缓存来验证缓存数据\nno-store：所有内容都不会缓存\n\n```   \n1. 我们可以使用 requestIdleCallback() 在浏览器空闲时运行高耗时、低优先级的任务。\n  \n1. 由于GUI渲染线程与JavaScript执行线程是互斥的关系，当浏览器在执行JavaScript程序的时候，GUI渲染线程会被保存在一个队列中，直到JS程序执行完成，才会接着执行。因此如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。\n1. 浏览器定时计数器并不是由JavaScript引擎计数的, 因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确, 因此通过单独线程来计时并触发定时是更为合理的方案。\n1.  当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。这些事件可以是当前执行的代码块如定时任务、也可来自浏览器内核的其他线程如鼠标点击、AJAX异步请求等，但由于JS的单线程关系所有这些事件都得排队等待JS引擎处理。\n\n1.   在XMLHttpRequest在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件放到 JavaScript引擎的处理队列中等待处理。\n1. dom树构建完成后document对象会派发事件DOMContentLoaded来通知dom树已构建完成。\n   DOMContentLoaded事件用来标识dom树构建完成，那如何判断另外这些非阻塞型的资源加载完成呢？答案是window.onload。由于该事件派发的过晚，因此一般情况下我们用不着，而更多的是用DOMContentLoaded来尽早的的操作dom。","source":"_posts/html.md","raw":"---\ntitle: html\ndate: 2020-08-13 16:17:07\ntags: html\n---\n1. \n1. 当用户输入关键字并键入回车之后，这意味着当前页面即将要被替换成新的页面，不过在这个流程继续之前，浏览器还给了当前页面一次执行 `beforeunload` 事件的机会，`beforeunload` 事件允许页面在退出之前执行一些数据清理操作，还可以询问用户是否要离开当前页面。\n\n1. 对HTML5有什么了解？\n   \n   良好的移动性，以移动设备为主；\n   响应式设计，以适应自动变化的屏幕尺寸；\n   支持离线缓存技术，webStorage本地缓存；\n   新增了canvas，video，audio等新标签元素；以及特殊内容元素：article，footer，header，nav，section等；以及表单控件：calendar，date，time，email，url，search等；\n   新增webSocket/webWork技术；\n   还有新增的地理位置等。\n1. label 标签来定义表单控制间的关系，当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。    \n1.  最新的HTML5标准中的API是什么\n   \n   Canvas ：Canvas由HTML代码中定义的具有高度和宽度属性的可绘制区域组成。JavaScript代码可以通过一组完整的绘图函数访问该区域，这与其他常见的2D API类似，因此允许动态生成图形。Canvas 的一些预期用途包括构建图形、动画、游戏和图像合成。\n   媒体定时回放；\n   离线存储数据库；\n   文档编辑；\n   拖放；\n   跨文档消息传递；\n   浏览器历史管理；\n   MIME类型和协议处理程序注册；\n1. 对布局属性进行动画，浏览器需要为每一帧进行重绘并上传到 GPU 中\n对合成属性进行动画，浏览器会为元素创建一个独立的复合层，当元素内容没有发生改变，该层就不会被重绘，浏览器会通过重新复合来创建动画帧\n1. HTML5文档类型：<!doctype html>    HTML5使用的编码 <meta charset=”UTF-8”>\n1. Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用 Service Worker的话，传输协议必须为 HTTPS。\n3. visibilitychange,可以用来判断浏览器页签是否显示。\n2. WebP是一种新的图片格式，目标是减少文件大小但达到和JPEG格式相同的图片质量，能够减少网络上的请求时间。\n1. DOMContentLoaded事件触发时：仅当DOM解析完成后，不包括样式表，图片等资源。\n```text\n\nCSS不会阻塞DOM解析，但会阻塞DOM渲染。\nCSS会阻塞JS执行，并不会阻塞JS文件下载\n``` \n1. `<datalist>`标签，用来定义选项列表，与input元素配合使用钙元素，来定义input可能的值。\n  datalist及其选项不会被显示出来，他仅仅是合法的输入列表值。\n  `<input id=\"fruits\" list=\"fruit\" /><datalist id=\"fruit\">  <option value=\"apple\">  <option value=\"orange\">  <option value=\"banana\"></datalist>`\n1. 首屏加载时间\n    performance.timing.domContentLoadedEventStart-performance.timing.navigationStart\n2.  preload 是声明式的 fetch，可以强制浏览器请求资源，同时不阻塞文档 onload 事件。Prefetch 提示浏览器这个资源将来可能需要，但是把决定是否和什么时间加载这个资源的决定权交给浏览器。\n3. 优雅降级 graceful degradation： 一开始就构建完整的功能，然后再针对低版本的浏览器进行兼容。\n4. aside  定义页面的侧边栏内容。\n   progress 原生的进度条\n\n5.  HTML `<sup>` 元素定义了一个文本区域，出于排版的原因，与主要的文本相比，应该展示得更高并且更小。\n6. domPropsInnerHTML  domPropsInnerText\n7. 根据 canvas 可以获取浏览器指纹信息\n```text\n\n绘制 canvas，获取 base64 的 dataurl\n对 dataurl 这个字符串进行 md5 摘要计算，得到指纹信息\n```\n1. 一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。比如VScode采用直接手动操作DOM的方式进行极端的性\n1. 事件传播有三个阶段：\n```text\n捕获阶段–事件从 window 开始，然后向下到每个元素，直到到达目标元素事件或event.target。\n目标阶段–事件已达到目标元素。\n冒泡阶段–事件从目标元素冒泡，然后上升到每个元素，直到到达 window。\n\n```\n\n1.  将图片等未处理的文件放在assets中，打包减少体积。而对于第三方引入的一些资源文件如iconfont.css等可以放在static中，因为这些文件已经经过处理了\n1. 浏览器 Context Group 是一组共享相同上下文的 tab、window或iframe。例如，如果网站（https://a.example）打开弹出窗口（https://b.example），则打开器窗口和弹出窗口共享相同的浏览上下文，并且它们可以通过 DOM API相互访问，例如 window.opener。\n1. 影响dom解析以及渲染都会出现白屏的问题\n1. V8 内存空间越大，执行时间越长，为了性能，限制了\n1. 1.当 onload 事件触发时，页面上所有的DOM，样式表，脚本，图片，flash都已经加载完成了。\n   \n   2.当 DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片，flash。\n1. Host 支持虚拟站点\n1. \n1. 如果有js 在header 中，js会等待css 加载完毕。\n1. Object.prototype 是浏览器底层根据 ECMAScript 规范创造的一个对象。\n1.  重绘 只是影响元素的外观和风格，不影响布局的  回流：元素的布局、隐藏等改变需要重新构建\n1.   data-为前端开发者提供自定义属性，这些属性集可以通过对象的dataset属性获取，\n1. 因为 DOM 是属于渲染引擎中的东西，而 JS 又是 JS 引擎中的东西。当我们通过 JS 操作 DOM 的时候，其实这个操作涉及到了两个线程之间的通信，那么势必会带来一些性能上的损耗。\n2. link属于HTML标签，而@import是CSS提供的页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载。\n3. Web quality  : alt\n4. 该WindowEventHandlers.onstorage属性包含一个在storage事件触发时运行的事件处理程序。当更改存储区域时会发生这种情况（例如，存储新项目）。\n```javascript\n   window.onstorage = function(e) { console.log('The ' + e.key + ' key has been changed from ' + e.oldValue + ' to ' + e.newValue + '.'); };\n```\n1. navigator.sendBeacon() 方法可用于通过HTTP将少量数据异步传输到Web服务器。\n1. preload：  直接请求\n   prefetch： 空闲时间请求\n   \n1. <link rel=\"dns-prefetch\" href=\"//baidu.com”>\n   比较小的图片例如icon，使用base64编码，可以减少一次图片的网络请求；\n1. cache control \n```text\nprivate：客户端可以缓存--打开新的窗口会重新访问、地址栏回车时第一次访问、后退不访问\npublic：客户端和代理服务器都可以缓存\nmax-age=t：缓存内容将在t秒后失效\nno-cache：需要使用协商缓存来验证缓存数据\nno-store：所有内容都不会缓存\n\n```   \n1. 我们可以使用 requestIdleCallback() 在浏览器空闲时运行高耗时、低优先级的任务。\n  \n1. 由于GUI渲染线程与JavaScript执行线程是互斥的关系，当浏览器在执行JavaScript程序的时候，GUI渲染线程会被保存在一个队列中，直到JS程序执行完成，才会接着执行。因此如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。\n1. 浏览器定时计数器并不是由JavaScript引擎计数的, 因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确, 因此通过单独线程来计时并触发定时是更为合理的方案。\n1.  当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。这些事件可以是当前执行的代码块如定时任务、也可来自浏览器内核的其他线程如鼠标点击、AJAX异步请求等，但由于JS的单线程关系所有这些事件都得排队等待JS引擎处理。\n\n1.   在XMLHttpRequest在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件放到 JavaScript引擎的处理队列中等待处理。\n1. dom树构建完成后document对象会派发事件DOMContentLoaded来通知dom树已构建完成。\n   DOMContentLoaded事件用来标识dom树构建完成，那如何判断另外这些非阻塞型的资源加载完成呢？答案是window.onload。由于该事件派发的过晚，因此一般情况下我们用不着，而更多的是用DOMContentLoaded来尽早的的操作dom。","slug":"html","published":1,"updated":"2020-08-18T10:28:48.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5sdzu0013yy8kbq705u2x","content":"<ol>\n<li></li>\n<li><p>当用户输入关键字并键入回车之后，这意味着当前页面即将要被替换成新的页面，不过在这个流程继续之前，浏览器还给了当前页面一次执行 <code>beforeunload</code> 事件的机会，<code>beforeunload</code> 事件允许页面在退出之前执行一些数据清理操作，还可以询问用户是否要离开当前页面。</p>\n</li>\n<li><p>对HTML5有什么了解？</p>\n<p>良好的移动性，以移动设备为主；<br>响应式设计，以适应自动变化的屏幕尺寸；<br>支持离线缓存技术，webStorage本地缓存；<br>新增了canvas，video，audio等新标签元素；以及特殊内容元素：article，footer，header，nav，section等；以及表单控件：calendar，date，time，email，url，search等；<br>新增webSocket/webWork技术；<br>还有新增的地理位置等。</p>\n</li>\n<li>label 标签来定义表单控制间的关系，当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。    </li>\n<li><p>最新的HTML5标准中的API是什么</p>\n<p>Canvas ：Canvas由HTML代码中定义的具有高度和宽度属性的可绘制区域组成。JavaScript代码可以通过一组完整的绘图函数访问该区域，这与其他常见的2D API类似，因此允许动态生成图形。Canvas 的一些预期用途包括构建图形、动画、游戏和图像合成。<br>媒体定时回放；<br>离线存储数据库；<br>文档编辑；<br>拖放；<br>跨文档消息传递；<br>浏览器历史管理；<br>MIME类型和协议处理程序注册；</p>\n</li>\n<li>对布局属性进行动画，浏览器需要为每一帧进行重绘并上传到 GPU 中<br>对合成属性进行动画，浏览器会为元素创建一个独立的复合层，当元素内容没有发生改变，该层就不会被重绘，浏览器会通过重新复合来创建动画帧</li>\n<li>HTML5文档类型：&lt;!doctype html&gt;    HTML5使用的编码 <meta charset=\"”UTF-8”\"></li>\n<li>Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用 Service Worker的话，传输协议必须为 HTTPS。</li>\n<li>visibilitychange,可以用来判断浏览器页签是否显示。</li>\n<li>WebP是一种新的图片格式，目标是减少文件大小但达到和JPEG格式相同的图片质量，能够减少网络上的请求时间。</li>\n<li><p>DOMContentLoaded事件触发时：仅当DOM解析完成后，不包括样式表，图片等资源。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">CSS不会阻塞DOM解析，但会阻塞DOM渲染。</span><br><span class=\"line\">CSS会阻塞JS执行，并不会阻塞JS文件下载</span><br><span class=\"line\">``` </span><br><span class=\"line\">1. `&lt;datalist&gt;`标签，用来定义选项列表，与input元素配合使用钙元素，来定义input可能的值。</span><br><span class=\"line\">  datalist及其选项不会被显示出来，他仅仅是合法的输入列表值。</span><br><span class=\"line\">  `&lt;input id=&quot;fruits&quot; list=&quot;fruit&quot; /&gt;&lt;datalist id=&quot;fruit&quot;&gt;  &lt;option value=&quot;apple&quot;&gt;  &lt;option value=&quot;orange&quot;&gt;  &lt;option value=&quot;banana&quot;&gt;&lt;/datalist&gt;`</span><br><span class=\"line\">1. 首屏加载时间</span><br><span class=\"line\">    performance.timing.domContentLoadedEventStart-performance.timing.navigationStart</span><br><span class=\"line\">2.  preload 是声明式的 fetch，可以强制浏览器请求资源，同时不阻塞文档 onload 事件。Prefetch 提示浏览器这个资源将来可能需要，但是把决定是否和什么时间加载这个资源的决定权交给浏览器。</span><br><span class=\"line\">3. 优雅降级 graceful degradation： 一开始就构建完整的功能，然后再针对低版本的浏览器进行兼容。</span><br><span class=\"line\">4. aside  定义页面的侧边栏内容。</span><br><span class=\"line\">   progress 原生的进度条</span><br><span class=\"line\"></span><br><span class=\"line\">5.  HTML `&lt;sup&gt;` 元素定义了一个文本区域，出于排版的原因，与主要的文本相比，应该展示得更高并且更小。</span><br><span class=\"line\">6. domPropsInnerHTML  domPropsInnerText</span><br><span class=\"line\">7. 根据 canvas 可以获取浏览器指纹信息</span><br><span class=\"line\">```text</span><br><span class=\"line\"></span><br><span class=\"line\">绘制 canvas，获取 base64 的 dataurl</span><br><span class=\"line\">对 dataurl 这个字符串进行 md5 摘要计算，得到指纹信息</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。比如VScode采用直接手动操作DOM的方式进行极端的性</p>\n</li>\n<li><p>事件传播有三个阶段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">捕获阶段–事件从 window 开始，然后向下到每个元素，直到到达目标元素事件或event.target。</span><br><span class=\"line\">目标阶段–事件已达到目标元素。</span><br><span class=\"line\">冒泡阶段–事件从目标元素冒泡，然后上升到每个元素，直到到达 window。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将图片等未处理的文件放在assets中，打包减少体积。而对于第三方引入的一些资源文件如iconfont.css等可以放在static中，因为这些文件已经经过处理了</p>\n</li>\n<li>浏览器 Context Group 是一组共享相同上下文的 tab、window或iframe。例如，如果网站（<a href=\"https://a.example）打开弹出窗口（https://b.example），则打开器窗口和弹出窗口共享相同的浏览上下文，并且它们可以通过\" target=\"_blank\" rel=\"noopener\">https://a.example）打开弹出窗口（https://b.example），则打开器窗口和弹出窗口共享相同的浏览上下文，并且它们可以通过</a> DOM API相互访问，例如 window.opener。</li>\n<li>影响dom解析以及渲染都会出现白屏的问题</li>\n<li>V8 内存空间越大，执行时间越长，为了性能，限制了</li>\n<li><p>1.当 onload 事件触发时，页面上所有的DOM，样式表，脚本，图片，flash都已经加载完成了。</p>\n<p>2.当 DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片，flash。</p>\n</li>\n<li>Host 支持虚拟站点</li>\n<li></li>\n<li>如果有js 在header 中，js会等待css 加载完毕。</li>\n<li>Object.prototype 是浏览器底层根据 ECMAScript 规范创造的一个对象。</li>\n<li>重绘 只是影响元素的外观和风格，不影响布局的  回流：元素的布局、隐藏等改变需要重新构建</li>\n<li>data-为前端开发者提供自定义属性，这些属性集可以通过对象的dataset属性获取，</li>\n<li>因为 DOM 是属于渲染引擎中的东西，而 JS 又是 JS 引擎中的东西。当我们通过 JS 操作 DOM 的时候，其实这个操作涉及到了两个线程之间的通信，那么势必会带来一些性能上的损耗。</li>\n<li>link属于HTML标签，而@import是CSS提供的页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载。</li>\n<li>Web quality  : alt</li>\n<li><p>该WindowEventHandlers.onstorage属性包含一个在storage事件触发时运行的事件处理程序。当更改存储区域时会发生这种情况（例如，存储新项目）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onstorage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'The '</span> + e.key + <span class=\"string\">' key has been changed from '</span> + e.oldValue + <span class=\"string\">' to '</span> + e.newValue + <span class=\"string\">'.'</span>); &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>navigator.sendBeacon() 方法可用于通过HTTP将少量数据异步传输到Web服务器。</p>\n</li>\n<li><p>preload：  直接请求<br>prefetch： 空闲时间请求</p>\n</li>\n<li><p>&lt;link rel=”dns-prefetch” href=”//baidu.com”&gt;<br>比较小的图片例如icon，使用base64编码，可以减少一次图片的网络请求；</p>\n</li>\n<li>cache control<br><code>`</code>text<br>private：客户端可以缓存–打开新的窗口会重新访问、地址栏回车时第一次访问、后退不访问<br>public：客户端和代理服务器都可以缓存<br>max-age=t：缓存内容将在t秒后失效<br>no-cache：需要使用协商缓存来验证缓存数据<br>no-store：所有内容都不会缓存</li>\n</ol>\n<p><code>`</code>   </p>\n<ol>\n<li><p>我们可以使用 requestIdleCallback() 在浏览器空闲时运行高耗时、低优先级的任务。</p>\n</li>\n<li><p>由于GUI渲染线程与JavaScript执行线程是互斥的关系，当浏览器在执行JavaScript程序的时候，GUI渲染线程会被保存在一个队列中，直到JS程序执行完成，才会接着执行。因此如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</p>\n</li>\n<li>浏览器定时计数器并不是由JavaScript引擎计数的, 因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确, 因此通过单独线程来计时并触发定时是更为合理的方案。</li>\n<li><p>当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。这些事件可以是当前执行的代码块如定时任务、也可来自浏览器内核的其他线程如鼠标点击、AJAX异步请求等，但由于JS的单线程关系所有这些事件都得排队等待JS引擎处理。</p>\n</li>\n<li><p>在XMLHttpRequest在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件放到 JavaScript引擎的处理队列中等待处理。</p>\n</li>\n<li>dom树构建完成后document对象会派发事件DOMContentLoaded来通知dom树已构建完成。<br>DOMContentLoaded事件用来标识dom树构建完成，那如何判断另外这些非阻塞型的资源加载完成呢？答案是window.onload。由于该事件派发的过晚，因此一般情况下我们用不着，而更多的是用DOMContentLoaded来尽早的的操作dom。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li></li>\n<li><p>当用户输入关键字并键入回车之后，这意味着当前页面即将要被替换成新的页面，不过在这个流程继续之前，浏览器还给了当前页面一次执行 <code>beforeunload</code> 事件的机会，<code>beforeunload</code> 事件允许页面在退出之前执行一些数据清理操作，还可以询问用户是否要离开当前页面。</p>\n</li>\n<li><p>对HTML5有什么了解？</p>\n<p>良好的移动性，以移动设备为主；<br>响应式设计，以适应自动变化的屏幕尺寸；<br>支持离线缓存技术，webStorage本地缓存；<br>新增了canvas，video，audio等新标签元素；以及特殊内容元素：article，footer，header，nav，section等；以及表单控件：calendar，date，time，email，url，search等；<br>新增webSocket/webWork技术；<br>还有新增的地理位置等。</p>\n</li>\n<li>label 标签来定义表单控制间的关系，当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。    </li>\n<li><p>最新的HTML5标准中的API是什么</p>\n<p>Canvas ：Canvas由HTML代码中定义的具有高度和宽度属性的可绘制区域组成。JavaScript代码可以通过一组完整的绘图函数访问该区域，这与其他常见的2D API类似，因此允许动态生成图形。Canvas 的一些预期用途包括构建图形、动画、游戏和图像合成。<br>媒体定时回放；<br>离线存储数据库；<br>文档编辑；<br>拖放；<br>跨文档消息传递；<br>浏览器历史管理；<br>MIME类型和协议处理程序注册；</p>\n</li>\n<li>对布局属性进行动画，浏览器需要为每一帧进行重绘并上传到 GPU 中<br>对合成属性进行动画，浏览器会为元素创建一个独立的复合层，当元素内容没有发生改变，该层就不会被重绘，浏览器会通过重新复合来创建动画帧</li>\n<li>HTML5文档类型：&lt;!doctype html&gt;    HTML5使用的编码 <meta charset=\"”UTF-8”\"></li>\n<li>Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用 Service Worker的话，传输协议必须为 HTTPS。</li>\n<li>visibilitychange,可以用来判断浏览器页签是否显示。</li>\n<li>WebP是一种新的图片格式，目标是减少文件大小但达到和JPEG格式相同的图片质量，能够减少网络上的请求时间。</li>\n<li><p>DOMContentLoaded事件触发时：仅当DOM解析完成后，不包括样式表，图片等资源。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">CSS不会阻塞DOM解析，但会阻塞DOM渲染。</span><br><span class=\"line\">CSS会阻塞JS执行，并不会阻塞JS文件下载</span><br><span class=\"line\">``` </span><br><span class=\"line\">1. `&lt;datalist&gt;`标签，用来定义选项列表，与input元素配合使用钙元素，来定义input可能的值。</span><br><span class=\"line\">  datalist及其选项不会被显示出来，他仅仅是合法的输入列表值。</span><br><span class=\"line\">  `&lt;input id=&quot;fruits&quot; list=&quot;fruit&quot; /&gt;&lt;datalist id=&quot;fruit&quot;&gt;  &lt;option value=&quot;apple&quot;&gt;  &lt;option value=&quot;orange&quot;&gt;  &lt;option value=&quot;banana&quot;&gt;&lt;/datalist&gt;`</span><br><span class=\"line\">1. 首屏加载时间</span><br><span class=\"line\">    performance.timing.domContentLoadedEventStart-performance.timing.navigationStart</span><br><span class=\"line\">2.  preload 是声明式的 fetch，可以强制浏览器请求资源，同时不阻塞文档 onload 事件。Prefetch 提示浏览器这个资源将来可能需要，但是把决定是否和什么时间加载这个资源的决定权交给浏览器。</span><br><span class=\"line\">3. 优雅降级 graceful degradation： 一开始就构建完整的功能，然后再针对低版本的浏览器进行兼容。</span><br><span class=\"line\">4. aside  定义页面的侧边栏内容。</span><br><span class=\"line\">   progress 原生的进度条</span><br><span class=\"line\"></span><br><span class=\"line\">5.  HTML `&lt;sup&gt;` 元素定义了一个文本区域，出于排版的原因，与主要的文本相比，应该展示得更高并且更小。</span><br><span class=\"line\">6. domPropsInnerHTML  domPropsInnerText</span><br><span class=\"line\">7. 根据 canvas 可以获取浏览器指纹信息</span><br><span class=\"line\">```text</span><br><span class=\"line\"></span><br><span class=\"line\">绘制 canvas，获取 base64 的 dataurl</span><br><span class=\"line\">对 dataurl 这个字符串进行 md5 摘要计算，得到指纹信息</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。比如VScode采用直接手动操作DOM的方式进行极端的性</p>\n</li>\n<li><p>事件传播有三个阶段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">捕获阶段–事件从 window 开始，然后向下到每个元素，直到到达目标元素事件或event.target。</span><br><span class=\"line\">目标阶段–事件已达到目标元素。</span><br><span class=\"line\">冒泡阶段–事件从目标元素冒泡，然后上升到每个元素，直到到达 window。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将图片等未处理的文件放在assets中，打包减少体积。而对于第三方引入的一些资源文件如iconfont.css等可以放在static中，因为这些文件已经经过处理了</p>\n</li>\n<li>浏览器 Context Group 是一组共享相同上下文的 tab、window或iframe。例如，如果网站（<a href=\"https://a.example）打开弹出窗口（https://b.example），则打开器窗口和弹出窗口共享相同的浏览上下文，并且它们可以通过\" target=\"_blank\" rel=\"noopener\">https://a.example）打开弹出窗口（https://b.example），则打开器窗口和弹出窗口共享相同的浏览上下文，并且它们可以通过</a> DOM API相互访问，例如 window.opener。</li>\n<li>影响dom解析以及渲染都会出现白屏的问题</li>\n<li>V8 内存空间越大，执行时间越长，为了性能，限制了</li>\n<li><p>1.当 onload 事件触发时，页面上所有的DOM，样式表，脚本，图片，flash都已经加载完成了。</p>\n<p>2.当 DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片，flash。</p>\n</li>\n<li>Host 支持虚拟站点</li>\n<li></li>\n<li>如果有js 在header 中，js会等待css 加载完毕。</li>\n<li>Object.prototype 是浏览器底层根据 ECMAScript 规范创造的一个对象。</li>\n<li>重绘 只是影响元素的外观和风格，不影响布局的  回流：元素的布局、隐藏等改变需要重新构建</li>\n<li>data-为前端开发者提供自定义属性，这些属性集可以通过对象的dataset属性获取，</li>\n<li>因为 DOM 是属于渲染引擎中的东西，而 JS 又是 JS 引擎中的东西。当我们通过 JS 操作 DOM 的时候，其实这个操作涉及到了两个线程之间的通信，那么势必会带来一些性能上的损耗。</li>\n<li>link属于HTML标签，而@import是CSS提供的页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载。</li>\n<li>Web quality  : alt</li>\n<li><p>该WindowEventHandlers.onstorage属性包含一个在storage事件触发时运行的事件处理程序。当更改存储区域时会发生这种情况（例如，存储新项目）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onstorage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'The '</span> + e.key + <span class=\"string\">' key has been changed from '</span> + e.oldValue + <span class=\"string\">' to '</span> + e.newValue + <span class=\"string\">'.'</span>); &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>navigator.sendBeacon() 方法可用于通过HTTP将少量数据异步传输到Web服务器。</p>\n</li>\n<li><p>preload：  直接请求<br>prefetch： 空闲时间请求</p>\n</li>\n<li><p>&lt;link rel=”dns-prefetch” href=”//baidu.com”&gt;<br>比较小的图片例如icon，使用base64编码，可以减少一次图片的网络请求；</p>\n</li>\n<li>cache control<br><code>`</code>text<br>private：客户端可以缓存–打开新的窗口会重新访问、地址栏回车时第一次访问、后退不访问<br>public：客户端和代理服务器都可以缓存<br>max-age=t：缓存内容将在t秒后失效<br>no-cache：需要使用协商缓存来验证缓存数据<br>no-store：所有内容都不会缓存</li>\n</ol>\n<p><code>`</code>   </p>\n<ol>\n<li><p>我们可以使用 requestIdleCallback() 在浏览器空闲时运行高耗时、低优先级的任务。</p>\n</li>\n<li><p>由于GUI渲染线程与JavaScript执行线程是互斥的关系，当浏览器在执行JavaScript程序的时候，GUI渲染线程会被保存在一个队列中，直到JS程序执行完成，才会接着执行。因此如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</p>\n</li>\n<li>浏览器定时计数器并不是由JavaScript引擎计数的, 因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确, 因此通过单独线程来计时并触发定时是更为合理的方案。</li>\n<li><p>当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。这些事件可以是当前执行的代码块如定时任务、也可来自浏览器内核的其他线程如鼠标点击、AJAX异步请求等，但由于JS的单线程关系所有这些事件都得排队等待JS引擎处理。</p>\n</li>\n<li><p>在XMLHttpRequest在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件放到 JavaScript引擎的处理队列中等待处理。</p>\n</li>\n<li>dom树构建完成后document对象会派发事件DOMContentLoaded来通知dom树已构建完成。<br>DOMContentLoaded事件用来标识dom树构建完成，那如何判断另外这些非阻塞型的资源加载完成呢？答案是window.onload。由于该事件派发的过晚，因此一般情况下我们用不着，而更多的是用DOMContentLoaded来尽早的的操作dom。</li>\n</ol>\n"},{"title":"investment","date":"2021-01-08T02:01:56.000Z","_content":"\n1. 不要缺乏耐心，当做T时严格遵守纪律\n2. 眼光长远一点儿，至少看一年后的利润\n","source":"_posts/investment.md","raw":"---\ntitle: investment\ndate: 2021-01-08 10:01:56\ntags: stock\n---\n\n1. 不要缺乏耐心，当做T时严格遵守纪律\n2. 眼光长远一点儿，至少看一年后的利润\n","slug":"investment","published":1,"updated":"2021-01-08T02:04:12.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5sdzw0016yy8k0odcnot3","content":"<ol>\n<li>不要缺乏耐心，当做T时严格遵守纪律</li>\n<li>眼光长远一点儿，至少看一年后的利润</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>不要缺乏耐心，当做T时严格遵守纪律</li>\n<li>眼光长远一点儿，至少看一年后的利润</li>\n</ol>\n"},{"title":"loadtest","date":"2017-01-17T01:41:01.000Z","_content":"### loadtest 压力测试\n可用powershell 或linux bash \n\n命令行如果加post body 会报错\n\n常用参数：\n\n-T 表示持续时间\n\n-c 并行数量\n\n-n 总的请求\n\n-m  get,put,post\n\n--rps 每秒发送请求数\n\n-P Request body 数据\n\n-p body 数据存在的文件路径\n\n-H header 添加\n\n-C 设置cookie\n```\nparam(\n    [int] $iterations = 6000,\n    [int] $rps = 500,\n    [string][ValidateSet(\"plaintext\")] $variation = \"plaintext\")\n\nif ($variation -eq \"plaintext\")\n{\n    $url = \"http://wh.etao.cn/auth/test\"\n}\n\nWrite-Host -ForegroundColor Green Beginning workload\nWrite-Host \"`& loadtest -k -n $iterations -c 100 --rps $rps $url\"\nWrite-Host\n\n& loadtest -k -n $iterations -c 100 --rps $rps $url\n```\n\n```\nloadtest -c 5 -t 2 -m post -T 'application/json'  -P '{\"message\":\"hello\"}'  -H \"Accept: application/json; q=0.9, application/xml; q=0.6\" http://cttest.etao.cn:8011/api/auth/test\n```\n","source":"_posts/loadtest.md","raw":"---\ntitle: loadtest\ndate: 2017-01-17 09:41:01\ntags: loadtest\n---\n### loadtest 压力测试\n可用powershell 或linux bash \n\n命令行如果加post body 会报错\n\n常用参数：\n\n-T 表示持续时间\n\n-c 并行数量\n\n-n 总的请求\n\n-m  get,put,post\n\n--rps 每秒发送请求数\n\n-P Request body 数据\n\n-p body 数据存在的文件路径\n\n-H header 添加\n\n-C 设置cookie\n```\nparam(\n    [int] $iterations = 6000,\n    [int] $rps = 500,\n    [string][ValidateSet(\"plaintext\")] $variation = \"plaintext\")\n\nif ($variation -eq \"plaintext\")\n{\n    $url = \"http://wh.etao.cn/auth/test\"\n}\n\nWrite-Host -ForegroundColor Green Beginning workload\nWrite-Host \"`& loadtest -k -n $iterations -c 100 --rps $rps $url\"\nWrite-Host\n\n& loadtest -k -n $iterations -c 100 --rps $rps $url\n```\n\n```\nloadtest -c 5 -t 2 -m post -T 'application/json'  -P '{\"message\":\"hello\"}'  -H \"Accept: application/json; q=0.9, application/xml; q=0.6\" http://cttest.etao.cn:8011/api/auth/test\n```\n","slug":"loadtest","published":1,"updated":"2020-06-29T06:22:24.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5sdzy0018yy8kjk235izp","content":"<h3 id=\"loadtest-压力测试\"><a href=\"#loadtest-压力测试\" class=\"headerlink\" title=\"loadtest 压力测试\"></a>loadtest 压力测试</h3><p>可用powershell 或linux bash </p>\n<p>命令行如果加post body 会报错</p>\n<p>常用参数：</p>\n<p>-T 表示持续时间</p>\n<p>-c 并行数量</p>\n<p>-n 总的请求</p>\n<p>-m  get,put,post</p>\n<p>–rps 每秒发送请求数</p>\n<p>-P Request body 数据</p>\n<p>-p body 数据存在的文件路径</p>\n<p>-H header 添加</p>\n<p>-C 设置cookie<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">param(</span><br><span class=\"line\">    [int] $iterations = 6000,</span><br><span class=\"line\">    [int] $rps = 500,</span><br><span class=\"line\">    [string][ValidateSet(&quot;plaintext&quot;)] $variation = &quot;plaintext&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">if ($variation -eq &quot;plaintext&quot;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $url = &quot;http://wh.etao.cn/auth/test&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Write-Host -ForegroundColor Green Beginning workload</span><br><span class=\"line\">Write-Host &quot;`&amp; loadtest -k -n $iterations -c 100 --rps $rps $url&quot;</span><br><span class=\"line\">Write-Host</span><br><span class=\"line\"></span><br><span class=\"line\">&amp; loadtest -k -n $iterations -c 100 --rps $rps $url</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loadtest -c 5 -t 2 -m post -T &apos;application/json&apos;  -P &apos;&#123;&quot;message&quot;:&quot;hello&quot;&#125;&apos;  -H &quot;Accept: application/json; q=0.9, application/xml; q=0.6&quot; http://cttest.etao.cn:8011/api/auth/test</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"loadtest-压力测试\"><a href=\"#loadtest-压力测试\" class=\"headerlink\" title=\"loadtest 压力测试\"></a>loadtest 压力测试</h3><p>可用powershell 或linux bash </p>\n<p>命令行如果加post body 会报错</p>\n<p>常用参数：</p>\n<p>-T 表示持续时间</p>\n<p>-c 并行数量</p>\n<p>-n 总的请求</p>\n<p>-m  get,put,post</p>\n<p>–rps 每秒发送请求数</p>\n<p>-P Request body 数据</p>\n<p>-p body 数据存在的文件路径</p>\n<p>-H header 添加</p>\n<p>-C 设置cookie<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">param(</span><br><span class=\"line\">    [int] $iterations = 6000,</span><br><span class=\"line\">    [int] $rps = 500,</span><br><span class=\"line\">    [string][ValidateSet(&quot;plaintext&quot;)] $variation = &quot;plaintext&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">if ($variation -eq &quot;plaintext&quot;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $url = &quot;http://wh.etao.cn/auth/test&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Write-Host -ForegroundColor Green Beginning workload</span><br><span class=\"line\">Write-Host &quot;`&amp; loadtest -k -n $iterations -c 100 --rps $rps $url&quot;</span><br><span class=\"line\">Write-Host</span><br><span class=\"line\"></span><br><span class=\"line\">&amp; loadtest -k -n $iterations -c 100 --rps $rps $url</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loadtest -c 5 -t 2 -m post -T &apos;application/json&apos;  -P &apos;&#123;&quot;message&quot;:&quot;hello&quot;&#125;&apos;  -H &quot;Accept: application/json; q=0.9, application/xml; q=0.6&quot; http://cttest.etao.cn:8011/api/auth/test</span><br></pre></td></tr></table></figure>\n"},{"title":"js","date":"2020-08-13T07:17:58.000Z","_content":"\n1. 管道符放到尾部：Hello(?:World|China|) 可以匹配 HelloWorld、HelloChina，也可以只匹配 Hello。\n    >console.log('子君' instanceof String)  \n1. prototype\n```text\n   function f() {}\nvar a = f.prototype, b = Object.getPrototypeOf(f);\na === b    \n解析：a是构造函数f的原型 ： {constructor: ƒ}\nb是实例f的原型对象 ： ƒ () { [native code] }\n```\n1. webpack hmr\n```text\n1.当修改了一个或多个文件；\n2.文件系统接收更改并通知webpack；\n3.webpack重新编译构建一个或多个模块，并通知HMR服务器进行更新；\n4.HMR Server 使用webSocket通知HMR runtime 需要更新，HMR运行时通过HTTP请求更新jsonp；\n5.HMR运行时替换更新中的模块，如果确定这些模块无法更新，则触发整个页面刷新。\n```\n1. Git submodule \n```text\n$ git submodule init\nSubmodule 'assets' (https://github.com/maonx/vimwiki-assets.git) registered for path 'assets'\n```\n\n```text\n$ git submodule add https://github.com/maonx/vimwiki-assets.git assets\n\n$ git submodule update —remote\n```\n\n1.  所以函数防抖适用的场景：监听窗口的滚动，缩放。高频发生的一些事件；函数节流适用的场景：涉及与后端交互的按钮，由于网络原因或者其他原因，导致接口没有返回值，用户一直点点点的问题。 \n2.  最优子结构、边界、动态转移方程。动态规划的核心—》从低向上，从而不会像递归那样保留调用栈。\n3.  十进制转为 2 进制，除 2 取余，然后余数反向\n    \n    十进制转为 2 进制小时，**乘 2 取整**\n    \n4. in操作符:检测指定对象(右边)原型链上是否有对应的属性值。 \n    hasOwnProperty方法:检测指定对象自身上是否有对应的属性值。两者的区别在于in会查找原型链,而hasOwnProperty不会。\n   \n   for...in...遍历对象上除了Symbol以外的可枚举属性,包括原型链上的属性。\n   \n   Object.keys & Object.assign & JSON.stringify: excluding non-enumerable & __proto__\n5. 堆\n堆的底层实际上是一棵完全二叉树，可以用数组实现\n每个的节点元素值不小于其子节点 - 最大堆\n每个的节点元素值不大于其子节点 - 最小堆\n\n1.  浏览器中 customevent\n    \n```js\nvar event = new CustomEvent(\"cat\", {  detail: {    hazcheeseburger: true  }});obj.dispatchEvent(event);\n```\n\n1.  window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行\n1. Element.getBoundingClientRect() 方法返回元素的大小及其相对于视口的位置。\n1.  regex  y stick 粘连修饰符 \n\n1.普通函数在被调用时，JS引擎会创建一个栈帧，在里面准备好局部变量、函数参数、临时值、代码执行的位置（也就是说这个函数的第一行对应到代码区里的第几行机器码），在当前栈帧里设置好返回位置，然后将新帧压入栈顶。待函数执行结束后，这个栈帧将被弹出栈然后销毁，返回值会被传给上一个栈帧。\n\n   当执行到yield语句时，Generator的栈帧同样会被弹出栈外，但Generator在这里耍了个花招——它在堆里保存了栈帧的引用（或拷贝）！这样当iter.next方法被调用时，JS引擎便不会重新创建一个栈帧，而是把堆里的栈帧直接入栈。因为栈帧里保存了函数执行所需的全部上下文以及当前执行的位置，所以当这一切都被恢复如初之时，就好像程序从原本暂停的地方继续向前执行了。\n\n    而因为每次yield和iter.next都对应一次出栈和入栈，所以可以直接利用已有的栈机制，实现值的传出和传入。\n\n1. Array(10)  稀疏矩阵\n2. clone\n```text\nfunction initData(target) {\n  return new target.constructor()\n}\nreturn Object(Symbol.prototype.valueOf.call(targe));\n\nfunction cloneReg(targe) {\n    const reFlags = /\\w*$/;\n    const result = new targe.constructor(targe.source, reFlags.exec(targe));\n    result.lastIndex = targe.lastIndex;\n    return result;\n}\n```     \n\n1. js 在底层存储变量的时候，会在变量的机器码的低位1-3位存储其类型信息👉\n   \n   000：对象\n   010：浮点数\n   100：字符串\n   110：布尔\n   1：整数\n   \n   but, 对于 undefined 和 null 来说，这两个值的信息存储是有点特殊的。\n   \n   null：所有机器码均为0\n   \n   undefined：用 −2^30 整数来表示\n\n1. console 分组\n```javascript\nconsole.group('action', 'A');\n\nconsole.log('%c prev state', \"color: #dddddd\", '\\n', {\n    name: 'a'\n});\nconsole.log('%c next state', \"color: #dddddd\", '\\n',  {\n    name: 'b'\n});\n\nconsole.groupCollapsed();\nconsole.log('我是group折叠内容');\nconsole.groupEnd();\nconsole.groupEnd();\n```\n1.  Object.create(null) 和 {}\n1.  每次JavaScript对DOM的操作都会改变当前页面的呈现，并重新刷新整个页面，从而消耗了大量的时间。而createDocumentFragment()的作用，就是可以创建一个文档碎片，\n把所有的新节点附加其上，然后把文档碎片的内容一次性添加到document中。\n\n1. indexedDB 的特点：存储空间大：存储空间可以达到几百兆甚至更多；\n\n               >> 支持二进制存储：它不仅可以存储字符串，而且还可以存储二进制数据；\n               >> IndexedDB 有同源限制，每一个数据库只能在自身域名下能访问，不能跨域名访问；\n               >> 支持事务型：IndexedDB 执行的操作会按照事务来分组的，在一个事务中，要么所有的操作都成功，要么所有的操作都失败；\n               >> 键值对存储：IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以 “键值对” 的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误。\n               >> 数据操作是异步的：使用 IndexedDB 执行的操作是异步执行的，以免阻塞应用程序。\n5. Usecapture:\n   true - 事件句柄在捕获阶段执行。事件捕获从父到子。\n   false- false- 默认。事件句柄在冒泡阶段执行\n1. 浏览器标签页被隐藏或显示的时候会触发visibilitychange事件. document.addEventListener('visibilitychange')\n2. Object.assign 继承的否Object.keys & Object.assign & JSON.stringify: excluding non-enumerable & __proto__\n3. let is not global while var is.\n4. download\n```javascript\nfunction download (url, name) {\n  const a = document.createElement('a')\n  a.download = name\n  a.rel = 'noopener'\n  a.href = url\n  // 触发模拟点击\n  a.dispatchEvent(new MouseEvent('click'))\n  // 或者 a.click()\n}\n\n// 方案一：Text -> DataURL\nconst dataUrl = `data:,${str}`\ndownload(dataUrl, 'demo.json')\n\n// 方案二：Text -> Blob -> ObjectURL\nconst url = URL.createObjectURL(new Blob(str.split('')))\ndownload(url, 'demo1.json')\n\n```  \n1. stringfy 格式化\n```js\n\nconst json = {\n  a: 3,\n  b: 4,\n  c: 5\n}\nconst str = JSON.stringify(json, null, 2)\n\n```  \n\n1. proxy \n```js\nconst negativeArray = els =>\n    new Proxy(els, {\n        get: (target, propKey, receiver) =>\n            Reflect.get(\n                target,\n                +propKey < 0 ? String(target.length + +propKey) : propKey,\n                receiver\n            )\n    });\nconst unicorn = negativeArray([\"京\", \"程\", \"一\", \"灯\"]);\nunicorn[-1]; \n``` \n  \n1.  对于 undeclared 变量的引用，浏览器会报引用错误，如 ReferenceError: b is not defined 。\n1. Es6->babel paser->babel traverse->babel core\n1.  类数组向数组转换 Array.from slice 。 aguments 就是arrarylike   \n1.  xhr  \n```js\n \nvar request = new XMLHttpRequest()\n request.open('GET', 'index/a/b/c?name=TianTian', true);\n request.onreadystatechange = function () {\n   if(request.readyState === 4 && request.status === 200) {\n     console.log(request.responseText);\n   }};\n request.send();\n```   \n1. V8 对重复的js代码有优化 即时编译技术，如果发现一段代码经常使用，则不用转字节码 直接执行机器码\n\n1. 随机字符串 Math.random().toString(36).substr(2));\n\n2. Babel pollyfy 的作用 ：https://zhuanlan.zhihu.com/p/29058936\n\n3. Babel stag2 的功能  https://github.com/babel/babel/tree/master/packages/babel-preset-stage-2\n1. 所有的babel 包  https://github.com/babel/babel/tree/master/packages\n1. npx babel-upgrade\n\n2. ES2019 中为Symbol对象添加了只读属性 description ，该对象返回包含Symbol描述的字符串。\n\n \n3. 如果你传的 context 就 null 或者 undefined，那么 window 对象就是默认的 context（严格模式下默认 context 是 undefined）\n \n4. ES6 模块功能是它的导入模块是导出时模块的实时只读视图。（相比起 CommonJS，导入的是导出模块的拷贝副本，因此也不是实时的）。只读视图和内存拷贝的区别。\n \n5. Broadcast Channel API 允许同一原始域和用户代理下的所有窗口,iFrames 等进行交互。也就是说，如果用户打开了同一个网站的的两个标签窗口，如果网站内容发生了变化，那么两个窗口会同时得到更新通知。\n6. escape 在处理 0xff 之外字符的时候，是直接使用字符的 unicode 在前面加上一个 「%u」，而encodeURI则是先进行 UTF-8，再在 UTF-8 的每个字节码前加上一个 「%」； 所以通过encodeUrI 可以获取utf-8 字节长度\n7. js value\n8. Prototype 包含constructor 和 __proto__. 原型链存储共有的属性和方法，减少内存\n9.  基本的数据类型 \n```text\n基本的数据类型\nundefined\nnull\nstring\nboolean\nnumber\nsymbol(ES6)\n\n```\n1. navigator.userAgent: 返回当前浏览器的user agent字符串\n1. 懒加载：\n   Javascript 脚步通常要等到 DOM 加载完后才会执行，如果加载的资源过多，可能会影响网页的正常使用。\n   能够节省流量和减轻服务器压力，更近一步就是能够为公司省成本。\n\n2. Same origin 可以使用broadcast channel 两页面间通信。\n3. 注意闭包内this的指向\n4. 对于instanceof,无法判断基本类型，但可以正确判断引用类型\n5. let x = 2_3333_3333 \n6. 哪些操作会造成内存泄漏？\n```text\n1.意外的全局变量\n2.被遗忘的计时器或回调函数\n3.脱离 DOM 的引用\n4.闭包\n```\n1.  Map 对象中的数据是根据用户set 的顺序排序的，object 先排数字开头的。\n\n\n### dataStructure\n\n1. BST 查询二叉树\n若任意节点的左⼦子树不不空，则左⼦子树上所有结点的值均⼩小于它的 根结点的值;\n若任意节点的右⼦子树不不空，则右⼦子树上所有结点的值均⼤大于它的 根结点的值;\n任意节点的左、右⼦子树也分别为⼆二叉查找树。","source":"_posts/js.md","raw":"---\ntitle: js\ndate: 2020-08-13 15:17:58\ntags:\n---\n\n1. 管道符放到尾部：Hello(?:World|China|) 可以匹配 HelloWorld、HelloChina，也可以只匹配 Hello。\n    >console.log('子君' instanceof String)  \n1. prototype\n```text\n   function f() {}\nvar a = f.prototype, b = Object.getPrototypeOf(f);\na === b    \n解析：a是构造函数f的原型 ： {constructor: ƒ}\nb是实例f的原型对象 ： ƒ () { [native code] }\n```\n1. webpack hmr\n```text\n1.当修改了一个或多个文件；\n2.文件系统接收更改并通知webpack；\n3.webpack重新编译构建一个或多个模块，并通知HMR服务器进行更新；\n4.HMR Server 使用webSocket通知HMR runtime 需要更新，HMR运行时通过HTTP请求更新jsonp；\n5.HMR运行时替换更新中的模块，如果确定这些模块无法更新，则触发整个页面刷新。\n```\n1. Git submodule \n```text\n$ git submodule init\nSubmodule 'assets' (https://github.com/maonx/vimwiki-assets.git) registered for path 'assets'\n```\n\n```text\n$ git submodule add https://github.com/maonx/vimwiki-assets.git assets\n\n$ git submodule update —remote\n```\n\n1.  所以函数防抖适用的场景：监听窗口的滚动，缩放。高频发生的一些事件；函数节流适用的场景：涉及与后端交互的按钮，由于网络原因或者其他原因，导致接口没有返回值，用户一直点点点的问题。 \n2.  最优子结构、边界、动态转移方程。动态规划的核心—》从低向上，从而不会像递归那样保留调用栈。\n3.  十进制转为 2 进制，除 2 取余，然后余数反向\n    \n    十进制转为 2 进制小时，**乘 2 取整**\n    \n4. in操作符:检测指定对象(右边)原型链上是否有对应的属性值。 \n    hasOwnProperty方法:检测指定对象自身上是否有对应的属性值。两者的区别在于in会查找原型链,而hasOwnProperty不会。\n   \n   for...in...遍历对象上除了Symbol以外的可枚举属性,包括原型链上的属性。\n   \n   Object.keys & Object.assign & JSON.stringify: excluding non-enumerable & __proto__\n5. 堆\n堆的底层实际上是一棵完全二叉树，可以用数组实现\n每个的节点元素值不小于其子节点 - 最大堆\n每个的节点元素值不大于其子节点 - 最小堆\n\n1.  浏览器中 customevent\n    \n```js\nvar event = new CustomEvent(\"cat\", {  detail: {    hazcheeseburger: true  }});obj.dispatchEvent(event);\n```\n\n1.  window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行\n1. Element.getBoundingClientRect() 方法返回元素的大小及其相对于视口的位置。\n1.  regex  y stick 粘连修饰符 \n\n1.普通函数在被调用时，JS引擎会创建一个栈帧，在里面准备好局部变量、函数参数、临时值、代码执行的位置（也就是说这个函数的第一行对应到代码区里的第几行机器码），在当前栈帧里设置好返回位置，然后将新帧压入栈顶。待函数执行结束后，这个栈帧将被弹出栈然后销毁，返回值会被传给上一个栈帧。\n\n   当执行到yield语句时，Generator的栈帧同样会被弹出栈外，但Generator在这里耍了个花招——它在堆里保存了栈帧的引用（或拷贝）！这样当iter.next方法被调用时，JS引擎便不会重新创建一个栈帧，而是把堆里的栈帧直接入栈。因为栈帧里保存了函数执行所需的全部上下文以及当前执行的位置，所以当这一切都被恢复如初之时，就好像程序从原本暂停的地方继续向前执行了。\n\n    而因为每次yield和iter.next都对应一次出栈和入栈，所以可以直接利用已有的栈机制，实现值的传出和传入。\n\n1. Array(10)  稀疏矩阵\n2. clone\n```text\nfunction initData(target) {\n  return new target.constructor()\n}\nreturn Object(Symbol.prototype.valueOf.call(targe));\n\nfunction cloneReg(targe) {\n    const reFlags = /\\w*$/;\n    const result = new targe.constructor(targe.source, reFlags.exec(targe));\n    result.lastIndex = targe.lastIndex;\n    return result;\n}\n```     \n\n1. js 在底层存储变量的时候，会在变量的机器码的低位1-3位存储其类型信息👉\n   \n   000：对象\n   010：浮点数\n   100：字符串\n   110：布尔\n   1：整数\n   \n   but, 对于 undefined 和 null 来说，这两个值的信息存储是有点特殊的。\n   \n   null：所有机器码均为0\n   \n   undefined：用 −2^30 整数来表示\n\n1. console 分组\n```javascript\nconsole.group('action', 'A');\n\nconsole.log('%c prev state', \"color: #dddddd\", '\\n', {\n    name: 'a'\n});\nconsole.log('%c next state', \"color: #dddddd\", '\\n',  {\n    name: 'b'\n});\n\nconsole.groupCollapsed();\nconsole.log('我是group折叠内容');\nconsole.groupEnd();\nconsole.groupEnd();\n```\n1.  Object.create(null) 和 {}\n1.  每次JavaScript对DOM的操作都会改变当前页面的呈现，并重新刷新整个页面，从而消耗了大量的时间。而createDocumentFragment()的作用，就是可以创建一个文档碎片，\n把所有的新节点附加其上，然后把文档碎片的内容一次性添加到document中。\n\n1. indexedDB 的特点：存储空间大：存储空间可以达到几百兆甚至更多；\n\n               >> 支持二进制存储：它不仅可以存储字符串，而且还可以存储二进制数据；\n               >> IndexedDB 有同源限制，每一个数据库只能在自身域名下能访问，不能跨域名访问；\n               >> 支持事务型：IndexedDB 执行的操作会按照事务来分组的，在一个事务中，要么所有的操作都成功，要么所有的操作都失败；\n               >> 键值对存储：IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以 “键值对” 的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误。\n               >> 数据操作是异步的：使用 IndexedDB 执行的操作是异步执行的，以免阻塞应用程序。\n5. Usecapture:\n   true - 事件句柄在捕获阶段执行。事件捕获从父到子。\n   false- false- 默认。事件句柄在冒泡阶段执行\n1. 浏览器标签页被隐藏或显示的时候会触发visibilitychange事件. document.addEventListener('visibilitychange')\n2. Object.assign 继承的否Object.keys & Object.assign & JSON.stringify: excluding non-enumerable & __proto__\n3. let is not global while var is.\n4. download\n```javascript\nfunction download (url, name) {\n  const a = document.createElement('a')\n  a.download = name\n  a.rel = 'noopener'\n  a.href = url\n  // 触发模拟点击\n  a.dispatchEvent(new MouseEvent('click'))\n  // 或者 a.click()\n}\n\n// 方案一：Text -> DataURL\nconst dataUrl = `data:,${str}`\ndownload(dataUrl, 'demo.json')\n\n// 方案二：Text -> Blob -> ObjectURL\nconst url = URL.createObjectURL(new Blob(str.split('')))\ndownload(url, 'demo1.json')\n\n```  \n1. stringfy 格式化\n```js\n\nconst json = {\n  a: 3,\n  b: 4,\n  c: 5\n}\nconst str = JSON.stringify(json, null, 2)\n\n```  \n\n1. proxy \n```js\nconst negativeArray = els =>\n    new Proxy(els, {\n        get: (target, propKey, receiver) =>\n            Reflect.get(\n                target,\n                +propKey < 0 ? String(target.length + +propKey) : propKey,\n                receiver\n            )\n    });\nconst unicorn = negativeArray([\"京\", \"程\", \"一\", \"灯\"]);\nunicorn[-1]; \n``` \n  \n1.  对于 undeclared 变量的引用，浏览器会报引用错误，如 ReferenceError: b is not defined 。\n1. Es6->babel paser->babel traverse->babel core\n1.  类数组向数组转换 Array.from slice 。 aguments 就是arrarylike   \n1.  xhr  \n```js\n \nvar request = new XMLHttpRequest()\n request.open('GET', 'index/a/b/c?name=TianTian', true);\n request.onreadystatechange = function () {\n   if(request.readyState === 4 && request.status === 200) {\n     console.log(request.responseText);\n   }};\n request.send();\n```   \n1. V8 对重复的js代码有优化 即时编译技术，如果发现一段代码经常使用，则不用转字节码 直接执行机器码\n\n1. 随机字符串 Math.random().toString(36).substr(2));\n\n2. Babel pollyfy 的作用 ：https://zhuanlan.zhihu.com/p/29058936\n\n3. Babel stag2 的功能  https://github.com/babel/babel/tree/master/packages/babel-preset-stage-2\n1. 所有的babel 包  https://github.com/babel/babel/tree/master/packages\n1. npx babel-upgrade\n\n2. ES2019 中为Symbol对象添加了只读属性 description ，该对象返回包含Symbol描述的字符串。\n\n \n3. 如果你传的 context 就 null 或者 undefined，那么 window 对象就是默认的 context（严格模式下默认 context 是 undefined）\n \n4. ES6 模块功能是它的导入模块是导出时模块的实时只读视图。（相比起 CommonJS，导入的是导出模块的拷贝副本，因此也不是实时的）。只读视图和内存拷贝的区别。\n \n5. Broadcast Channel API 允许同一原始域和用户代理下的所有窗口,iFrames 等进行交互。也就是说，如果用户打开了同一个网站的的两个标签窗口，如果网站内容发生了变化，那么两个窗口会同时得到更新通知。\n6. escape 在处理 0xff 之外字符的时候，是直接使用字符的 unicode 在前面加上一个 「%u」，而encodeURI则是先进行 UTF-8，再在 UTF-8 的每个字节码前加上一个 「%」； 所以通过encodeUrI 可以获取utf-8 字节长度\n7. js value\n8. Prototype 包含constructor 和 __proto__. 原型链存储共有的属性和方法，减少内存\n9.  基本的数据类型 \n```text\n基本的数据类型\nundefined\nnull\nstring\nboolean\nnumber\nsymbol(ES6)\n\n```\n1. navigator.userAgent: 返回当前浏览器的user agent字符串\n1. 懒加载：\n   Javascript 脚步通常要等到 DOM 加载完后才会执行，如果加载的资源过多，可能会影响网页的正常使用。\n   能够节省流量和减轻服务器压力，更近一步就是能够为公司省成本。\n\n2. Same origin 可以使用broadcast channel 两页面间通信。\n3. 注意闭包内this的指向\n4. 对于instanceof,无法判断基本类型，但可以正确判断引用类型\n5. let x = 2_3333_3333 \n6. 哪些操作会造成内存泄漏？\n```text\n1.意外的全局变量\n2.被遗忘的计时器或回调函数\n3.脱离 DOM 的引用\n4.闭包\n```\n1.  Map 对象中的数据是根据用户set 的顺序排序的，object 先排数字开头的。\n\n\n### dataStructure\n\n1. BST 查询二叉树\n若任意节点的左⼦子树不不空，则左⼦子树上所有结点的值均⼩小于它的 根结点的值;\n若任意节点的右⼦子树不不空，则右⼦子树上所有结点的值均⼤大于它的 根结点的值;\n任意节点的左、右⼦子树也分别为⼆二叉查找树。","slug":"js","published":1,"updated":"2020-08-24T02:03:41.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5sdzz0019yy8kk3o5nbe5","content":"<ol>\n<li>管道符放到尾部：Hello(?:World|China|) 可以匹配 HelloWorld、HelloChina，也可以只匹配 Hello。<blockquote>\n<p>console.log(‘子君’ instanceof String)  </p>\n</blockquote>\n</li>\n<li><p>prototype</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   function f() &#123;&#125;</span><br><span class=\"line\">var a = f.prototype, b = Object.getPrototypeOf(f);</span><br><span class=\"line\">a === b    </span><br><span class=\"line\">解析：a是构造函数f的原型 ： &#123;constructor: ƒ&#125;</span><br><span class=\"line\">b是实例f的原型对象 ： ƒ () &#123; [native code] &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>webpack hmr</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.当修改了一个或多个文件；</span><br><span class=\"line\">2.文件系统接收更改并通知webpack；</span><br><span class=\"line\">3.webpack重新编译构建一个或多个模块，并通知HMR服务器进行更新；</span><br><span class=\"line\">4.HMR Server 使用webSocket通知HMR runtime 需要更新，HMR运行时通过HTTP请求更新jsonp；</span><br><span class=\"line\">5.HMR运行时替换更新中的模块，如果确定这些模块无法更新，则触发整个页面刷新。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Git submodule </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git submodule init</span><br><span class=\"line\">Submodule &apos;assets&apos; (https://github.com/maonx/vimwiki-assets.git) registered for path &apos;assets&apos;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git submodule add https://github.com/maonx/vimwiki-assets.git assets</span><br><span class=\"line\"></span><br><span class=\"line\">$ git submodule update —remote</span><br></pre></td></tr></table></figure>\n<ol>\n<li>所以函数防抖适用的场景：监听窗口的滚动，缩放。高频发生的一些事件；函数节流适用的场景：涉及与后端交互的按钮，由于网络原因或者其他原因，导致接口没有返回值，用户一直点点点的问题。 </li>\n<li>最优子结构、边界、动态转移方程。动态规划的核心—》从低向上，从而不会像递归那样保留调用栈。</li>\n<li><p>十进制转为 2 进制，除 2 取余，然后余数反向</p>\n<p>十进制转为 2 进制小时，<strong>乘 2 取整</strong></p>\n</li>\n<li><p>in操作符:检测指定对象(右边)原型链上是否有对应的属性值。<br> hasOwnProperty方法:检测指定对象自身上是否有对应的属性值。两者的区别在于in会查找原型链,而hasOwnProperty不会。</p>\n<p>for…in…遍历对象上除了Symbol以外的可枚举属性,包括原型链上的属性。</p>\n<p>Object.keys &amp; Object.assign &amp; JSON.stringify: excluding non-enumerable &amp; <strong>proto</strong></p>\n</li>\n<li><p>堆<br>堆的底层实际上是一棵完全二叉树，可以用数组实现<br>每个的节点元素值不小于其子节点 - 最大堆<br>每个的节点元素值不大于其子节点 - 最小堆</p>\n</li>\n<li><p>浏览器中 customevent</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> event = <span class=\"keyword\">new</span> CustomEvent(<span class=\"string\">\"cat\"</span>, &#123;  <span class=\"attr\">detail</span>: &#123;    <span class=\"attr\">hazcheeseburger</span>: <span class=\"literal\">true</span>  &#125;&#125;);obj.dispatchEvent(event);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行</li>\n<li>Element.getBoundingClientRect() 方法返回元素的大小及其相对于视口的位置。</li>\n<li>regex  y stick 粘连修饰符 </li>\n</ol>\n<p>1.普通函数在被调用时，JS引擎会创建一个栈帧，在里面准备好局部变量、函数参数、临时值、代码执行的位置（也就是说这个函数的第一行对应到代码区里的第几行机器码），在当前栈帧里设置好返回位置，然后将新帧压入栈顶。待函数执行结束后，这个栈帧将被弹出栈然后销毁，返回值会被传给上一个栈帧。</p>\n<p>   当执行到yield语句时，Generator的栈帧同样会被弹出栈外，但Generator在这里耍了个花招——它在堆里保存了栈帧的引用（或拷贝）！这样当iter.next方法被调用时，JS引擎便不会重新创建一个栈帧，而是把堆里的栈帧直接入栈。因为栈帧里保存了函数执行所需的全部上下文以及当前执行的位置，所以当这一切都被恢复如初之时，就好像程序从原本暂停的地方继续向前执行了。</p>\n<pre><code>而因为每次yield和iter.next都对应一次出栈和入栈，所以可以直接利用已有的栈机制，实现值的传出和传入。\n</code></pre><ol>\n<li>Array(10)  稀疏矩阵</li>\n<li><p>clone</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function initData(target) &#123;</span><br><span class=\"line\">  return new target.constructor()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return Object(Symbol.prototype.valueOf.call(targe));</span><br><span class=\"line\"></span><br><span class=\"line\">function cloneReg(targe) &#123;</span><br><span class=\"line\">    const reFlags = /\\w*$/;</span><br><span class=\"line\">    const result = new targe.constructor(targe.source, reFlags.exec(targe));</span><br><span class=\"line\">    result.lastIndex = targe.lastIndex;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```     </span><br><span class=\"line\"></span><br><span class=\"line\">1. js 在底层存储变量的时候，会在变量的机器码的低位1-3位存储其类型信息👉</span><br><span class=\"line\">   </span><br><span class=\"line\">   000：对象</span><br><span class=\"line\">   010：浮点数</span><br><span class=\"line\">   100：字符串</span><br><span class=\"line\">   110：布尔</span><br><span class=\"line\">   1：整数</span><br><span class=\"line\">   </span><br><span class=\"line\">   but, 对于 undefined 和 null 来说，这两个值的信息存储是有点特殊的。</span><br><span class=\"line\">   </span><br><span class=\"line\">   null：所有机器码均为0</span><br><span class=\"line\">   </span><br><span class=\"line\">   undefined：用 −2^30 整数来表示</span><br><span class=\"line\"></span><br><span class=\"line\">1. console 分组</span><br><span class=\"line\">```javascript</span><br><span class=\"line\">console.group(&apos;action&apos;, &apos;A&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;%c prev state&apos;, &quot;color: #dddddd&quot;, &apos;\\n&apos;, &#123;</span><br><span class=\"line\">    name: &apos;a&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(&apos;%c next state&apos;, &quot;color: #dddddd&quot;, &apos;\\n&apos;,  &#123;</span><br><span class=\"line\">    name: &apos;b&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.groupCollapsed();</span><br><span class=\"line\">console.log(&apos;我是group折叠内容&apos;);</span><br><span class=\"line\">console.groupEnd();</span><br><span class=\"line\">console.groupEnd();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object.create(null) 和 {}</p>\n</li>\n<li><p>每次JavaScript对DOM的操作都会改变当前页面的呈现，并重新刷新整个页面，从而消耗了大量的时间。而createDocumentFragment()的作用，就是可以创建一个文档碎片，<br>把所有的新节点附加其上，然后把文档碎片的内容一次性添加到document中。</p>\n</li>\n<li><p>indexedDB 的特点：存储空间大：存储空间可以达到几百兆甚至更多；</p>\n<pre><code>&gt;&gt; 支持二进制存储：它不仅可以存储字符串，而且还可以存储二进制数据；\n&gt;&gt; IndexedDB 有同源限制，每一个数据库只能在自身域名下能访问，不能跨域名访问；\n&gt;&gt; 支持事务型：IndexedDB 执行的操作会按照事务来分组的，在一个事务中，要么所有的操作都成功，要么所有的操作都失败；\n&gt;&gt; 键值对存储：IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以 “键值对” 的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误。\n&gt;&gt; 数据操作是异步的：使用 IndexedDB 执行的操作是异步执行的，以免阻塞应用程序。\n</code></pre></li>\n<li>Usecapture:<br>true - 事件句柄在捕获阶段执行。事件捕获从父到子。<br>false- false- 默认。事件句柄在冒泡阶段执行</li>\n<li>浏览器标签页被隐藏或显示的时候会触发visibilitychange事件. document.addEventListener(‘visibilitychange’)</li>\n<li>Object.assign 继承的否Object.keys &amp; Object.assign &amp; JSON.stringify: excluding non-enumerable &amp; <strong>proto</strong></li>\n<li>let is not global while var is.</li>\n<li><p>download</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">download</span> (<span class=\"params\">url, name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">  a.download = name</span><br><span class=\"line\">  a.rel = <span class=\"string\">'noopener'</span></span><br><span class=\"line\">  a.href = url</span><br><span class=\"line\">  <span class=\"comment\">// 触发模拟点击</span></span><br><span class=\"line\">  a.dispatchEvent(<span class=\"keyword\">new</span> MouseEvent(<span class=\"string\">'click'</span>))</span><br><span class=\"line\">  <span class=\"comment\">// 或者 a.click()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方案一：Text -&gt; DataURL</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dataUrl = <span class=\"string\">`data:,<span class=\"subst\">$&#123;str&#125;</span>`</span></span><br><span class=\"line\">download(dataUrl, <span class=\"string\">'demo.json'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方案二：Text -&gt; Blob -&gt; ObjectURL</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url = URL.createObjectURL(<span class=\"keyword\">new</span> Blob(str.split(<span class=\"string\">''</span>)))</span><br><span class=\"line\">download(url, <span class=\"string\">'demo1.json'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\">1. stringfy 格式化</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> json = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">3</span>,</span><br><span class=\"line\">  b: <span class=\"number\">4</span>,</span><br><span class=\"line\">  c: <span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"built_in\">JSON</span>.stringify(json, <span class=\"literal\">null</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">1. proxy </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"keyword\">const</span> negativeArray = <span class=\"function\"><span class=\"params\">els</span> =&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(els, &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span>: (target, propKey, receiver) =&gt;</span><br><span class=\"line\">            Reflect.<span class=\"keyword\">get</span>(</span><br><span class=\"line\">                target,</span><br><span class=\"line\">                +propKey &lt; 0 ? String(target.length + +propKey) : propKey,</span><br><span class=\"line\">                receiver</span><br><span class=\"line\">            )</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">const unicorn = negativeArray([\"京\", \"程\", \"一\", \"灯\"]);</span><br><span class=\"line\">unicorn[-1]; </span><br><span class=\"line\">``` </span><br><span class=\"line\">  </span><br><span class=\"line\">1.  对于 undeclared 变量的引用，浏览器会报引用错误，如 ReferenceError: b is not defined 。</span><br><span class=\"line\">1. Es6-&gt;babel paser-&gt;babel traverse-&gt;babel core</span><br><span class=\"line\">1.  类数组向数组转换 Array.from slice 。 aguments 就是arrarylike   </span><br><span class=\"line\">1.  xhr  </span><br><span class=\"line\">```js</span><br><span class=\"line\"> </span><br><span class=\"line\">var request = new XMLHttpRequest()</span><br><span class=\"line\"> request.open('GET', 'index/a/b/c?name=TianTian', true);</span><br><span class=\"line\"> request.onreadystatechange = function () &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(request.readyState === <span class=\"number\">4</span> &amp;&amp; request.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(request.responseText);</span><br><span class=\"line\">   &#125;&#125;;</span><br><span class=\"line\"> request.send();</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></span><br><span class=\"line\"><span class=\"string\">1. V8 对重复的js代码有优化 即时编译技术，如果发现一段代码经常使用，则不用转字节码 直接执行机器码</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">1. 随机字符串 Math.random().toString(36).substr(2));</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">2. Babel pollyfy 的作用 ：https://zhuanlan.zhihu.com/p/29058936</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">3. Babel stag2 的功能  https://github.com/babel/babel/tree/master/packages/babel-preset-stage-2</span></span><br><span class=\"line\"><span class=\"string\">1. 所有的babel 包  https://github.com/babel/babel/tree/master/packages</span></span><br><span class=\"line\"><span class=\"string\">1. npx babel-upgrade</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">2. ES2019 中为Symbol对象添加了只读属性 description ，该对象返回包含Symbol描述的字符串。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">3. 如果你传的 context 就 null 或者 undefined，那么 window 对象就是默认的 context（严格模式下默认 context 是 undefined）</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">4. ES6 模块功能是它的导入模块是导出时模块的实时只读视图。（相比起 CommonJS，导入的是导出模块的拷贝副本，因此也不是实时的）。只读视图和内存拷贝的区别。</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">5. Broadcast Channel API 允许同一原始域和用户代理下的所有窗口,iFrames 等进行交互。也就是说，如果用户打开了同一个网站的的两个标签窗口，如果网站内容发生了变化，那么两个窗口会同时得到更新通知。</span></span><br><span class=\"line\"><span class=\"string\">6. escape 在处理 0xff 之外字符的时候，是直接使用字符的 unicode 在前面加上一个 「%u」，而encodeURI则是先进行 UTF-8，再在 UTF-8 的每个字节码前加上一个 「%」； 所以通过encodeUrI 可以获取utf-8 字节长度</span></span><br><span class=\"line\"><span class=\"string\">7. js value</span></span><br><span class=\"line\"><span class=\"string\">8. Prototype 包含constructor 和 __proto__. 原型链存储共有的属性和方法，减少内存</span></span><br><span class=\"line\"><span class=\"string\">9.  基本的数据类型 </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>text</span><br><span class=\"line\">基本的数据类型</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"literal\">null</span></span><br><span class=\"line\">string</span><br><span class=\"line\">boolean</span><br><span class=\"line\">number</span><br><span class=\"line\">symbol(ES6)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>navigator.userAgent: 返回当前浏览器的user agent字符串</p>\n</li>\n<li><p>懒加载：<br>Javascript 脚步通常要等到 DOM 加载完后才会执行，如果加载的资源过多，可能会影响网页的正常使用。<br>能够节省流量和减轻服务器压力，更近一步就是能够为公司省成本。</p>\n</li>\n<li><p>Same origin 可以使用broadcast channel 两页面间通信。</p>\n</li>\n<li>注意闭包内this的指向</li>\n<li>对于instanceof,无法判断基本类型，但可以正确判断引用类型</li>\n<li>let x = 2_3333_3333 </li>\n<li><p>哪些操作会造成内存泄漏？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.意外的全局变量</span><br><span class=\"line\">2.被遗忘的计时器或回调函数</span><br><span class=\"line\">3.脱离 DOM 的引用</span><br><span class=\"line\">4.闭包</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Map 对象中的数据是根据用户set 的顺序排序的，object 先排数字开头的。</p>\n</li>\n</ol>\n<h3 id=\"dataStructure\"><a href=\"#dataStructure\" class=\"headerlink\" title=\"dataStructure\"></a>dataStructure</h3><ol>\n<li>BST 查询二叉树<br>若任意节点的左⼦子树不不空，则左⼦子树上所有结点的值均⼩小于它的 根结点的值;<br>若任意节点的右⼦子树不不空，则右⼦子树上所有结点的值均⼤大于它的 根结点的值;<br>任意节点的左、右⼦子树也分别为⼆二叉查找树。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>管道符放到尾部：Hello(?:World|China|) 可以匹配 HelloWorld、HelloChina，也可以只匹配 Hello。<blockquote>\n<p>console.log(‘子君’ instanceof String)  </p>\n</blockquote>\n</li>\n<li><p>prototype</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   function f() &#123;&#125;</span><br><span class=\"line\">var a = f.prototype, b = Object.getPrototypeOf(f);</span><br><span class=\"line\">a === b    </span><br><span class=\"line\">解析：a是构造函数f的原型 ： &#123;constructor: ƒ&#125;</span><br><span class=\"line\">b是实例f的原型对象 ： ƒ () &#123; [native code] &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>webpack hmr</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.当修改了一个或多个文件；</span><br><span class=\"line\">2.文件系统接收更改并通知webpack；</span><br><span class=\"line\">3.webpack重新编译构建一个或多个模块，并通知HMR服务器进行更新；</span><br><span class=\"line\">4.HMR Server 使用webSocket通知HMR runtime 需要更新，HMR运行时通过HTTP请求更新jsonp；</span><br><span class=\"line\">5.HMR运行时替换更新中的模块，如果确定这些模块无法更新，则触发整个页面刷新。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Git submodule </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git submodule init</span><br><span class=\"line\">Submodule &apos;assets&apos; (https://github.com/maonx/vimwiki-assets.git) registered for path &apos;assets&apos;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git submodule add https://github.com/maonx/vimwiki-assets.git assets</span><br><span class=\"line\"></span><br><span class=\"line\">$ git submodule update —remote</span><br></pre></td></tr></table></figure>\n<ol>\n<li>所以函数防抖适用的场景：监听窗口的滚动，缩放。高频发生的一些事件；函数节流适用的场景：涉及与后端交互的按钮，由于网络原因或者其他原因，导致接口没有返回值，用户一直点点点的问题。 </li>\n<li>最优子结构、边界、动态转移方程。动态规划的核心—》从低向上，从而不会像递归那样保留调用栈。</li>\n<li><p>十进制转为 2 进制，除 2 取余，然后余数反向</p>\n<p>十进制转为 2 进制小时，<strong>乘 2 取整</strong></p>\n</li>\n<li><p>in操作符:检测指定对象(右边)原型链上是否有对应的属性值。<br> hasOwnProperty方法:检测指定对象自身上是否有对应的属性值。两者的区别在于in会查找原型链,而hasOwnProperty不会。</p>\n<p>for…in…遍历对象上除了Symbol以外的可枚举属性,包括原型链上的属性。</p>\n<p>Object.keys &amp; Object.assign &amp; JSON.stringify: excluding non-enumerable &amp; <strong>proto</strong></p>\n</li>\n<li><p>堆<br>堆的底层实际上是一棵完全二叉树，可以用数组实现<br>每个的节点元素值不小于其子节点 - 最大堆<br>每个的节点元素值不大于其子节点 - 最小堆</p>\n</li>\n<li><p>浏览器中 customevent</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> event = <span class=\"keyword\">new</span> CustomEvent(<span class=\"string\">\"cat\"</span>, &#123;  <span class=\"attr\">detail</span>: &#123;    <span class=\"attr\">hazcheeseburger</span>: <span class=\"literal\">true</span>  &#125;&#125;);obj.dispatchEvent(event);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行</li>\n<li>Element.getBoundingClientRect() 方法返回元素的大小及其相对于视口的位置。</li>\n<li>regex  y stick 粘连修饰符 </li>\n</ol>\n<p>1.普通函数在被调用时，JS引擎会创建一个栈帧，在里面准备好局部变量、函数参数、临时值、代码执行的位置（也就是说这个函数的第一行对应到代码区里的第几行机器码），在当前栈帧里设置好返回位置，然后将新帧压入栈顶。待函数执行结束后，这个栈帧将被弹出栈然后销毁，返回值会被传给上一个栈帧。</p>\n<p>   当执行到yield语句时，Generator的栈帧同样会被弹出栈外，但Generator在这里耍了个花招——它在堆里保存了栈帧的引用（或拷贝）！这样当iter.next方法被调用时，JS引擎便不会重新创建一个栈帧，而是把堆里的栈帧直接入栈。因为栈帧里保存了函数执行所需的全部上下文以及当前执行的位置，所以当这一切都被恢复如初之时，就好像程序从原本暂停的地方继续向前执行了。</p>\n<pre><code>而因为每次yield和iter.next都对应一次出栈和入栈，所以可以直接利用已有的栈机制，实现值的传出和传入。\n</code></pre><ol>\n<li>Array(10)  稀疏矩阵</li>\n<li><p>clone</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function initData(target) &#123;</span><br><span class=\"line\">  return new target.constructor()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return Object(Symbol.prototype.valueOf.call(targe));</span><br><span class=\"line\"></span><br><span class=\"line\">function cloneReg(targe) &#123;</span><br><span class=\"line\">    const reFlags = /\\w*$/;</span><br><span class=\"line\">    const result = new targe.constructor(targe.source, reFlags.exec(targe));</span><br><span class=\"line\">    result.lastIndex = targe.lastIndex;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```     </span><br><span class=\"line\"></span><br><span class=\"line\">1. js 在底层存储变量的时候，会在变量的机器码的低位1-3位存储其类型信息👉</span><br><span class=\"line\">   </span><br><span class=\"line\">   000：对象</span><br><span class=\"line\">   010：浮点数</span><br><span class=\"line\">   100：字符串</span><br><span class=\"line\">   110：布尔</span><br><span class=\"line\">   1：整数</span><br><span class=\"line\">   </span><br><span class=\"line\">   but, 对于 undefined 和 null 来说，这两个值的信息存储是有点特殊的。</span><br><span class=\"line\">   </span><br><span class=\"line\">   null：所有机器码均为0</span><br><span class=\"line\">   </span><br><span class=\"line\">   undefined：用 −2^30 整数来表示</span><br><span class=\"line\"></span><br><span class=\"line\">1. console 分组</span><br><span class=\"line\">```javascript</span><br><span class=\"line\">console.group(&apos;action&apos;, &apos;A&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;%c prev state&apos;, &quot;color: #dddddd&quot;, &apos;\\n&apos;, &#123;</span><br><span class=\"line\">    name: &apos;a&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(&apos;%c next state&apos;, &quot;color: #dddddd&quot;, &apos;\\n&apos;,  &#123;</span><br><span class=\"line\">    name: &apos;b&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.groupCollapsed();</span><br><span class=\"line\">console.log(&apos;我是group折叠内容&apos;);</span><br><span class=\"line\">console.groupEnd();</span><br><span class=\"line\">console.groupEnd();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object.create(null) 和 {}</p>\n</li>\n<li><p>每次JavaScript对DOM的操作都会改变当前页面的呈现，并重新刷新整个页面，从而消耗了大量的时间。而createDocumentFragment()的作用，就是可以创建一个文档碎片，<br>把所有的新节点附加其上，然后把文档碎片的内容一次性添加到document中。</p>\n</li>\n<li><p>indexedDB 的特点：存储空间大：存储空间可以达到几百兆甚至更多；</p>\n<pre><code>&gt;&gt; 支持二进制存储：它不仅可以存储字符串，而且还可以存储二进制数据；\n&gt;&gt; IndexedDB 有同源限制，每一个数据库只能在自身域名下能访问，不能跨域名访问；\n&gt;&gt; 支持事务型：IndexedDB 执行的操作会按照事务来分组的，在一个事务中，要么所有的操作都成功，要么所有的操作都失败；\n&gt;&gt; 键值对存储：IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以 “键值对” 的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误。\n&gt;&gt; 数据操作是异步的：使用 IndexedDB 执行的操作是异步执行的，以免阻塞应用程序。\n</code></pre></li>\n<li>Usecapture:<br>true - 事件句柄在捕获阶段执行。事件捕获从父到子。<br>false- false- 默认。事件句柄在冒泡阶段执行</li>\n<li>浏览器标签页被隐藏或显示的时候会触发visibilitychange事件. document.addEventListener(‘visibilitychange’)</li>\n<li>Object.assign 继承的否Object.keys &amp; Object.assign &amp; JSON.stringify: excluding non-enumerable &amp; <strong>proto</strong></li>\n<li>let is not global while var is.</li>\n<li><p>download</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">download</span> (<span class=\"params\">url, name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">  a.download = name</span><br><span class=\"line\">  a.rel = <span class=\"string\">'noopener'</span></span><br><span class=\"line\">  a.href = url</span><br><span class=\"line\">  <span class=\"comment\">// 触发模拟点击</span></span><br><span class=\"line\">  a.dispatchEvent(<span class=\"keyword\">new</span> MouseEvent(<span class=\"string\">'click'</span>))</span><br><span class=\"line\">  <span class=\"comment\">// 或者 a.click()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方案一：Text -&gt; DataURL</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dataUrl = <span class=\"string\">`data:,<span class=\"subst\">$&#123;str&#125;</span>`</span></span><br><span class=\"line\">download(dataUrl, <span class=\"string\">'demo.json'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方案二：Text -&gt; Blob -&gt; ObjectURL</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url = URL.createObjectURL(<span class=\"keyword\">new</span> Blob(str.split(<span class=\"string\">''</span>)))</span><br><span class=\"line\">download(url, <span class=\"string\">'demo1.json'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\">1. stringfy 格式化</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> json = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">3</span>,</span><br><span class=\"line\">  b: <span class=\"number\">4</span>,</span><br><span class=\"line\">  c: <span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"built_in\">JSON</span>.stringify(json, <span class=\"literal\">null</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">1. proxy </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"keyword\">const</span> negativeArray = <span class=\"function\"><span class=\"params\">els</span> =&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(els, &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span>: (target, propKey, receiver) =&gt;</span><br><span class=\"line\">            Reflect.<span class=\"keyword\">get</span>(</span><br><span class=\"line\">                target,</span><br><span class=\"line\">                +propKey &lt; 0 ? String(target.length + +propKey) : propKey,</span><br><span class=\"line\">                receiver</span><br><span class=\"line\">            )</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">const unicorn = negativeArray([\"京\", \"程\", \"一\", \"灯\"]);</span><br><span class=\"line\">unicorn[-1]; </span><br><span class=\"line\">``` </span><br><span class=\"line\">  </span><br><span class=\"line\">1.  对于 undeclared 变量的引用，浏览器会报引用错误，如 ReferenceError: b is not defined 。</span><br><span class=\"line\">1. Es6-&gt;babel paser-&gt;babel traverse-&gt;babel core</span><br><span class=\"line\">1.  类数组向数组转换 Array.from slice 。 aguments 就是arrarylike   </span><br><span class=\"line\">1.  xhr  </span><br><span class=\"line\">```js</span><br><span class=\"line\"> </span><br><span class=\"line\">var request = new XMLHttpRequest()</span><br><span class=\"line\"> request.open('GET', 'index/a/b/c?name=TianTian', true);</span><br><span class=\"line\"> request.onreadystatechange = function () &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(request.readyState === <span class=\"number\">4</span> &amp;&amp; request.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(request.responseText);</span><br><span class=\"line\">   &#125;&#125;;</span><br><span class=\"line\"> request.send();</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></span><br><span class=\"line\"><span class=\"string\">1. V8 对重复的js代码有优化 即时编译技术，如果发现一段代码经常使用，则不用转字节码 直接执行机器码</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">1. 随机字符串 Math.random().toString(36).substr(2));</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">2. Babel pollyfy 的作用 ：https://zhuanlan.zhihu.com/p/29058936</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">3. Babel stag2 的功能  https://github.com/babel/babel/tree/master/packages/babel-preset-stage-2</span></span><br><span class=\"line\"><span class=\"string\">1. 所有的babel 包  https://github.com/babel/babel/tree/master/packages</span></span><br><span class=\"line\"><span class=\"string\">1. npx babel-upgrade</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">2. ES2019 中为Symbol对象添加了只读属性 description ，该对象返回包含Symbol描述的字符串。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">3. 如果你传的 context 就 null 或者 undefined，那么 window 对象就是默认的 context（严格模式下默认 context 是 undefined）</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">4. ES6 模块功能是它的导入模块是导出时模块的实时只读视图。（相比起 CommonJS，导入的是导出模块的拷贝副本，因此也不是实时的）。只读视图和内存拷贝的区别。</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">5. Broadcast Channel API 允许同一原始域和用户代理下的所有窗口,iFrames 等进行交互。也就是说，如果用户打开了同一个网站的的两个标签窗口，如果网站内容发生了变化，那么两个窗口会同时得到更新通知。</span></span><br><span class=\"line\"><span class=\"string\">6. escape 在处理 0xff 之外字符的时候，是直接使用字符的 unicode 在前面加上一个 「%u」，而encodeURI则是先进行 UTF-8，再在 UTF-8 的每个字节码前加上一个 「%」； 所以通过encodeUrI 可以获取utf-8 字节长度</span></span><br><span class=\"line\"><span class=\"string\">7. js value</span></span><br><span class=\"line\"><span class=\"string\">8. Prototype 包含constructor 和 __proto__. 原型链存储共有的属性和方法，减少内存</span></span><br><span class=\"line\"><span class=\"string\">9.  基本的数据类型 </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>text</span><br><span class=\"line\">基本的数据类型</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"literal\">null</span></span><br><span class=\"line\">string</span><br><span class=\"line\">boolean</span><br><span class=\"line\">number</span><br><span class=\"line\">symbol(ES6)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>navigator.userAgent: 返回当前浏览器的user agent字符串</p>\n</li>\n<li><p>懒加载：<br>Javascript 脚步通常要等到 DOM 加载完后才会执行，如果加载的资源过多，可能会影响网页的正常使用。<br>能够节省流量和减轻服务器压力，更近一步就是能够为公司省成本。</p>\n</li>\n<li><p>Same origin 可以使用broadcast channel 两页面间通信。</p>\n</li>\n<li>注意闭包内this的指向</li>\n<li>对于instanceof,无法判断基本类型，但可以正确判断引用类型</li>\n<li>let x = 2_3333_3333 </li>\n<li><p>哪些操作会造成内存泄漏？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.意外的全局变量</span><br><span class=\"line\">2.被遗忘的计时器或回调函数</span><br><span class=\"line\">3.脱离 DOM 的引用</span><br><span class=\"line\">4.闭包</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Map 对象中的数据是根据用户set 的顺序排序的，object 先排数字开头的。</p>\n</li>\n</ol>\n<h3 id=\"dataStructure\"><a href=\"#dataStructure\" class=\"headerlink\" title=\"dataStructure\"></a>dataStructure</h3><ol>\n<li>BST 查询二叉树<br>若任意节点的左⼦子树不不空，则左⼦子树上所有结点的值均⼩小于它的 根结点的值;<br>若任意节点的右⼦子树不不空，则右⼦子树上所有结点的值均⼤大于它的 根结点的值;<br>任意节点的左、右⼦子树也分别为⼆二叉查找树。</li>\n</ol>\n"},{"title":"linux","date":"2019-07-02T03:39:34.000Z","_content":"\n### command\n1. Linux touch 命令用于修改文件或者目录的时间属性,包括存取时间和更改时间。若文件不存在,系统会建立一个新的文件。\n\n1. which 指令会在环境变量\\$PATH 设置的目录里查找符合条件的文件。\n   \n1. \n\n```\n二层负载均衡会通过一个虚拟 MAC 地址接收请求，然后再分配到真实的 MAC 地址；\n三层负载均衡会通过一个虚拟 IP 地址接收请求，然后再分配到真实的 IP 地址；\n四层通过虚拟 IP + 端口接收请求，然后再分配到真实的服务器；\n七层通过虚拟的 URL 或主机名接收请求，然后再分配到真实的服务器。\n```\n1. 本地盘 NVMe：相较于本地盘 SSD，提供更高的IOPS, 目前只支持大规格的实例类型。SSD 云盘：相较于本地盘，更灵活的存储空间，并且支持数据加密，更安全。","source":"_posts/linux.md","raw":"---\ntitle: linux\ndate: 2019-07-02 11:39:34\ntags: ops\n---\n\n### command\n1. Linux touch 命令用于修改文件或者目录的时间属性,包括存取时间和更改时间。若文件不存在,系统会建立一个新的文件。\n\n1. which 指令会在环境变量\\$PATH 设置的目录里查找符合条件的文件。\n   \n1. \n\n```\n二层负载均衡会通过一个虚拟 MAC 地址接收请求，然后再分配到真实的 MAC 地址；\n三层负载均衡会通过一个虚拟 IP 地址接收请求，然后再分配到真实的 IP 地址；\n四层通过虚拟 IP + 端口接收请求，然后再分配到真实的服务器；\n七层通过虚拟的 URL 或主机名接收请求，然后再分配到真实的服务器。\n```\n1. 本地盘 NVMe：相较于本地盘 SSD，提供更高的IOPS, 目前只支持大规格的实例类型。SSD 云盘：相较于本地盘，更灵活的存储空间，并且支持数据加密，更安全。","slug":"linux","published":1,"updated":"2021-12-22T13:08:52.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5se00001cyy8kexq6tpd4","content":"<h3 id=\"command\"><a href=\"#command\" class=\"headerlink\" title=\"command\"></a>command</h3><ol>\n<li><p>Linux touch 命令用于修改文件或者目录的时间属性,包括存取时间和更改时间。若文件不存在,系统会建立一个新的文件。</p>\n</li>\n<li><p>which 指令会在环境变量\\$PATH 设置的目录里查找符合条件的文件。</p>\n</li>\n<li></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">二层负载均衡会通过一个虚拟 MAC 地址接收请求，然后再分配到真实的 MAC 地址；</span><br><span class=\"line\">三层负载均衡会通过一个虚拟 IP 地址接收请求，然后再分配到真实的 IP 地址；</span><br><span class=\"line\">四层通过虚拟 IP + 端口接收请求，然后再分配到真实的服务器；</span><br><span class=\"line\">七层通过虚拟的 URL 或主机名接收请求，然后再分配到真实的服务器。</span><br></pre></td></tr></table></figure>\n<ol>\n<li>本地盘 NVMe：相较于本地盘 SSD，提供更高的IOPS, 目前只支持大规格的实例类型。SSD 云盘：相较于本地盘，更灵活的存储空间，并且支持数据加密，更安全。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"command\"><a href=\"#command\" class=\"headerlink\" title=\"command\"></a>command</h3><ol>\n<li><p>Linux touch 命令用于修改文件或者目录的时间属性,包括存取时间和更改时间。若文件不存在,系统会建立一个新的文件。</p>\n</li>\n<li><p>which 指令会在环境变量\\$PATH 设置的目录里查找符合条件的文件。</p>\n</li>\n<li></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">二层负载均衡会通过一个虚拟 MAC 地址接收请求，然后再分配到真实的 MAC 地址；</span><br><span class=\"line\">三层负载均衡会通过一个虚拟 IP 地址接收请求，然后再分配到真实的 IP 地址；</span><br><span class=\"line\">四层通过虚拟 IP + 端口接收请求，然后再分配到真实的服务器；</span><br><span class=\"line\">七层通过虚拟的 URL 或主机名接收请求，然后再分配到真实的服务器。</span><br></pre></td></tr></table></figure>\n<ol>\n<li>本地盘 NVMe：相较于本地盘 SSD，提供更高的IOPS, 目前只支持大规格的实例类型。SSD 云盘：相较于本地盘，更灵活的存储空间，并且支持数据加密，更安全。</li>\n</ol>\n"},{"title":"node","date":"2020-08-13T08:18:08.000Z","_content":"1.  V8 浏览器会自动执行垃圾回收，但由于 JavaScript 也是运行在主线程上的，一旦执行垃圾回收，就要打断 JavaScript 的运行，可能会或多或少的造成页面的卡顿，影响用户体验，所以 V8 决定采用增量 标记算法回收：\n   即把垃圾回收拆成一个个小任务，穿插在 JavaScript 中执行。\n1. Node 高消耗任务：1. Regex 2. 加密、压缩、fs 同步操作 3.json.stringfy\n1. epoll是event poll的简写，是Linux内核提供的一种由事件驱动的I/O通知机制。\n1. 对第三方包和库做检测：NSP(Node Security Platform)\n1. V8 机器码的体积要比字节码大的多，执行频率高的为热点代码，启动编译器进行编译，其它的解释器执行\n1. Resovle 的任务进入微任务队列，暂停当前的协程，回到父协程\n1. Npm ^ 限定minor 版本 ~限定patch 版本\n1. Stream cork uncork\n1. escape-html  This function will escape the following characters: \", ', &, <, and >.\n1. domain模块，把处理多个不同的IO的操作作为一个组。注册事件和回调到domain，当发生一个错误事件或抛出一个错误时，domain对象会被通知，不会丢失上下文环境，也不导致程序错误立即退出，与process.on('uncaughtException')不同。\n1. stream tranform\n```text\nconst { Transform } = require('stream');\n\nconst myTransform = new Transform({\n  transform(chunk, encoding, callback) {\n    // ...\n  }\n});\n```\n1. 可以引入corejs实现feature\n1. 性能分析\nNode 性能分析，抓取火焰图 node --inspect app.js\nNode  --prof-process  https://github.com/nswbmw/node-in-debugging/blob/master/1.3%20Tick%20Processor.md\n \n1. 一个promise类 \n```javascript\nclass Sleep {\nthen(resolve, reject){\n\n}\n}\n```\n1. Node 内置了pipeline  const { pipeline } = require('stream');\n1. Elastic APM 是 Elastic 公司开源的一款 APM 工具\n1. Error.prepareStackTrace:定制化堆栈信息    Error.captureStackTrace:隐藏内部的实现细节，优化错误栈。\n1. const { EventEmitter } = require('events’);  EventEmitter 的继承\n1. Require.resovle() 获取模块的绝对路径  \n1. peerDependencies 相关模块安装\n1. websocket \n1. cors 新浏览器\nSameSite=Strict: The cookie is only sent if you are currently on the site that the cookie is set for. If you are on a different site and you click a link to a site that the cookie is set for, the cookie is not sent with the first request.\n1. 主垃圾回收器：\n   \n   主垃圾回收器主要负责老生区中的垃圾回收。\n   \n   除了新生区中晋升的对象，一些大的对象会直接被分配到老生区。\n   \n   因此老生区中的对象有两个特点，一个是对象占用空间大，另一个是对象存活时间长。\n   \n1. V8 中会把堆分为新生代和老生代两个区域，\n   \n   新生代中存放的是生存时间短的对象，\n   \n   老生代中存放的生存时间久的对象。\n   \n   垃圾回收重要术语：\n   \n   代际假说\n   大部分对象在内存中存在的时间很短\n   不死的对象，会活得更久\n   分代收集\n   副垃圾回收器：\n   \n   主要负责新生代的垃圾回收。\n   \n   这个区域不大，但是垃圾回收比较频繁。\n   \n   新生代的垃圾回收算法是 Scavenge 算法。\n   \n   主要把新生代空间对半划分为两个区域：对象区域，空闲区域。\n   \n   当对象区域快被写满时，则会进行一次垃圾清理。\n   \n\n\n```text\nWebSocket 使用了自定义的二进制分帧格式，把每个应用消息切分成一或多个帧，发送到目的地之后再组装起来，等到接收到完整的消息后再通知接收端。基本的成帧协议定义了帧类型有操作码、有效载荷的长度，指定位置的Extension data和Application data，统称为Payload data，保留了一些特殊位和操作码供后期扩展。在打开握手完成后，终端发送一个关闭帧之前的任何时间里，数据帧可能由客户端或服务器的任何一方发送。\n\n• 帧：最小的通信单位，包含可变长度的帧首部和净荷部分，净荷可能包含完整或部分应用消息。\n• 消息：一系列帧，与应用消息对等。\n```\n1. jwt 签名算法\n```text\nHS256 使用密钥生成固定的签名，RS256 使用成非对称进行签名。简单地说，HS256 必须与任何想要验证 JWT的 客户端或 API 共享秘密。\nRS256 生成非对称签名，这意味着必须使用私钥来签签名 JWT，并且必须使用对应的公钥来验证签名。与对称算法不同，使用 RS256 可以保证服务端是 JWT 的签名者，因为服务端是唯一拥有私钥的一方。这样做将不再需要在许多应用程序之间共享私钥\n\n这种方法可以让我们分离开签发与验证，签发时需要用一个密钥，验证时使用公钥，也就是有公钥的地方只能做验证，但不能签发 JWT。\n```\n### egg\n1. 启动顺序\n```text\nMaster 启动后先 fork Agent 进程\nAgent 初始化成功后，通过 IPC 通道通知 Master\nMaster 再 fork 多个 App Worker\nApp Worker 初始化成功，通知 Master\n所有的进程初始化成功后，Master 通知 Agent 和 Worker 应用启动成功\n```","source":"_posts/node.md","raw":"---\ntitle: node\ndate: 2020-08-13 16:18:08\ntags: node、egg \n---\n1.  V8 浏览器会自动执行垃圾回收，但由于 JavaScript 也是运行在主线程上的，一旦执行垃圾回收，就要打断 JavaScript 的运行，可能会或多或少的造成页面的卡顿，影响用户体验，所以 V8 决定采用增量 标记算法回收：\n   即把垃圾回收拆成一个个小任务，穿插在 JavaScript 中执行。\n1. Node 高消耗任务：1. Regex 2. 加密、压缩、fs 同步操作 3.json.stringfy\n1. epoll是event poll的简写，是Linux内核提供的一种由事件驱动的I/O通知机制。\n1. 对第三方包和库做检测：NSP(Node Security Platform)\n1. V8 机器码的体积要比字节码大的多，执行频率高的为热点代码，启动编译器进行编译，其它的解释器执行\n1. Resovle 的任务进入微任务队列，暂停当前的协程，回到父协程\n1. Npm ^ 限定minor 版本 ~限定patch 版本\n1. Stream cork uncork\n1. escape-html  This function will escape the following characters: \", ', &, <, and >.\n1. domain模块，把处理多个不同的IO的操作作为一个组。注册事件和回调到domain，当发生一个错误事件或抛出一个错误时，domain对象会被通知，不会丢失上下文环境，也不导致程序错误立即退出，与process.on('uncaughtException')不同。\n1. stream tranform\n```text\nconst { Transform } = require('stream');\n\nconst myTransform = new Transform({\n  transform(chunk, encoding, callback) {\n    // ...\n  }\n});\n```\n1. 可以引入corejs实现feature\n1. 性能分析\nNode 性能分析，抓取火焰图 node --inspect app.js\nNode  --prof-process  https://github.com/nswbmw/node-in-debugging/blob/master/1.3%20Tick%20Processor.md\n \n1. 一个promise类 \n```javascript\nclass Sleep {\nthen(resolve, reject){\n\n}\n}\n```\n1. Node 内置了pipeline  const { pipeline } = require('stream');\n1. Elastic APM 是 Elastic 公司开源的一款 APM 工具\n1. Error.prepareStackTrace:定制化堆栈信息    Error.captureStackTrace:隐藏内部的实现细节，优化错误栈。\n1. const { EventEmitter } = require('events’);  EventEmitter 的继承\n1. Require.resovle() 获取模块的绝对路径  \n1. peerDependencies 相关模块安装\n1. websocket \n1. cors 新浏览器\nSameSite=Strict: The cookie is only sent if you are currently on the site that the cookie is set for. If you are on a different site and you click a link to a site that the cookie is set for, the cookie is not sent with the first request.\n1. 主垃圾回收器：\n   \n   主垃圾回收器主要负责老生区中的垃圾回收。\n   \n   除了新生区中晋升的对象，一些大的对象会直接被分配到老生区。\n   \n   因此老生区中的对象有两个特点，一个是对象占用空间大，另一个是对象存活时间长。\n   \n1. V8 中会把堆分为新生代和老生代两个区域，\n   \n   新生代中存放的是生存时间短的对象，\n   \n   老生代中存放的生存时间久的对象。\n   \n   垃圾回收重要术语：\n   \n   代际假说\n   大部分对象在内存中存在的时间很短\n   不死的对象，会活得更久\n   分代收集\n   副垃圾回收器：\n   \n   主要负责新生代的垃圾回收。\n   \n   这个区域不大，但是垃圾回收比较频繁。\n   \n   新生代的垃圾回收算法是 Scavenge 算法。\n   \n   主要把新生代空间对半划分为两个区域：对象区域，空闲区域。\n   \n   当对象区域快被写满时，则会进行一次垃圾清理。\n   \n\n\n```text\nWebSocket 使用了自定义的二进制分帧格式，把每个应用消息切分成一或多个帧，发送到目的地之后再组装起来，等到接收到完整的消息后再通知接收端。基本的成帧协议定义了帧类型有操作码、有效载荷的长度，指定位置的Extension data和Application data，统称为Payload data，保留了一些特殊位和操作码供后期扩展。在打开握手完成后，终端发送一个关闭帧之前的任何时间里，数据帧可能由客户端或服务器的任何一方发送。\n\n• 帧：最小的通信单位，包含可变长度的帧首部和净荷部分，净荷可能包含完整或部分应用消息。\n• 消息：一系列帧，与应用消息对等。\n```\n1. jwt 签名算法\n```text\nHS256 使用密钥生成固定的签名，RS256 使用成非对称进行签名。简单地说，HS256 必须与任何想要验证 JWT的 客户端或 API 共享秘密。\nRS256 生成非对称签名，这意味着必须使用私钥来签签名 JWT，并且必须使用对应的公钥来验证签名。与对称算法不同，使用 RS256 可以保证服务端是 JWT 的签名者，因为服务端是唯一拥有私钥的一方。这样做将不再需要在许多应用程序之间共享私钥\n\n这种方法可以让我们分离开签发与验证，签发时需要用一个密钥，验证时使用公钥，也就是有公钥的地方只能做验证，但不能签发 JWT。\n```\n### egg\n1. 启动顺序\n```text\nMaster 启动后先 fork Agent 进程\nAgent 初始化成功后，通过 IPC 通道通知 Master\nMaster 再 fork 多个 App Worker\nApp Worker 初始化成功，通知 Master\n所有的进程初始化成功后，Master 通知 Agent 和 Worker 应用启动成功\n```","slug":"node","published":1,"updated":"2020-08-13T09:48:53.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5se01001dyy8kqqgbzys3","content":"<ol>\n<li>V8 浏览器会自动执行垃圾回收，但由于 JavaScript 也是运行在主线程上的，一旦执行垃圾回收，就要打断 JavaScript 的运行，可能会或多或少的造成页面的卡顿，影响用户体验，所以 V8 决定采用增量 标记算法回收：<br>即把垃圾回收拆成一个个小任务，穿插在 JavaScript 中执行。</li>\n<li>Node 高消耗任务：1. Regex 2. 加密、压缩、fs 同步操作 3.json.stringfy</li>\n<li>epoll是event poll的简写，是Linux内核提供的一种由事件驱动的I/O通知机制。</li>\n<li>对第三方包和库做检测：NSP(Node Security Platform)</li>\n<li>V8 机器码的体积要比字节码大的多，执行频率高的为热点代码，启动编译器进行编译，其它的解释器执行</li>\n<li>Resovle 的任务进入微任务队列，暂停当前的协程，回到父协程</li>\n<li>Npm ^ 限定minor 版本 ~限定patch 版本</li>\n<li>Stream cork uncork</li>\n<li>escape-html  This function will escape the following characters: “, ‘, &amp;, &lt;, and &gt;.</li>\n<li>domain模块，把处理多个不同的IO的操作作为一个组。注册事件和回调到domain，当发生一个错误事件或抛出一个错误时，domain对象会被通知，不会丢失上下文环境，也不导致程序错误立即退出，与process.on(‘uncaughtException’)不同。</li>\n<li><p>stream tranform</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; Transform &#125; = require(&apos;stream&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const myTransform = new Transform(&#123;</span><br><span class=\"line\">  transform(chunk, encoding, callback) &#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以引入corejs实现feature</p>\n</li>\n<li><p>性能分析<br>Node 性能分析，抓取火焰图 node –inspect app.js<br>Node  –prof-process  <a href=\"https://github.com/nswbmw/node-in-debugging/blob/master/1.3%20Tick%20Processor.md\" target=\"_blank\" rel=\"noopener\">https://github.com/nswbmw/node-in-debugging/blob/master/1.3%20Tick%20Processor.md</a></p>\n</li>\n<li><p>一个promise类 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sleep</span> </span>&#123;</span><br><span class=\"line\">then(resolve, reject)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Node 内置了pipeline  const { pipeline } = require(‘stream’);</p>\n</li>\n<li>Elastic APM 是 Elastic 公司开源的一款 APM 工具</li>\n<li>Error.prepareStackTrace:定制化堆栈信息    Error.captureStackTrace:隐藏内部的实现细节，优化错误栈。</li>\n<li>const { EventEmitter } = require(‘events’);  EventEmitter 的继承</li>\n<li>Require.resovle() 获取模块的绝对路径  </li>\n<li>peerDependencies 相关模块安装</li>\n<li>websocket </li>\n<li>cors 新浏览器<br>SameSite=Strict: The cookie is only sent if you are currently on the site that the cookie is set for. If you are on a different site and you click a link to a site that the cookie is set for, the cookie is not sent with the first request.</li>\n<li><p>主垃圾回收器：</p>\n<p>主垃圾回收器主要负责老生区中的垃圾回收。</p>\n<p>除了新生区中晋升的对象，一些大的对象会直接被分配到老生区。</p>\n<p>因此老生区中的对象有两个特点，一个是对象占用空间大，另一个是对象存活时间长。</p>\n</li>\n<li><p>V8 中会把堆分为新生代和老生代两个区域，</p>\n<p>新生代中存放的是生存时间短的对象，</p>\n<p>老生代中存放的生存时间久的对象。</p>\n<p>垃圾回收重要术语：</p>\n<p>代际假说<br>大部分对象在内存中存在的时间很短<br>不死的对象，会活得更久<br>分代收集<br>副垃圾回收器：</p>\n<p>主要负责新生代的垃圾回收。</p>\n<p>这个区域不大，但是垃圾回收比较频繁。</p>\n<p>新生代的垃圾回收算法是 Scavenge 算法。</p>\n<p>主要把新生代空间对半划分为两个区域：对象区域，空闲区域。</p>\n<p>当对象区域快被写满时，则会进行一次垃圾清理。</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebSocket 使用了自定义的二进制分帧格式，把每个应用消息切分成一或多个帧，发送到目的地之后再组装起来，等到接收到完整的消息后再通知接收端。基本的成帧协议定义了帧类型有操作码、有效载荷的长度，指定位置的Extension data和Application data，统称为Payload data，保留了一些特殊位和操作码供后期扩展。在打开握手完成后，终端发送一个关闭帧之前的任何时间里，数据帧可能由客户端或服务器的任何一方发送。</span><br><span class=\"line\"></span><br><span class=\"line\">• 帧：最小的通信单位，包含可变长度的帧首部和净荷部分，净荷可能包含完整或部分应用消息。</span><br><span class=\"line\">• 消息：一系列帧，与应用消息对等。</span><br></pre></td></tr></table></figure>\n<ol>\n<li>jwt 签名算法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HS256 使用密钥生成固定的签名，RS256 使用成非对称进行签名。简单地说，HS256 必须与任何想要验证 JWT的 客户端或 API 共享秘密。</span><br><span class=\"line\">RS256 生成非对称签名，这意味着必须使用私钥来签签名 JWT，并且必须使用对应的公钥来验证签名。与对称算法不同，使用 RS256 可以保证服务端是 JWT 的签名者，因为服务端是唯一拥有私钥的一方。这样做将不再需要在许多应用程序之间共享私钥</span><br><span class=\"line\"></span><br><span class=\"line\">这种方法可以让我们分离开签发与验证，签发时需要用一个密钥，验证时使用公钥，也就是有公钥的地方只能做验证，但不能签发 JWT。</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"egg\"><a href=\"#egg\" class=\"headerlink\" title=\"egg\"></a>egg</h3><ol>\n<li>启动顺序<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Master 启动后先 fork Agent 进程</span><br><span class=\"line\">Agent 初始化成功后，通过 IPC 通道通知 Master</span><br><span class=\"line\">Master 再 fork 多个 App Worker</span><br><span class=\"line\">App Worker 初始化成功，通知 Master</span><br><span class=\"line\">所有的进程初始化成功后，Master 通知 Agent 和 Worker 应用启动成功</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>V8 浏览器会自动执行垃圾回收，但由于 JavaScript 也是运行在主线程上的，一旦执行垃圾回收，就要打断 JavaScript 的运行，可能会或多或少的造成页面的卡顿，影响用户体验，所以 V8 决定采用增量 标记算法回收：<br>即把垃圾回收拆成一个个小任务，穿插在 JavaScript 中执行。</li>\n<li>Node 高消耗任务：1. Regex 2. 加密、压缩、fs 同步操作 3.json.stringfy</li>\n<li>epoll是event poll的简写，是Linux内核提供的一种由事件驱动的I/O通知机制。</li>\n<li>对第三方包和库做检测：NSP(Node Security Platform)</li>\n<li>V8 机器码的体积要比字节码大的多，执行频率高的为热点代码，启动编译器进行编译，其它的解释器执行</li>\n<li>Resovle 的任务进入微任务队列，暂停当前的协程，回到父协程</li>\n<li>Npm ^ 限定minor 版本 ~限定patch 版本</li>\n<li>Stream cork uncork</li>\n<li>escape-html  This function will escape the following characters: “, ‘, &amp;, &lt;, and &gt;.</li>\n<li>domain模块，把处理多个不同的IO的操作作为一个组。注册事件和回调到domain，当发生一个错误事件或抛出一个错误时，domain对象会被通知，不会丢失上下文环境，也不导致程序错误立即退出，与process.on(‘uncaughtException’)不同。</li>\n<li><p>stream tranform</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; Transform &#125; = require(&apos;stream&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const myTransform = new Transform(&#123;</span><br><span class=\"line\">  transform(chunk, encoding, callback) &#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以引入corejs实现feature</p>\n</li>\n<li><p>性能分析<br>Node 性能分析，抓取火焰图 node –inspect app.js<br>Node  –prof-process  <a href=\"https://github.com/nswbmw/node-in-debugging/blob/master/1.3%20Tick%20Processor.md\" target=\"_blank\" rel=\"noopener\">https://github.com/nswbmw/node-in-debugging/blob/master/1.3%20Tick%20Processor.md</a></p>\n</li>\n<li><p>一个promise类 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sleep</span> </span>&#123;</span><br><span class=\"line\">then(resolve, reject)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Node 内置了pipeline  const { pipeline } = require(‘stream’);</p>\n</li>\n<li>Elastic APM 是 Elastic 公司开源的一款 APM 工具</li>\n<li>Error.prepareStackTrace:定制化堆栈信息    Error.captureStackTrace:隐藏内部的实现细节，优化错误栈。</li>\n<li>const { EventEmitter } = require(‘events’);  EventEmitter 的继承</li>\n<li>Require.resovle() 获取模块的绝对路径  </li>\n<li>peerDependencies 相关模块安装</li>\n<li>websocket </li>\n<li>cors 新浏览器<br>SameSite=Strict: The cookie is only sent if you are currently on the site that the cookie is set for. If you are on a different site and you click a link to a site that the cookie is set for, the cookie is not sent with the first request.</li>\n<li><p>主垃圾回收器：</p>\n<p>主垃圾回收器主要负责老生区中的垃圾回收。</p>\n<p>除了新生区中晋升的对象，一些大的对象会直接被分配到老生区。</p>\n<p>因此老生区中的对象有两个特点，一个是对象占用空间大，另一个是对象存活时间长。</p>\n</li>\n<li><p>V8 中会把堆分为新生代和老生代两个区域，</p>\n<p>新生代中存放的是生存时间短的对象，</p>\n<p>老生代中存放的生存时间久的对象。</p>\n<p>垃圾回收重要术语：</p>\n<p>代际假说<br>大部分对象在内存中存在的时间很短<br>不死的对象，会活得更久<br>分代收集<br>副垃圾回收器：</p>\n<p>主要负责新生代的垃圾回收。</p>\n<p>这个区域不大，但是垃圾回收比较频繁。</p>\n<p>新生代的垃圾回收算法是 Scavenge 算法。</p>\n<p>主要把新生代空间对半划分为两个区域：对象区域，空闲区域。</p>\n<p>当对象区域快被写满时，则会进行一次垃圾清理。</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebSocket 使用了自定义的二进制分帧格式，把每个应用消息切分成一或多个帧，发送到目的地之后再组装起来，等到接收到完整的消息后再通知接收端。基本的成帧协议定义了帧类型有操作码、有效载荷的长度，指定位置的Extension data和Application data，统称为Payload data，保留了一些特殊位和操作码供后期扩展。在打开握手完成后，终端发送一个关闭帧之前的任何时间里，数据帧可能由客户端或服务器的任何一方发送。</span><br><span class=\"line\"></span><br><span class=\"line\">• 帧：最小的通信单位，包含可变长度的帧首部和净荷部分，净荷可能包含完整或部分应用消息。</span><br><span class=\"line\">• 消息：一系列帧，与应用消息对等。</span><br></pre></td></tr></table></figure>\n<ol>\n<li>jwt 签名算法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HS256 使用密钥生成固定的签名，RS256 使用成非对称进行签名。简单地说，HS256 必须与任何想要验证 JWT的 客户端或 API 共享秘密。</span><br><span class=\"line\">RS256 生成非对称签名，这意味着必须使用私钥来签签名 JWT，并且必须使用对应的公钥来验证签名。与对称算法不同，使用 RS256 可以保证服务端是 JWT 的签名者，因为服务端是唯一拥有私钥的一方。这样做将不再需要在许多应用程序之间共享私钥</span><br><span class=\"line\"></span><br><span class=\"line\">这种方法可以让我们分离开签发与验证，签发时需要用一个密钥，验证时使用公钥，也就是有公钥的地方只能做验证，但不能签发 JWT。</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"egg\"><a href=\"#egg\" class=\"headerlink\" title=\"egg\"></a>egg</h3><ol>\n<li>启动顺序<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Master 启动后先 fork Agent 进程</span><br><span class=\"line\">Agent 初始化成功后，通过 IPC 通道通知 Master</span><br><span class=\"line\">Master 再 fork 多个 App Worker</span><br><span class=\"line\">App Worker 初始化成功，通知 Master</span><br><span class=\"line\">所有的进程初始化成功后，Master 通知 Agent 和 Worker 应用启动成功</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"overview","date":"2021-12-13T09:38:48.000Z","_content":"1. tidb\n```\nTidb\n\n* 一键水平扩缩容得益于 TiDB 存储计算分离的架构的设计，可按需对计算、存储分别进行在线扩容或者缩容，扩容或者缩容过程中对应用运维人员透明。\n* 金融级高可用数据采用多副本存储，数据副本通过 Multi-Raft 协议同步事务日志，多数派写入成功事务才能提交，确保数据强一致性且少数副本发生故障时不影响数据的可用性。可按需配置副本地理位置、副本数量等策略，满足不同容灾级别的要求。\n* 实时 HTAP提供行存储引擎 TiKV、列存储引擎 TiFlash 两款存储引擎，TiFlash 通过 Multi-Raft Learner 协议实时从 TiKV 复制数据，确保行存储引擎 TiKV 和列存储引擎 TiFlash 之间的数据强一致。TiKV、TiFlash 可按需部署在不同的机器，解决 HTAP 资源隔离的问题。\n* 云原生的分布式数据库专为云而设计的分布式数据库，通过 TiDB Operator 可在公有云、私有云、混合云中实现部署工具化、自动化。\n* 兼容 MySQL 协议和 MySQL 生态兼容 MySQL 协议、MySQL 常用的功能、MySQL 生态，应用无需或者修改少量代码即可从 MySQL 迁移到 TiDB。提供丰富的数据迁移工具帮助应用便捷完成数据迁移。\n\n\n* TiDB Server：SQL 层，对外暴露 MySQL 协议的连接 endpoint，负责接受客户端的连接，执行 SQL 解析和优化，最终生成分布式执行计划。TiDB 层本身是无状态的，实践中可以启动多个 TiDB 实例，通过负载均衡组件（如 LVS、HAProxy 或 F5）对外提供统一的接入地址，客户端的连接可以均匀地分摊在多个 TiDB 实例上以达到负载均衡的效果。TiDB Server 本身并不存储数据，只是解析 SQL，将实际的数据读取请求转发给底层的存储节点 TiKV（或 TiFlash）。\n\n* PD (Placement Driver) Server：整个 TiDB 集群的元信息管理模块，负责存储每个 TiKV 节点实时的数据分布情况和集群的整体拓扑结构，提供 TiDB Dashboard 管控界面，并为分布式事务分配事务 ID。PD 不仅存储元信息，同时还会根据 TiKV 节点实时上报的数据分布状态，下发数据调度命令给具体的 TiKV 节点，可以说是整个集群的\"大脑\"。此外，PD 本身也是由至少 3 个节点构成，拥有高可用的能力。建议部署奇数个 PD 节点。\n\n* 存储节点\n\n    * TiKV Server：负责存储数据，从外部看 TiKV 是一个分布式的提供事务的 Key-Value 存储引擎。存储数据的基本单位是 Region，每个 Region 负责存储一个 Key Range（从 StartKey 到 EndKey 的左闭右开区间）的数据，每个 TiKV 节点会负责多个 Region。TiKV 的 API 在 KV 键值对层面提供对分布式事务的原生支持，默认提供了 SI (Snapshot Isolation) 的隔离级别，这也是 TiDB 在 SQL 层面支持分布式事务的核心。TiDB 的 SQL 层做完 SQL 解析后，会将 SQL 的执行计划转换为对 TiKV API 的实际调用。所以，数据都存储在 TiKV 中。另外，TiKV 中的数据都会自动维护多副本（默认为三副本），天然支持高可用和自动故障转移。\n\n    * TiFlash：TiFlash 是一类特殊的存储节点。和普通 TiKV 节点不一样的是，在 TiFlash 内部，数据是以列式的形式进行存储，主要的功能是为分析型的场景加速。\n\n\n```   \n2. clickhouse\n```\n云数据库ClickHouse是开源列式数据库ClickHouse的云上托管服务，数据库内核完全兼容开源社区版本。阿里云提供了一套企业级数据库管理平台，增强了数据安全、集群动态扩容、监控运维等企业级功能，与云上其他数据产品打通，可以便捷地构建云上海量数据分析平台。\n\n云数据库ClickHouse是面向联机分析处理的列式数据库，支持SQL查询，且查询性能好，特别是基于大宽表的聚合分析查询性能非常优异，比其他分析型数据库速度快一个数量级。主要特性如下。\n\n交互式报表\n* \t\t基于ClickHouse和BI工具构建实时运营监控报表\n  利用ClickHouse构建实时交互式报表，实时分析订单、收入、用户数等核心业务指标；构建用户来源分析系统，跟踪各渠道PV、UV来源。\n\n* 海量数据实时多维查询\n    * \t\t在数亿至数百亿记录规模大宽表，数百以上维度自由查询，响应时间通常在100毫秒以内。让业务人员能持续探索式查询分析，无需中断分析思路，便于深挖业务价值，具有非常好的查询体验。  \n\n用户画像分析\n随着数据时代的发展，各行各业数据平台的体量越来越大，用户个性化运营的诉求也越来越突出，用户标签系统，做为个性化千人千面运营的基础服务，应运而生。如今，几乎所有行业（如互联网、游戏、教育等）都有实时精准营销的需求。通过系统生成用户画像，在营销时通过条件组合筛选用户，快速提取目标群体。\n\n* 基于ClickHouse构建用户特征行为分析系统\n    * \t\t利用ClickHouse对人群标签数据进行实时筛选并进行群体画像统计；自定义条件对海量明细日志记录进行过滤，分析用户行为。\n* 用户分群统计\n    * \t\t构建用户特征大宽表，任意选择用户属性标签数据和筛选条件，进行人群特征统计分析。\n\n* 访客来源分析展示\n    * \t\t通过批量离线计算对用户访问日志中的用户行为进行关联，生成用户行为路径大宽表同步到ClickHouse，基于ClickHouse构建交互式访客来源探索分析可视化系统。\n\n\n携程旅行网是中国领先的综合性旅行服务公司，提供酒店预订、机票预订、旅游度假等服务。携程在数据处理和分析方面面临着海量数据、高并发查询和复杂业务逻辑的挑战。为了应对这些挑战，携程采用了 ClickHouse 作为其数据仓库和数据分析平台。ClickHouse 帮助携程实现了以下目标：\n* 快速处理海量数据：携程每天需要处理数百万条订单数据，ClickHouse 可以高效地处理这些数据，使得数据分析和查询更加快速。\n* 高并发查询：携程需要应对高并发的查询需求，ClickHouse 可以支持高并发查询，使得数据分析和查询更加高效。\n* 灵活的业务逻辑：携程的业务逻辑非常复杂，需要根据不同的维度和指标进行数据分析和查询，ClickHouse 提供了灵活的数据建模和查询语言，可以满足携程的复杂业务需求。\n通过使用 ClickHouse，携程可以更加高效地管理数据、进行数据分析和查询，为业务决策提供有力的支持。\n\n* 缺乏广泛的社区支持：虽然 ClickHouse 是一款开源免费的工具，但其社区支持仍然相对较弱。与其他热门开源项目相比，ClickHouse 的社区规模和贡献可能较少。\n```\n2. mongodb  \t•\t分片集群可以提供更加良好的水平扩展能力。在分片集群架构中，各个节点以副本集架构为基础，通过数据分片存储的方式实现高并发读写。您可以通过扩展分片集群架构中的Mongos、Shard节点数量和规格实现IO吞吐和存储等能力的扩展。\n```\n   集群架构\n分片服务（shard）和配置服务（configserver）采用三节点副本集架构，稳定可靠；支持代理服务（mongos）和分片服务（mongos）灵活配置个数，线性扩展数据库系统的存储空间及读写性能。\n\n灵活多变的业务场景\n云数据库MongoDB采用No-Schema的方式，免去您变更表结构的痛苦，非常适用于初创型的业务需求。您可以将模式固定的结构化数据存储在RDS（Relational Database Service）中，模式灵活的业务存储在MongoDB中，高热数据存储在云数据库Redis或云数据库Memcache中，实现对业务数据高效存取，降低存储数据的投入成本。\n\n物联网应用\n云数据库MongoDB具有高性能和异步数据写入功能，特定场景下可达到内存数据库的处理能力。同时，云数据库MongoDB中的分片集群实例，可按需配置Mongos和Shard组件的配置和个数，性能及存储空间可实现无限扩展，非常适合物联网高并发写入的场景。详情请参见变更配置方案概览。\n\n海量数据下，性能优越\n* 在使用场合下，千万级别的文档对象，近 10G 的数据，对有索引的 ID 的查询不比MySQL慢，而对非索引字段的查询，则是全面胜出。MySQL实际无法胜任大数据下任意字段的查询，而MongoDB的查询性能令人惊讶。写入性能同样很令人满意，同样写入百万级别的数据，MongoDB比我以前使用过的CouchDB要快得多，基本 10 分钟以下可以解决。观察过程中，MongoDB远算不上 CPU 杀手。\n\n 内置Auto-Sharding自动分片支持云级扩展性，分片简单\n\n劣势：\n* 不支持事务操作\n* 所有事务要求严格的系统（银行系统）肯定不能用它。\n* MongoDB占用空间过大\n```\n2. \n3. Proxy集群版实例，适用于数据容量较大、QPS要求较高的业务场景。该架构类型实例默认提供Proxy代理，当客户端请求时将由代理节点转发至Redis数据节点，通过代理实现负载均衡、长连接等功能特性，\n ```\n     Cluster是一个无中心的分布式架构，高可用切换机制已内置进集群，其QPS性能优于Proxy集群版实例。\n\n代理模式：客户端通过单机的方式进行连接，流量会通过代理转发到Redis节点，有一些命令使用会受限制\n\n直连模式： 数据流量将直接访问Redis节点。 注意：需要使用支持cluster协议的客户端。\n ```   \n \n\n2. 双机热备，自动切换。当主节点发生故障后，从节点会被迅速提升为新的主节点，继续提供服务。\n3. 灾备实例通过内网专线同步，具有较低的同步时延和更高的稳定性，同步链路质量远优于公网网络。\n         目前推广期专线流量费用免费，商业化收费时间将另行通知。\n4. 使用主备高可用架构，避免了数据库的单点风险。\n5. 提供独立的数据库连接地址，灾备实例可提供读访问能力，用于就近接入、数据分析等场景，设备冗余成本低。\n6. 创建只读实例成功后，您可以开启读写代理，在程序中配置读写代理的地址，由读写代理实现读请求被自动转发到只读实例，写请求被自动转发到主实例。\n7. 创建RDS实例后， 会自动将实例所在的VPC段添加至白名单中，即该VPC段中所有的IP都可以访问。\n8. 透明数据加密（Transparent Data Encryption (简称TDE)）是指可以在文件层对数据和文件进行实时加密和解密，落盘的文件是加密后的内容，而对于上层应用系统和开发人员而言，加解密过程是无感知的，写入和读取的内容是明文内容，所以叫做透明数据加密\n9.  高可用  免费开启读写分离，实现读写请求自动分流，减轻主实例压力。\n\n10. 半同步复制（Semisynchronous replication），介于异步复制和全同步复制之间，主库在执行完客户端提交的事务后不是立刻返回给客户端，而是等待至少一个从库接收到并写到relay log中才返回给客户端\n11. 三节点 数据复制方式是强一致性。金融证券对数据一致性要求高的。\n12. Zod is a TypeScript-first schema declaration and validation library\n13. vsce login ryansecreat\n14. vue-object-state A typescript library that helps you keep track of changes in your dtos\n15. Vue 脚手架 https://github.com/vuejs/awesome-vue?tab=readme-ov-file#scaffold\n16. https://oruga-ui.com/documentation/  headless UI \n17. https://vue-highlight-text.surge.sh/ 高亮显示\n18. FZF (stylised as fzf)  is a command line based fuzzy finder built using Golang\n```\nconst list = ['go', 'javascript', 'python', 'rust', \n              'swift', 'kotlin', 'elixir', 'java', \n              'lisp', 'v', 'zig', 'nim', 'rescript', \n              'd', 'haskell']\n\nconst fzf = new Fzf(list)\nconst entries = fzf.find('li')\nconsole.log('ranking is:')\nentries.forEach(entry => console.log(entry.item)\n```\n1. Highlights https://vue-highlight-text.surge.sh/#Example\n2. vue network 画图工具 https://dash14.github.io/v-network-graph/getting-started.html \n3. VNT  一个简单、高效、能快速组建虚拟局域网的工具\n4. 根据路由生产面包屑  https://nxtchg.github.io/pieces/vue/vs-crumbs/#/foo/bar\n5. Vue breads 与vuerouter 相结合 https://scrum.github.io/vue-2-breadcrumbs/\n6. 根据vue文件生产文档  https://vuese.github.io/vuese-explorer/\n7. numeral 处理number\n8. 在线代码编辑： https://stackblitz.com/\n9. JSON5 is an extension to the popular JSON file format that aims to be easier to write and maintain by hand\n\njson5 是json 的超集，key  可以不加引号\n1. du -sh * | sort -n     查询文件大小\n2. \n3. Window.getComputedStyle()方法返回一个对象\n4. consola  Elegant Console Wrapper\n5. 副本集架构\n    副本集提供3、5、7节点架构，其中包含一个可供读写访问的Primary节点，一个Hidden节点，实例中剩余节点为只读节点。同时，京东云提供扩缩容能力，帮助您按业务需求进行服务器的部署。\n\n副本集\tMongoDB副本集是一组维护相同数据集的Mongod进程，副本集提供冗余和高可用，是所有生产部署的基础。\n\n分片集群\t分片是一种用于在多台计算机之间分配数据的方法，MongoDB使用分片集群来支持具有非常大数据集和高吞吐量操作的部署，每个分片集群包含Mongos、Shard、Config Server三种组件。\n1.   单可用区部署   可以承受机架级别的故障。\n2.   多可用区部署   可以承受机房级别的故障，但因为不同可用区之间存在一定的网络延迟，所以对于单个更新的响应时间多可用区部署会比单可用区部署长\n3.   kafka\n   ```\n   1 提高京东云 Kafka的吞吐量:\n​ Kafka中主题topic作为主要接受消息的载体，一般会分成一个或多个分区partition，每个partiton相当于是一个子queue，多个partition就相当于多个子queue在同时工作进行写盘和交互处理，因此增加partition可以增加单个主题topic的吞吐量。在物理结构上，每个partition对应一个物理的文件，Kafka中会把消息持久化到本地文件系统中，并且保持o(1)极高的效率。磁盘的IO读写是非常耗资源的性能，所以提高磁盘的iops和吞吐量，可以提高消息写入磁盘的速度，相应的提高吞吐。Kafka中的主题都是由消费组consumer group来消费的。如果这个consumer group里面consumer的数量小于topic里面partition的数量，就会有consumer thread同时处理多个partition。如果这个consumer group里面consumer的数量大于topic里面partition的数量，多出的consumer thread就会闲置，剩下的是一个consumer thread处理一个partition，这就造成了资源的浪费，因为一个partition不可能被两个consumer thread去处理。\n\n建议：1）增加分区数partition可以有效的提高消息的吞吐量，并且分区数最好是集群处理节点broker的整数倍，这样每个副本分配到的分区数比较均匀。\n\n​ 2）采用高iops和高吞吐的磁盘规格和SSD类型的磁盘。\n\n​ 3）增加生产者producer和消费者consumer的数量，并且消费者的数量最好可以和分区数相等。\n\n\n我们把多个 consumer实例放在一个group里有什么好处吗？实际上，consumer group是用于高伸缩性，高容错性的consumer机制。组内多个consumer实例可以同时读取kafka消息，而一旦某个consumer挂了，group会立即崩溃，这时候负责的分区交给其他consumer负责，从而保证group可以正常工作。这过程我们称呼为 重平衡（rebalance）。\n   ```\n4.   redis\n   ```\n   海量存储，无限容量。集群版采用分布式架构，数据分布在多台物理机上，突破单机物理限制，解决海量数据存储在 Redis 上的瓶颈\n   工作时主节点和从节点数据实时同步，当主节点故障时，系统将在15秒左右将从节点提升为主节点，开始提供服务。当完全恢复后，主从所在的AZ会跟创建时保持一致。\n   ES集群将部署在 VPC 内，只有在同一个VPC下才能访问ES集群，因此为保证内网顺利访问，建议选择已有云上业务的区域位置所在 VPC。多可用区部署模式下，也是选择同一个 VPC。同一个 VPC 内，不同可用区子网之间是互通的。\n   ```\n  \n5.   tidb\n    ```\n全新的分布式数据库，支持PB级数据容量，集群QPS上百万。\n真正的多活架构，多个节点可以同时提供数据读写服务，并且读写能力均可通过增加节点的方式进行水平扩展。\n整个集群数据强一致，所有节点读取的数据均为最新数据，无传统主从架构的数据延迟问题。\n与 MySQL 高度兼容，使用 TiDB 像使用单机MySQL一样简单，可以从 MySQL 无缝切换到 TiDB，几乎无需修改代码。\n可直接在同一份数据上进行高效的数据查询、分析，简化了架构，提升了数据分析的实时性，同时降低了成本。\n全面支持IPV6。\n    ```\n1. 多活架构及故障自恢复\n    真正的多活架构，各个节点均可读写。TiDB 使用多副本进行数据存储，并依赖业界最先进的 Raft 多数派选举算法确保数据 100% 强一致性和高可用。主副本故障时自动切换，无需人工介入，自动保障业务的连续性。\n2. 水平弹性扩展\n\n分布式的 TiDB 可随着数据增长而无缝地水平扩展，只需要通过增加更多的机器来满足业务增长需要，应用层可以不用关心存储的容量和吞吐。 TiDB 根据存储、网络、距离等因素，动态进行负载均衡调整，以保证更优的读写性能。    \n2. 将表中的数据按照一定的规则拆分为多个部分，每个部分的数据均存储在不同的计算节点上，每个计算节点上的数据称为一个分片。    \n3. 可用区是指在同一地域下，电力、网络等基础设施互相独立的物理区域。一个地域包含一个或多个可用区，同一地域下的多个可用区可以彼此连通   \n4. 实例是一个独立占用CPU和内存资源的的数据库服务进程，您可在实例中创建或管理多个数据库。\n5. 在集群中，需要先部署 Ingress Controller，再创建 Ingress 资源对象。Ingress Controller 控制器是一个 docker 容器，容器镜像中包含一个负载均衡器（比如：Nginx 或是 HAProxy）和一个 Ingress Controller。\n6. helm get values  terrabase-console-runtime-76887c7974-qtglz  -n tpaas-terrabase   \n7. kubectl edit ing dts-console-ingress -n tpaas-dts \n8. css selector\n   ```\n   选中后面有h2的h1\n   h1:has(+ h2) {\n     margin: 0 0 0.25rem 0;\n   } \n\n   is 更精炼的使用selector \n   ul li,\n   ol li {}\n   等于 \n   :is(ul, ol) li {}\n   \n   body:has(video, audio) {\n     /* styles to apply if the content contains audio OR video */\n   }\n   body:has(video):has(audio) {\n     /* styles to apply if the content contains both audio AND video */\n   }\n\n   这两个函数的区别在于 :where() 函数的优先级总是零，则 :is() 函数的优先级取决于其最特定参数的优先级。\n   ```\n9.  docker build -f ./Dockerfile.base . --build-arg TPAAS_RUNTIME_IMAGE=hub.jdcloud.com/baseimages/openeuler:22.03lts-amd64-depends-tools-v20220801\n10. find ./ -type f -name yarn.lock\n11. Sqids  Sqids (pronounced \"squids\") is an open-source library that lets you generate YouTube-looking IDs from numbers\n12. ssh-keygen -R ip 清理问题ip\n13. monaco.editor.setModelMarkers(model, \"owner\", markers); 标记下划线并给出hint\n14. 添加命令  editor.addCommand(monaco.KeyMod.CtrlCmd   可以监控keys 事件  \n15. addAction 添加右键菜单和快捷键\\\n16. 显示到对应位置的内容，指定行和列  revealPositionInCenter \n17. tokenizer 做匹配，rules 指定样式  \n18. registerFoldingRangeProvider 提供折叠功能\n19. provideHover 提供hover {range,contents}\n20. provideInlayHints 提供decorator 的hint\n21. 那就是它们有不同的特殊性。:where() 是简单的，其特异性总是为0，而 :is() 的特异性为最强的选择器。\n22. 特异性等级评分：\nID——特异性得分为 100\n内联样式——特异性得分为 1000\n元素和伪类——特异性得分为 1\n类、伪类和属性——特异性得分为 10\n1.  helm get values mongodb-back -n tpaas-mongodb\n2.  marker:text-sky-400 用量设置List marker 的样式\n3.  VScode 设置参数\n   ```\n   {\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\n    // for the documentation about the tasks.json format\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"kill: process\",\n            \"type\": \"shell\",\n            \"command\": \"kill\",\n            \"args\": [\n                \"-9\",\n                \"${input:pid}\",\n            ],\n            \"problemMatcher\": []\n        }\n    ],\n    \"inputs\": [\n        {\n            \"id\": \"pid\",\n            \"type\": \"pickString\",\n            \"description\": \"pid to kill\",\n            \"command\": \"pgrep\",\n            \"args\": [\n                \"${input:procesName}\"\n            ]\n        },\n        {\n            \"id\": \"procesName\",\n            \"type\": \"promptString\",\n            \"description\": \"process name\",\n            \"default\": \"code\"\n        }\n    ]\n}\n   ```\n1. 需要在不同环境下加载npm包不同的入口文件，显然一个 main 字段已经不能够满足我们的需求，这就衍生出来了 module 与 browser 字段。\nhttps://github.com/SunshowerC/blog/issues/8\n1. ts-morph  Setup, navigation, and manipulation of the TypeScript AST \n2.  获取文字长度\n   ```\n     function getwidth(txt, font) {\n      var canvas = document.createElement('canvas')\n      var ctx = canvas.getContext('2d')\n      ctx.font = font\n      return ctx.measureText(txt).width\n    }\n   ```\n3. headless ui  https://headlessui.com/ \n4. @rollup/plugin-node-resolve  自动添加路径index\n5. backdrop:bg-gray-50 设置蒙板\n6.  first-letter:text-7xl  first-line:uppercase\n7. vscode plugin 发布   https://code.visualstudio.com/api/working-with-extensions/publishing-extension     \n8. aimless The missing JS randomness library\n9. vue-js-modal  \n10. gogocode 其中 $_$1 和 $_$2 相当于正则中的通配符，但是在这里只会匹配代码里有效的 AST 节点，$$$ 则可以匹配剩下的节点\n11. window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__，是 qiankun 提供的。根据源码分析，它会拿到微应用html入口url之后，将pathname的最后一项去掉，再组装起来。譬如，子应用入口配置：http://local.soame.domain/mar...，那么经过处理后，会变成http://local.soame.domain/\n\n12. const SpeedMeasurePlugin = require('speed-measure-webpack-plugin')  查看webpack 速度\n13. 一个专注于前端视觉效果的集合应用，包含CSS动效、Canvas动画、人工智能应用等上百个案例 https://github.com/hepengwei/visualization-collection/tree/master\n14. npm i <alias>@npm:<packageName>@<version>   一个包安装不同的版本  \n15. Chokidar    Minimal and efficient cross-platform file watching library\n16. koa2-connect   Use Express/Connect middleware with Koa.\n17. npm list -g --depth 0  \n18. 容器内使用 printenv 命令来查看容器内的环境变量。\n19. daisy-init --origin direct:https://coding.jd.com/daas-fe/dms-new-console.git --branch template\n20. npm cache clean --force    npm cache verify\n21. utilities 模块包含的是原子化的样式（每一个基础类都只实现一个基础的样式功能），应该最后加载的。这样在其中定义的样式就有最高的优先级，即确保基础类应用到 HTML 页面时，可以覆盖其他样式。\n  所有使用 @layer 添加的样式，它们的类名在应用到 HTML 页面时，也像 Tailwind 内置的基础类一样，都支持使用状态变量（这是使用普通方式添加的样式所不具有的优势）\n\n   而且使用指令 @layer 添加自定义样式，也会在编译时自动进行简化 purge 处理，只有在 HTML 页面的元素中使用了类名，相应的自定义样式才会被编译到最终的样式表中。如果希望自定义的样式最后总是编译到样式表中，则可以不使用指令 @layer 直接写在主样式表中（也需要注意 CSS 代码添加的顺序，一般应该保证 @tailwind utilities 模块最后引入）\n1. @tailwindcss/line-clamp\n2. list-disc. list-decimal\n3. form.resetfileds 需要form-item 设置prop,form设置 model \n4. Selecting all text in one click\n     Use select-all to automatically select all the text in an element when a user clicks。\n5. text-[12px] 指定字体大小\n6. Using spaces and underscores\n   Since whitespace denotes the end of a class in HTML, replace any spaces in an arbitrary value with an underscore:<div class=\"before:content-['Hello_World']\">\n7. Add borders between horizontal children\n   Add borders between horizontal elements using the divide-x-{width} utilities.\n8.  Add borders between stacked children\n   Add borders between stacked elements using the divide-y-{width} utilities.\n9.  focus-within (:focus-within)\n   Style an element when it or one of its descendants has focus using the focus-within modifier:\n10. 连续修饰符\n```\ndiv:has(h2):has(ul) {\n  background: black;\n} \n```   \n1. currentColor  和font color 一致\n \n2. target (:target)\n \n```\nStyle an element if its ID matches the current URL fragment using the target modifier:\n\nfirst (:first-child)   last (:last-child)\n\nonly (:only-child)\nStyle an element if it’s the only child using the only modifier:\n\n\nempty (:empty)\nStyle an element if it has no content using the empty modifier:\n\nin-range (:in-range)\nStyle an input when it’s value is within a specified range limit using the in-range modifier:\n\n<input min=\"1\" max=\"5\" class=\"in-range:border-green-500 ...\" />\n\n```   \n1. peer \n   ```\n    <input type=\"email\" class=\"peer ...\"/>\n    <p class=\"mt-2 invisible peer-invalid:visible text-pink-600 text-sm\">\n      Please provide a valid email address.\n    </p>\n   ```   \n2. Style the ::before and ::after pseudo-elements using the before and after modifiers:\n   after:content-['*’] after:ml-0.5\n3. Justify-end Justify-start\n4. Use the border-{side}, border-{side}-0, border-{side}-2, border-{side}-4, or border-{side}-8 utilities to set the border width for one side of an element.\n\nborder-x   border-left-width: 1px;border-right-width: 1px;\n\n1. 没有rel=“noopener noreferrer”的情况下使用target=“_blank”是有安全风险，超链接a标签的rel=\"noopener noreferrer\"属性是一种新特性，它能让网站更安全，超链接添加rel=\"noopener noreferrer\"来防止钓鱼网站，因为它获取的window.opener的值为null\n\n1. Use place-content-center to pack items in the center of the block axis: 对应Grid 和 flexbox \n2. Use place-content-stretch to stretch grid items along their grid areas on the block axis:\n3. Breakpoint prefix sm 限制了最小值\n4. -translate-y-1/2\n5. Use inline-flex to create an inline flex container that flows with text.\n6. focus:border-blue-400\n7. Use contents to create a “phantom” container whose children act like direct children of the parent.\n```\n<div class=\"flex ...\">\n  <div class=\"flex-1 ...\">01</div>\n  <div class=\"contents\">\n    <div class=\"flex-1 ...\">02</div>\n    <div class=\"flex-1 ...\">03</div>\n  </div>\n  <div class=\"flex-1 ...\">04</div>\n</div>\n```\n1. Sass声明变量必须是『$』开头，后面紧跟变量名和变量值，而且变量名和变量值需要使用冒号：分隔开。\n\nLess 声明变量用『@』开头，其余等同 Sass。\n\nStylus 中声明变量没有任何限定，结尾的分号可有可无，但变量名和变量值之间必须要有『等号』。\n\n1. 就是当我们对 DOM 结构的修改引发 DOM 几何尺寸变化的时候，会发生回流的过程。\n    还有一种情况，是直接合成。比如利用 CSS3 的transform、opacity、filter这些属性就可以实现合成的效果，也就是大家常说的GPU加速。\n2. base64 -d  解码  linux \n3. const { name, doubleCount } = storeToRefs(store)  \n4. watchEffect 不能检测深层的变化，因此reactive 中变化无效，如果需要则 toRefs 转换\n5. V2 $attrs   1. custom events go into a @listerner bucket  2.不能绑定class \n6. Npm ls 查看依赖\n7. 可以看到结果reactive是递归会将每一层包装成Proxy对象的，深度监听每一层的property\n8. effectScope有一个可选参数为boolean，当传入true时表示阻断与父级的联系，阻断后这个scope对象将不会与父级关联，成为独立的scope。父级的stop也不会影响到它。 \n9. Last-Modified,Etag,Expires 三个同时使用时。先判断 Expire ，然后发送 Http 请求，服务器先判断 last-modified ，再判断 Etag ，必须都没有过期，才能返回 304 响应\n10. klona  fast utility to \"deep clone\" Objects, Arrays, Dates, RegExps, and more!\n11. Grep string starting with (e.g. 'S’)    grep -o 'S.*’\n12. ~: 如果写入的是 〜0.13.0，则当运行 npm update 时，会更新到补丁版本：即 0.13.1 可以，但 0.14.0 不可以。\n13. >: 接受高于指定版本的任何版本。\n14. ^: 只会执行不更改最左边非零数字的更新。 如果写入的是 ^0.13.0，则当运行 npm update 时，可以更新到 0.13.1、0.13.2 等，但不能更新到 0.14.0 或更高版本。 如果写入的是 ^1.13.0，则当运行 npm update 时，可以更新到 1.13.1、1.14.0 等，但不能更新到 2.0.0 或更高版本。\n2. firefox 子元素不缩小需要设置  You need to add min‑width:0\n3. flex 布局中子级超过了父级的宽度，需要设置 width:0 ,完全由flex 分配宽度。\n4. POSIX stands for Portable Operating System Interface.\n5.  @supports CSS at-rule 相当于功能选择器\n   ```\n   @supports (display: flex) {\n  body {\n    display: flex;\n    min-height: 100vh;\n  }\n}\n   ```\n2. https://github.com/cuixiaorui/mini-vue  vue3 source code \n\n3. react 被 startTransition 回调包裹的 setState 触发的渲染 被标记为不紧急渲染，这些渲染可能被其他紧急渲染所抢占。\n   \n4. https://hyper.is/ electron console\n5. https://cmder.net/ windows 端的console 模拟器\n6. Access-Control-Request-Private-Network: true 在所有私有网络预检请求上设置\n   Access-Control-Allow-Private-Network: true 必须在所有私有网络预检响应上设置\n7. 使用 Fragments，我们不需要在DOM中添加额外的节点。我们只需要用 React.Fragment 或才简写 <> 来包裹内容就行了\n8. vite 虚拟模块  虚拟模块是一种很实用的模式，使你可以对使用 ESM 语法的源文件传入一些编译时信息。\n9.  glob Match files using the patterns the shell uses, like stars and stuff.\n10. click.self \n我们知道在自定义组件上，只能监听自定义事件，一些原生事件（比如click）是没有办法直接触发的，但是使用.native修饰符可以帮我们办到这点\n1. offset-path  定义动画运行路径\n2. Tauri 是一个为所有主流桌面平台构建小型、快速二进制文件的框架。开发人员可以集成任何编译成 HTML、 JS 和 CSS 的前端框架来构建他们的用户界面。应用程序的后端是一个 Rust 二进制文件，具有前端可以与之交互的 API。\n3.  gitsecreat 使用： https://www.mikesay.com/2020/12/16/git-encrypt-file-in-repository/#git-secret%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8\n4. svg2pdf.js 图片转pdf\n5. stream 的另外一个模式: objectMode。它是一种对象模式，我们把一件事情、或一个文件、或一个操作，抽象成一个对象。\n   ```\n   const Readable = require('stream').Readable\n\n   const readable = Readable({ objectMode: true })\n    readable.push('a')\n    readable.push('b')\n    readable.push({})\n    readable.push(null)\n\n    readable.on('data', data => console.log(data))\n\n   ```\n6. git config --global push.followTags true\n7. Markraw 标记不会被reactive\n8. watcheffect onInvalidate 在重新运行或者停止的时候执行\n9. composedPath() 是 Event 接口的一个方法，当对象数组调用该侦听器时返回事件路径。\n10. customref  track and trigger  \n11. vueuse useMemoize 对结果加cache\n12. elementFromPoint 根据point 获取element\n13. Change-case Transform a string between camelCase, PascalCase, Capital Case, snake_case, param-case, CONSTANT_CASE and others.\n14. p-retry It does exponential backoff and supports custom retry strategies for failed operations.\n15. MutationObserver 观察dom 变化\n16. requestFullscreen\n17. passive: Boolean，设置为true时，表示 listener 永远不会调用 preventDefault()。如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告\n18. shallowReacive  shallowRef  shallowRef生成非递归响应数据，只监听第一层数据的变化\n19. 推荐在大部分时候用 watch 显式的指定依赖以避免不必要的重复触发，也避免在后续代码修改或重构时不小心引入新的依赖。watchEffect 适用于一些逻辑相对简单，依赖源和逻辑强相关的场景（或者懒惰的场景 ）。\n20. Object.fromEntries\n21. URL.revokeObjectURL() 静态方法用来释放一个之前已经存在的、通过调用 URL.createObjectURL() 创建的 URL 对象。\n22. querySelector  返回第一个匹配元素\n23. Array.prototype.at()接收一个正整数或者负整数作为参数，表示获取指定位置的成员\n24. IFC全称：Inline Formatting Context，名为行级格式化上下文。    触发：块级元素中仅包含内联级别元素\n25. The Notification interface of the Notifications API is used to configure and display desktop notifications to the user.\n26. TinyMCE 富文本编辑器\n27. Window.innerHeight  浏览器窗口的视口（viewport）高度（以像素为单位）；如果有水平滚动条，也包括滚动条高度。\n28. vuedraggable 处理拖动数据\n29. path-to-regexp   Turn a path string such as /user/:name into a regular expression. The compile function will return a function for transforming parameters into a valid path:\n30. vue router 重新render,redirect+fullpath.通过添加一个中转页实现。\n31. import { storeToRefs } from \"pinia”;\n32. html5 input number\n ```\n.no-arrow::-webkit-outer-spin-button,\n.no-arrow::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n}\n ``` \n1. vue3 类型 MayBeRef\n2. 暂停watch后更新，\n```\nignoreUpdates(() => {\n  source.value = 'ignored'\n})\n```\n\n1. dsp 读取json,csv,xlxs 数据\n2. limu 创建imutable 对象\n3. controlledRef set peek,控制数据的更新\n ```\n const num = controlledRef(0, {\n  onBeforeChange(value, oldValue) {\n    // disallow changes larger then ±5 in one operation\n    if (Math.abs(value - oldValue) > 5)\n      return false // returning `false` to dismiss the change\n  },\n})\n ```\n\n1. flush: post 推迟副作用的初始运行，直到组件的首次渲染完成。\n   watch 通过更改设置 flush: 'sync'，我们可以为每个更改都强制触发侦听器，尽管这通常是不推荐的\n   ```\n- `'pre'`: buffers invalidated effects in the same 'tick' and flushes them before rendering\n- `'post'`: async like 'pre' but fires after component updates so you can access the updated DOM\n- `'sync'`: forces the effect to always trigger synchronously\n\n { flush: 'post' }\n)\n\n   ```\n1. transx vue 动画组件   一个小巧玲珑的 vue 组件切换动画库\n2. ts-morph 修改ts 代码，封装后的ts compiler api\n3. esno 执行ts\n4. https://mermaid-js.github.io/mermaid/#/     mermaid 及其方便的画图工具\n5. vue-parallaxy Is a compontent for fast 60fps parallax scroll effects in vue 2. 实现滚动的视差效果。\n6. useWatermark,Layzcontainer. context menu  vue-vben-admin 中\n7. localForage is a fast and simple storage library for JavaScript。Wraps IndexedDB, WebSQL, or localStorage using a simple but powerful API.\n8.  markRaw 标记对下不会被reactive\n9.  indexeddb-fs is a module that allows you to store data in the browser using an API similar to that of Node's fs module.\n10. 临时安全令牌（Security Token Service，STS）\n11. *** 获取文本px宽度* @param font{String}: 字体样式**\n\n```\nString.prototype.pxWidth = function(font) {\n  // re-use canvas object for better performance\n  var canvas = String.prototype.pxWidth.canvas || (String.prototype.pxWidth.canvas = document.createElement(\"canvas\")),\n      context = canvas.getContext(\"2d\"); \n\n  font && (context.font = font);\n  var metrics = context.measureText(this);\n\n  return metrics.width;\n}\n```\n\n1. 先保存各个实例的values信息， helm get values [release] > xxx.yaml\n\n\n1. \nHTTP协议中用头部字段Accept-Encoding 和 Content-Encoding对「采用何种编码格式传输正文」进行了协定，请求头的Accept-Encoding会列出客户端支持的编码格式。当响应头的 Content-Encoding指定了gzip时，浏览器则会进行对应解压\n\n1. Transfer-Encoding，是一个 HTTP 头部字段，字面意思是「传输编码」。实际上，HTTP 协议中还有另外一个头部与编码有关：Content-Encoding（内容编码）。Content-Encoding 通常用于对实体内容进行压缩编码，目的是优化传输，\n```\nTransfer-Encoding: chunked\nTransfer-Encoding: compress\nTransfer-Encoding: deflate\nTransfer-Encoding: gzip\nTransfer-Encoding: identity\n```\n\n\n2. 逐跳消息头  这类消息头仅对单次传输连接有意义，不能通过代理或缓存进行重新转发\n\n \n2. mime  https://github.com/sindresorhus/file-type  根据文件内容判断类型\n\n1. 语义化版本控制(SemVer)\n   先简单了解下什么是语义化的版本控制，其是由GitHub发起的一份用于规范版本号递增的规则，\n\n1.  deeplinks.js allows people to easily link directly to any text selection on your website.\n2.  Vue DevUI 开源的UI\n3. standard-version\nstandard-version 会根据提交的信息类型来自动更改对应的版本号,如下:\n```\nfeat: 次版本(minor)+1\nfix: 修订号(patch) +1\nBREAK CHANGE: 主板号(marjor) +1\n```\n1. outline 能告诉用户那一个可以激发事件的html元素获取了焦点，对钟爱键盘操作的用户尤其有意义。一个清晰悦目的outline设计能提高使用表单的用户体验。\n2. CSS属性 columns 用来设置元素的列宽和列数。\n重点，设置了display: contents的元素本身不会被渲染，但是其子元素能够正常被渲染。\n3. 为了使我们的盒子居中，通过align-items属性，可以将交叉轴上的item对齐，此时使用的是垂直方向的块轴。而使用justify-content则可以对齐主轴上的项目，主轴是水平方向的。\nalign conent  用来控制多行布局   控制“多条主轴”的 flex 项目在交叉轴的对齐。\n\n1. CSS 中的 place-items 是一个简写属性 ，它允许你在相关的布局（如 Grid 或 Flexbox）中可以同时沿着块级和内联方向对齐元素 (例如：align-items 和 justify-items 属性) 。如果未提供第二个值，则第一个值作为第二个值的默认值\n\n1. filter CSS属性将模糊或颜色偏移等图形效果应用于元素。滤镜通常用于调整图像，背景和边框的渲染。\n\n1. monaco 自定义language\n```\nregister monaco.languages.register({ id: 'mySpecialLanguage' });\nsetMonarchTokensProvider base language 里面有3 \ndefineTheme  设置样式\nmonaco.editor.defineTheme('myCoolTheme', {\n                    colors: {},\n                    base: 'vs',\n                    inherit: false,\n                    rules: [\n                        { token: 'custom-info', foreground: '808080' },\n                        { token: 'custom-error', foreground: 'ff0000', fontStyle: 'bold' },\n                        { token: 'custom-notice', foreground: 'FFA500' },\n                        { token: 'custom-date', foreground: '008800' }\n                    ]\n                });\nregisterCompletionItemProvider  智能提示，遇到对应的关键词\n```\n\n1. Monarch  用来实现代码高亮   https://juejin.cn/post/6844903736867831822\n\nhttps://microsoft.github.io/monaco-editor/monarch.html\n\n1. xe-utils 提供工具类\n1. Mitt  Tiny (~200b) functional event emitter / pubsub.\n1. element-resize-detector  \n1. memoize-one 记录最近的返回结果,不同参数会重置\n1. 钱其实是“保健因子”，而不是“激励因子”，是多了没用、少了不行的东西\n2. 可以看到整个医改的核心就是放供给、促竞争和扶创新的过程\n3. 破船能过河\n4. Comlink Comlink makes WebWorkers enjoyable. 多线程\n5.  \n`Rails-style`: 按照文件的类型划分为不同的目录\n\n`Domain-style`: 按照一个功能特性或业务创建单独的目录\n\n`Ducks-style`: 优点类似于Domain-style，不过更彻底, 它通常将相关联的元素定义在一个文件下·\n\n1. \n    强约定，体现团队的规范。首先它应该避免团队成员去关心或更改构建的配置细节，暴露最小化的配置接口。 另外构建工具不仅仅是构建，通常它还会集成代码检查、测试等功能。\n\n    方便升级。尤其是团队需要维护多个项目场景, 这一点很有意义\n\n2. BEM\n```\n元素（Element），即 price 、text ，代表从属于某个块，是这个块的子元素，跟在块后面，以双下划线为间隔，使用 .btn__price 、.btn__text 表示\n\n修饰符（Modifier），即 orange 、big ，用于修改块的状态，为块添加特定的主题或样式，跟在块后面，以双连字符为间隔，使用 .btn--orange 、.btn--big 表示\n\n```   \n1.  npm-run-all\n```\nBefore: npm run clean && npm run build:css && npm run build:js && npm run build:html\nAfter: npm-run-all clean build:*\n```\n\n1. display:flow-root可以让元素块状化，同时包含格式化上下文BFC，可以用来清除浮动，去除margin合并，实现两栏自适应布局等。\n\n1. stroke-dash 是一个定义虚线和间距图形的图像工具类, 被用于轮廓描边;\n\n1. npx degit\n   \n1.  有一些环境变量，比如HOME、PATH、SHELL、UID、USER等，在用户登录之前就已经被/bin/login程序设置好了。通常环境变量被定义并保存在用户家目录下的．bash_profile文件或全局的配置文件/etc/profile中\n\n1. env命令只显示全局变量；declare命令输出所有的变量、函数、整数和已经导出的变量\n\n1. http upgrade 通常来说这一机制总是由客户端发起的 （不过也有例外，比如说可以由服务端发起升级到传输层安全协议（TLS））， 服务端可以选择是否要升级到新协议。借助这一技术，连接可以以常用的协议启动（如HTTP/1.1），随后再升级到HTTP2甚至是WebSockets.\n\n1. 因为 CommonJS 在运行时进行加载方式的动态解析，在运行时阶段才能确定的导入导出关系，因此无法进行静态编译优化和类型检查。​\n\n1. JSZip  JSZip is a javascript library for creating, reading and editing .zip files, with a lovely and simple AP\n   \n2. spy-debugger  一站式页面调试、抓包工具。远程调试任何手机浏览器页面，任何手机移动端webview（如：微信，HybridApp等）。支持HTTP/HTTPS，无需USB连接设备\n   \n3. viteshot 基于vite 的快照\n\n4. useScrollLock\n\n","source":"_posts/overview.md","raw":"---\ntitle: overview\ndate: 2021-12-13 17:38:48\ntags: overview\n---\n1. tidb\n```\nTidb\n\n* 一键水平扩缩容得益于 TiDB 存储计算分离的架构的设计，可按需对计算、存储分别进行在线扩容或者缩容，扩容或者缩容过程中对应用运维人员透明。\n* 金融级高可用数据采用多副本存储，数据副本通过 Multi-Raft 协议同步事务日志，多数派写入成功事务才能提交，确保数据强一致性且少数副本发生故障时不影响数据的可用性。可按需配置副本地理位置、副本数量等策略，满足不同容灾级别的要求。\n* 实时 HTAP提供行存储引擎 TiKV、列存储引擎 TiFlash 两款存储引擎，TiFlash 通过 Multi-Raft Learner 协议实时从 TiKV 复制数据，确保行存储引擎 TiKV 和列存储引擎 TiFlash 之间的数据强一致。TiKV、TiFlash 可按需部署在不同的机器，解决 HTAP 资源隔离的问题。\n* 云原生的分布式数据库专为云而设计的分布式数据库，通过 TiDB Operator 可在公有云、私有云、混合云中实现部署工具化、自动化。\n* 兼容 MySQL 协议和 MySQL 生态兼容 MySQL 协议、MySQL 常用的功能、MySQL 生态，应用无需或者修改少量代码即可从 MySQL 迁移到 TiDB。提供丰富的数据迁移工具帮助应用便捷完成数据迁移。\n\n\n* TiDB Server：SQL 层，对外暴露 MySQL 协议的连接 endpoint，负责接受客户端的连接，执行 SQL 解析和优化，最终生成分布式执行计划。TiDB 层本身是无状态的，实践中可以启动多个 TiDB 实例，通过负载均衡组件（如 LVS、HAProxy 或 F5）对外提供统一的接入地址，客户端的连接可以均匀地分摊在多个 TiDB 实例上以达到负载均衡的效果。TiDB Server 本身并不存储数据，只是解析 SQL，将实际的数据读取请求转发给底层的存储节点 TiKV（或 TiFlash）。\n\n* PD (Placement Driver) Server：整个 TiDB 集群的元信息管理模块，负责存储每个 TiKV 节点实时的数据分布情况和集群的整体拓扑结构，提供 TiDB Dashboard 管控界面，并为分布式事务分配事务 ID。PD 不仅存储元信息，同时还会根据 TiKV 节点实时上报的数据分布状态，下发数据调度命令给具体的 TiKV 节点，可以说是整个集群的\"大脑\"。此外，PD 本身也是由至少 3 个节点构成，拥有高可用的能力。建议部署奇数个 PD 节点。\n\n* 存储节点\n\n    * TiKV Server：负责存储数据，从外部看 TiKV 是一个分布式的提供事务的 Key-Value 存储引擎。存储数据的基本单位是 Region，每个 Region 负责存储一个 Key Range（从 StartKey 到 EndKey 的左闭右开区间）的数据，每个 TiKV 节点会负责多个 Region。TiKV 的 API 在 KV 键值对层面提供对分布式事务的原生支持，默认提供了 SI (Snapshot Isolation) 的隔离级别，这也是 TiDB 在 SQL 层面支持分布式事务的核心。TiDB 的 SQL 层做完 SQL 解析后，会将 SQL 的执行计划转换为对 TiKV API 的实际调用。所以，数据都存储在 TiKV 中。另外，TiKV 中的数据都会自动维护多副本（默认为三副本），天然支持高可用和自动故障转移。\n\n    * TiFlash：TiFlash 是一类特殊的存储节点。和普通 TiKV 节点不一样的是，在 TiFlash 内部，数据是以列式的形式进行存储，主要的功能是为分析型的场景加速。\n\n\n```   \n2. clickhouse\n```\n云数据库ClickHouse是开源列式数据库ClickHouse的云上托管服务，数据库内核完全兼容开源社区版本。阿里云提供了一套企业级数据库管理平台，增强了数据安全、集群动态扩容、监控运维等企业级功能，与云上其他数据产品打通，可以便捷地构建云上海量数据分析平台。\n\n云数据库ClickHouse是面向联机分析处理的列式数据库，支持SQL查询，且查询性能好，特别是基于大宽表的聚合分析查询性能非常优异，比其他分析型数据库速度快一个数量级。主要特性如下。\n\n交互式报表\n* \t\t基于ClickHouse和BI工具构建实时运营监控报表\n  利用ClickHouse构建实时交互式报表，实时分析订单、收入、用户数等核心业务指标；构建用户来源分析系统，跟踪各渠道PV、UV来源。\n\n* 海量数据实时多维查询\n    * \t\t在数亿至数百亿记录规模大宽表，数百以上维度自由查询，响应时间通常在100毫秒以内。让业务人员能持续探索式查询分析，无需中断分析思路，便于深挖业务价值，具有非常好的查询体验。  \n\n用户画像分析\n随着数据时代的发展，各行各业数据平台的体量越来越大，用户个性化运营的诉求也越来越突出，用户标签系统，做为个性化千人千面运营的基础服务，应运而生。如今，几乎所有行业（如互联网、游戏、教育等）都有实时精准营销的需求。通过系统生成用户画像，在营销时通过条件组合筛选用户，快速提取目标群体。\n\n* 基于ClickHouse构建用户特征行为分析系统\n    * \t\t利用ClickHouse对人群标签数据进行实时筛选并进行群体画像统计；自定义条件对海量明细日志记录进行过滤，分析用户行为。\n* 用户分群统计\n    * \t\t构建用户特征大宽表，任意选择用户属性标签数据和筛选条件，进行人群特征统计分析。\n\n* 访客来源分析展示\n    * \t\t通过批量离线计算对用户访问日志中的用户行为进行关联，生成用户行为路径大宽表同步到ClickHouse，基于ClickHouse构建交互式访客来源探索分析可视化系统。\n\n\n携程旅行网是中国领先的综合性旅行服务公司，提供酒店预订、机票预订、旅游度假等服务。携程在数据处理和分析方面面临着海量数据、高并发查询和复杂业务逻辑的挑战。为了应对这些挑战，携程采用了 ClickHouse 作为其数据仓库和数据分析平台。ClickHouse 帮助携程实现了以下目标：\n* 快速处理海量数据：携程每天需要处理数百万条订单数据，ClickHouse 可以高效地处理这些数据，使得数据分析和查询更加快速。\n* 高并发查询：携程需要应对高并发的查询需求，ClickHouse 可以支持高并发查询，使得数据分析和查询更加高效。\n* 灵活的业务逻辑：携程的业务逻辑非常复杂，需要根据不同的维度和指标进行数据分析和查询，ClickHouse 提供了灵活的数据建模和查询语言，可以满足携程的复杂业务需求。\n通过使用 ClickHouse，携程可以更加高效地管理数据、进行数据分析和查询，为业务决策提供有力的支持。\n\n* 缺乏广泛的社区支持：虽然 ClickHouse 是一款开源免费的工具，但其社区支持仍然相对较弱。与其他热门开源项目相比，ClickHouse 的社区规模和贡献可能较少。\n```\n2. mongodb  \t•\t分片集群可以提供更加良好的水平扩展能力。在分片集群架构中，各个节点以副本集架构为基础，通过数据分片存储的方式实现高并发读写。您可以通过扩展分片集群架构中的Mongos、Shard节点数量和规格实现IO吞吐和存储等能力的扩展。\n```\n   集群架构\n分片服务（shard）和配置服务（configserver）采用三节点副本集架构，稳定可靠；支持代理服务（mongos）和分片服务（mongos）灵活配置个数，线性扩展数据库系统的存储空间及读写性能。\n\n灵活多变的业务场景\n云数据库MongoDB采用No-Schema的方式，免去您变更表结构的痛苦，非常适用于初创型的业务需求。您可以将模式固定的结构化数据存储在RDS（Relational Database Service）中，模式灵活的业务存储在MongoDB中，高热数据存储在云数据库Redis或云数据库Memcache中，实现对业务数据高效存取，降低存储数据的投入成本。\n\n物联网应用\n云数据库MongoDB具有高性能和异步数据写入功能，特定场景下可达到内存数据库的处理能力。同时，云数据库MongoDB中的分片集群实例，可按需配置Mongos和Shard组件的配置和个数，性能及存储空间可实现无限扩展，非常适合物联网高并发写入的场景。详情请参见变更配置方案概览。\n\n海量数据下，性能优越\n* 在使用场合下，千万级别的文档对象，近 10G 的数据，对有索引的 ID 的查询不比MySQL慢，而对非索引字段的查询，则是全面胜出。MySQL实际无法胜任大数据下任意字段的查询，而MongoDB的查询性能令人惊讶。写入性能同样很令人满意，同样写入百万级别的数据，MongoDB比我以前使用过的CouchDB要快得多，基本 10 分钟以下可以解决。观察过程中，MongoDB远算不上 CPU 杀手。\n\n 内置Auto-Sharding自动分片支持云级扩展性，分片简单\n\n劣势：\n* 不支持事务操作\n* 所有事务要求严格的系统（银行系统）肯定不能用它。\n* MongoDB占用空间过大\n```\n2. \n3. Proxy集群版实例，适用于数据容量较大、QPS要求较高的业务场景。该架构类型实例默认提供Proxy代理，当客户端请求时将由代理节点转发至Redis数据节点，通过代理实现负载均衡、长连接等功能特性，\n ```\n     Cluster是一个无中心的分布式架构，高可用切换机制已内置进集群，其QPS性能优于Proxy集群版实例。\n\n代理模式：客户端通过单机的方式进行连接，流量会通过代理转发到Redis节点，有一些命令使用会受限制\n\n直连模式： 数据流量将直接访问Redis节点。 注意：需要使用支持cluster协议的客户端。\n ```   \n \n\n2. 双机热备，自动切换。当主节点发生故障后，从节点会被迅速提升为新的主节点，继续提供服务。\n3. 灾备实例通过内网专线同步，具有较低的同步时延和更高的稳定性，同步链路质量远优于公网网络。\n         目前推广期专线流量费用免费，商业化收费时间将另行通知。\n4. 使用主备高可用架构，避免了数据库的单点风险。\n5. 提供独立的数据库连接地址，灾备实例可提供读访问能力，用于就近接入、数据分析等场景，设备冗余成本低。\n6. 创建只读实例成功后，您可以开启读写代理，在程序中配置读写代理的地址，由读写代理实现读请求被自动转发到只读实例，写请求被自动转发到主实例。\n7. 创建RDS实例后， 会自动将实例所在的VPC段添加至白名单中，即该VPC段中所有的IP都可以访问。\n8. 透明数据加密（Transparent Data Encryption (简称TDE)）是指可以在文件层对数据和文件进行实时加密和解密，落盘的文件是加密后的内容，而对于上层应用系统和开发人员而言，加解密过程是无感知的，写入和读取的内容是明文内容，所以叫做透明数据加密\n9.  高可用  免费开启读写分离，实现读写请求自动分流，减轻主实例压力。\n\n10. 半同步复制（Semisynchronous replication），介于异步复制和全同步复制之间，主库在执行完客户端提交的事务后不是立刻返回给客户端，而是等待至少一个从库接收到并写到relay log中才返回给客户端\n11. 三节点 数据复制方式是强一致性。金融证券对数据一致性要求高的。\n12. Zod is a TypeScript-first schema declaration and validation library\n13. vsce login ryansecreat\n14. vue-object-state A typescript library that helps you keep track of changes in your dtos\n15. Vue 脚手架 https://github.com/vuejs/awesome-vue?tab=readme-ov-file#scaffold\n16. https://oruga-ui.com/documentation/  headless UI \n17. https://vue-highlight-text.surge.sh/ 高亮显示\n18. FZF (stylised as fzf)  is a command line based fuzzy finder built using Golang\n```\nconst list = ['go', 'javascript', 'python', 'rust', \n              'swift', 'kotlin', 'elixir', 'java', \n              'lisp', 'v', 'zig', 'nim', 'rescript', \n              'd', 'haskell']\n\nconst fzf = new Fzf(list)\nconst entries = fzf.find('li')\nconsole.log('ranking is:')\nentries.forEach(entry => console.log(entry.item)\n```\n1. Highlights https://vue-highlight-text.surge.sh/#Example\n2. vue network 画图工具 https://dash14.github.io/v-network-graph/getting-started.html \n3. VNT  一个简单、高效、能快速组建虚拟局域网的工具\n4. 根据路由生产面包屑  https://nxtchg.github.io/pieces/vue/vs-crumbs/#/foo/bar\n5. Vue breads 与vuerouter 相结合 https://scrum.github.io/vue-2-breadcrumbs/\n6. 根据vue文件生产文档  https://vuese.github.io/vuese-explorer/\n7. numeral 处理number\n8. 在线代码编辑： https://stackblitz.com/\n9. JSON5 is an extension to the popular JSON file format that aims to be easier to write and maintain by hand\n\njson5 是json 的超集，key  可以不加引号\n1. du -sh * | sort -n     查询文件大小\n2. \n3. Window.getComputedStyle()方法返回一个对象\n4. consola  Elegant Console Wrapper\n5. 副本集架构\n    副本集提供3、5、7节点架构，其中包含一个可供读写访问的Primary节点，一个Hidden节点，实例中剩余节点为只读节点。同时，京东云提供扩缩容能力，帮助您按业务需求进行服务器的部署。\n\n副本集\tMongoDB副本集是一组维护相同数据集的Mongod进程，副本集提供冗余和高可用，是所有生产部署的基础。\n\n分片集群\t分片是一种用于在多台计算机之间分配数据的方法，MongoDB使用分片集群来支持具有非常大数据集和高吞吐量操作的部署，每个分片集群包含Mongos、Shard、Config Server三种组件。\n1.   单可用区部署   可以承受机架级别的故障。\n2.   多可用区部署   可以承受机房级别的故障，但因为不同可用区之间存在一定的网络延迟，所以对于单个更新的响应时间多可用区部署会比单可用区部署长\n3.   kafka\n   ```\n   1 提高京东云 Kafka的吞吐量:\n​ Kafka中主题topic作为主要接受消息的载体，一般会分成一个或多个分区partition，每个partiton相当于是一个子queue，多个partition就相当于多个子queue在同时工作进行写盘和交互处理，因此增加partition可以增加单个主题topic的吞吐量。在物理结构上，每个partition对应一个物理的文件，Kafka中会把消息持久化到本地文件系统中，并且保持o(1)极高的效率。磁盘的IO读写是非常耗资源的性能，所以提高磁盘的iops和吞吐量，可以提高消息写入磁盘的速度，相应的提高吞吐。Kafka中的主题都是由消费组consumer group来消费的。如果这个consumer group里面consumer的数量小于topic里面partition的数量，就会有consumer thread同时处理多个partition。如果这个consumer group里面consumer的数量大于topic里面partition的数量，多出的consumer thread就会闲置，剩下的是一个consumer thread处理一个partition，这就造成了资源的浪费，因为一个partition不可能被两个consumer thread去处理。\n\n建议：1）增加分区数partition可以有效的提高消息的吞吐量，并且分区数最好是集群处理节点broker的整数倍，这样每个副本分配到的分区数比较均匀。\n\n​ 2）采用高iops和高吞吐的磁盘规格和SSD类型的磁盘。\n\n​ 3）增加生产者producer和消费者consumer的数量，并且消费者的数量最好可以和分区数相等。\n\n\n我们把多个 consumer实例放在一个group里有什么好处吗？实际上，consumer group是用于高伸缩性，高容错性的consumer机制。组内多个consumer实例可以同时读取kafka消息，而一旦某个consumer挂了，group会立即崩溃，这时候负责的分区交给其他consumer负责，从而保证group可以正常工作。这过程我们称呼为 重平衡（rebalance）。\n   ```\n4.   redis\n   ```\n   海量存储，无限容量。集群版采用分布式架构，数据分布在多台物理机上，突破单机物理限制，解决海量数据存储在 Redis 上的瓶颈\n   工作时主节点和从节点数据实时同步，当主节点故障时，系统将在15秒左右将从节点提升为主节点，开始提供服务。当完全恢复后，主从所在的AZ会跟创建时保持一致。\n   ES集群将部署在 VPC 内，只有在同一个VPC下才能访问ES集群，因此为保证内网顺利访问，建议选择已有云上业务的区域位置所在 VPC。多可用区部署模式下，也是选择同一个 VPC。同一个 VPC 内，不同可用区子网之间是互通的。\n   ```\n  \n5.   tidb\n    ```\n全新的分布式数据库，支持PB级数据容量，集群QPS上百万。\n真正的多活架构，多个节点可以同时提供数据读写服务，并且读写能力均可通过增加节点的方式进行水平扩展。\n整个集群数据强一致，所有节点读取的数据均为最新数据，无传统主从架构的数据延迟问题。\n与 MySQL 高度兼容，使用 TiDB 像使用单机MySQL一样简单，可以从 MySQL 无缝切换到 TiDB，几乎无需修改代码。\n可直接在同一份数据上进行高效的数据查询、分析，简化了架构，提升了数据分析的实时性，同时降低了成本。\n全面支持IPV6。\n    ```\n1. 多活架构及故障自恢复\n    真正的多活架构，各个节点均可读写。TiDB 使用多副本进行数据存储，并依赖业界最先进的 Raft 多数派选举算法确保数据 100% 强一致性和高可用。主副本故障时自动切换，无需人工介入，自动保障业务的连续性。\n2. 水平弹性扩展\n\n分布式的 TiDB 可随着数据增长而无缝地水平扩展，只需要通过增加更多的机器来满足业务增长需要，应用层可以不用关心存储的容量和吞吐。 TiDB 根据存储、网络、距离等因素，动态进行负载均衡调整，以保证更优的读写性能。    \n2. 将表中的数据按照一定的规则拆分为多个部分，每个部分的数据均存储在不同的计算节点上，每个计算节点上的数据称为一个分片。    \n3. 可用区是指在同一地域下，电力、网络等基础设施互相独立的物理区域。一个地域包含一个或多个可用区，同一地域下的多个可用区可以彼此连通   \n4. 实例是一个独立占用CPU和内存资源的的数据库服务进程，您可在实例中创建或管理多个数据库。\n5. 在集群中，需要先部署 Ingress Controller，再创建 Ingress 资源对象。Ingress Controller 控制器是一个 docker 容器，容器镜像中包含一个负载均衡器（比如：Nginx 或是 HAProxy）和一个 Ingress Controller。\n6. helm get values  terrabase-console-runtime-76887c7974-qtglz  -n tpaas-terrabase   \n7. kubectl edit ing dts-console-ingress -n tpaas-dts \n8. css selector\n   ```\n   选中后面有h2的h1\n   h1:has(+ h2) {\n     margin: 0 0 0.25rem 0;\n   } \n\n   is 更精炼的使用selector \n   ul li,\n   ol li {}\n   等于 \n   :is(ul, ol) li {}\n   \n   body:has(video, audio) {\n     /* styles to apply if the content contains audio OR video */\n   }\n   body:has(video):has(audio) {\n     /* styles to apply if the content contains both audio AND video */\n   }\n\n   这两个函数的区别在于 :where() 函数的优先级总是零，则 :is() 函数的优先级取决于其最特定参数的优先级。\n   ```\n9.  docker build -f ./Dockerfile.base . --build-arg TPAAS_RUNTIME_IMAGE=hub.jdcloud.com/baseimages/openeuler:22.03lts-amd64-depends-tools-v20220801\n10. find ./ -type f -name yarn.lock\n11. Sqids  Sqids (pronounced \"squids\") is an open-source library that lets you generate YouTube-looking IDs from numbers\n12. ssh-keygen -R ip 清理问题ip\n13. monaco.editor.setModelMarkers(model, \"owner\", markers); 标记下划线并给出hint\n14. 添加命令  editor.addCommand(monaco.KeyMod.CtrlCmd   可以监控keys 事件  \n15. addAction 添加右键菜单和快捷键\\\n16. 显示到对应位置的内容，指定行和列  revealPositionInCenter \n17. tokenizer 做匹配，rules 指定样式  \n18. registerFoldingRangeProvider 提供折叠功能\n19. provideHover 提供hover {range,contents}\n20. provideInlayHints 提供decorator 的hint\n21. 那就是它们有不同的特殊性。:where() 是简单的，其特异性总是为0，而 :is() 的特异性为最强的选择器。\n22. 特异性等级评分：\nID——特异性得分为 100\n内联样式——特异性得分为 1000\n元素和伪类——特异性得分为 1\n类、伪类和属性——特异性得分为 10\n1.  helm get values mongodb-back -n tpaas-mongodb\n2.  marker:text-sky-400 用量设置List marker 的样式\n3.  VScode 设置参数\n   ```\n   {\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\n    // for the documentation about the tasks.json format\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"kill: process\",\n            \"type\": \"shell\",\n            \"command\": \"kill\",\n            \"args\": [\n                \"-9\",\n                \"${input:pid}\",\n            ],\n            \"problemMatcher\": []\n        }\n    ],\n    \"inputs\": [\n        {\n            \"id\": \"pid\",\n            \"type\": \"pickString\",\n            \"description\": \"pid to kill\",\n            \"command\": \"pgrep\",\n            \"args\": [\n                \"${input:procesName}\"\n            ]\n        },\n        {\n            \"id\": \"procesName\",\n            \"type\": \"promptString\",\n            \"description\": \"process name\",\n            \"default\": \"code\"\n        }\n    ]\n}\n   ```\n1. 需要在不同环境下加载npm包不同的入口文件，显然一个 main 字段已经不能够满足我们的需求，这就衍生出来了 module 与 browser 字段。\nhttps://github.com/SunshowerC/blog/issues/8\n1. ts-morph  Setup, navigation, and manipulation of the TypeScript AST \n2.  获取文字长度\n   ```\n     function getwidth(txt, font) {\n      var canvas = document.createElement('canvas')\n      var ctx = canvas.getContext('2d')\n      ctx.font = font\n      return ctx.measureText(txt).width\n    }\n   ```\n3. headless ui  https://headlessui.com/ \n4. @rollup/plugin-node-resolve  自动添加路径index\n5. backdrop:bg-gray-50 设置蒙板\n6.  first-letter:text-7xl  first-line:uppercase\n7. vscode plugin 发布   https://code.visualstudio.com/api/working-with-extensions/publishing-extension     \n8. aimless The missing JS randomness library\n9. vue-js-modal  \n10. gogocode 其中 $_$1 和 $_$2 相当于正则中的通配符，但是在这里只会匹配代码里有效的 AST 节点，$$$ 则可以匹配剩下的节点\n11. window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__，是 qiankun 提供的。根据源码分析，它会拿到微应用html入口url之后，将pathname的最后一项去掉，再组装起来。譬如，子应用入口配置：http://local.soame.domain/mar...，那么经过处理后，会变成http://local.soame.domain/\n\n12. const SpeedMeasurePlugin = require('speed-measure-webpack-plugin')  查看webpack 速度\n13. 一个专注于前端视觉效果的集合应用，包含CSS动效、Canvas动画、人工智能应用等上百个案例 https://github.com/hepengwei/visualization-collection/tree/master\n14. npm i <alias>@npm:<packageName>@<version>   一个包安装不同的版本  \n15. Chokidar    Minimal and efficient cross-platform file watching library\n16. koa2-connect   Use Express/Connect middleware with Koa.\n17. npm list -g --depth 0  \n18. 容器内使用 printenv 命令来查看容器内的环境变量。\n19. daisy-init --origin direct:https://coding.jd.com/daas-fe/dms-new-console.git --branch template\n20. npm cache clean --force    npm cache verify\n21. utilities 模块包含的是原子化的样式（每一个基础类都只实现一个基础的样式功能），应该最后加载的。这样在其中定义的样式就有最高的优先级，即确保基础类应用到 HTML 页面时，可以覆盖其他样式。\n  所有使用 @layer 添加的样式，它们的类名在应用到 HTML 页面时，也像 Tailwind 内置的基础类一样，都支持使用状态变量（这是使用普通方式添加的样式所不具有的优势）\n\n   而且使用指令 @layer 添加自定义样式，也会在编译时自动进行简化 purge 处理，只有在 HTML 页面的元素中使用了类名，相应的自定义样式才会被编译到最终的样式表中。如果希望自定义的样式最后总是编译到样式表中，则可以不使用指令 @layer 直接写在主样式表中（也需要注意 CSS 代码添加的顺序，一般应该保证 @tailwind utilities 模块最后引入）\n1. @tailwindcss/line-clamp\n2. list-disc. list-decimal\n3. form.resetfileds 需要form-item 设置prop,form设置 model \n4. Selecting all text in one click\n     Use select-all to automatically select all the text in an element when a user clicks。\n5. text-[12px] 指定字体大小\n6. Using spaces and underscores\n   Since whitespace denotes the end of a class in HTML, replace any spaces in an arbitrary value with an underscore:<div class=\"before:content-['Hello_World']\">\n7. Add borders between horizontal children\n   Add borders between horizontal elements using the divide-x-{width} utilities.\n8.  Add borders between stacked children\n   Add borders between stacked elements using the divide-y-{width} utilities.\n9.  focus-within (:focus-within)\n   Style an element when it or one of its descendants has focus using the focus-within modifier:\n10. 连续修饰符\n```\ndiv:has(h2):has(ul) {\n  background: black;\n} \n```   \n1. currentColor  和font color 一致\n \n2. target (:target)\n \n```\nStyle an element if its ID matches the current URL fragment using the target modifier:\n\nfirst (:first-child)   last (:last-child)\n\nonly (:only-child)\nStyle an element if it’s the only child using the only modifier:\n\n\nempty (:empty)\nStyle an element if it has no content using the empty modifier:\n\nin-range (:in-range)\nStyle an input when it’s value is within a specified range limit using the in-range modifier:\n\n<input min=\"1\" max=\"5\" class=\"in-range:border-green-500 ...\" />\n\n```   \n1. peer \n   ```\n    <input type=\"email\" class=\"peer ...\"/>\n    <p class=\"mt-2 invisible peer-invalid:visible text-pink-600 text-sm\">\n      Please provide a valid email address.\n    </p>\n   ```   \n2. Style the ::before and ::after pseudo-elements using the before and after modifiers:\n   after:content-['*’] after:ml-0.5\n3. Justify-end Justify-start\n4. Use the border-{side}, border-{side}-0, border-{side}-2, border-{side}-4, or border-{side}-8 utilities to set the border width for one side of an element.\n\nborder-x   border-left-width: 1px;border-right-width: 1px;\n\n1. 没有rel=“noopener noreferrer”的情况下使用target=“_blank”是有安全风险，超链接a标签的rel=\"noopener noreferrer\"属性是一种新特性，它能让网站更安全，超链接添加rel=\"noopener noreferrer\"来防止钓鱼网站，因为它获取的window.opener的值为null\n\n1. Use place-content-center to pack items in the center of the block axis: 对应Grid 和 flexbox \n2. Use place-content-stretch to stretch grid items along their grid areas on the block axis:\n3. Breakpoint prefix sm 限制了最小值\n4. -translate-y-1/2\n5. Use inline-flex to create an inline flex container that flows with text.\n6. focus:border-blue-400\n7. Use contents to create a “phantom” container whose children act like direct children of the parent.\n```\n<div class=\"flex ...\">\n  <div class=\"flex-1 ...\">01</div>\n  <div class=\"contents\">\n    <div class=\"flex-1 ...\">02</div>\n    <div class=\"flex-1 ...\">03</div>\n  </div>\n  <div class=\"flex-1 ...\">04</div>\n</div>\n```\n1. Sass声明变量必须是『$』开头，后面紧跟变量名和变量值，而且变量名和变量值需要使用冒号：分隔开。\n\nLess 声明变量用『@』开头，其余等同 Sass。\n\nStylus 中声明变量没有任何限定，结尾的分号可有可无，但变量名和变量值之间必须要有『等号』。\n\n1. 就是当我们对 DOM 结构的修改引发 DOM 几何尺寸变化的时候，会发生回流的过程。\n    还有一种情况，是直接合成。比如利用 CSS3 的transform、opacity、filter这些属性就可以实现合成的效果，也就是大家常说的GPU加速。\n2. base64 -d  解码  linux \n3. const { name, doubleCount } = storeToRefs(store)  \n4. watchEffect 不能检测深层的变化，因此reactive 中变化无效，如果需要则 toRefs 转换\n5. V2 $attrs   1. custom events go into a @listerner bucket  2.不能绑定class \n6. Npm ls 查看依赖\n7. 可以看到结果reactive是递归会将每一层包装成Proxy对象的，深度监听每一层的property\n8. effectScope有一个可选参数为boolean，当传入true时表示阻断与父级的联系，阻断后这个scope对象将不会与父级关联，成为独立的scope。父级的stop也不会影响到它。 \n9. Last-Modified,Etag,Expires 三个同时使用时。先判断 Expire ，然后发送 Http 请求，服务器先判断 last-modified ，再判断 Etag ，必须都没有过期，才能返回 304 响应\n10. klona  fast utility to \"deep clone\" Objects, Arrays, Dates, RegExps, and more!\n11. Grep string starting with (e.g. 'S’)    grep -o 'S.*’\n12. ~: 如果写入的是 〜0.13.0，则当运行 npm update 时，会更新到补丁版本：即 0.13.1 可以，但 0.14.0 不可以。\n13. >: 接受高于指定版本的任何版本。\n14. ^: 只会执行不更改最左边非零数字的更新。 如果写入的是 ^0.13.0，则当运行 npm update 时，可以更新到 0.13.1、0.13.2 等，但不能更新到 0.14.0 或更高版本。 如果写入的是 ^1.13.0，则当运行 npm update 时，可以更新到 1.13.1、1.14.0 等，但不能更新到 2.0.0 或更高版本。\n2. firefox 子元素不缩小需要设置  You need to add min‑width:0\n3. flex 布局中子级超过了父级的宽度，需要设置 width:0 ,完全由flex 分配宽度。\n4. POSIX stands for Portable Operating System Interface.\n5.  @supports CSS at-rule 相当于功能选择器\n   ```\n   @supports (display: flex) {\n  body {\n    display: flex;\n    min-height: 100vh;\n  }\n}\n   ```\n2. https://github.com/cuixiaorui/mini-vue  vue3 source code \n\n3. react 被 startTransition 回调包裹的 setState 触发的渲染 被标记为不紧急渲染，这些渲染可能被其他紧急渲染所抢占。\n   \n4. https://hyper.is/ electron console\n5. https://cmder.net/ windows 端的console 模拟器\n6. Access-Control-Request-Private-Network: true 在所有私有网络预检请求上设置\n   Access-Control-Allow-Private-Network: true 必须在所有私有网络预检响应上设置\n7. 使用 Fragments，我们不需要在DOM中添加额外的节点。我们只需要用 React.Fragment 或才简写 <> 来包裹内容就行了\n8. vite 虚拟模块  虚拟模块是一种很实用的模式，使你可以对使用 ESM 语法的源文件传入一些编译时信息。\n9.  glob Match files using the patterns the shell uses, like stars and stuff.\n10. click.self \n我们知道在自定义组件上，只能监听自定义事件，一些原生事件（比如click）是没有办法直接触发的，但是使用.native修饰符可以帮我们办到这点\n1. offset-path  定义动画运行路径\n2. Tauri 是一个为所有主流桌面平台构建小型、快速二进制文件的框架。开发人员可以集成任何编译成 HTML、 JS 和 CSS 的前端框架来构建他们的用户界面。应用程序的后端是一个 Rust 二进制文件，具有前端可以与之交互的 API。\n3.  gitsecreat 使用： https://www.mikesay.com/2020/12/16/git-encrypt-file-in-repository/#git-secret%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8\n4. svg2pdf.js 图片转pdf\n5. stream 的另外一个模式: objectMode。它是一种对象模式，我们把一件事情、或一个文件、或一个操作，抽象成一个对象。\n   ```\n   const Readable = require('stream').Readable\n\n   const readable = Readable({ objectMode: true })\n    readable.push('a')\n    readable.push('b')\n    readable.push({})\n    readable.push(null)\n\n    readable.on('data', data => console.log(data))\n\n   ```\n6. git config --global push.followTags true\n7. Markraw 标记不会被reactive\n8. watcheffect onInvalidate 在重新运行或者停止的时候执行\n9. composedPath() 是 Event 接口的一个方法，当对象数组调用该侦听器时返回事件路径。\n10. customref  track and trigger  \n11. vueuse useMemoize 对结果加cache\n12. elementFromPoint 根据point 获取element\n13. Change-case Transform a string between camelCase, PascalCase, Capital Case, snake_case, param-case, CONSTANT_CASE and others.\n14. p-retry It does exponential backoff and supports custom retry strategies for failed operations.\n15. MutationObserver 观察dom 变化\n16. requestFullscreen\n17. passive: Boolean，设置为true时，表示 listener 永远不会调用 preventDefault()。如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告\n18. shallowReacive  shallowRef  shallowRef生成非递归响应数据，只监听第一层数据的变化\n19. 推荐在大部分时候用 watch 显式的指定依赖以避免不必要的重复触发，也避免在后续代码修改或重构时不小心引入新的依赖。watchEffect 适用于一些逻辑相对简单，依赖源和逻辑强相关的场景（或者懒惰的场景 ）。\n20. Object.fromEntries\n21. URL.revokeObjectURL() 静态方法用来释放一个之前已经存在的、通过调用 URL.createObjectURL() 创建的 URL 对象。\n22. querySelector  返回第一个匹配元素\n23. Array.prototype.at()接收一个正整数或者负整数作为参数，表示获取指定位置的成员\n24. IFC全称：Inline Formatting Context，名为行级格式化上下文。    触发：块级元素中仅包含内联级别元素\n25. The Notification interface of the Notifications API is used to configure and display desktop notifications to the user.\n26. TinyMCE 富文本编辑器\n27. Window.innerHeight  浏览器窗口的视口（viewport）高度（以像素为单位）；如果有水平滚动条，也包括滚动条高度。\n28. vuedraggable 处理拖动数据\n29. path-to-regexp   Turn a path string such as /user/:name into a regular expression. The compile function will return a function for transforming parameters into a valid path:\n30. vue router 重新render,redirect+fullpath.通过添加一个中转页实现。\n31. import { storeToRefs } from \"pinia”;\n32. html5 input number\n ```\n.no-arrow::-webkit-outer-spin-button,\n.no-arrow::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n}\n ``` \n1. vue3 类型 MayBeRef\n2. 暂停watch后更新，\n```\nignoreUpdates(() => {\n  source.value = 'ignored'\n})\n```\n\n1. dsp 读取json,csv,xlxs 数据\n2. limu 创建imutable 对象\n3. controlledRef set peek,控制数据的更新\n ```\n const num = controlledRef(0, {\n  onBeforeChange(value, oldValue) {\n    // disallow changes larger then ±5 in one operation\n    if (Math.abs(value - oldValue) > 5)\n      return false // returning `false` to dismiss the change\n  },\n})\n ```\n\n1. flush: post 推迟副作用的初始运行，直到组件的首次渲染完成。\n   watch 通过更改设置 flush: 'sync'，我们可以为每个更改都强制触发侦听器，尽管这通常是不推荐的\n   ```\n- `'pre'`: buffers invalidated effects in the same 'tick' and flushes them before rendering\n- `'post'`: async like 'pre' but fires after component updates so you can access the updated DOM\n- `'sync'`: forces the effect to always trigger synchronously\n\n { flush: 'post' }\n)\n\n   ```\n1. transx vue 动画组件   一个小巧玲珑的 vue 组件切换动画库\n2. ts-morph 修改ts 代码，封装后的ts compiler api\n3. esno 执行ts\n4. https://mermaid-js.github.io/mermaid/#/     mermaid 及其方便的画图工具\n5. vue-parallaxy Is a compontent for fast 60fps parallax scroll effects in vue 2. 实现滚动的视差效果。\n6. useWatermark,Layzcontainer. context menu  vue-vben-admin 中\n7. localForage is a fast and simple storage library for JavaScript。Wraps IndexedDB, WebSQL, or localStorage using a simple but powerful API.\n8.  markRaw 标记对下不会被reactive\n9.  indexeddb-fs is a module that allows you to store data in the browser using an API similar to that of Node's fs module.\n10. 临时安全令牌（Security Token Service，STS）\n11. *** 获取文本px宽度* @param font{String}: 字体样式**\n\n```\nString.prototype.pxWidth = function(font) {\n  // re-use canvas object for better performance\n  var canvas = String.prototype.pxWidth.canvas || (String.prototype.pxWidth.canvas = document.createElement(\"canvas\")),\n      context = canvas.getContext(\"2d\"); \n\n  font && (context.font = font);\n  var metrics = context.measureText(this);\n\n  return metrics.width;\n}\n```\n\n1. 先保存各个实例的values信息， helm get values [release] > xxx.yaml\n\n\n1. \nHTTP协议中用头部字段Accept-Encoding 和 Content-Encoding对「采用何种编码格式传输正文」进行了协定，请求头的Accept-Encoding会列出客户端支持的编码格式。当响应头的 Content-Encoding指定了gzip时，浏览器则会进行对应解压\n\n1. Transfer-Encoding，是一个 HTTP 头部字段，字面意思是「传输编码」。实际上，HTTP 协议中还有另外一个头部与编码有关：Content-Encoding（内容编码）。Content-Encoding 通常用于对实体内容进行压缩编码，目的是优化传输，\n```\nTransfer-Encoding: chunked\nTransfer-Encoding: compress\nTransfer-Encoding: deflate\nTransfer-Encoding: gzip\nTransfer-Encoding: identity\n```\n\n\n2. 逐跳消息头  这类消息头仅对单次传输连接有意义，不能通过代理或缓存进行重新转发\n\n \n2. mime  https://github.com/sindresorhus/file-type  根据文件内容判断类型\n\n1. 语义化版本控制(SemVer)\n   先简单了解下什么是语义化的版本控制，其是由GitHub发起的一份用于规范版本号递增的规则，\n\n1.  deeplinks.js allows people to easily link directly to any text selection on your website.\n2.  Vue DevUI 开源的UI\n3. standard-version\nstandard-version 会根据提交的信息类型来自动更改对应的版本号,如下:\n```\nfeat: 次版本(minor)+1\nfix: 修订号(patch) +1\nBREAK CHANGE: 主板号(marjor) +1\n```\n1. outline 能告诉用户那一个可以激发事件的html元素获取了焦点，对钟爱键盘操作的用户尤其有意义。一个清晰悦目的outline设计能提高使用表单的用户体验。\n2. CSS属性 columns 用来设置元素的列宽和列数。\n重点，设置了display: contents的元素本身不会被渲染，但是其子元素能够正常被渲染。\n3. 为了使我们的盒子居中，通过align-items属性，可以将交叉轴上的item对齐，此时使用的是垂直方向的块轴。而使用justify-content则可以对齐主轴上的项目，主轴是水平方向的。\nalign conent  用来控制多行布局   控制“多条主轴”的 flex 项目在交叉轴的对齐。\n\n1. CSS 中的 place-items 是一个简写属性 ，它允许你在相关的布局（如 Grid 或 Flexbox）中可以同时沿着块级和内联方向对齐元素 (例如：align-items 和 justify-items 属性) 。如果未提供第二个值，则第一个值作为第二个值的默认值\n\n1. filter CSS属性将模糊或颜色偏移等图形效果应用于元素。滤镜通常用于调整图像，背景和边框的渲染。\n\n1. monaco 自定义language\n```\nregister monaco.languages.register({ id: 'mySpecialLanguage' });\nsetMonarchTokensProvider base language 里面有3 \ndefineTheme  设置样式\nmonaco.editor.defineTheme('myCoolTheme', {\n                    colors: {},\n                    base: 'vs',\n                    inherit: false,\n                    rules: [\n                        { token: 'custom-info', foreground: '808080' },\n                        { token: 'custom-error', foreground: 'ff0000', fontStyle: 'bold' },\n                        { token: 'custom-notice', foreground: 'FFA500' },\n                        { token: 'custom-date', foreground: '008800' }\n                    ]\n                });\nregisterCompletionItemProvider  智能提示，遇到对应的关键词\n```\n\n1. Monarch  用来实现代码高亮   https://juejin.cn/post/6844903736867831822\n\nhttps://microsoft.github.io/monaco-editor/monarch.html\n\n1. xe-utils 提供工具类\n1. Mitt  Tiny (~200b) functional event emitter / pubsub.\n1. element-resize-detector  \n1. memoize-one 记录最近的返回结果,不同参数会重置\n1. 钱其实是“保健因子”，而不是“激励因子”，是多了没用、少了不行的东西\n2. 可以看到整个医改的核心就是放供给、促竞争和扶创新的过程\n3. 破船能过河\n4. Comlink Comlink makes WebWorkers enjoyable. 多线程\n5.  \n`Rails-style`: 按照文件的类型划分为不同的目录\n\n`Domain-style`: 按照一个功能特性或业务创建单独的目录\n\n`Ducks-style`: 优点类似于Domain-style，不过更彻底, 它通常将相关联的元素定义在一个文件下·\n\n1. \n    强约定，体现团队的规范。首先它应该避免团队成员去关心或更改构建的配置细节，暴露最小化的配置接口。 另外构建工具不仅仅是构建，通常它还会集成代码检查、测试等功能。\n\n    方便升级。尤其是团队需要维护多个项目场景, 这一点很有意义\n\n2. BEM\n```\n元素（Element），即 price 、text ，代表从属于某个块，是这个块的子元素，跟在块后面，以双下划线为间隔，使用 .btn__price 、.btn__text 表示\n\n修饰符（Modifier），即 orange 、big ，用于修改块的状态，为块添加特定的主题或样式，跟在块后面，以双连字符为间隔，使用 .btn--orange 、.btn--big 表示\n\n```   \n1.  npm-run-all\n```\nBefore: npm run clean && npm run build:css && npm run build:js && npm run build:html\nAfter: npm-run-all clean build:*\n```\n\n1. display:flow-root可以让元素块状化，同时包含格式化上下文BFC，可以用来清除浮动，去除margin合并，实现两栏自适应布局等。\n\n1. stroke-dash 是一个定义虚线和间距图形的图像工具类, 被用于轮廓描边;\n\n1. npx degit\n   \n1.  有一些环境变量，比如HOME、PATH、SHELL、UID、USER等，在用户登录之前就已经被/bin/login程序设置好了。通常环境变量被定义并保存在用户家目录下的．bash_profile文件或全局的配置文件/etc/profile中\n\n1. env命令只显示全局变量；declare命令输出所有的变量、函数、整数和已经导出的变量\n\n1. http upgrade 通常来说这一机制总是由客户端发起的 （不过也有例外，比如说可以由服务端发起升级到传输层安全协议（TLS））， 服务端可以选择是否要升级到新协议。借助这一技术，连接可以以常用的协议启动（如HTTP/1.1），随后再升级到HTTP2甚至是WebSockets.\n\n1. 因为 CommonJS 在运行时进行加载方式的动态解析，在运行时阶段才能确定的导入导出关系，因此无法进行静态编译优化和类型检查。​\n\n1. JSZip  JSZip is a javascript library for creating, reading and editing .zip files, with a lovely and simple AP\n   \n2. spy-debugger  一站式页面调试、抓包工具。远程调试任何手机浏览器页面，任何手机移动端webview（如：微信，HybridApp等）。支持HTTP/HTTPS，无需USB连接设备\n   \n3. viteshot 基于vite 的快照\n\n4. useScrollLock\n\n","slug":"overview","published":1,"updated":"2024-11-12T10:11:36.712Z","_id":"ckzf5se02001fyy8kjwqmoexv","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li>tidb<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tidb</span><br><span class=\"line\"></span><br><span class=\"line\">* 一键水平扩缩容得益于 TiDB 存储计算分离的架构的设计，可按需对计算、存储分别进行在线扩容或者缩容，扩容或者缩容过程中对应用运维人员透明。</span><br><span class=\"line\">* 金融级高可用数据采用多副本存储，数据副本通过 Multi-Raft 协议同步事务日志，多数派写入成功事务才能提交，确保数据强一致性且少数副本发生故障时不影响数据的可用性。可按需配置副本地理位置、副本数量等策略，满足不同容灾级别的要求。</span><br><span class=\"line\">* 实时 HTAP提供行存储引擎 TiKV、列存储引擎 TiFlash 两款存储引擎，TiFlash 通过 Multi-Raft Learner 协议实时从 TiKV 复制数据，确保行存储引擎 TiKV 和列存储引擎 TiFlash 之间的数据强一致。TiKV、TiFlash 可按需部署在不同的机器，解决 HTAP 资源隔离的问题。</span><br><span class=\"line\">* 云原生的分布式数据库专为云而设计的分布式数据库，通过 TiDB Operator 可在公有云、私有云、混合云中实现部署工具化、自动化。</span><br><span class=\"line\">* 兼容 MySQL 协议和 MySQL 生态兼容 MySQL 协议、MySQL 常用的功能、MySQL 生态，应用无需或者修改少量代码即可从 MySQL 迁移到 TiDB。提供丰富的数据迁移工具帮助应用便捷完成数据迁移。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">* TiDB Server：SQL 层，对外暴露 MySQL 协议的连接 endpoint，负责接受客户端的连接，执行 SQL 解析和优化，最终生成分布式执行计划。TiDB 层本身是无状态的，实践中可以启动多个 TiDB 实例，通过负载均衡组件（如 LVS、HAProxy 或 F5）对外提供统一的接入地址，客户端的连接可以均匀地分摊在多个 TiDB 实例上以达到负载均衡的效果。TiDB Server 本身并不存储数据，只是解析 SQL，将实际的数据读取请求转发给底层的存储节点 TiKV（或 TiFlash）。</span><br><span class=\"line\"></span><br><span class=\"line\">* PD (Placement Driver) Server：整个 TiDB 集群的元信息管理模块，负责存储每个 TiKV 节点实时的数据分布情况和集群的整体拓扑结构，提供 TiDB Dashboard 管控界面，并为分布式事务分配事务 ID。PD 不仅存储元信息，同时还会根据 TiKV 节点实时上报的数据分布状态，下发数据调度命令给具体的 TiKV 节点，可以说是整个集群的&quot;大脑&quot;。此外，PD 本身也是由至少 3 个节点构成，拥有高可用的能力。建议部署奇数个 PD 节点。</span><br><span class=\"line\"></span><br><span class=\"line\">* 存储节点</span><br><span class=\"line\"></span><br><span class=\"line\">    * TiKV Server：负责存储数据，从外部看 TiKV 是一个分布式的提供事务的 Key-Value 存储引擎。存储数据的基本单位是 Region，每个 Region 负责存储一个 Key Range（从 StartKey 到 EndKey 的左闭右开区间）的数据，每个 TiKV 节点会负责多个 Region。TiKV 的 API 在 KV 键值对层面提供对分布式事务的原生支持，默认提供了 SI (Snapshot Isolation) 的隔离级别，这也是 TiDB 在 SQL 层面支持分布式事务的核心。TiDB 的 SQL 层做完 SQL 解析后，会将 SQL 的执行计划转换为对 TiKV API 的实际调用。所以，数据都存储在 TiKV 中。另外，TiKV 中的数据都会自动维护多副本（默认为三副本），天然支持高可用和自动故障转移。</span><br><span class=\"line\"></span><br><span class=\"line\">    * TiFlash：TiFlash 是一类特殊的存储节点。和普通 TiKV 节点不一样的是，在 TiFlash 内部，数据是以列式的形式进行存储，主要的功能是为分析型的场景加速。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">```   </span><br><span class=\"line\">2. clickhouse</span><br></pre></td></tr></table></figure>\n云数据库ClickHouse是开源列式数据库ClickHouse的云上托管服务，数据库内核完全兼容开源社区版本。阿里云提供了一套企业级数据库管理平台，增强了数据安全、集群动态扩容、监控运维等企业级功能，与云上其他数据产品打通，可以便捷地构建云上海量数据分析平台。</li>\n</ol>\n<p>云数据库ClickHouse是面向联机分析处理的列式数据库，支持SQL查询，且查询性能好，特别是基于大宽表的聚合分析查询性能非常优异，比其他分析型数据库速度快一个数量级。主要特性如下。</p>\n<p>交互式报表</p>\n<ul>\n<li><pre><code>    基于ClickHouse和BI工具构建实时运营监控报表\n</code></pre>\n<p>利用ClickHouse构建实时交互式报表，实时分析订单、收入、用户数等核心业务指标；构建用户来源分析系统，跟踪各渠道PV、UV来源。</p>\n</li>\n<li><p>海量数据实时多维查询</p>\n<ul>\n<li><pre><code>    在数亿至数百亿记录规模大宽表，数百以上维度自由查询，响应时间通常在100毫秒以内。让业务人员能持续探索式查询分析，无需中断分析思路，便于深挖业务价值，具有非常好的查询体验。\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>用户画像分析<br>随着数据时代的发展，各行各业数据平台的体量越来越大，用户个性化运营的诉求也越来越突出，用户标签系统，做为个性化千人千面运营的基础服务，应运而生。如今，几乎所有行业（如互联网、游戏、教育等）都有实时精准营销的需求。通过系统生成用户画像，在营销时通过条件组合筛选用户，快速提取目标群体。</p>\n<ul>\n<li><p>基于ClickHouse构建用户特征行为分析系统</p>\n<ul>\n<li><pre><code>    利用ClickHouse对人群标签数据进行实时筛选并进行群体画像统计；自定义条件对海量明细日志记录进行过滤，分析用户行为。\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>用户分群统计</p>\n<ul>\n<li><pre><code>    构建用户特征大宽表，任意选择用户属性标签数据和筛选条件，进行人群特征统计分析。\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>访客来源分析展示</p>\n<ul>\n<li><pre><code>    通过批量离线计算对用户访问日志中的用户行为进行关联，生成用户行为路径大宽表同步到ClickHouse，基于ClickHouse构建交互式访客来源探索分析可视化系统。\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>携程旅行网是中国领先的综合性旅行服务公司，提供酒店预订、机票预订、旅游度假等服务。携程在数据处理和分析方面面临着海量数据、高并发查询和复杂业务逻辑的挑战。为了应对这些挑战，携程采用了 ClickHouse 作为其数据仓库和数据分析平台。ClickHouse 帮助携程实现了以下目标：</p>\n<ul>\n<li><p>快速处理海量数据：携程每天需要处理数百万条订单数据，ClickHouse 可以高效地处理这些数据，使得数据分析和查询更加快速。</p>\n</li>\n<li><p>高并发查询：携程需要应对高并发的查询需求，ClickHouse 可以支持高并发查询，使得数据分析和查询更加高效。</p>\n</li>\n<li><p>灵活的业务逻辑：携程的业务逻辑非常复杂，需要根据不同的维度和指标进行数据分析和查询，ClickHouse 提供了灵活的数据建模和查询语言，可以满足携程的复杂业务需求。<br>通过使用 ClickHouse，携程可以更加高效地管理数据、进行数据分析和查询，为业务决策提供有力的支持。</p>\n</li>\n<li><p>缺乏广泛的社区支持：虽然 ClickHouse 是一款开源免费的工具，但其社区支持仍然相对较弱。与其他热门开源项目相比，ClickHouse 的社区规模和贡献可能较少。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2. mongodb  \t•\t分片集群可以提供更加良好的水平扩展能力。在分片集群架构中，各个节点以副本集架构为基础，通过数据分片存储的方式实现高并发读写。您可以通过扩展分片集群架构中的Mongos、Shard节点数量和规格实现IO吞吐和存储等能力的扩展。</span><br></pre></td></tr></table></figure>\n<p> 集群架构<br>分片服务（shard）和配置服务（configserver）采用三节点副本集架构，稳定可靠；支持代理服务（mongos）和分片服务（mongos）灵活配置个数，线性扩展数据库系统的存储空间及读写性能。</p>\n</li>\n</ul>\n<p>灵活多变的业务场景<br>云数据库MongoDB采用No-Schema的方式，免去您变更表结构的痛苦，非常适用于初创型的业务需求。您可以将模式固定的结构化数据存储在RDS（Relational Database Service）中，模式灵活的业务存储在MongoDB中，高热数据存储在云数据库Redis或云数据库Memcache中，实现对业务数据高效存取，降低存储数据的投入成本。</p>\n<p>物联网应用<br>云数据库MongoDB具有高性能和异步数据写入功能，特定场景下可达到内存数据库的处理能力。同时，云数据库MongoDB中的分片集群实例，可按需配置Mongos和Shard组件的配置和个数，性能及存储空间可实现无限扩展，非常适合物联网高并发写入的场景。详情请参见变更配置方案概览。</p>\n<p>海量数据下，性能优越</p>\n<ul>\n<li>在使用场合下，千万级别的文档对象，近 10G 的数据，对有索引的 ID 的查询不比MySQL慢，而对非索引字段的查询，则是全面胜出。MySQL实际无法胜任大数据下任意字段的查询，而MongoDB的查询性能令人惊讶。写入性能同样很令人满意，同样写入百万级别的数据，MongoDB比我以前使用过的CouchDB要快得多，基本 10 分钟以下可以解决。观察过程中，MongoDB远算不上 CPU 杀手。</li>\n</ul>\n<p> 内置Auto-Sharding自动分片支持云级扩展性，分片简单</p>\n<p>劣势：</p>\n<ul>\n<li>不支持事务操作</li>\n<li>所有事务要求严格的系统（银行系统）肯定不能用它。</li>\n<li>MongoDB占用空间过大<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2. </span><br><span class=\"line\">3. Proxy集群版实例，适用于数据容量较大、QPS要求较高的业务场景。该架构类型实例默认提供Proxy代理，当客户端请求时将由代理节点转发至Redis数据节点，通过代理实现负载均衡、长连接等功能特性，</span><br></pre></td></tr></table></figure>\n   Cluster是一个无中心的分布式架构，高可用切换机制已内置进集群，其QPS性能优于Proxy集群版实例。</li>\n</ul>\n<p>代理模式：客户端通过单机的方式进行连接，流量会通过代理转发到Redis节点，有一些命令使用会受限制</p>\n<p>直连模式： 数据流量将直接访问Redis节点。 注意：需要使用支持cluster协议的客户端。<br> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">2. 双机热备，自动切换。当主节点发生故障后，从节点会被迅速提升为新的主节点，继续提供服务。</span><br><span class=\"line\">3. 灾备实例通过内网专线同步，具有较低的同步时延和更高的稳定性，同步链路质量远优于公网网络。</span><br><span class=\"line\">         目前推广期专线流量费用免费，商业化收费时间将另行通知。</span><br><span class=\"line\">4. 使用主备高可用架构，避免了数据库的单点风险。</span><br><span class=\"line\">5. 提供独立的数据库连接地址，灾备实例可提供读访问能力，用于就近接入、数据分析等场景，设备冗余成本低。</span><br><span class=\"line\">6. 创建只读实例成功后，您可以开启读写代理，在程序中配置读写代理的地址，由读写代理实现读请求被自动转发到只读实例，写请求被自动转发到主实例。</span><br><span class=\"line\">7. 创建RDS实例后， 会自动将实例所在的VPC段添加至白名单中，即该VPC段中所有的IP都可以访问。</span><br><span class=\"line\">8. 透明数据加密（Transparent Data Encryption (简称TDE)）是指可以在文件层对数据和文件进行实时加密和解密，落盘的文件是加密后的内容，而对于上层应用系统和开发人员而言，加解密过程是无感知的，写入和读取的内容是明文内容，所以叫做透明数据加密</span><br><span class=\"line\">9.  高可用  免费开启读写分离，实现读写请求自动分流，减轻主实例压力。</span><br><span class=\"line\"></span><br><span class=\"line\">10. 半同步复制（Semisynchronous replication），介于异步复制和全同步复制之间，主库在执行完客户端提交的事务后不是立刻返回给客户端，而是等待至少一个从库接收到并写到relay log中才返回给客户端</span><br><span class=\"line\">11. 三节点 数据复制方式是强一致性。金融证券对数据一致性要求高的。</span><br><span class=\"line\">12. Zod is a TypeScript-first schema declaration and validation library</span><br><span class=\"line\">13. vsce login ryansecreat</span><br><span class=\"line\">14. vue-object-state A typescript library that helps you keep track of changes in your dtos</span><br><span class=\"line\">15. Vue 脚手架 https://github.com/vuejs/awesome-vue?tab=readme-ov-file#scaffold</span><br><span class=\"line\">16. https://oruga-ui.com/documentation/  headless UI </span><br><span class=\"line\">17. https://vue-highlight-text.surge.sh/ 高亮显示</span><br><span class=\"line\">18. FZF (stylised as fzf)  is a command line based fuzzy finder built using Golang</span><br></pre></td></tr></table></figure><br>const list &#x3D; [‘go’, ‘javascript’, ‘python’, ‘rust’,<br>              ‘swift’, ‘kotlin’, ‘elixir’, ‘java’,<br>              ‘lisp’, ‘v’, ‘zig’, ‘nim’, ‘rescript’,<br>              ‘d’, ‘haskell’]</p>\n<p>const fzf &#x3D; new Fzf(list)<br>const entries &#x3D; fzf.find(‘li’)<br>console.log(‘ranking is:’)<br>entries.forEach(entry &#x3D;&gt; console.log(entry.item)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Highlights https://vue-highlight-text.surge.sh/#Example</span><br><span class=\"line\">2. vue network 画图工具 https://dash14.github.io/v-network-graph/getting-started.html </span><br><span class=\"line\">3. VNT  一个简单、高效、能快速组建虚拟局域网的工具</span><br><span class=\"line\">4. 根据路由生产面包屑  https://nxtchg.github.io/pieces/vue/vs-crumbs/#/foo/bar</span><br><span class=\"line\">5. Vue breads 与vuerouter 相结合 https://scrum.github.io/vue-2-breadcrumbs/</span><br><span class=\"line\">6. 根据vue文件生产文档  https://vuese.github.io/vuese-explorer/</span><br><span class=\"line\">7. numeral 处理number</span><br><span class=\"line\">8. 在线代码编辑： https://stackblitz.com/</span><br><span class=\"line\">9. JSON5 is an extension to the popular JSON file format that aims to be easier to write and maintain by hand</span><br><span class=\"line\"></span><br><span class=\"line\">json5 是json 的超集，key  可以不加引号</span><br><span class=\"line\">1. du -sh * | sort -n     查询文件大小</span><br><span class=\"line\">2. </span><br><span class=\"line\">3. Window.getComputedStyle()方法返回一个对象</span><br><span class=\"line\">4. consola  Elegant Console Wrapper</span><br><span class=\"line\">5. 副本集架构</span><br><span class=\"line\">    副本集提供3、5、7节点架构，其中包含一个可供读写访问的Primary节点，一个Hidden节点，实例中剩余节点为只读节点。同时，京东云提供扩缩容能力，帮助您按业务需求进行服务器的部署。</span><br><span class=\"line\"></span><br><span class=\"line\">副本集\tMongoDB副本集是一组维护相同数据集的Mongod进程，副本集提供冗余和高可用，是所有生产部署的基础。</span><br><span class=\"line\"></span><br><span class=\"line\">分片集群\t分片是一种用于在多台计算机之间分配数据的方法，MongoDB使用分片集群来支持具有非常大数据集和高吞吐量操作的部署，每个分片集群包含Mongos、Shard、Config Server三种组件。</span><br><span class=\"line\">1.   单可用区部署   可以承受机架级别的故障。</span><br><span class=\"line\">2.   多可用区部署   可以承受机房级别的故障，但因为不同可用区之间存在一定的网络延迟，所以对于单个更新的响应时间多可用区部署会比单可用区部署长</span><br><span class=\"line\">3.   kafka</span><br></pre></td></tr></table></figure>\n<p>   1 提高京东云 Kafka的吞吐量:<br>​ Kafka中主题topic作为主要接受消息的载体，一般会分成一个或多个分区partition，每个partiton相当于是一个子queue，多个partition就相当于多个子queue在同时工作进行写盘和交互处理，因此增加partition可以增加单个主题topic的吞吐量。在物理结构上，每个partition对应一个物理的文件，Kafka中会把消息持久化到本地文件系统中，并且保持o(1)极高的效率。磁盘的IO读写是非常耗资源的性能，所以提高磁盘的iops和吞吐量，可以提高消息写入磁盘的速度，相应的提高吞吐。Kafka中的主题都是由消费组consumer group来消费的。如果这个consumer group里面consumer的数量小于topic里面partition的数量，就会有consumer thread同时处理多个partition。如果这个consumer group里面consumer的数量大于topic里面partition的数量，多出的consumer thread就会闲置，剩下的是一个consumer thread处理一个partition，这就造成了资源的浪费，因为一个partition不可能被两个consumer thread去处理。</p>\n<p>建议：1）增加分区数partition可以有效的提高消息的吞吐量，并且分区数最好是集群处理节点broker的整数倍，这样每个副本分配到的分区数比较均匀。</p>\n<p>​ 2）采用高iops和高吞吐的磁盘规格和SSD类型的磁盘。</p>\n<p>​ 3）增加生产者producer和消费者consumer的数量，并且消费者的数量最好可以和分区数相等。</p>\n<p>我们把多个 consumer实例放在一个group里有什么好处吗？实际上，consumer group是用于高伸缩性，高容错性的consumer机制。组内多个consumer实例可以同时读取kafka消息，而一旦某个consumer挂了，group会立即崩溃，这时候负责的分区交给其他consumer负责，从而保证group可以正常工作。这过程我们称呼为 重平衡（rebalance）。<br>   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4.   redis</span><br></pre></td></tr></table></figure><br>   海量存储，无限容量。集群版采用分布式架构，数据分布在多台物理机上，突破单机物理限制，解决海量数据存储在 Redis 上的瓶颈<br>   工作时主节点和从节点数据实时同步，当主节点故障时，系统将在15秒左右将从节点提升为主节点，开始提供服务。当完全恢复后，主从所在的AZ会跟创建时保持一致。<br>   ES集群将部署在 VPC 内，只有在同一个VPC下才能访问ES集群，因此为保证内网顺利访问，建议选择已有云上业务的区域位置所在 VPC。多可用区部署模式下，也是选择同一个 VPC。同一个 VPC 内，不同可用区子网之间是互通的。<br>   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\">5.   tidb</span><br></pre></td></tr></table></figure><br>全新的分布式数据库，支持PB级数据容量，集群QPS上百万。<br>真正的多活架构，多个节点可以同时提供数据读写服务，并且读写能力均可通过增加节点的方式进行水平扩展。<br>整个集群数据强一致，所有节点读取的数据均为最新数据，无传统主从架构的数据延迟问题。<br>与 MySQL 高度兼容，使用 TiDB 像使用单机MySQL一样简单，可以从 MySQL 无缝切换到 TiDB，几乎无需修改代码。<br>可直接在同一份数据上进行高效的数据查询、分析，简化了架构，提升了数据分析的实时性，同时降低了成本。<br>全面支持IPV6。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 多活架构及故障自恢复</span><br><span class=\"line\">    真正的多活架构，各个节点均可读写。TiDB 使用多副本进行数据存储，并依赖业界最先进的 Raft 多数派选举算法确保数据 100% 强一致性和高可用。主副本故障时自动切换，无需人工介入，自动保障业务的连续性。</span><br><span class=\"line\">2. 水平弹性扩展</span><br><span class=\"line\"></span><br><span class=\"line\">分布式的 TiDB 可随着数据增长而无缝地水平扩展，只需要通过增加更多的机器来满足业务增长需要，应用层可以不用关心存储的容量和吞吐。 TiDB 根据存储、网络、距离等因素，动态进行负载均衡调整，以保证更优的读写性能。    </span><br><span class=\"line\">2. 将表中的数据按照一定的规则拆分为多个部分，每个部分的数据均存储在不同的计算节点上，每个计算节点上的数据称为一个分片。    </span><br><span class=\"line\">3. 可用区是指在同一地域下，电力、网络等基础设施互相独立的物理区域。一个地域包含一个或多个可用区，同一地域下的多个可用区可以彼此连通   </span><br><span class=\"line\">4. 实例是一个独立占用CPU和内存资源的的数据库服务进程，您可在实例中创建或管理多个数据库。</span><br><span class=\"line\">5. 在集群中，需要先部署 Ingress Controller，再创建 Ingress 资源对象。Ingress Controller 控制器是一个 docker 容器，容器镜像中包含一个负载均衡器（比如：Nginx 或是 HAProxy）和一个 Ingress Controller。</span><br><span class=\"line\">6. helm get values  terrabase-console-runtime-76887c7974-qtglz  -n tpaas-terrabase   </span><br><span class=\"line\">7. kubectl edit ing dts-console-ingress -n tpaas-dts </span><br><span class=\"line\">8. css selector</span><br></pre></td></tr></table></figure><br>   选中后面有h2的h1<br>   h1:has(+ h2) {<br>     margin: 0 0 0.25rem 0;<br>   } </p>\n<p>   is 更精炼的使用selector<br>   ul li,<br>   ol li {}<br>   等于<br>   :is(ul, ol) li {}</p>\n<p>   body:has(video, audio) {<br>     &#x2F;* styles to apply if the content contains audio OR video <em>&#x2F;<br>   }<br>   body:has(video):has(audio) {<br>     &#x2F;</em> styles to apply if the content contains both audio AND video *&#x2F;<br>   }</p>\n<p>   这两个函数的区别在于 :where() 函数的优先级总是零，则 :is() 函数的优先级取决于其最特定参数的优先级。<br>   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9.  docker build -f ./Dockerfile.base . --build-arg TPAAS_RUNTIME_IMAGE=hub.jdcloud.com/baseimages/openeuler:22.03lts-amd64-depends-tools-v20220801</span><br><span class=\"line\">10. find ./ -type f -name yarn.lock</span><br><span class=\"line\">11. Sqids  Sqids (pronounced &quot;squids&quot;) is an open-source library that lets you generate YouTube-looking IDs from numbers</span><br><span class=\"line\">12. ssh-keygen -R ip 清理问题ip</span><br><span class=\"line\">13. monaco.editor.setModelMarkers(model, &quot;owner&quot;, markers); 标记下划线并给出hint</span><br><span class=\"line\">14. 添加命令  editor.addCommand(monaco.KeyMod.CtrlCmd   可以监控keys 事件  </span><br><span class=\"line\">15. addAction 添加右键菜单和快捷键\\</span><br><span class=\"line\">16. 显示到对应位置的内容，指定行和列  revealPositionInCenter </span><br><span class=\"line\">17. tokenizer 做匹配，rules 指定样式  </span><br><span class=\"line\">18. registerFoldingRangeProvider 提供折叠功能</span><br><span class=\"line\">19. provideHover 提供hover &#123;range,contents&#125;</span><br><span class=\"line\">20. provideInlayHints 提供decorator 的hint</span><br><span class=\"line\">21. 那就是它们有不同的特殊性。:where() 是简单的，其特异性总是为0，而 :is() 的特异性为最强的选择器。</span><br><span class=\"line\">22. 特异性等级评分：</span><br><span class=\"line\">ID——特异性得分为 100</span><br><span class=\"line\">内联样式——特异性得分为 1000</span><br><span class=\"line\">元素和伪类——特异性得分为 1</span><br><span class=\"line\">类、伪类和属性——特异性得分为 10</span><br><span class=\"line\">1.  helm get values mongodb-back -n tpaas-mongodb</span><br><span class=\"line\">2.  marker:text-sky-400 用量设置List marker 的样式</span><br><span class=\"line\">3.  VScode 设置参数</span><br></pre></td></tr></table></figure><br>   {<br>    &#x2F;&#x2F; See <a href=\"https://go.microsoft.com/fwlink/?LinkId=733558\">https://go.microsoft.com/fwlink/?LinkId=733558</a><br>    &#x2F;&#x2F; for the documentation about the tasks.json format<br>    “version”: “2.0.0”,<br>    “tasks”: [<br>        {<br>            “label”: “kill: process”,<br>            “type”: “shell”,<br>            “command”: “kill”,<br>            “args”: [<br>                “-9”,<br>                “${input:pid}”,<br>            ],<br>            “problemMatcher”: []<br>        }<br>    ],<br>    “inputs”: [<br>        {<br>            “id”: “pid”,<br>            “type”: “pickString”,<br>            “description”: “pid to kill”,<br>            “command”: “pgrep”,<br>            “args”: [<br>                “${input:procesName}”<br>            ]<br>        },<br>        {<br>            “id”: “procesName”,<br>            “type”: “promptString”,<br>            “description”: “process name”,<br>            “default”: “code”<br>        }<br>    ]<br>}<br>   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 需要在不同环境下加载npm包不同的入口文件，显然一个 main 字段已经不能够满足我们的需求，这就衍生出来了 module 与 browser 字段。</span><br><span class=\"line\">https://github.com/SunshowerC/blog/issues/8</span><br><span class=\"line\">1. ts-morph  Setup, navigation, and manipulation of the TypeScript AST </span><br><span class=\"line\">2.  获取文字长度</span><br></pre></td></tr></table></figure><br>     function getwidth(txt, font) {<br>      var canvas &#x3D; document.createElement(‘canvas’)<br>      var ctx &#x3D; canvas.getContext(‘2d’)<br>      ctx.font &#x3D; font<br>      return ctx.measureText(txt).width<br>    }<br>   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3. headless ui  https://headlessui.com/ </span><br><span class=\"line\">4. @rollup/plugin-node-resolve  自动添加路径index</span><br><span class=\"line\">5. backdrop:bg-gray-50 设置蒙板</span><br><span class=\"line\">6.  first-letter:text-7xl  first-line:uppercase</span><br><span class=\"line\">7. vscode plugin 发布   https://code.visualstudio.com/api/working-with-extensions/publishing-extension     </span><br><span class=\"line\">8. aimless The missing JS randomness library</span><br><span class=\"line\">9. vue-js-modal  </span><br><span class=\"line\">10. gogocode 其中 $_$1 和 $_$2 相当于正则中的通配符，但是在这里只会匹配代码里有效的 AST 节点，$$$ 则可以匹配剩下的节点</span><br><span class=\"line\">11. window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__，是 qiankun 提供的。根据源码分析，它会拿到微应用html入口url之后，将pathname的最后一项去掉，再组装起来。譬如，子应用入口配置：http://local.soame.domain/mar...，那么经过处理后，会变成http://local.soame.domain/</span><br><span class=\"line\"></span><br><span class=\"line\">12. const SpeedMeasurePlugin = require(&#x27;speed-measure-webpack-plugin&#x27;)  查看webpack 速度</span><br><span class=\"line\">13. 一个专注于前端视觉效果的集合应用，包含CSS动效、Canvas动画、人工智能应用等上百个案例 https://github.com/hepengwei/visualization-collection/tree/master</span><br><span class=\"line\">14. npm i &lt;alias&gt;@npm:&lt;packageName&gt;@&lt;version&gt;   一个包安装不同的版本  </span><br><span class=\"line\">15. Chokidar    Minimal and efficient cross-platform file watching library</span><br><span class=\"line\">16. koa2-connect   Use Express/Connect middleware with Koa.</span><br><span class=\"line\">17. npm list -g --depth 0  </span><br><span class=\"line\">18. 容器内使用 printenv 命令来查看容器内的环境变量。</span><br><span class=\"line\">19. daisy-init --origin direct:https://coding.jd.com/daas-fe/dms-new-console.git --branch template</span><br><span class=\"line\">20. npm cache clean --force    npm cache verify</span><br><span class=\"line\">21. utilities 模块包含的是原子化的样式（每一个基础类都只实现一个基础的样式功能），应该最后加载的。这样在其中定义的样式就有最高的优先级，即确保基础类应用到 HTML 页面时，可以覆盖其他样式。</span><br><span class=\"line\">  所有使用 @layer 添加的样式，它们的类名在应用到 HTML 页面时，也像 Tailwind 内置的基础类一样，都支持使用状态变量（这是使用普通方式添加的样式所不具有的优势）</span><br><span class=\"line\"></span><br><span class=\"line\">   而且使用指令 @layer 添加自定义样式，也会在编译时自动进行简化 purge 处理，只有在 HTML 页面的元素中使用了类名，相应的自定义样式才会被编译到最终的样式表中。如果希望自定义的样式最后总是编译到样式表中，则可以不使用指令 @layer 直接写在主样式表中（也需要注意 CSS 代码添加的顺序，一般应该保证 @tailwind utilities 模块最后引入）</span><br><span class=\"line\">1. @tailwindcss/line-clamp</span><br><span class=\"line\">2. list-disc. list-decimal</span><br><span class=\"line\">3. form.resetfileds 需要form-item 设置prop,form设置 model </span><br><span class=\"line\">4. Selecting all text in one click</span><br><span class=\"line\">     Use select-all to automatically select all the text in an element when a user clicks。</span><br><span class=\"line\">5. text-[12px] 指定字体大小</span><br><span class=\"line\">6. Using spaces and underscores</span><br><span class=\"line\">   Since whitespace denotes the end of a class in HTML, replace any spaces in an arbitrary value with an underscore:&lt;div class=&quot;before:content-[&#x27;Hello_World&#x27;]&quot;&gt;</span><br><span class=\"line\">7. Add borders between horizontal children</span><br><span class=\"line\">   Add borders between horizontal elements using the divide-x-&#123;width&#125; utilities.</span><br><span class=\"line\">8.  Add borders between stacked children</span><br><span class=\"line\">   Add borders between stacked elements using the divide-y-&#123;width&#125; utilities.</span><br><span class=\"line\">9.  focus-within (:focus-within)</span><br><span class=\"line\">   Style an element when it or one of its descendants has focus using the focus-within modifier:</span><br><span class=\"line\">10. 连续修饰符</span><br></pre></td></tr></table></figure><br>div:has(h2):has(ul) {<br>  background: black;<br>} </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. currentColor  和font color 一致</span><br><span class=\"line\"> </span><br><span class=\"line\">2. target (:target)</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<p>Style an element if its ID matches the current URL fragment using the target modifier:</p>\n<p>first (:first-child)   last (:last-child)</p>\n<p>only (:only-child)<br>Style an element if it’s the only child using the only modifier:</p>\n<p>empty (:empty)<br>Style an element if it has no content using the empty modifier:</p>\n<p>in-range (:in-range)<br>Style an input when it’s value is within a specified range limit using the in-range modifier:</p>\n<input min=\"1\" max=\"5\" class=\"in-range:border-green-500 ...\" />\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. peer </span><br></pre></td></tr></table></figure>\n<pre><code>&lt;input type=&quot;email&quot; class=&quot;peer ...&quot;/&gt;\n&lt;p class=&quot;mt-2 invisible peer-invalid:visible text-pink-600 text-sm&quot;&gt;\n  Please provide a valid email address.\n&lt;/p&gt;\n</code></pre>\n   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2. Style the ::before and ::after pseudo-elements using the before and after modifiers:</span><br><span class=\"line\">   after:content-[&#x27;*’] after:ml-0.5</span><br><span class=\"line\">3. Justify-end Justify-start</span><br><span class=\"line\">4. Use the border-&#123;side&#125;, border-&#123;side&#125;-0, border-&#123;side&#125;-2, border-&#123;side&#125;-4, or border-&#123;side&#125;-8 utilities to set the border width for one side of an element.</span><br><span class=\"line\"></span><br><span class=\"line\">border-x   border-left-width: 1px;border-right-width: 1px;</span><br><span class=\"line\"></span><br><span class=\"line\">1. 没有rel=“noopener noreferrer”的情况下使用target=“_blank”是有安全风险，超链接a标签的rel=&quot;noopener noreferrer&quot;属性是一种新特性，它能让网站更安全，超链接添加rel=&quot;noopener noreferrer&quot;来防止钓鱼网站，因为它获取的window.opener的值为null</span><br><span class=\"line\"></span><br><span class=\"line\">1. Use place-content-center to pack items in the center of the block axis: 对应Grid 和 flexbox </span><br><span class=\"line\">2. Use place-content-stretch to stretch grid items along their grid areas on the block axis:</span><br><span class=\"line\">3. Breakpoint prefix sm 限制了最小值</span><br><span class=\"line\">4. -translate-y-1/2</span><br><span class=\"line\">5. Use inline-flex to create an inline flex container that flows with text.</span><br><span class=\"line\">6. focus:border-blue-400</span><br><span class=\"line\">7. Use contents to create a “phantom” container whose children act like direct children of the parent.</span><br></pre></td></tr></table></figure>\n<div class=\"flex ...\">\n  <div class=\"flex-1 ...\">01</div>\n  <div class=\"contents\">\n    <div class=\"flex-1 ...\">02</div>\n    <div class=\"flex-1 ...\">03</div>\n  </div>\n  <div class=\"flex-1 ...\">04</div>\n</div>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Sass声明变量必须是『$』开头，后面紧跟变量名和变量值，而且变量名和变量值需要使用冒号：分隔开。</span><br><span class=\"line\"></span><br><span class=\"line\">Less 声明变量用『@』开头，其余等同 Sass。</span><br><span class=\"line\"></span><br><span class=\"line\">Stylus 中声明变量没有任何限定，结尾的分号可有可无，但变量名和变量值之间必须要有『等号』。</span><br><span class=\"line\"></span><br><span class=\"line\">1. 就是当我们对 DOM 结构的修改引发 DOM 几何尺寸变化的时候，会发生回流的过程。</span><br><span class=\"line\">    还有一种情况，是直接合成。比如利用 CSS3 的transform、opacity、filter这些属性就可以实现合成的效果，也就是大家常说的GPU加速。</span><br><span class=\"line\">2. base64 -d  解码  linux </span><br><span class=\"line\">3. const &#123; name, doubleCount &#125; = storeToRefs(store)  </span><br><span class=\"line\">4. watchEffect 不能检测深层的变化，因此reactive 中变化无效，如果需要则 toRefs 转换</span><br><span class=\"line\">5. V2 $attrs   1. custom events go into a @listerner bucket  2.不能绑定class </span><br><span class=\"line\">6. Npm ls 查看依赖</span><br><span class=\"line\">7. 可以看到结果reactive是递归会将每一层包装成Proxy对象的，深度监听每一层的property</span><br><span class=\"line\">8. effectScope有一个可选参数为boolean，当传入true时表示阻断与父级的联系，阻断后这个scope对象将不会与父级关联，成为独立的scope。父级的stop也不会影响到它。 </span><br><span class=\"line\">9. Last-Modified,Etag,Expires 三个同时使用时。先判断 Expire ，然后发送 Http 请求，服务器先判断 last-modified ，再判断 Etag ，必须都没有过期，才能返回 304 响应</span><br><span class=\"line\">10. klona  fast utility to &quot;deep clone&quot; Objects, Arrays, Dates, RegExps, and more!</span><br><span class=\"line\">11. Grep string starting with (e.g. &#x27;S’)    grep -o &#x27;S.*’</span><br><span class=\"line\">12. ~: 如果写入的是 〜0.13.0，则当运行 npm update 时，会更新到补丁版本：即 0.13.1 可以，但 0.14.0 不可以。</span><br><span class=\"line\">13. &gt;: 接受高于指定版本的任何版本。</span><br><span class=\"line\">14. ^: 只会执行不更改最左边非零数字的更新。 如果写入的是 ^0.13.0，则当运行 npm update 时，可以更新到 0.13.1、0.13.2 等，但不能更新到 0.14.0 或更高版本。 如果写入的是 ^1.13.0，则当运行 npm update 时，可以更新到 1.13.1、1.14.0 等，但不能更新到 2.0.0 或更高版本。</span><br><span class=\"line\">2. firefox 子元素不缩小需要设置  You need to add min‑width:0</span><br><span class=\"line\">3. flex 布局中子级超过了父级的宽度，需要设置 width:0 ,完全由flex 分配宽度。</span><br><span class=\"line\">4. POSIX stands for Portable Operating System Interface.</span><br><span class=\"line\">5.  @supports CSS at-rule 相当于功能选择器</span><br></pre></td></tr></table></figure>\n   @supports (display: flex) {\n  body {\n    display: flex;\n    min-height: 100vh;\n  }\n}\n   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2. https://github.com/cuixiaorui/mini-vue  vue3 source code </span><br><span class=\"line\"></span><br><span class=\"line\">3. react 被 startTransition 回调包裹的 setState 触发的渲染 被标记为不紧急渲染，这些渲染可能被其他紧急渲染所抢占。</span><br><span class=\"line\">   </span><br><span class=\"line\">4. https://hyper.is/ electron console</span><br><span class=\"line\">5. https://cmder.net/ windows 端的console 模拟器</span><br><span class=\"line\">6. Access-Control-Request-Private-Network: true 在所有私有网络预检请求上设置</span><br><span class=\"line\">   Access-Control-Allow-Private-Network: true 必须在所有私有网络预检响应上设置</span><br><span class=\"line\">7. 使用 Fragments，我们不需要在DOM中添加额外的节点。我们只需要用 React.Fragment 或才简写 &lt;&gt; 来包裹内容就行了</span><br><span class=\"line\">8. vite 虚拟模块  虚拟模块是一种很实用的模式，使你可以对使用 ESM 语法的源文件传入一些编译时信息。</span><br><span class=\"line\">9.  glob Match files using the patterns the shell uses, like stars and stuff.</span><br><span class=\"line\">10. click.self </span><br><span class=\"line\">我们知道在自定义组件上，只能监听自定义事件，一些原生事件（比如click）是没有办法直接触发的，但是使用.native修饰符可以帮我们办到这点</span><br><span class=\"line\">1. offset-path  定义动画运行路径</span><br><span class=\"line\">2. Tauri 是一个为所有主流桌面平台构建小型、快速二进制文件的框架。开发人员可以集成任何编译成 HTML、 JS 和 CSS 的前端框架来构建他们的用户界面。应用程序的后端是一个 Rust 二进制文件，具有前端可以与之交互的 API。</span><br><span class=\"line\">3.  gitsecreat 使用： https://www.mikesay.com/2020/12/16/git-encrypt-file-in-repository/#git-secret%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8</span><br><span class=\"line\">4. svg2pdf.js 图片转pdf</span><br><span class=\"line\">5. stream 的另外一个模式: objectMode。它是一种对象模式，我们把一件事情、或一个文件、或一个操作，抽象成一个对象。</span><br></pre></td></tr></table></figure>\n   const Readable = require('stream').Readable\n\n<p>   const readable &#x3D; Readable({ objectMode: true })<br>    readable.push(‘a’)<br>    readable.push(‘b’)<br>    readable.push({})<br>    readable.push(null)</p>\n<pre><code>readable.on(&#39;data&#39;, data =&gt; console.log(data))\n</code></pre>\n   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6. git config --global push.followTags true</span><br><span class=\"line\">7. Markraw 标记不会被reactive</span><br><span class=\"line\">8. watcheffect onInvalidate 在重新运行或者停止的时候执行</span><br><span class=\"line\">9. composedPath() 是 Event 接口的一个方法，当对象数组调用该侦听器时返回事件路径。</span><br><span class=\"line\">10. customref  track and trigger  </span><br><span class=\"line\">11. vueuse useMemoize 对结果加cache</span><br><span class=\"line\">12. elementFromPoint 根据point 获取element</span><br><span class=\"line\">13. Change-case Transform a string between camelCase, PascalCase, Capital Case, snake_case, param-case, CONSTANT_CASE and others.</span><br><span class=\"line\">14. p-retry It does exponential backoff and supports custom retry strategies for failed operations.</span><br><span class=\"line\">15. MutationObserver 观察dom 变化</span><br><span class=\"line\">16. requestFullscreen</span><br><span class=\"line\">17. passive: Boolean，设置为true时，表示 listener 永远不会调用 preventDefault()。如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告</span><br><span class=\"line\">18. shallowReacive  shallowRef  shallowRef生成非递归响应数据，只监听第一层数据的变化</span><br><span class=\"line\">19. 推荐在大部分时候用 watch 显式的指定依赖以避免不必要的重复触发，也避免在后续代码修改或重构时不小心引入新的依赖。watchEffect 适用于一些逻辑相对简单，依赖源和逻辑强相关的场景（或者懒惰的场景 ）。</span><br><span class=\"line\">20. Object.fromEntries</span><br><span class=\"line\">21. URL.revokeObjectURL() 静态方法用来释放一个之前已经存在的、通过调用 URL.createObjectURL() 创建的 URL 对象。</span><br><span class=\"line\">22. querySelector  返回第一个匹配元素</span><br><span class=\"line\">23. Array.prototype.at()接收一个正整数或者负整数作为参数，表示获取指定位置的成员</span><br><span class=\"line\">24. IFC全称：Inline Formatting Context，名为行级格式化上下文。    触发：块级元素中仅包含内联级别元素</span><br><span class=\"line\">25. The Notification interface of the Notifications API is used to configure and display desktop notifications to the user.</span><br><span class=\"line\">26. TinyMCE 富文本编辑器</span><br><span class=\"line\">27. Window.innerHeight  浏览器窗口的视口（viewport）高度（以像素为单位）；如果有水平滚动条，也包括滚动条高度。</span><br><span class=\"line\">28. vuedraggable 处理拖动数据</span><br><span class=\"line\">29. path-to-regexp   Turn a path string such as /user/:name into a regular expression. The compile function will return a function for transforming parameters into a valid path:</span><br><span class=\"line\">30. vue router 重新render,redirect+fullpath.通过添加一个中转页实现。</span><br><span class=\"line\">31. import &#123; storeToRefs &#125; from &quot;pinia”;</span><br><span class=\"line\">32. html5 input number</span><br></pre></td></tr></table></figure>\n<p>.no-arrow::-webkit-outer-spin-button,<br>.no-arrow::-webkit-inner-spin-button {<br>  -webkit-appearance: none;<br>}<br> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. vue3 类型 MayBeRef</span><br><span class=\"line\">2. 暂停watch后更新，</span><br></pre></td></tr></table></figure><br>ignoreUpdates(() &#x3D;&gt; {<br>  source.value &#x3D; ‘ignored’<br>})</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1. dsp 读取json,csv,xlxs 数据</span><br><span class=\"line\">2. limu 创建imutable 对象</span><br><span class=\"line\">3. controlledRef set peek,控制数据的更新</span><br></pre></td></tr></table></figure>\n<p> const num &#x3D; controlledRef(0, {<br>  onBeforeChange(value, oldValue) {<br>    &#x2F;&#x2F; disallow changes larger then ±5 in one operation<br>    if (Math.abs(value - oldValue) &gt; 5)<br>      return false &#x2F;&#x2F; returning <code>false</code> to dismiss the change<br>  },<br>})<br> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1. flush: post 推迟副作用的初始运行，直到组件的首次渲染完成。</span><br><span class=\"line\">   watch 通过更改设置 flush: &#x27;sync&#x27;，我们可以为每个更改都强制触发侦听器，尽管这通常是不推荐的</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>&#39;pre&#39;</code>: buffers invalidated effects in the same ‘tick’ and flushes them before rendering</li>\n<li><code>&#39;post&#39;</code>: async like ‘pre’ but fires after component updates so you can access the updated DOM</li>\n<li><code>&#39;sync&#39;</code>: forces the effect to always trigger synchronously</li>\n</ul>\n<p> { flush: ‘post’ }<br>)</p>\n   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. transx vue 动画组件   一个小巧玲珑的 vue 组件切换动画库</span><br><span class=\"line\">2. ts-morph 修改ts 代码，封装后的ts compiler api</span><br><span class=\"line\">3. esno 执行ts</span><br><span class=\"line\">4. https://mermaid-js.github.io/mermaid/#/     mermaid 及其方便的画图工具</span><br><span class=\"line\">5. vue-parallaxy Is a compontent for fast 60fps parallax scroll effects in vue 2. 实现滚动的视差效果。</span><br><span class=\"line\">6. useWatermark,Layzcontainer. context menu  vue-vben-admin 中</span><br><span class=\"line\">7. localForage is a fast and simple storage library for JavaScript。Wraps IndexedDB, WebSQL, or localStorage using a simple but powerful API.</span><br><span class=\"line\">8.  markRaw 标记对下不会被reactive</span><br><span class=\"line\">9.  indexeddb-fs is a module that allows you to store data in the browser using an API similar to that of Node&#x27;s fs module.</span><br><span class=\"line\">10. 临时安全令牌（Security Token Service，STS）</span><br><span class=\"line\">11. *** 获取文本px宽度* @param font&#123;String&#125;: 字体样式**</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>String.prototype.pxWidth &#x3D; function(font) {<br>  &#x2F;&#x2F; re-use canvas object for better performance<br>  var canvas &#x3D; String.prototype.pxWidth.canvas || (String.prototype.pxWidth.canvas &#x3D; document.createElement(“canvas”)),<br>      context &#x3D; canvas.getContext(“2d”); </p>\n<p>  font &amp;&amp; (context.font &#x3D; font);<br>  var metrics &#x3D; context.measureText(this);</p>\n<p>  return metrics.width;<br>}</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1. 先保存各个实例的values信息， helm get values [release] &gt; xxx.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1. </span><br><span class=\"line\">HTTP协议中用头部字段Accept-Encoding 和 Content-Encoding对「采用何种编码格式传输正文」进行了协定，请求头的Accept-Encoding会列出客户端支持的编码格式。当响应头的 Content-Encoding指定了gzip时，浏览器则会进行对应解压</span><br><span class=\"line\"></span><br><span class=\"line\">1. Transfer-Encoding，是一个 HTTP 头部字段，字面意思是「传输编码」。实际上，HTTP 协议中还有另外一个头部与编码有关：Content-Encoding（内容编码）。Content-Encoding 通常用于对实体内容进行压缩编码，目的是优化传输，</span><br></pre></td></tr></table></figure>\n<p>Transfer-Encoding: chunked<br>Transfer-Encoding: compress<br>Transfer-Encoding: deflate<br>Transfer-Encoding: gzip<br>Transfer-Encoding: identity</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2. 逐跳消息头  这类消息头仅对单次传输连接有意义，不能通过代理或缓存进行重新转发</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">2. mime  https://github.com/sindresorhus/file-type  根据文件内容判断类型</span><br><span class=\"line\"></span><br><span class=\"line\">1. 语义化版本控制(SemVer)</span><br><span class=\"line\">   先简单了解下什么是语义化的版本控制，其是由GitHub发起的一份用于规范版本号递增的规则，</span><br><span class=\"line\"></span><br><span class=\"line\">1.  deeplinks.js allows people to easily link directly to any text selection on your website.</span><br><span class=\"line\">2.  Vue DevUI 开源的UI</span><br><span class=\"line\">3. standard-version</span><br><span class=\"line\">standard-version 会根据提交的信息类型来自动更改对应的版本号,如下:</span><br></pre></td></tr></table></figure>\n<p>feat: 次版本(minor)+1<br>fix: 修订号(patch) +1<br>BREAK CHANGE: 主板号(marjor) +1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. outline 能告诉用户那一个可以激发事件的html元素获取了焦点，对钟爱键盘操作的用户尤其有意义。一个清晰悦目的outline设计能提高使用表单的用户体验。</span><br><span class=\"line\">2. CSS属性 columns 用来设置元素的列宽和列数。</span><br><span class=\"line\">重点，设置了display: contents的元素本身不会被渲染，但是其子元素能够正常被渲染。</span><br><span class=\"line\">3. 为了使我们的盒子居中，通过align-items属性，可以将交叉轴上的item对齐，此时使用的是垂直方向的块轴。而使用justify-content则可以对齐主轴上的项目，主轴是水平方向的。</span><br><span class=\"line\">align conent  用来控制多行布局   控制“多条主轴”的 flex 项目在交叉轴的对齐。</span><br><span class=\"line\"></span><br><span class=\"line\">1. CSS 中的 place-items 是一个简写属性 ，它允许你在相关的布局（如 Grid 或 Flexbox）中可以同时沿着块级和内联方向对齐元素 (例如：align-items 和 justify-items 属性) 。如果未提供第二个值，则第一个值作为第二个值的默认值</span><br><span class=\"line\"></span><br><span class=\"line\">1. filter CSS属性将模糊或颜色偏移等图形效果应用于元素。滤镜通常用于调整图像，背景和边框的渲染。</span><br><span class=\"line\"></span><br><span class=\"line\">1. monaco 自定义language</span><br></pre></td></tr></table></figure>\n<p>register monaco.languages.register({ id: ‘mySpecialLanguage’ });<br>setMonarchTokensProvider base language 里面有3<br>defineTheme  设置样式<br>monaco.editor.defineTheme(‘myCoolTheme’, {<br>                    colors: {},<br>                    base: ‘vs’,<br>                    inherit: false,<br>                    rules: [<br>                        { token: ‘custom-info’, foreground: ‘808080’ },<br>                        { token: ‘custom-error’, foreground: ‘ff0000’, fontStyle: ‘bold’ },<br>                        { token: ‘custom-notice’, foreground: ‘FFA500’ },<br>                        { token: ‘custom-date’, foreground: ‘008800’ }<br>                    ]<br>                });<br>registerCompletionItemProvider  智能提示，遇到对应的关键词</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1. Monarch  用来实现代码高亮   https://juejin.cn/post/6844903736867831822</span><br><span class=\"line\"></span><br><span class=\"line\">https://microsoft.github.io/monaco-editor/monarch.html</span><br><span class=\"line\"></span><br><span class=\"line\">1. xe-utils 提供工具类</span><br><span class=\"line\">1. Mitt  Tiny (~200b) functional event emitter / pubsub.</span><br><span class=\"line\">1. element-resize-detector  </span><br><span class=\"line\">1. memoize-one 记录最近的返回结果,不同参数会重置</span><br><span class=\"line\">1. 钱其实是“保健因子”，而不是“激励因子”，是多了没用、少了不行的东西</span><br><span class=\"line\">2. 可以看到整个医改的核心就是放供给、促竞争和扶创新的过程</span><br><span class=\"line\">3. 破船能过河</span><br><span class=\"line\">4. Comlink Comlink makes WebWorkers enjoyable. 多线程</span><br><span class=\"line\">5.  </span><br><span class=\"line\">`Rails-style`: 按照文件的类型划分为不同的目录</span><br><span class=\"line\"></span><br><span class=\"line\">`Domain-style`: 按照一个功能特性或业务创建单独的目录</span><br><span class=\"line\"></span><br><span class=\"line\">`Ducks-style`: 优点类似于Domain-style，不过更彻底, 它通常将相关联的元素定义在一个文件下·</span><br><span class=\"line\"></span><br><span class=\"line\">1. </span><br><span class=\"line\">    强约定，体现团队的规范。首先它应该避免团队成员去关心或更改构建的配置细节，暴露最小化的配置接口。 另外构建工具不仅仅是构建，通常它还会集成代码检查、测试等功能。</span><br><span class=\"line\"></span><br><span class=\"line\">    方便升级。尤其是团队需要维护多个项目场景, 这一点很有意义</span><br><span class=\"line\"></span><br><span class=\"line\">2. BEM</span><br></pre></td></tr></table></figure>\n<p>元素（Element），即 price 、text ，代表从属于某个块，是这个块的子元素，跟在块后面，以双下划线为间隔，使用 .btn__price 、.btn__text 表示</p>\n<p>修饰符（Modifier），即 orange 、big ，用于修改块的状态，为块添加特定的主题或样式，跟在块后面，以双连字符为间隔，使用 .btn–orange 、.btn–big 表示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.  npm-run-all</span><br></pre></td></tr></table></figure>\n<p>Before: npm run clean &amp;&amp; npm run build:css &amp;&amp; npm run build:js &amp;&amp; npm run build:html<br>After: npm-run-all clean build:*</p>\n<pre><code>\n1. display:flow-root可以让元素块状化，同时包含格式化上下文BFC，可以用来清除浮动，去除margin合并，实现两栏自适应布局等。\n\n1. stroke-dash 是一个定义虚线和间距图形的图像工具类, 被用于轮廓描边;\n\n1. npx degit\n   \n1.  有一些环境变量，比如HOME、PATH、SHELL、UID、USER等，在用户登录之前就已经被/bin/login程序设置好了。通常环境变量被定义并保存在用户家目录下的．bash_profile文件或全局的配置文件/etc/profile中\n\n1. env命令只显示全局变量；declare命令输出所有的变量、函数、整数和已经导出的变量\n\n1. http upgrade 通常来说这一机制总是由客户端发起的 （不过也有例外，比如说可以由服务端发起升级到传输层安全协议（TLS））， 服务端可以选择是否要升级到新协议。借助这一技术，连接可以以常用的协议启动（如HTTP/1.1），随后再升级到HTTP2甚至是WebSockets.\n\n1. 因为 CommonJS 在运行时进行加载方式的动态解析，在运行时阶段才能确定的导入导出关系，因此无法进行静态编译优化和类型检查。​\n\n1. JSZip  JSZip is a javascript library for creating, reading and editing .zip files, with a lovely and simple AP\n   \n2. spy-debugger  一站式页面调试、抓包工具。远程调试任何手机浏览器页面，任何手机移动端webview（如：微信，HybridApp等）。支持HTTP/HTTPS，无需USB连接设备\n   \n3. viteshot 基于vite 的快照\n\n4. useScrollLock\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>tidb<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tidb</span><br><span class=\"line\"></span><br><span class=\"line\">* 一键水平扩缩容得益于 TiDB 存储计算分离的架构的设计，可按需对计算、存储分别进行在线扩容或者缩容，扩容或者缩容过程中对应用运维人员透明。</span><br><span class=\"line\">* 金融级高可用数据采用多副本存储，数据副本通过 Multi-Raft 协议同步事务日志，多数派写入成功事务才能提交，确保数据强一致性且少数副本发生故障时不影响数据的可用性。可按需配置副本地理位置、副本数量等策略，满足不同容灾级别的要求。</span><br><span class=\"line\">* 实时 HTAP提供行存储引擎 TiKV、列存储引擎 TiFlash 两款存储引擎，TiFlash 通过 Multi-Raft Learner 协议实时从 TiKV 复制数据，确保行存储引擎 TiKV 和列存储引擎 TiFlash 之间的数据强一致。TiKV、TiFlash 可按需部署在不同的机器，解决 HTAP 资源隔离的问题。</span><br><span class=\"line\">* 云原生的分布式数据库专为云而设计的分布式数据库，通过 TiDB Operator 可在公有云、私有云、混合云中实现部署工具化、自动化。</span><br><span class=\"line\">* 兼容 MySQL 协议和 MySQL 生态兼容 MySQL 协议、MySQL 常用的功能、MySQL 生态，应用无需或者修改少量代码即可从 MySQL 迁移到 TiDB。提供丰富的数据迁移工具帮助应用便捷完成数据迁移。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">* TiDB Server：SQL 层，对外暴露 MySQL 协议的连接 endpoint，负责接受客户端的连接，执行 SQL 解析和优化，最终生成分布式执行计划。TiDB 层本身是无状态的，实践中可以启动多个 TiDB 实例，通过负载均衡组件（如 LVS、HAProxy 或 F5）对外提供统一的接入地址，客户端的连接可以均匀地分摊在多个 TiDB 实例上以达到负载均衡的效果。TiDB Server 本身并不存储数据，只是解析 SQL，将实际的数据读取请求转发给底层的存储节点 TiKV（或 TiFlash）。</span><br><span class=\"line\"></span><br><span class=\"line\">* PD (Placement Driver) Server：整个 TiDB 集群的元信息管理模块，负责存储每个 TiKV 节点实时的数据分布情况和集群的整体拓扑结构，提供 TiDB Dashboard 管控界面，并为分布式事务分配事务 ID。PD 不仅存储元信息，同时还会根据 TiKV 节点实时上报的数据分布状态，下发数据调度命令给具体的 TiKV 节点，可以说是整个集群的&quot;大脑&quot;。此外，PD 本身也是由至少 3 个节点构成，拥有高可用的能力。建议部署奇数个 PD 节点。</span><br><span class=\"line\"></span><br><span class=\"line\">* 存储节点</span><br><span class=\"line\"></span><br><span class=\"line\">    * TiKV Server：负责存储数据，从外部看 TiKV 是一个分布式的提供事务的 Key-Value 存储引擎。存储数据的基本单位是 Region，每个 Region 负责存储一个 Key Range（从 StartKey 到 EndKey 的左闭右开区间）的数据，每个 TiKV 节点会负责多个 Region。TiKV 的 API 在 KV 键值对层面提供对分布式事务的原生支持，默认提供了 SI (Snapshot Isolation) 的隔离级别，这也是 TiDB 在 SQL 层面支持分布式事务的核心。TiDB 的 SQL 层做完 SQL 解析后，会将 SQL 的执行计划转换为对 TiKV API 的实际调用。所以，数据都存储在 TiKV 中。另外，TiKV 中的数据都会自动维护多副本（默认为三副本），天然支持高可用和自动故障转移。</span><br><span class=\"line\"></span><br><span class=\"line\">    * TiFlash：TiFlash 是一类特殊的存储节点。和普通 TiKV 节点不一样的是，在 TiFlash 内部，数据是以列式的形式进行存储，主要的功能是为分析型的场景加速。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">```   </span><br><span class=\"line\">2. clickhouse</span><br></pre></td></tr></table></figure>\n云数据库ClickHouse是开源列式数据库ClickHouse的云上托管服务，数据库内核完全兼容开源社区版本。阿里云提供了一套企业级数据库管理平台，增强了数据安全、集群动态扩容、监控运维等企业级功能，与云上其他数据产品打通，可以便捷地构建云上海量数据分析平台。</li>\n</ol>\n<p>云数据库ClickHouse是面向联机分析处理的列式数据库，支持SQL查询，且查询性能好，特别是基于大宽表的聚合分析查询性能非常优异，比其他分析型数据库速度快一个数量级。主要特性如下。</p>\n<p>交互式报表</p>\n<ul>\n<li><pre><code>    基于ClickHouse和BI工具构建实时运营监控报表\n</code></pre>\n<p>利用ClickHouse构建实时交互式报表，实时分析订单、收入、用户数等核心业务指标；构建用户来源分析系统，跟踪各渠道PV、UV来源。</p>\n</li>\n<li><p>海量数据实时多维查询</p>\n<ul>\n<li><pre><code>    在数亿至数百亿记录规模大宽表，数百以上维度自由查询，响应时间通常在100毫秒以内。让业务人员能持续探索式查询分析，无需中断分析思路，便于深挖业务价值，具有非常好的查询体验。\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>用户画像分析<br>随着数据时代的发展，各行各业数据平台的体量越来越大，用户个性化运营的诉求也越来越突出，用户标签系统，做为个性化千人千面运营的基础服务，应运而生。如今，几乎所有行业（如互联网、游戏、教育等）都有实时精准营销的需求。通过系统生成用户画像，在营销时通过条件组合筛选用户，快速提取目标群体。</p>\n<ul>\n<li><p>基于ClickHouse构建用户特征行为分析系统</p>\n<ul>\n<li><pre><code>    利用ClickHouse对人群标签数据进行实时筛选并进行群体画像统计；自定义条件对海量明细日志记录进行过滤，分析用户行为。\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>用户分群统计</p>\n<ul>\n<li><pre><code>    构建用户特征大宽表，任意选择用户属性标签数据和筛选条件，进行人群特征统计分析。\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>访客来源分析展示</p>\n<ul>\n<li><pre><code>    通过批量离线计算对用户访问日志中的用户行为进行关联，生成用户行为路径大宽表同步到ClickHouse，基于ClickHouse构建交互式访客来源探索分析可视化系统。\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>携程旅行网是中国领先的综合性旅行服务公司，提供酒店预订、机票预订、旅游度假等服务。携程在数据处理和分析方面面临着海量数据、高并发查询和复杂业务逻辑的挑战。为了应对这些挑战，携程采用了 ClickHouse 作为其数据仓库和数据分析平台。ClickHouse 帮助携程实现了以下目标：</p>\n<ul>\n<li><p>快速处理海量数据：携程每天需要处理数百万条订单数据，ClickHouse 可以高效地处理这些数据，使得数据分析和查询更加快速。</p>\n</li>\n<li><p>高并发查询：携程需要应对高并发的查询需求，ClickHouse 可以支持高并发查询，使得数据分析和查询更加高效。</p>\n</li>\n<li><p>灵活的业务逻辑：携程的业务逻辑非常复杂，需要根据不同的维度和指标进行数据分析和查询，ClickHouse 提供了灵活的数据建模和查询语言，可以满足携程的复杂业务需求。<br>通过使用 ClickHouse，携程可以更加高效地管理数据、进行数据分析和查询，为业务决策提供有力的支持。</p>\n</li>\n<li><p>缺乏广泛的社区支持：虽然 ClickHouse 是一款开源免费的工具，但其社区支持仍然相对较弱。与其他热门开源项目相比，ClickHouse 的社区规模和贡献可能较少。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2. mongodb  \t•\t分片集群可以提供更加良好的水平扩展能力。在分片集群架构中，各个节点以副本集架构为基础，通过数据分片存储的方式实现高并发读写。您可以通过扩展分片集群架构中的Mongos、Shard节点数量和规格实现IO吞吐和存储等能力的扩展。</span><br></pre></td></tr></table></figure>\n<p> 集群架构<br>分片服务（shard）和配置服务（configserver）采用三节点副本集架构，稳定可靠；支持代理服务（mongos）和分片服务（mongos）灵活配置个数，线性扩展数据库系统的存储空间及读写性能。</p>\n</li>\n</ul>\n<p>灵活多变的业务场景<br>云数据库MongoDB采用No-Schema的方式，免去您变更表结构的痛苦，非常适用于初创型的业务需求。您可以将模式固定的结构化数据存储在RDS（Relational Database Service）中，模式灵活的业务存储在MongoDB中，高热数据存储在云数据库Redis或云数据库Memcache中，实现对业务数据高效存取，降低存储数据的投入成本。</p>\n<p>物联网应用<br>云数据库MongoDB具有高性能和异步数据写入功能，特定场景下可达到内存数据库的处理能力。同时，云数据库MongoDB中的分片集群实例，可按需配置Mongos和Shard组件的配置和个数，性能及存储空间可实现无限扩展，非常适合物联网高并发写入的场景。详情请参见变更配置方案概览。</p>\n<p>海量数据下，性能优越</p>\n<ul>\n<li>在使用场合下，千万级别的文档对象，近 10G 的数据，对有索引的 ID 的查询不比MySQL慢，而对非索引字段的查询，则是全面胜出。MySQL实际无法胜任大数据下任意字段的查询，而MongoDB的查询性能令人惊讶。写入性能同样很令人满意，同样写入百万级别的数据，MongoDB比我以前使用过的CouchDB要快得多，基本 10 分钟以下可以解决。观察过程中，MongoDB远算不上 CPU 杀手。</li>\n</ul>\n<p> 内置Auto-Sharding自动分片支持云级扩展性，分片简单</p>\n<p>劣势：</p>\n<ul>\n<li>不支持事务操作</li>\n<li>所有事务要求严格的系统（银行系统）肯定不能用它。</li>\n<li>MongoDB占用空间过大<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2. </span><br><span class=\"line\">3. Proxy集群版实例，适用于数据容量较大、QPS要求较高的业务场景。该架构类型实例默认提供Proxy代理，当客户端请求时将由代理节点转发至Redis数据节点，通过代理实现负载均衡、长连接等功能特性，</span><br></pre></td></tr></table></figure>\n   Cluster是一个无中心的分布式架构，高可用切换机制已内置进集群，其QPS性能优于Proxy集群版实例。</li>\n</ul>\n<p>代理模式：客户端通过单机的方式进行连接，流量会通过代理转发到Redis节点，有一些命令使用会受限制</p>\n<p>直连模式： 数据流量将直接访问Redis节点。 注意：需要使用支持cluster协议的客户端。<br> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">2. 双机热备，自动切换。当主节点发生故障后，从节点会被迅速提升为新的主节点，继续提供服务。</span><br><span class=\"line\">3. 灾备实例通过内网专线同步，具有较低的同步时延和更高的稳定性，同步链路质量远优于公网网络。</span><br><span class=\"line\">         目前推广期专线流量费用免费，商业化收费时间将另行通知。</span><br><span class=\"line\">4. 使用主备高可用架构，避免了数据库的单点风险。</span><br><span class=\"line\">5. 提供独立的数据库连接地址，灾备实例可提供读访问能力，用于就近接入、数据分析等场景，设备冗余成本低。</span><br><span class=\"line\">6. 创建只读实例成功后，您可以开启读写代理，在程序中配置读写代理的地址，由读写代理实现读请求被自动转发到只读实例，写请求被自动转发到主实例。</span><br><span class=\"line\">7. 创建RDS实例后， 会自动将实例所在的VPC段添加至白名单中，即该VPC段中所有的IP都可以访问。</span><br><span class=\"line\">8. 透明数据加密（Transparent Data Encryption (简称TDE)）是指可以在文件层对数据和文件进行实时加密和解密，落盘的文件是加密后的内容，而对于上层应用系统和开发人员而言，加解密过程是无感知的，写入和读取的内容是明文内容，所以叫做透明数据加密</span><br><span class=\"line\">9.  高可用  免费开启读写分离，实现读写请求自动分流，减轻主实例压力。</span><br><span class=\"line\"></span><br><span class=\"line\">10. 半同步复制（Semisynchronous replication），介于异步复制和全同步复制之间，主库在执行完客户端提交的事务后不是立刻返回给客户端，而是等待至少一个从库接收到并写到relay log中才返回给客户端</span><br><span class=\"line\">11. 三节点 数据复制方式是强一致性。金融证券对数据一致性要求高的。</span><br><span class=\"line\">12. Zod is a TypeScript-first schema declaration and validation library</span><br><span class=\"line\">13. vsce login ryansecreat</span><br><span class=\"line\">14. vue-object-state A typescript library that helps you keep track of changes in your dtos</span><br><span class=\"line\">15. Vue 脚手架 https://github.com/vuejs/awesome-vue?tab=readme-ov-file#scaffold</span><br><span class=\"line\">16. https://oruga-ui.com/documentation/  headless UI </span><br><span class=\"line\">17. https://vue-highlight-text.surge.sh/ 高亮显示</span><br><span class=\"line\">18. FZF (stylised as fzf)  is a command line based fuzzy finder built using Golang</span><br></pre></td></tr></table></figure><br>const list &#x3D; [‘go’, ‘javascript’, ‘python’, ‘rust’,<br>              ‘swift’, ‘kotlin’, ‘elixir’, ‘java’,<br>              ‘lisp’, ‘v’, ‘zig’, ‘nim’, ‘rescript’,<br>              ‘d’, ‘haskell’]</p>\n<p>const fzf &#x3D; new Fzf(list)<br>const entries &#x3D; fzf.find(‘li’)<br>console.log(‘ranking is:’)<br>entries.forEach(entry &#x3D;&gt; console.log(entry.item)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Highlights https://vue-highlight-text.surge.sh/#Example</span><br><span class=\"line\">2. vue network 画图工具 https://dash14.github.io/v-network-graph/getting-started.html </span><br><span class=\"line\">3. VNT  一个简单、高效、能快速组建虚拟局域网的工具</span><br><span class=\"line\">4. 根据路由生产面包屑  https://nxtchg.github.io/pieces/vue/vs-crumbs/#/foo/bar</span><br><span class=\"line\">5. Vue breads 与vuerouter 相结合 https://scrum.github.io/vue-2-breadcrumbs/</span><br><span class=\"line\">6. 根据vue文件生产文档  https://vuese.github.io/vuese-explorer/</span><br><span class=\"line\">7. numeral 处理number</span><br><span class=\"line\">8. 在线代码编辑： https://stackblitz.com/</span><br><span class=\"line\">9. JSON5 is an extension to the popular JSON file format that aims to be easier to write and maintain by hand</span><br><span class=\"line\"></span><br><span class=\"line\">json5 是json 的超集，key  可以不加引号</span><br><span class=\"line\">1. du -sh * | sort -n     查询文件大小</span><br><span class=\"line\">2. </span><br><span class=\"line\">3. Window.getComputedStyle()方法返回一个对象</span><br><span class=\"line\">4. consola  Elegant Console Wrapper</span><br><span class=\"line\">5. 副本集架构</span><br><span class=\"line\">    副本集提供3、5、7节点架构，其中包含一个可供读写访问的Primary节点，一个Hidden节点，实例中剩余节点为只读节点。同时，京东云提供扩缩容能力，帮助您按业务需求进行服务器的部署。</span><br><span class=\"line\"></span><br><span class=\"line\">副本集\tMongoDB副本集是一组维护相同数据集的Mongod进程，副本集提供冗余和高可用，是所有生产部署的基础。</span><br><span class=\"line\"></span><br><span class=\"line\">分片集群\t分片是一种用于在多台计算机之间分配数据的方法，MongoDB使用分片集群来支持具有非常大数据集和高吞吐量操作的部署，每个分片集群包含Mongos、Shard、Config Server三种组件。</span><br><span class=\"line\">1.   单可用区部署   可以承受机架级别的故障。</span><br><span class=\"line\">2.   多可用区部署   可以承受机房级别的故障，但因为不同可用区之间存在一定的网络延迟，所以对于单个更新的响应时间多可用区部署会比单可用区部署长</span><br><span class=\"line\">3.   kafka</span><br></pre></td></tr></table></figure>\n<p>   1 提高京东云 Kafka的吞吐量:<br>​ Kafka中主题topic作为主要接受消息的载体，一般会分成一个或多个分区partition，每个partiton相当于是一个子queue，多个partition就相当于多个子queue在同时工作进行写盘和交互处理，因此增加partition可以增加单个主题topic的吞吐量。在物理结构上，每个partition对应一个物理的文件，Kafka中会把消息持久化到本地文件系统中，并且保持o(1)极高的效率。磁盘的IO读写是非常耗资源的性能，所以提高磁盘的iops和吞吐量，可以提高消息写入磁盘的速度，相应的提高吞吐。Kafka中的主题都是由消费组consumer group来消费的。如果这个consumer group里面consumer的数量小于topic里面partition的数量，就会有consumer thread同时处理多个partition。如果这个consumer group里面consumer的数量大于topic里面partition的数量，多出的consumer thread就会闲置，剩下的是一个consumer thread处理一个partition，这就造成了资源的浪费，因为一个partition不可能被两个consumer thread去处理。</p>\n<p>建议：1）增加分区数partition可以有效的提高消息的吞吐量，并且分区数最好是集群处理节点broker的整数倍，这样每个副本分配到的分区数比较均匀。</p>\n<p>​ 2）采用高iops和高吞吐的磁盘规格和SSD类型的磁盘。</p>\n<p>​ 3）增加生产者producer和消费者consumer的数量，并且消费者的数量最好可以和分区数相等。</p>\n<p>我们把多个 consumer实例放在一个group里有什么好处吗？实际上，consumer group是用于高伸缩性，高容错性的consumer机制。组内多个consumer实例可以同时读取kafka消息，而一旦某个consumer挂了，group会立即崩溃，这时候负责的分区交给其他consumer负责，从而保证group可以正常工作。这过程我们称呼为 重平衡（rebalance）。<br>   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4.   redis</span><br></pre></td></tr></table></figure><br>   海量存储，无限容量。集群版采用分布式架构，数据分布在多台物理机上，突破单机物理限制，解决海量数据存储在 Redis 上的瓶颈<br>   工作时主节点和从节点数据实时同步，当主节点故障时，系统将在15秒左右将从节点提升为主节点，开始提供服务。当完全恢复后，主从所在的AZ会跟创建时保持一致。<br>   ES集群将部署在 VPC 内，只有在同一个VPC下才能访问ES集群，因此为保证内网顺利访问，建议选择已有云上业务的区域位置所在 VPC。多可用区部署模式下，也是选择同一个 VPC。同一个 VPC 内，不同可用区子网之间是互通的。<br>   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\">5.   tidb</span><br></pre></td></tr></table></figure><br>全新的分布式数据库，支持PB级数据容量，集群QPS上百万。<br>真正的多活架构，多个节点可以同时提供数据读写服务，并且读写能力均可通过增加节点的方式进行水平扩展。<br>整个集群数据强一致，所有节点读取的数据均为最新数据，无传统主从架构的数据延迟问题。<br>与 MySQL 高度兼容，使用 TiDB 像使用单机MySQL一样简单，可以从 MySQL 无缝切换到 TiDB，几乎无需修改代码。<br>可直接在同一份数据上进行高效的数据查询、分析，简化了架构，提升了数据分析的实时性，同时降低了成本。<br>全面支持IPV6。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 多活架构及故障自恢复</span><br><span class=\"line\">    真正的多活架构，各个节点均可读写。TiDB 使用多副本进行数据存储，并依赖业界最先进的 Raft 多数派选举算法确保数据 100% 强一致性和高可用。主副本故障时自动切换，无需人工介入，自动保障业务的连续性。</span><br><span class=\"line\">2. 水平弹性扩展</span><br><span class=\"line\"></span><br><span class=\"line\">分布式的 TiDB 可随着数据增长而无缝地水平扩展，只需要通过增加更多的机器来满足业务增长需要，应用层可以不用关心存储的容量和吞吐。 TiDB 根据存储、网络、距离等因素，动态进行负载均衡调整，以保证更优的读写性能。    </span><br><span class=\"line\">2. 将表中的数据按照一定的规则拆分为多个部分，每个部分的数据均存储在不同的计算节点上，每个计算节点上的数据称为一个分片。    </span><br><span class=\"line\">3. 可用区是指在同一地域下，电力、网络等基础设施互相独立的物理区域。一个地域包含一个或多个可用区，同一地域下的多个可用区可以彼此连通   </span><br><span class=\"line\">4. 实例是一个独立占用CPU和内存资源的的数据库服务进程，您可在实例中创建或管理多个数据库。</span><br><span class=\"line\">5. 在集群中，需要先部署 Ingress Controller，再创建 Ingress 资源对象。Ingress Controller 控制器是一个 docker 容器，容器镜像中包含一个负载均衡器（比如：Nginx 或是 HAProxy）和一个 Ingress Controller。</span><br><span class=\"line\">6. helm get values  terrabase-console-runtime-76887c7974-qtglz  -n tpaas-terrabase   </span><br><span class=\"line\">7. kubectl edit ing dts-console-ingress -n tpaas-dts </span><br><span class=\"line\">8. css selector</span><br></pre></td></tr></table></figure><br>   选中后面有h2的h1<br>   h1:has(+ h2) {<br>     margin: 0 0 0.25rem 0;<br>   } </p>\n<p>   is 更精炼的使用selector<br>   ul li,<br>   ol li {}<br>   等于<br>   :is(ul, ol) li {}</p>\n<p>   body:has(video, audio) {<br>     &#x2F;* styles to apply if the content contains audio OR video <em>&#x2F;<br>   }<br>   body:has(video):has(audio) {<br>     &#x2F;</em> styles to apply if the content contains both audio AND video *&#x2F;<br>   }</p>\n<p>   这两个函数的区别在于 :where() 函数的优先级总是零，则 :is() 函数的优先级取决于其最特定参数的优先级。<br>   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9.  docker build -f ./Dockerfile.base . --build-arg TPAAS_RUNTIME_IMAGE=hub.jdcloud.com/baseimages/openeuler:22.03lts-amd64-depends-tools-v20220801</span><br><span class=\"line\">10. find ./ -type f -name yarn.lock</span><br><span class=\"line\">11. Sqids  Sqids (pronounced &quot;squids&quot;) is an open-source library that lets you generate YouTube-looking IDs from numbers</span><br><span class=\"line\">12. ssh-keygen -R ip 清理问题ip</span><br><span class=\"line\">13. monaco.editor.setModelMarkers(model, &quot;owner&quot;, markers); 标记下划线并给出hint</span><br><span class=\"line\">14. 添加命令  editor.addCommand(monaco.KeyMod.CtrlCmd   可以监控keys 事件  </span><br><span class=\"line\">15. addAction 添加右键菜单和快捷键\\</span><br><span class=\"line\">16. 显示到对应位置的内容，指定行和列  revealPositionInCenter </span><br><span class=\"line\">17. tokenizer 做匹配，rules 指定样式  </span><br><span class=\"line\">18. registerFoldingRangeProvider 提供折叠功能</span><br><span class=\"line\">19. provideHover 提供hover &#123;range,contents&#125;</span><br><span class=\"line\">20. provideInlayHints 提供decorator 的hint</span><br><span class=\"line\">21. 那就是它们有不同的特殊性。:where() 是简单的，其特异性总是为0，而 :is() 的特异性为最强的选择器。</span><br><span class=\"line\">22. 特异性等级评分：</span><br><span class=\"line\">ID——特异性得分为 100</span><br><span class=\"line\">内联样式——特异性得分为 1000</span><br><span class=\"line\">元素和伪类——特异性得分为 1</span><br><span class=\"line\">类、伪类和属性——特异性得分为 10</span><br><span class=\"line\">1.  helm get values mongodb-back -n tpaas-mongodb</span><br><span class=\"line\">2.  marker:text-sky-400 用量设置List marker 的样式</span><br><span class=\"line\">3.  VScode 设置参数</span><br></pre></td></tr></table></figure><br>   {<br>    &#x2F;&#x2F; See <a href=\"https://go.microsoft.com/fwlink/?LinkId=733558\">https://go.microsoft.com/fwlink/?LinkId=733558</a><br>    &#x2F;&#x2F; for the documentation about the tasks.json format<br>    “version”: “2.0.0”,<br>    “tasks”: [<br>        {<br>            “label”: “kill: process”,<br>            “type”: “shell”,<br>            “command”: “kill”,<br>            “args”: [<br>                “-9”,<br>                “${input:pid}”,<br>            ],<br>            “problemMatcher”: []<br>        }<br>    ],<br>    “inputs”: [<br>        {<br>            “id”: “pid”,<br>            “type”: “pickString”,<br>            “description”: “pid to kill”,<br>            “command”: “pgrep”,<br>            “args”: [<br>                “${input:procesName}”<br>            ]<br>        },<br>        {<br>            “id”: “procesName”,<br>            “type”: “promptString”,<br>            “description”: “process name”,<br>            “default”: “code”<br>        }<br>    ]<br>}<br>   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 需要在不同环境下加载npm包不同的入口文件，显然一个 main 字段已经不能够满足我们的需求，这就衍生出来了 module 与 browser 字段。</span><br><span class=\"line\">https://github.com/SunshowerC/blog/issues/8</span><br><span class=\"line\">1. ts-morph  Setup, navigation, and manipulation of the TypeScript AST </span><br><span class=\"line\">2.  获取文字长度</span><br></pre></td></tr></table></figure><br>     function getwidth(txt, font) {<br>      var canvas &#x3D; document.createElement(‘canvas’)<br>      var ctx &#x3D; canvas.getContext(‘2d’)<br>      ctx.font &#x3D; font<br>      return ctx.measureText(txt).width<br>    }<br>   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3. headless ui  https://headlessui.com/ </span><br><span class=\"line\">4. @rollup/plugin-node-resolve  自动添加路径index</span><br><span class=\"line\">5. backdrop:bg-gray-50 设置蒙板</span><br><span class=\"line\">6.  first-letter:text-7xl  first-line:uppercase</span><br><span class=\"line\">7. vscode plugin 发布   https://code.visualstudio.com/api/working-with-extensions/publishing-extension     </span><br><span class=\"line\">8. aimless The missing JS randomness library</span><br><span class=\"line\">9. vue-js-modal  </span><br><span class=\"line\">10. gogocode 其中 $_$1 和 $_$2 相当于正则中的通配符，但是在这里只会匹配代码里有效的 AST 节点，$$$ 则可以匹配剩下的节点</span><br><span class=\"line\">11. window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__，是 qiankun 提供的。根据源码分析，它会拿到微应用html入口url之后，将pathname的最后一项去掉，再组装起来。譬如，子应用入口配置：http://local.soame.domain/mar...，那么经过处理后，会变成http://local.soame.domain/</span><br><span class=\"line\"></span><br><span class=\"line\">12. const SpeedMeasurePlugin = require(&#x27;speed-measure-webpack-plugin&#x27;)  查看webpack 速度</span><br><span class=\"line\">13. 一个专注于前端视觉效果的集合应用，包含CSS动效、Canvas动画、人工智能应用等上百个案例 https://github.com/hepengwei/visualization-collection/tree/master</span><br><span class=\"line\">14. npm i &lt;alias&gt;@npm:&lt;packageName&gt;@&lt;version&gt;   一个包安装不同的版本  </span><br><span class=\"line\">15. Chokidar    Minimal and efficient cross-platform file watching library</span><br><span class=\"line\">16. koa2-connect   Use Express/Connect middleware with Koa.</span><br><span class=\"line\">17. npm list -g --depth 0  </span><br><span class=\"line\">18. 容器内使用 printenv 命令来查看容器内的环境变量。</span><br><span class=\"line\">19. daisy-init --origin direct:https://coding.jd.com/daas-fe/dms-new-console.git --branch template</span><br><span class=\"line\">20. npm cache clean --force    npm cache verify</span><br><span class=\"line\">21. utilities 模块包含的是原子化的样式（每一个基础类都只实现一个基础的样式功能），应该最后加载的。这样在其中定义的样式就有最高的优先级，即确保基础类应用到 HTML 页面时，可以覆盖其他样式。</span><br><span class=\"line\">  所有使用 @layer 添加的样式，它们的类名在应用到 HTML 页面时，也像 Tailwind 内置的基础类一样，都支持使用状态变量（这是使用普通方式添加的样式所不具有的优势）</span><br><span class=\"line\"></span><br><span class=\"line\">   而且使用指令 @layer 添加自定义样式，也会在编译时自动进行简化 purge 处理，只有在 HTML 页面的元素中使用了类名，相应的自定义样式才会被编译到最终的样式表中。如果希望自定义的样式最后总是编译到样式表中，则可以不使用指令 @layer 直接写在主样式表中（也需要注意 CSS 代码添加的顺序，一般应该保证 @tailwind utilities 模块最后引入）</span><br><span class=\"line\">1. @tailwindcss/line-clamp</span><br><span class=\"line\">2. list-disc. list-decimal</span><br><span class=\"line\">3. form.resetfileds 需要form-item 设置prop,form设置 model </span><br><span class=\"line\">4. Selecting all text in one click</span><br><span class=\"line\">     Use select-all to automatically select all the text in an element when a user clicks。</span><br><span class=\"line\">5. text-[12px] 指定字体大小</span><br><span class=\"line\">6. Using spaces and underscores</span><br><span class=\"line\">   Since whitespace denotes the end of a class in HTML, replace any spaces in an arbitrary value with an underscore:&lt;div class=&quot;before:content-[&#x27;Hello_World&#x27;]&quot;&gt;</span><br><span class=\"line\">7. Add borders between horizontal children</span><br><span class=\"line\">   Add borders between horizontal elements using the divide-x-&#123;width&#125; utilities.</span><br><span class=\"line\">8.  Add borders between stacked children</span><br><span class=\"line\">   Add borders between stacked elements using the divide-y-&#123;width&#125; utilities.</span><br><span class=\"line\">9.  focus-within (:focus-within)</span><br><span class=\"line\">   Style an element when it or one of its descendants has focus using the focus-within modifier:</span><br><span class=\"line\">10. 连续修饰符</span><br></pre></td></tr></table></figure><br>div:has(h2):has(ul) {<br>  background: black;<br>} </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. currentColor  和font color 一致</span><br><span class=\"line\"> </span><br><span class=\"line\">2. target (:target)</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<p>Style an element if its ID matches the current URL fragment using the target modifier:</p>\n<p>first (:first-child)   last (:last-child)</p>\n<p>only (:only-child)<br>Style an element if it’s the only child using the only modifier:</p>\n<p>empty (:empty)<br>Style an element if it has no content using the empty modifier:</p>\n<p>in-range (:in-range)<br>Style an input when it’s value is within a specified range limit using the in-range modifier:</p>\n<input min=\"1\" max=\"5\" class=\"in-range:border-green-500 ...\" />\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. peer </span><br></pre></td></tr></table></figure>\n<pre><code>&lt;input type=&quot;email&quot; class=&quot;peer ...&quot;/&gt;\n&lt;p class=&quot;mt-2 invisible peer-invalid:visible text-pink-600 text-sm&quot;&gt;\n  Please provide a valid email address.\n&lt;/p&gt;\n</code></pre>\n   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2. Style the ::before and ::after pseudo-elements using the before and after modifiers:</span><br><span class=\"line\">   after:content-[&#x27;*’] after:ml-0.5</span><br><span class=\"line\">3. Justify-end Justify-start</span><br><span class=\"line\">4. Use the border-&#123;side&#125;, border-&#123;side&#125;-0, border-&#123;side&#125;-2, border-&#123;side&#125;-4, or border-&#123;side&#125;-8 utilities to set the border width for one side of an element.</span><br><span class=\"line\"></span><br><span class=\"line\">border-x   border-left-width: 1px;border-right-width: 1px;</span><br><span class=\"line\"></span><br><span class=\"line\">1. 没有rel=“noopener noreferrer”的情况下使用target=“_blank”是有安全风险，超链接a标签的rel=&quot;noopener noreferrer&quot;属性是一种新特性，它能让网站更安全，超链接添加rel=&quot;noopener noreferrer&quot;来防止钓鱼网站，因为它获取的window.opener的值为null</span><br><span class=\"line\"></span><br><span class=\"line\">1. Use place-content-center to pack items in the center of the block axis: 对应Grid 和 flexbox </span><br><span class=\"line\">2. Use place-content-stretch to stretch grid items along their grid areas on the block axis:</span><br><span class=\"line\">3. Breakpoint prefix sm 限制了最小值</span><br><span class=\"line\">4. -translate-y-1/2</span><br><span class=\"line\">5. Use inline-flex to create an inline flex container that flows with text.</span><br><span class=\"line\">6. focus:border-blue-400</span><br><span class=\"line\">7. Use contents to create a “phantom” container whose children act like direct children of the parent.</span><br></pre></td></tr></table></figure>\n<div class=\"flex ...\">\n  <div class=\"flex-1 ...\">01</div>\n  <div class=\"contents\">\n    <div class=\"flex-1 ...\">02</div>\n    <div class=\"flex-1 ...\">03</div>\n  </div>\n  <div class=\"flex-1 ...\">04</div>\n</div>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Sass声明变量必须是『$』开头，后面紧跟变量名和变量值，而且变量名和变量值需要使用冒号：分隔开。</span><br><span class=\"line\"></span><br><span class=\"line\">Less 声明变量用『@』开头，其余等同 Sass。</span><br><span class=\"line\"></span><br><span class=\"line\">Stylus 中声明变量没有任何限定，结尾的分号可有可无，但变量名和变量值之间必须要有『等号』。</span><br><span class=\"line\"></span><br><span class=\"line\">1. 就是当我们对 DOM 结构的修改引发 DOM 几何尺寸变化的时候，会发生回流的过程。</span><br><span class=\"line\">    还有一种情况，是直接合成。比如利用 CSS3 的transform、opacity、filter这些属性就可以实现合成的效果，也就是大家常说的GPU加速。</span><br><span class=\"line\">2. base64 -d  解码  linux </span><br><span class=\"line\">3. const &#123; name, doubleCount &#125; = storeToRefs(store)  </span><br><span class=\"line\">4. watchEffect 不能检测深层的变化，因此reactive 中变化无效，如果需要则 toRefs 转换</span><br><span class=\"line\">5. V2 $attrs   1. custom events go into a @listerner bucket  2.不能绑定class </span><br><span class=\"line\">6. Npm ls 查看依赖</span><br><span class=\"line\">7. 可以看到结果reactive是递归会将每一层包装成Proxy对象的，深度监听每一层的property</span><br><span class=\"line\">8. effectScope有一个可选参数为boolean，当传入true时表示阻断与父级的联系，阻断后这个scope对象将不会与父级关联，成为独立的scope。父级的stop也不会影响到它。 </span><br><span class=\"line\">9. Last-Modified,Etag,Expires 三个同时使用时。先判断 Expire ，然后发送 Http 请求，服务器先判断 last-modified ，再判断 Etag ，必须都没有过期，才能返回 304 响应</span><br><span class=\"line\">10. klona  fast utility to &quot;deep clone&quot; Objects, Arrays, Dates, RegExps, and more!</span><br><span class=\"line\">11. Grep string starting with (e.g. &#x27;S’)    grep -o &#x27;S.*’</span><br><span class=\"line\">12. ~: 如果写入的是 〜0.13.0，则当运行 npm update 时，会更新到补丁版本：即 0.13.1 可以，但 0.14.0 不可以。</span><br><span class=\"line\">13. &gt;: 接受高于指定版本的任何版本。</span><br><span class=\"line\">14. ^: 只会执行不更改最左边非零数字的更新。 如果写入的是 ^0.13.0，则当运行 npm update 时，可以更新到 0.13.1、0.13.2 等，但不能更新到 0.14.0 或更高版本。 如果写入的是 ^1.13.0，则当运行 npm update 时，可以更新到 1.13.1、1.14.0 等，但不能更新到 2.0.0 或更高版本。</span><br><span class=\"line\">2. firefox 子元素不缩小需要设置  You need to add min‑width:0</span><br><span class=\"line\">3. flex 布局中子级超过了父级的宽度，需要设置 width:0 ,完全由flex 分配宽度。</span><br><span class=\"line\">4. POSIX stands for Portable Operating System Interface.</span><br><span class=\"line\">5.  @supports CSS at-rule 相当于功能选择器</span><br></pre></td></tr></table></figure>\n   @supports (display: flex) {\n  body {\n    display: flex;\n    min-height: 100vh;\n  }\n}\n   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2. https://github.com/cuixiaorui/mini-vue  vue3 source code </span><br><span class=\"line\"></span><br><span class=\"line\">3. react 被 startTransition 回调包裹的 setState 触发的渲染 被标记为不紧急渲染，这些渲染可能被其他紧急渲染所抢占。</span><br><span class=\"line\">   </span><br><span class=\"line\">4. https://hyper.is/ electron console</span><br><span class=\"line\">5. https://cmder.net/ windows 端的console 模拟器</span><br><span class=\"line\">6. Access-Control-Request-Private-Network: true 在所有私有网络预检请求上设置</span><br><span class=\"line\">   Access-Control-Allow-Private-Network: true 必须在所有私有网络预检响应上设置</span><br><span class=\"line\">7. 使用 Fragments，我们不需要在DOM中添加额外的节点。我们只需要用 React.Fragment 或才简写 &lt;&gt; 来包裹内容就行了</span><br><span class=\"line\">8. vite 虚拟模块  虚拟模块是一种很实用的模式，使你可以对使用 ESM 语法的源文件传入一些编译时信息。</span><br><span class=\"line\">9.  glob Match files using the patterns the shell uses, like stars and stuff.</span><br><span class=\"line\">10. click.self </span><br><span class=\"line\">我们知道在自定义组件上，只能监听自定义事件，一些原生事件（比如click）是没有办法直接触发的，但是使用.native修饰符可以帮我们办到这点</span><br><span class=\"line\">1. offset-path  定义动画运行路径</span><br><span class=\"line\">2. Tauri 是一个为所有主流桌面平台构建小型、快速二进制文件的框架。开发人员可以集成任何编译成 HTML、 JS 和 CSS 的前端框架来构建他们的用户界面。应用程序的后端是一个 Rust 二进制文件，具有前端可以与之交互的 API。</span><br><span class=\"line\">3.  gitsecreat 使用： https://www.mikesay.com/2020/12/16/git-encrypt-file-in-repository/#git-secret%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8</span><br><span class=\"line\">4. svg2pdf.js 图片转pdf</span><br><span class=\"line\">5. stream 的另外一个模式: objectMode。它是一种对象模式，我们把一件事情、或一个文件、或一个操作，抽象成一个对象。</span><br></pre></td></tr></table></figure>\n   const Readable = require('stream').Readable\n\n<p>   const readable &#x3D; Readable({ objectMode: true })<br>    readable.push(‘a’)<br>    readable.push(‘b’)<br>    readable.push({})<br>    readable.push(null)</p>\n<pre><code>readable.on(&#39;data&#39;, data =&gt; console.log(data))\n</code></pre>\n   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6. git config --global push.followTags true</span><br><span class=\"line\">7. Markraw 标记不会被reactive</span><br><span class=\"line\">8. watcheffect onInvalidate 在重新运行或者停止的时候执行</span><br><span class=\"line\">9. composedPath() 是 Event 接口的一个方法，当对象数组调用该侦听器时返回事件路径。</span><br><span class=\"line\">10. customref  track and trigger  </span><br><span class=\"line\">11. vueuse useMemoize 对结果加cache</span><br><span class=\"line\">12. elementFromPoint 根据point 获取element</span><br><span class=\"line\">13. Change-case Transform a string between camelCase, PascalCase, Capital Case, snake_case, param-case, CONSTANT_CASE and others.</span><br><span class=\"line\">14. p-retry It does exponential backoff and supports custom retry strategies for failed operations.</span><br><span class=\"line\">15. MutationObserver 观察dom 变化</span><br><span class=\"line\">16. requestFullscreen</span><br><span class=\"line\">17. passive: Boolean，设置为true时，表示 listener 永远不会调用 preventDefault()。如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告</span><br><span class=\"line\">18. shallowReacive  shallowRef  shallowRef生成非递归响应数据，只监听第一层数据的变化</span><br><span class=\"line\">19. 推荐在大部分时候用 watch 显式的指定依赖以避免不必要的重复触发，也避免在后续代码修改或重构时不小心引入新的依赖。watchEffect 适用于一些逻辑相对简单，依赖源和逻辑强相关的场景（或者懒惰的场景 ）。</span><br><span class=\"line\">20. Object.fromEntries</span><br><span class=\"line\">21. URL.revokeObjectURL() 静态方法用来释放一个之前已经存在的、通过调用 URL.createObjectURL() 创建的 URL 对象。</span><br><span class=\"line\">22. querySelector  返回第一个匹配元素</span><br><span class=\"line\">23. Array.prototype.at()接收一个正整数或者负整数作为参数，表示获取指定位置的成员</span><br><span class=\"line\">24. IFC全称：Inline Formatting Context，名为行级格式化上下文。    触发：块级元素中仅包含内联级别元素</span><br><span class=\"line\">25. The Notification interface of the Notifications API is used to configure and display desktop notifications to the user.</span><br><span class=\"line\">26. TinyMCE 富文本编辑器</span><br><span class=\"line\">27. Window.innerHeight  浏览器窗口的视口（viewport）高度（以像素为单位）；如果有水平滚动条，也包括滚动条高度。</span><br><span class=\"line\">28. vuedraggable 处理拖动数据</span><br><span class=\"line\">29. path-to-regexp   Turn a path string such as /user/:name into a regular expression. The compile function will return a function for transforming parameters into a valid path:</span><br><span class=\"line\">30. vue router 重新render,redirect+fullpath.通过添加一个中转页实现。</span><br><span class=\"line\">31. import &#123; storeToRefs &#125; from &quot;pinia”;</span><br><span class=\"line\">32. html5 input number</span><br></pre></td></tr></table></figure>\n<p>.no-arrow::-webkit-outer-spin-button,<br>.no-arrow::-webkit-inner-spin-button {<br>  -webkit-appearance: none;<br>}<br> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. vue3 类型 MayBeRef</span><br><span class=\"line\">2. 暂停watch后更新，</span><br></pre></td></tr></table></figure><br>ignoreUpdates(() &#x3D;&gt; {<br>  source.value &#x3D; ‘ignored’<br>})</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1. dsp 读取json,csv,xlxs 数据</span><br><span class=\"line\">2. limu 创建imutable 对象</span><br><span class=\"line\">3. controlledRef set peek,控制数据的更新</span><br></pre></td></tr></table></figure>\n<p> const num &#x3D; controlledRef(0, {<br>  onBeforeChange(value, oldValue) {<br>    &#x2F;&#x2F; disallow changes larger then ±5 in one operation<br>    if (Math.abs(value - oldValue) &gt; 5)<br>      return false &#x2F;&#x2F; returning <code>false</code> to dismiss the change<br>  },<br>})<br> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1. flush: post 推迟副作用的初始运行，直到组件的首次渲染完成。</span><br><span class=\"line\">   watch 通过更改设置 flush: &#x27;sync&#x27;，我们可以为每个更改都强制触发侦听器，尽管这通常是不推荐的</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>&#39;pre&#39;</code>: buffers invalidated effects in the same ‘tick’ and flushes them before rendering</li>\n<li><code>&#39;post&#39;</code>: async like ‘pre’ but fires after component updates so you can access the updated DOM</li>\n<li><code>&#39;sync&#39;</code>: forces the effect to always trigger synchronously</li>\n</ul>\n<p> { flush: ‘post’ }<br>)</p>\n   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. transx vue 动画组件   一个小巧玲珑的 vue 组件切换动画库</span><br><span class=\"line\">2. ts-morph 修改ts 代码，封装后的ts compiler api</span><br><span class=\"line\">3. esno 执行ts</span><br><span class=\"line\">4. https://mermaid-js.github.io/mermaid/#/     mermaid 及其方便的画图工具</span><br><span class=\"line\">5. vue-parallaxy Is a compontent for fast 60fps parallax scroll effects in vue 2. 实现滚动的视差效果。</span><br><span class=\"line\">6. useWatermark,Layzcontainer. context menu  vue-vben-admin 中</span><br><span class=\"line\">7. localForage is a fast and simple storage library for JavaScript。Wraps IndexedDB, WebSQL, or localStorage using a simple but powerful API.</span><br><span class=\"line\">8.  markRaw 标记对下不会被reactive</span><br><span class=\"line\">9.  indexeddb-fs is a module that allows you to store data in the browser using an API similar to that of Node&#x27;s fs module.</span><br><span class=\"line\">10. 临时安全令牌（Security Token Service，STS）</span><br><span class=\"line\">11. *** 获取文本px宽度* @param font&#123;String&#125;: 字体样式**</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>String.prototype.pxWidth &#x3D; function(font) {<br>  &#x2F;&#x2F; re-use canvas object for better performance<br>  var canvas &#x3D; String.prototype.pxWidth.canvas || (String.prototype.pxWidth.canvas &#x3D; document.createElement(“canvas”)),<br>      context &#x3D; canvas.getContext(“2d”); </p>\n<p>  font &amp;&amp; (context.font &#x3D; font);<br>  var metrics &#x3D; context.measureText(this);</p>\n<p>  return metrics.width;<br>}</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1. 先保存各个实例的values信息， helm get values [release] &gt; xxx.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1. </span><br><span class=\"line\">HTTP协议中用头部字段Accept-Encoding 和 Content-Encoding对「采用何种编码格式传输正文」进行了协定，请求头的Accept-Encoding会列出客户端支持的编码格式。当响应头的 Content-Encoding指定了gzip时，浏览器则会进行对应解压</span><br><span class=\"line\"></span><br><span class=\"line\">1. Transfer-Encoding，是一个 HTTP 头部字段，字面意思是「传输编码」。实际上，HTTP 协议中还有另外一个头部与编码有关：Content-Encoding（内容编码）。Content-Encoding 通常用于对实体内容进行压缩编码，目的是优化传输，</span><br></pre></td></tr></table></figure>\n<p>Transfer-Encoding: chunked<br>Transfer-Encoding: compress<br>Transfer-Encoding: deflate<br>Transfer-Encoding: gzip<br>Transfer-Encoding: identity</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2. 逐跳消息头  这类消息头仅对单次传输连接有意义，不能通过代理或缓存进行重新转发</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">2. mime  https://github.com/sindresorhus/file-type  根据文件内容判断类型</span><br><span class=\"line\"></span><br><span class=\"line\">1. 语义化版本控制(SemVer)</span><br><span class=\"line\">   先简单了解下什么是语义化的版本控制，其是由GitHub发起的一份用于规范版本号递增的规则，</span><br><span class=\"line\"></span><br><span class=\"line\">1.  deeplinks.js allows people to easily link directly to any text selection on your website.</span><br><span class=\"line\">2.  Vue DevUI 开源的UI</span><br><span class=\"line\">3. standard-version</span><br><span class=\"line\">standard-version 会根据提交的信息类型来自动更改对应的版本号,如下:</span><br></pre></td></tr></table></figure>\n<p>feat: 次版本(minor)+1<br>fix: 修订号(patch) +1<br>BREAK CHANGE: 主板号(marjor) +1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. outline 能告诉用户那一个可以激发事件的html元素获取了焦点，对钟爱键盘操作的用户尤其有意义。一个清晰悦目的outline设计能提高使用表单的用户体验。</span><br><span class=\"line\">2. CSS属性 columns 用来设置元素的列宽和列数。</span><br><span class=\"line\">重点，设置了display: contents的元素本身不会被渲染，但是其子元素能够正常被渲染。</span><br><span class=\"line\">3. 为了使我们的盒子居中，通过align-items属性，可以将交叉轴上的item对齐，此时使用的是垂直方向的块轴。而使用justify-content则可以对齐主轴上的项目，主轴是水平方向的。</span><br><span class=\"line\">align conent  用来控制多行布局   控制“多条主轴”的 flex 项目在交叉轴的对齐。</span><br><span class=\"line\"></span><br><span class=\"line\">1. CSS 中的 place-items 是一个简写属性 ，它允许你在相关的布局（如 Grid 或 Flexbox）中可以同时沿着块级和内联方向对齐元素 (例如：align-items 和 justify-items 属性) 。如果未提供第二个值，则第一个值作为第二个值的默认值</span><br><span class=\"line\"></span><br><span class=\"line\">1. filter CSS属性将模糊或颜色偏移等图形效果应用于元素。滤镜通常用于调整图像，背景和边框的渲染。</span><br><span class=\"line\"></span><br><span class=\"line\">1. monaco 自定义language</span><br></pre></td></tr></table></figure>\n<p>register monaco.languages.register({ id: ‘mySpecialLanguage’ });<br>setMonarchTokensProvider base language 里面有3<br>defineTheme  设置样式<br>monaco.editor.defineTheme(‘myCoolTheme’, {<br>                    colors: {},<br>                    base: ‘vs’,<br>                    inherit: false,<br>                    rules: [<br>                        { token: ‘custom-info’, foreground: ‘808080’ },<br>                        { token: ‘custom-error’, foreground: ‘ff0000’, fontStyle: ‘bold’ },<br>                        { token: ‘custom-notice’, foreground: ‘FFA500’ },<br>                        { token: ‘custom-date’, foreground: ‘008800’ }<br>                    ]<br>                });<br>registerCompletionItemProvider  智能提示，遇到对应的关键词</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1. Monarch  用来实现代码高亮   https://juejin.cn/post/6844903736867831822</span><br><span class=\"line\"></span><br><span class=\"line\">https://microsoft.github.io/monaco-editor/monarch.html</span><br><span class=\"line\"></span><br><span class=\"line\">1. xe-utils 提供工具类</span><br><span class=\"line\">1. Mitt  Tiny (~200b) functional event emitter / pubsub.</span><br><span class=\"line\">1. element-resize-detector  </span><br><span class=\"line\">1. memoize-one 记录最近的返回结果,不同参数会重置</span><br><span class=\"line\">1. 钱其实是“保健因子”，而不是“激励因子”，是多了没用、少了不行的东西</span><br><span class=\"line\">2. 可以看到整个医改的核心就是放供给、促竞争和扶创新的过程</span><br><span class=\"line\">3. 破船能过河</span><br><span class=\"line\">4. Comlink Comlink makes WebWorkers enjoyable. 多线程</span><br><span class=\"line\">5.  </span><br><span class=\"line\">`Rails-style`: 按照文件的类型划分为不同的目录</span><br><span class=\"line\"></span><br><span class=\"line\">`Domain-style`: 按照一个功能特性或业务创建单独的目录</span><br><span class=\"line\"></span><br><span class=\"line\">`Ducks-style`: 优点类似于Domain-style，不过更彻底, 它通常将相关联的元素定义在一个文件下·</span><br><span class=\"line\"></span><br><span class=\"line\">1. </span><br><span class=\"line\">    强约定，体现团队的规范。首先它应该避免团队成员去关心或更改构建的配置细节，暴露最小化的配置接口。 另外构建工具不仅仅是构建，通常它还会集成代码检查、测试等功能。</span><br><span class=\"line\"></span><br><span class=\"line\">    方便升级。尤其是团队需要维护多个项目场景, 这一点很有意义</span><br><span class=\"line\"></span><br><span class=\"line\">2. BEM</span><br></pre></td></tr></table></figure>\n<p>元素（Element），即 price 、text ，代表从属于某个块，是这个块的子元素，跟在块后面，以双下划线为间隔，使用 .btn__price 、.btn__text 表示</p>\n<p>修饰符（Modifier），即 orange 、big ，用于修改块的状态，为块添加特定的主题或样式，跟在块后面，以双连字符为间隔，使用 .btn–orange 、.btn–big 表示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.  npm-run-all</span><br></pre></td></tr></table></figure>\n<p>Before: npm run clean &amp;&amp; npm run build:css &amp;&amp; npm run build:js &amp;&amp; npm run build:html<br>After: npm-run-all clean build:*</p>\n<pre><code>\n1. display:flow-root可以让元素块状化，同时包含格式化上下文BFC，可以用来清除浮动，去除margin合并，实现两栏自适应布局等。\n\n1. stroke-dash 是一个定义虚线和间距图形的图像工具类, 被用于轮廓描边;\n\n1. npx degit\n   \n1.  有一些环境变量，比如HOME、PATH、SHELL、UID、USER等，在用户登录之前就已经被/bin/login程序设置好了。通常环境变量被定义并保存在用户家目录下的．bash_profile文件或全局的配置文件/etc/profile中\n\n1. env命令只显示全局变量；declare命令输出所有的变量、函数、整数和已经导出的变量\n\n1. http upgrade 通常来说这一机制总是由客户端发起的 （不过也有例外，比如说可以由服务端发起升级到传输层安全协议（TLS））， 服务端可以选择是否要升级到新协议。借助这一技术，连接可以以常用的协议启动（如HTTP/1.1），随后再升级到HTTP2甚至是WebSockets.\n\n1. 因为 CommonJS 在运行时进行加载方式的动态解析，在运行时阶段才能确定的导入导出关系，因此无法进行静态编译优化和类型检查。​\n\n1. JSZip  JSZip is a javascript library for creating, reading and editing .zip files, with a lovely and simple AP\n   \n2. spy-debugger  一站式页面调试、抓包工具。远程调试任何手机浏览器页面，任何手机移动端webview（如：微信，HybridApp等）。支持HTTP/HTTPS，无需USB连接设备\n   \n3. viteshot 基于vite 的快照\n\n4. useScrollLock\n</code></pre>\n"},{"title":"package","date":"2019-02-14T09:19:12.000Z","_content":"1. vue-spinners A collection of loading spinner components for Vuejs\n2. vue-ui-preloader 可定义spinner 速度\n3. https://github.com/epicmaxco/epic-spinners spinner 也可调整速度\n4. Vue pipeline 流程展示  https://jinfang134.github.io/vue-pipeline/\n5. 不同的进度  https://setaman.github.io/vue-ellipse-progress-docs/guide/\n6. vue-loading-overlay 方便添加蒙层\n7. Vue-intro  新功能引导  \n8. zebra-editor-core  富文本编辑器\n9.  lucky sheet 在线的excel编辑\n10. generic-pool  资源池，可以reuse 和限制一些比较贵的资源比如数据库链接。\n11. Mind elixir 浏览器思维导图js module\n12. cp-cli  copy 跨平台\n13. markdown-it :  markdown parser\n14. web-storage-cache 对HTML5 localStorage 和sessionStorage 进行了扩展，添加了超时时间，序列化方法。可以直接存储json对象，同时可以非常简单的进行超时时间的设置。\n15. ImmortalDB 是在浏览器中存储持久键值数据的最佳方法。保存到 ImmortalDB 的数据被冗余地存储在 Cookies，IndexedDB 和 localStorage 中，并且如果其中的任何数据被删除或损坏，它们将不断进行自我修复。\n16. localForage 是一个快速简单的 JavaScript 存储库。 它通过使用类似于 localStorage 的简单 API 来使用异步存储（IndexedDB 或 WebSQL)），进而改善你的 Web 应用程序的离线体验。\n17. webworker-threads  node 多线程模块处理计算密集任务\n18. Textures.js  基于d3 生成纹理\n19. robotjs 控制键盘、鼠标、屏幕\n20. vue-count-to  的数字滚动组件，vue-count-to是一个无依赖，轻量级的vue组件，可以自行覆盖easingFn。你可以设置 startVal 和 endVal，它会自动判断计数或倒计时\n21. fullpagejs  通过调用本库可轻易创建全屏滚动网站(也称为单页网站)。 本库可创建全屏滚动网站，同时也可在网站中添加横向滚动条。\n22. Opn: A better node-open. Opens stuff like websites, files, executables. Cross-platform.\n23. Ora:进度条和文字。\n24. joi：数据验\n25. minimist：简单的参数处理\n26. read-pkg:规范化解析pkg\n27. inquirer:询问时可以给出选项\n28. Resovel:解析包的安装路径\n29. slash:Convert Windows backslash paths to slash paths: foo\\\\bar ➔ foo/bar\n30. klaw-sync:回遍历出所有文件，并返回文件路径和文件夹\n31. mime-types content-type 工具：1. 可以根据文件后缀获取 2. 根据content-type获取charset 3. 根据content-type 获取默认的文件名\n32. CodeMirror是一个运行在浏览器中的在线代码编辑器，支持100多种语言，高度可定制。\n33. @typescript-eslint/eslint-plugin.  eslint 检测typescript \n34. nanoid  A tiny, secure, URL-friendly, unique string ID generator for JavaScript.\n35. mm 对mudule 中的方法mock\n36. numerify  用来格式化数字 \n   \n37. utils-lite  前端提供debounce、thorttling、clone、cloneDeep 等方法\n38. is-type-of   node check 数据类型\n39. on-finished  Execute a callback when a HTTP request closes, finishes, or errors\n40. await-event  封装了promise \n\n```javascript\nvar PassThrough = require('stream').PassThrough\n \nvar stream = new PassThrough()\n// you attach it directly on an event emitter\nstream.await = require('await-event')\n \nco(function* () {\n  var chunk = yield stream.await('data')\n  var chunk = yield stream.await('data')\n  var chunk = yield stream.await('data')\n}).catch(noop)\n \nstream.write('some chunk’) \n```\n1. get-ready  NodeJS mixin to add one-time ready event\n2. ShellJS 是Unix shell命令在Node.js API上的可移植实现\n3. graceful-process   graceful exit process even parent exit on SIGKILL.\n4. semver.gte(process.version, '7.0.0’)  版本的比对 \n5. pkgfiles  自动再package中添加 npm publish 文件\n6. depd  标注方法deprecating \n7. http-errors   http错误  \n8. Global-tunnel  http请求的全局代理  \n9. humanize-ms  转义为ms  \n```\ntransform humanize time to ms  ms('1s') // 1000\nms(1000) // 1000\n```\n1. Exceljs 一个功能强大的excel 处理包\n1. ready-callback 所有注册的事件完成后，才执行ready中方法\n1. Get-ready  NodeJS mixin to add one-time ready event，ready 后执行相关方法\n1. xml2js  将xml 转换为json \n1. debug  调试状态输出  debug=*  debug=work:*   \n1. delegates  node模块中代理proto中属性的方法、setter和getter\n1. chokidar filewatch \n1. Puppeteer  headless browser\n1. cross-env Run scripts that set and use environment variables across platforms\n1. simplemde  markdown editor \n1. serialize-javascript  Serialize JavaScript to a superset of JSON that includes regular expressions and functions.\n1.route-cache  express router cache\n```javascript\nvar routeCache = require('route-cache');\n \n// cache route for 20 seconds\napp.get('/index', routeCache.cacheSeconds(20), function(req, res){\n  // do your dirty work here...\n  console.log('you will only see this every 20 seconds.');\n  res.send('this response will be cached');\n});\n```\n1. Ws server 端的websoket \n1. fastclick  解决浏览器点击的延迟\n1. Qs  A querystring parsing and stringifying library with some added security.\n1. lru-cache  A cache object that deletes the least-recently-used items.\n1. memory-fs  A simple in-memory filesystem. Holds data in a javascript object\n1. faker.js  generate massive amounts of fake data in the browser and node.js\n1. parseurl 等同node url parse，加了cache\n1. vue-lazy-component   Vue.js 2.x 组件级懒加载方案-Vue.js 2.x component level lazy loading solution\n1. async-validator  数据验证\n1. fast-safe-stringify    Safe and fast serialization alternative to JSON.stringify.\n1. node-notifier   Send cross platform native notifications using Node.js.\n1. dateformat   node 时间处理函数\n1. agentkeepalive  defaut is keepalive\n1. copy-to   copy an object's properties to another one, include propertiy, getter and setter.\n1. platform   A platform detection library that works on nearly all JavaScript platforms.\n\n1. svg-captcha 验证码  \n1. vue-virtual-scroller  加载大量数据\n1. FileSaver.js  保存大于 ram的文档\n1. vue-draggable-resizable  Vue2 Component for draggable and resizable elements.\n1. ScrollTrigger  根据滚动位置出发事件\n1. Vue Virtual Scroller   RecycleScroller 可以渲染列表中的可见项目。如果你不知道项目的大小，最好使用 DynamicScroller\n1. Vuetensils  没有样式的component,可定制自己样式\n1. v-calendar  日历插件\n1. vue-grid-layout 可以拖拽的布局控件\n1. Vue-content-loader  占位符控件\n1. Sinon   node 端监控方法执行、mock、spy\n1. figlet  控制台标题文字\n1. Cockatiel  是一个弹性和瞬态故障处理库，如重试，断路器，超时，隔板隔离和回退之类的策略。\n1. Signale  一个 Node 的日志格式库，自带16个级别，可以定制颜色和 Emoji。\n1. Wiki.js  构建wiki 文档管理 \n1. fast-xml-parser xml 和     json 转换\n1. js-cloudimage-360-view 360度查看\n1. crontab ui\n1. X-spreadsheet css 实现的sheet\n1. SitDown  [html to markdown](http://domchristie.github.io/turndown/)\n1. Wekan 一个开源的看板软件\n1. droppy  提供web界面的可本地部署的文件管理\n1. uplot 渲染大量数据，占用资源少\n1. https://github.com/jlongster/absurd-sql  sqllite 对indexdb的封装\n2. https://www.npmjs.com/package/zx   zx node shell 的脚本终极方案\n \n \n2. chan  A golang like channel implementation for JavaScript that works well with co.\n3. pump  When using standard source.pipe(dest) source will not be destroyed if dest emits close or an error. You are also not able to provide a callback to tell when then pipe has finished.\n4. npx cloc path 用来统计代码行数\n5. acorn  A tiny, fast JavaScript parser written in JavaScript.\n6.  picocolors  The tiniest and the fastest library for terminal output formatting with ANSI colors.添加背景色的。\n7.  hash-sum  blazing fast unique hash generator\n8.  micromatch  Glob matching for javascript/node.js. A replacement and faster alternative to minimatch and multimatch.\n9.  xterm-addon-attach  An addon for xterm.js that enables attaching to a web socket. This addon requires xterm.js v4+.\n10. node-pty 虚拟的terminal forkpty(3) bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n  asdf\n1. dom-to-image 一个可以将任意DOM节点转换为用JavaScript编写的矢量（SVG）或光栅（PNG或JPEG）图像的库\n2. pako js 用来压缩和解压\n ","source":"_posts/package.md","raw":"---\ntitle: package\ndate: 2019-02-14 17:19:12\ntags: useful package\n---\n1. vue-spinners A collection of loading spinner components for Vuejs\n2. vue-ui-preloader 可定义spinner 速度\n3. https://github.com/epicmaxco/epic-spinners spinner 也可调整速度\n4. Vue pipeline 流程展示  https://jinfang134.github.io/vue-pipeline/\n5. 不同的进度  https://setaman.github.io/vue-ellipse-progress-docs/guide/\n6. vue-loading-overlay 方便添加蒙层\n7. Vue-intro  新功能引导  \n8. zebra-editor-core  富文本编辑器\n9.  lucky sheet 在线的excel编辑\n10. generic-pool  资源池，可以reuse 和限制一些比较贵的资源比如数据库链接。\n11. Mind elixir 浏览器思维导图js module\n12. cp-cli  copy 跨平台\n13. markdown-it :  markdown parser\n14. web-storage-cache 对HTML5 localStorage 和sessionStorage 进行了扩展，添加了超时时间，序列化方法。可以直接存储json对象，同时可以非常简单的进行超时时间的设置。\n15. ImmortalDB 是在浏览器中存储持久键值数据的最佳方法。保存到 ImmortalDB 的数据被冗余地存储在 Cookies，IndexedDB 和 localStorage 中，并且如果其中的任何数据被删除或损坏，它们将不断进行自我修复。\n16. localForage 是一个快速简单的 JavaScript 存储库。 它通过使用类似于 localStorage 的简单 API 来使用异步存储（IndexedDB 或 WebSQL)），进而改善你的 Web 应用程序的离线体验。\n17. webworker-threads  node 多线程模块处理计算密集任务\n18. Textures.js  基于d3 生成纹理\n19. robotjs 控制键盘、鼠标、屏幕\n20. vue-count-to  的数字滚动组件，vue-count-to是一个无依赖，轻量级的vue组件，可以自行覆盖easingFn。你可以设置 startVal 和 endVal，它会自动判断计数或倒计时\n21. fullpagejs  通过调用本库可轻易创建全屏滚动网站(也称为单页网站)。 本库可创建全屏滚动网站，同时也可在网站中添加横向滚动条。\n22. Opn: A better node-open. Opens stuff like websites, files, executables. Cross-platform.\n23. Ora:进度条和文字。\n24. joi：数据验\n25. minimist：简单的参数处理\n26. read-pkg:规范化解析pkg\n27. inquirer:询问时可以给出选项\n28. Resovel:解析包的安装路径\n29. slash:Convert Windows backslash paths to slash paths: foo\\\\bar ➔ foo/bar\n30. klaw-sync:回遍历出所有文件，并返回文件路径和文件夹\n31. mime-types content-type 工具：1. 可以根据文件后缀获取 2. 根据content-type获取charset 3. 根据content-type 获取默认的文件名\n32. CodeMirror是一个运行在浏览器中的在线代码编辑器，支持100多种语言，高度可定制。\n33. @typescript-eslint/eslint-plugin.  eslint 检测typescript \n34. nanoid  A tiny, secure, URL-friendly, unique string ID generator for JavaScript.\n35. mm 对mudule 中的方法mock\n36. numerify  用来格式化数字 \n   \n37. utils-lite  前端提供debounce、thorttling、clone、cloneDeep 等方法\n38. is-type-of   node check 数据类型\n39. on-finished  Execute a callback when a HTTP request closes, finishes, or errors\n40. await-event  封装了promise \n\n```javascript\nvar PassThrough = require('stream').PassThrough\n \nvar stream = new PassThrough()\n// you attach it directly on an event emitter\nstream.await = require('await-event')\n \nco(function* () {\n  var chunk = yield stream.await('data')\n  var chunk = yield stream.await('data')\n  var chunk = yield stream.await('data')\n}).catch(noop)\n \nstream.write('some chunk’) \n```\n1. get-ready  NodeJS mixin to add one-time ready event\n2. ShellJS 是Unix shell命令在Node.js API上的可移植实现\n3. graceful-process   graceful exit process even parent exit on SIGKILL.\n4. semver.gte(process.version, '7.0.0’)  版本的比对 \n5. pkgfiles  自动再package中添加 npm publish 文件\n6. depd  标注方法deprecating \n7. http-errors   http错误  \n8. Global-tunnel  http请求的全局代理  \n9. humanize-ms  转义为ms  \n```\ntransform humanize time to ms  ms('1s') // 1000\nms(1000) // 1000\n```\n1. Exceljs 一个功能强大的excel 处理包\n1. ready-callback 所有注册的事件完成后，才执行ready中方法\n1. Get-ready  NodeJS mixin to add one-time ready event，ready 后执行相关方法\n1. xml2js  将xml 转换为json \n1. debug  调试状态输出  debug=*  debug=work:*   \n1. delegates  node模块中代理proto中属性的方法、setter和getter\n1. chokidar filewatch \n1. Puppeteer  headless browser\n1. cross-env Run scripts that set and use environment variables across platforms\n1. simplemde  markdown editor \n1. serialize-javascript  Serialize JavaScript to a superset of JSON that includes regular expressions and functions.\n1.route-cache  express router cache\n```javascript\nvar routeCache = require('route-cache');\n \n// cache route for 20 seconds\napp.get('/index', routeCache.cacheSeconds(20), function(req, res){\n  // do your dirty work here...\n  console.log('you will only see this every 20 seconds.');\n  res.send('this response will be cached');\n});\n```\n1. Ws server 端的websoket \n1. fastclick  解决浏览器点击的延迟\n1. Qs  A querystring parsing and stringifying library with some added security.\n1. lru-cache  A cache object that deletes the least-recently-used items.\n1. memory-fs  A simple in-memory filesystem. Holds data in a javascript object\n1. faker.js  generate massive amounts of fake data in the browser and node.js\n1. parseurl 等同node url parse，加了cache\n1. vue-lazy-component   Vue.js 2.x 组件级懒加载方案-Vue.js 2.x component level lazy loading solution\n1. async-validator  数据验证\n1. fast-safe-stringify    Safe and fast serialization alternative to JSON.stringify.\n1. node-notifier   Send cross platform native notifications using Node.js.\n1. dateformat   node 时间处理函数\n1. agentkeepalive  defaut is keepalive\n1. copy-to   copy an object's properties to another one, include propertiy, getter and setter.\n1. platform   A platform detection library that works on nearly all JavaScript platforms.\n\n1. svg-captcha 验证码  \n1. vue-virtual-scroller  加载大量数据\n1. FileSaver.js  保存大于 ram的文档\n1. vue-draggable-resizable  Vue2 Component for draggable and resizable elements.\n1. ScrollTrigger  根据滚动位置出发事件\n1. Vue Virtual Scroller   RecycleScroller 可以渲染列表中的可见项目。如果你不知道项目的大小，最好使用 DynamicScroller\n1. Vuetensils  没有样式的component,可定制自己样式\n1. v-calendar  日历插件\n1. vue-grid-layout 可以拖拽的布局控件\n1. Vue-content-loader  占位符控件\n1. Sinon   node 端监控方法执行、mock、spy\n1. figlet  控制台标题文字\n1. Cockatiel  是一个弹性和瞬态故障处理库，如重试，断路器，超时，隔板隔离和回退之类的策略。\n1. Signale  一个 Node 的日志格式库，自带16个级别，可以定制颜色和 Emoji。\n1. Wiki.js  构建wiki 文档管理 \n1. fast-xml-parser xml 和     json 转换\n1. js-cloudimage-360-view 360度查看\n1. crontab ui\n1. X-spreadsheet css 实现的sheet\n1. SitDown  [html to markdown](http://domchristie.github.io/turndown/)\n1. Wekan 一个开源的看板软件\n1. droppy  提供web界面的可本地部署的文件管理\n1. uplot 渲染大量数据，占用资源少\n1. https://github.com/jlongster/absurd-sql  sqllite 对indexdb的封装\n2. https://www.npmjs.com/package/zx   zx node shell 的脚本终极方案\n \n \n2. chan  A golang like channel implementation for JavaScript that works well with co.\n3. pump  When using standard source.pipe(dest) source will not be destroyed if dest emits close or an error. You are also not able to provide a callback to tell when then pipe has finished.\n4. npx cloc path 用来统计代码行数\n5. acorn  A tiny, fast JavaScript parser written in JavaScript.\n6.  picocolors  The tiniest and the fastest library for terminal output formatting with ANSI colors.添加背景色的。\n7.  hash-sum  blazing fast unique hash generator\n8.  micromatch  Glob matching for javascript/node.js. A replacement and faster alternative to minimatch and multimatch.\n9.  xterm-addon-attach  An addon for xterm.js that enables attaching to a web socket. This addon requires xterm.js v4+.\n10. node-pty 虚拟的terminal forkpty(3) bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n  asdf\n1. dom-to-image 一个可以将任意DOM节点转换为用JavaScript编写的矢量（SVG）或光栅（PNG或JPEG）图像的库\n2. pako js 用来压缩和解压\n ","slug":"package","published":1,"updated":"2024-11-12T08:50:34.703Z","_id":"ckzf5se03001hyy8kowub1e2u","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li><p>vue-spinners A collection of loading spinner components for Vuejs</p>\n</li>\n<li><p>vue-ui-preloader 可定义spinner 速度</p>\n</li>\n<li><p><a href=\"https://github.com/epicmaxco/epic-spinners\">https://github.com/epicmaxco/epic-spinners</a> spinner 也可调整速度</p>\n</li>\n<li><p>Vue pipeline 流程展示  <a href=\"https://jinfang134.github.io/vue-pipeline/\">https://jinfang134.github.io/vue-pipeline/</a></p>\n</li>\n<li><p>不同的进度  <a href=\"https://setaman.github.io/vue-ellipse-progress-docs/guide/\">https://setaman.github.io/vue-ellipse-progress-docs/guide/</a></p>\n</li>\n<li><p>vue-loading-overlay 方便添加蒙层</p>\n</li>\n<li><p>Vue-intro  新功能引导  </p>\n</li>\n<li><p>zebra-editor-core  富文本编辑器</p>\n</li>\n<li><p>lucky sheet 在线的excel编辑</p>\n</li>\n<li><p>generic-pool  资源池，可以reuse 和限制一些比较贵的资源比如数据库链接。</p>\n</li>\n<li><p>Mind elixir 浏览器思维导图js module</p>\n</li>\n<li><p>cp-cli  copy 跨平台</p>\n</li>\n<li><p>markdown-it :  markdown parser</p>\n</li>\n<li><p>web-storage-cache 对HTML5 localStorage 和sessionStorage 进行了扩展，添加了超时时间，序列化方法。可以直接存储json对象，同时可以非常简单的进行超时时间的设置。</p>\n</li>\n<li><p>ImmortalDB 是在浏览器中存储持久键值数据的最佳方法。保存到 ImmortalDB 的数据被冗余地存储在 Cookies，IndexedDB 和 localStorage 中，并且如果其中的任何数据被删除或损坏，它们将不断进行自我修复。</p>\n</li>\n<li><p>localForage 是一个快速简单的 JavaScript 存储库。 它通过使用类似于 localStorage 的简单 API 来使用异步存储（IndexedDB 或 WebSQL)），进而改善你的 Web 应用程序的离线体验。</p>\n</li>\n<li><p>webworker-threads  node 多线程模块处理计算密集任务</p>\n</li>\n<li><p>Textures.js  基于d3 生成纹理</p>\n</li>\n<li><p>robotjs 控制键盘、鼠标、屏幕</p>\n</li>\n<li><p>vue-count-to  的数字滚动组件，vue-count-to是一个无依赖，轻量级的vue组件，可以自行覆盖easingFn。你可以设置 startVal 和 endVal，它会自动判断计数或倒计时</p>\n</li>\n<li><p>fullpagejs  通过调用本库可轻易创建全屏滚动网站(也称为单页网站)。 本库可创建全屏滚动网站，同时也可在网站中添加横向滚动条。</p>\n</li>\n<li><p>Opn: A better node-open. Opens stuff like websites, files, executables. Cross-platform.</p>\n</li>\n<li><p>Ora:进度条和文字。</p>\n</li>\n<li><p>joi：数据验</p>\n</li>\n<li><p>minimist：简单的参数处理</p>\n</li>\n<li><p>read-pkg:规范化解析pkg</p>\n</li>\n<li><p>inquirer:询问时可以给出选项</p>\n</li>\n<li><p>Resovel:解析包的安装路径</p>\n</li>\n<li><p>slash:Convert Windows backslash paths to slash paths: foo\\bar ➔ foo&#x2F;bar</p>\n</li>\n<li><p>klaw-sync:回遍历出所有文件，并返回文件路径和文件夹</p>\n</li>\n<li><p>mime-types content-type 工具：1. 可以根据文件后缀获取 2. 根据content-type获取charset 3. 根据content-type 获取默认的文件名</p>\n</li>\n<li><p>CodeMirror是一个运行在浏览器中的在线代码编辑器，支持100多种语言，高度可定制。</p>\n</li>\n<li><p>@typescript-eslint&#x2F;eslint-plugin.  eslint 检测typescript </p>\n</li>\n<li><p>nanoid  A tiny, secure, URL-friendly, unique string ID generator for JavaScript.</p>\n</li>\n<li><p>mm 对mudule 中的方法mock</p>\n</li>\n<li><p>numerify  用来格式化数字 </p>\n</li>\n<li><p>utils-lite  前端提供debounce、thorttling、clone、cloneDeep 等方法</p>\n</li>\n<li><p>is-type-of   node check 数据类型</p>\n</li>\n<li><p>on-finished  Execute a callback when a HTTP request closes, finishes, or errors</p>\n</li>\n<li><p>await-event  封装了promise</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">PassThrough</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;stream&#x27;</span>).<span class=\"property\">PassThrough</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> stream = <span class=\"keyword\">new</span> <span class=\"title class_\">PassThrough</span>()</span><br><span class=\"line\"><span class=\"comment\">// you attach it directly on an event emitter</span></span><br><span class=\"line\">stream.<span class=\"property\">await</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;await-event&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"title function_\">co</span>(<span class=\"keyword\">function</span>* () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> chunk = <span class=\"keyword\">yield</span> stream.<span class=\"title function_\">await</span>(<span class=\"string\">&#x27;data&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> chunk = <span class=\"keyword\">yield</span> stream.<span class=\"title function_\">await</span>(<span class=\"string\">&#x27;data&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> chunk = <span class=\"keyword\">yield</span> stream.<span class=\"title function_\">await</span>(<span class=\"string\">&#x27;data&#x27;</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(noop)</span><br><span class=\"line\"> </span><br><span class=\"line\">stream.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;some chunk’) </span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>get-ready  NodeJS mixin to add one-time ready event</li>\n<li>ShellJS 是Unix shell命令在Node.js API上的可移植实现</li>\n<li>graceful-process   graceful exit process even parent exit on SIGKILL.</li>\n<li>semver.gte(process.version, ‘7.0.0’)  版本的比对 </li>\n<li>pkgfiles  自动再package中添加 npm publish 文件</li>\n<li>depd  标注方法deprecating </li>\n<li>http-errors   http错误  </li>\n<li>Global-tunnel  http请求的全局代理  </li>\n<li>humanize-ms  转义为ms  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transform humanize time to ms  ms(&#x27;1s&#x27;) // 1000</span><br><span class=\"line\">ms(1000) // 1000</span><br></pre></td></tr></table></figure></li>\n<li>Exceljs 一个功能强大的excel 处理包</li>\n<li>ready-callback 所有注册的事件完成后，才执行ready中方法</li>\n<li>Get-ready  NodeJS mixin to add one-time ready event，ready 后执行相关方法</li>\n<li>xml2js  将xml 转换为json </li>\n<li>debug  调试状态输出  debug&#x3D;*  debug&#x3D;work:*   </li>\n<li>delegates  node模块中代理proto中属性的方法、setter和getter</li>\n<li>chokidar filewatch </li>\n<li>Puppeteer  headless browser</li>\n<li>cross-env Run scripts that set and use environment variables across platforms</li>\n<li>simplemde  markdown editor </li>\n<li>serialize-javascript  Serialize JavaScript to a superset of JSON that includes regular expressions and functions.</li>\n</ol>\n<p>1.route-cache  express router cache</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> routeCache = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;route-cache&#x27;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// cache route for 20 seconds</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/index&#x27;</span>, routeCache.<span class=\"title function_\">cacheSeconds</span>(<span class=\"number\">20</span>), <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// do your dirty work here...</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;you will only see this every 20 seconds.&#x27;</span>);</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;this response will be cached&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>Ws server 端的websoket </p>\n</li>\n<li><p>fastclick  解决浏览器点击的延迟</p>\n</li>\n<li><p>Qs  A querystring parsing and stringifying library with some added security.</p>\n</li>\n<li><p>lru-cache  A cache object that deletes the least-recently-used items.</p>\n</li>\n<li><p>memory-fs  A simple in-memory filesystem. Holds data in a javascript object</p>\n</li>\n<li><p>faker.js  generate massive amounts of fake data in the browser and node.js</p>\n</li>\n<li><p>parseurl 等同node url parse，加了cache</p>\n</li>\n<li><p>vue-lazy-component   Vue.js 2.x 组件级懒加载方案-Vue.js 2.x component level lazy loading solution</p>\n</li>\n<li><p>async-validator  数据验证</p>\n</li>\n<li><p>fast-safe-stringify    Safe and fast serialization alternative to JSON.stringify.</p>\n</li>\n<li><p>node-notifier   Send cross platform native notifications using Node.js.</p>\n</li>\n<li><p>dateformat   node 时间处理函数</p>\n</li>\n<li><p>agentkeepalive  defaut is keepalive</p>\n</li>\n<li><p>copy-to   copy an object’s properties to another one, include propertiy, getter and setter.</p>\n</li>\n<li><p>platform   A platform detection library that works on nearly all JavaScript platforms.</p>\n</li>\n<li><p>svg-captcha 验证码  </p>\n</li>\n<li><p>vue-virtual-scroller  加载大量数据</p>\n</li>\n<li><p>FileSaver.js  保存大于 ram的文档</p>\n</li>\n<li><p>vue-draggable-resizable  Vue2 Component for draggable and resizable elements.</p>\n</li>\n<li><p>ScrollTrigger  根据滚动位置出发事件</p>\n</li>\n<li><p>Vue Virtual Scroller   RecycleScroller 可以渲染列表中的可见项目。如果你不知道项目的大小，最好使用 DynamicScroller</p>\n</li>\n<li><p>Vuetensils  没有样式的component,可定制自己样式</p>\n</li>\n<li><p>v-calendar  日历插件</p>\n</li>\n<li><p>vue-grid-layout 可以拖拽的布局控件</p>\n</li>\n<li><p>Vue-content-loader  占位符控件</p>\n</li>\n<li><p>Sinon   node 端监控方法执行、mock、spy</p>\n</li>\n<li><p>figlet  控制台标题文字</p>\n</li>\n<li><p>Cockatiel  是一个弹性和瞬态故障处理库，如重试，断路器，超时，隔板隔离和回退之类的策略。</p>\n</li>\n<li><p>Signale  一个 Node 的日志格式库，自带16个级别，可以定制颜色和 Emoji。</p>\n</li>\n<li><p>Wiki.js  构建wiki 文档管理 </p>\n</li>\n<li><p>fast-xml-parser xml 和     json 转换</p>\n</li>\n<li><p>js-cloudimage-360-view 360度查看</p>\n</li>\n<li><p>crontab ui</p>\n</li>\n<li><p>X-spreadsheet css 实现的sheet</p>\n</li>\n<li><p>SitDown  <a href=\"http://domchristie.github.io/turndown/\">html to markdown</a></p>\n</li>\n<li><p>Wekan 一个开源的看板软件</p>\n</li>\n<li><p>droppy  提供web界面的可本地部署的文件管理</p>\n</li>\n<li><p>uplot 渲染大量数据，占用资源少</p>\n</li>\n<li><p><a href=\"https://github.com/jlongster/absurd-sql\">https://github.com/jlongster/absurd-sql</a>  sqllite 对indexdb的封装</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/zx\">https://www.npmjs.com/package/zx</a>   zx node shell 的脚本终极方案</p>\n</li>\n<li><p>chan  A golang like channel implementation for JavaScript that works well with co.</p>\n</li>\n<li><p>pump  When using standard source.pipe(dest) source will not be destroyed if dest emits close or an error. You are also not able to provide a callback to tell when then pipe has finished.</p>\n</li>\n<li><p>npx cloc path 用来统计代码行数</p>\n</li>\n<li><p>acorn  A tiny, fast JavaScript parser written in JavaScript.</p>\n</li>\n<li><p>picocolors  The tiniest and the fastest library for terminal output formatting with ANSI colors.添加背景色的。</p>\n</li>\n<li><p>hash-sum  blazing fast unique hash generator</p>\n</li>\n<li><p>micromatch  Glob matching for javascript&#x2F;node.js. A replacement and faster alternative to minimatch and multimatch.</p>\n</li>\n<li><p>xterm-addon-attach  An addon for xterm.js that enables attaching to a web socket. This addon requires xterm.js v4+.</p>\n</li>\n<li><p>node-pty 虚拟的terminal forkpty(3) bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.<br>  asdf</p>\n</li>\n<li><p>dom-to-image 一个可以将任意DOM节点转换为用JavaScript编写的矢量（SVG）或光栅（PNG或JPEG）图像的库</p>\n</li>\n<li><p>pako js 用来压缩和解压</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>vue-spinners A collection of loading spinner components for Vuejs</p>\n</li>\n<li><p>vue-ui-preloader 可定义spinner 速度</p>\n</li>\n<li><p><a href=\"https://github.com/epicmaxco/epic-spinners\">https://github.com/epicmaxco/epic-spinners</a> spinner 也可调整速度</p>\n</li>\n<li><p>Vue pipeline 流程展示  <a href=\"https://jinfang134.github.io/vue-pipeline/\">https://jinfang134.github.io/vue-pipeline/</a></p>\n</li>\n<li><p>不同的进度  <a href=\"https://setaman.github.io/vue-ellipse-progress-docs/guide/\">https://setaman.github.io/vue-ellipse-progress-docs/guide/</a></p>\n</li>\n<li><p>vue-loading-overlay 方便添加蒙层</p>\n</li>\n<li><p>Vue-intro  新功能引导  </p>\n</li>\n<li><p>zebra-editor-core  富文本编辑器</p>\n</li>\n<li><p>lucky sheet 在线的excel编辑</p>\n</li>\n<li><p>generic-pool  资源池，可以reuse 和限制一些比较贵的资源比如数据库链接。</p>\n</li>\n<li><p>Mind elixir 浏览器思维导图js module</p>\n</li>\n<li><p>cp-cli  copy 跨平台</p>\n</li>\n<li><p>markdown-it :  markdown parser</p>\n</li>\n<li><p>web-storage-cache 对HTML5 localStorage 和sessionStorage 进行了扩展，添加了超时时间，序列化方法。可以直接存储json对象，同时可以非常简单的进行超时时间的设置。</p>\n</li>\n<li><p>ImmortalDB 是在浏览器中存储持久键值数据的最佳方法。保存到 ImmortalDB 的数据被冗余地存储在 Cookies，IndexedDB 和 localStorage 中，并且如果其中的任何数据被删除或损坏，它们将不断进行自我修复。</p>\n</li>\n<li><p>localForage 是一个快速简单的 JavaScript 存储库。 它通过使用类似于 localStorage 的简单 API 来使用异步存储（IndexedDB 或 WebSQL)），进而改善你的 Web 应用程序的离线体验。</p>\n</li>\n<li><p>webworker-threads  node 多线程模块处理计算密集任务</p>\n</li>\n<li><p>Textures.js  基于d3 生成纹理</p>\n</li>\n<li><p>robotjs 控制键盘、鼠标、屏幕</p>\n</li>\n<li><p>vue-count-to  的数字滚动组件，vue-count-to是一个无依赖，轻量级的vue组件，可以自行覆盖easingFn。你可以设置 startVal 和 endVal，它会自动判断计数或倒计时</p>\n</li>\n<li><p>fullpagejs  通过调用本库可轻易创建全屏滚动网站(也称为单页网站)。 本库可创建全屏滚动网站，同时也可在网站中添加横向滚动条。</p>\n</li>\n<li><p>Opn: A better node-open. Opens stuff like websites, files, executables. Cross-platform.</p>\n</li>\n<li><p>Ora:进度条和文字。</p>\n</li>\n<li><p>joi：数据验</p>\n</li>\n<li><p>minimist：简单的参数处理</p>\n</li>\n<li><p>read-pkg:规范化解析pkg</p>\n</li>\n<li><p>inquirer:询问时可以给出选项</p>\n</li>\n<li><p>Resovel:解析包的安装路径</p>\n</li>\n<li><p>slash:Convert Windows backslash paths to slash paths: foo\\bar ➔ foo&#x2F;bar</p>\n</li>\n<li><p>klaw-sync:回遍历出所有文件，并返回文件路径和文件夹</p>\n</li>\n<li><p>mime-types content-type 工具：1. 可以根据文件后缀获取 2. 根据content-type获取charset 3. 根据content-type 获取默认的文件名</p>\n</li>\n<li><p>CodeMirror是一个运行在浏览器中的在线代码编辑器，支持100多种语言，高度可定制。</p>\n</li>\n<li><p>@typescript-eslint&#x2F;eslint-plugin.  eslint 检测typescript </p>\n</li>\n<li><p>nanoid  A tiny, secure, URL-friendly, unique string ID generator for JavaScript.</p>\n</li>\n<li><p>mm 对mudule 中的方法mock</p>\n</li>\n<li><p>numerify  用来格式化数字 </p>\n</li>\n<li><p>utils-lite  前端提供debounce、thorttling、clone、cloneDeep 等方法</p>\n</li>\n<li><p>is-type-of   node check 数据类型</p>\n</li>\n<li><p>on-finished  Execute a callback when a HTTP request closes, finishes, or errors</p>\n</li>\n<li><p>await-event  封装了promise</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">PassThrough</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;stream&#x27;</span>).<span class=\"property\">PassThrough</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> stream = <span class=\"keyword\">new</span> <span class=\"title class_\">PassThrough</span>()</span><br><span class=\"line\"><span class=\"comment\">// you attach it directly on an event emitter</span></span><br><span class=\"line\">stream.<span class=\"property\">await</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;await-event&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"title function_\">co</span>(<span class=\"keyword\">function</span>* () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> chunk = <span class=\"keyword\">yield</span> stream.<span class=\"title function_\">await</span>(<span class=\"string\">&#x27;data&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> chunk = <span class=\"keyword\">yield</span> stream.<span class=\"title function_\">await</span>(<span class=\"string\">&#x27;data&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> chunk = <span class=\"keyword\">yield</span> stream.<span class=\"title function_\">await</span>(<span class=\"string\">&#x27;data&#x27;</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(noop)</span><br><span class=\"line\"> </span><br><span class=\"line\">stream.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;some chunk’) </span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>get-ready  NodeJS mixin to add one-time ready event</li>\n<li>ShellJS 是Unix shell命令在Node.js API上的可移植实现</li>\n<li>graceful-process   graceful exit process even parent exit on SIGKILL.</li>\n<li>semver.gte(process.version, ‘7.0.0’)  版本的比对 </li>\n<li>pkgfiles  自动再package中添加 npm publish 文件</li>\n<li>depd  标注方法deprecating </li>\n<li>http-errors   http错误  </li>\n<li>Global-tunnel  http请求的全局代理  </li>\n<li>humanize-ms  转义为ms  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transform humanize time to ms  ms(&#x27;1s&#x27;) // 1000</span><br><span class=\"line\">ms(1000) // 1000</span><br></pre></td></tr></table></figure></li>\n<li>Exceljs 一个功能强大的excel 处理包</li>\n<li>ready-callback 所有注册的事件完成后，才执行ready中方法</li>\n<li>Get-ready  NodeJS mixin to add one-time ready event，ready 后执行相关方法</li>\n<li>xml2js  将xml 转换为json </li>\n<li>debug  调试状态输出  debug&#x3D;*  debug&#x3D;work:*   </li>\n<li>delegates  node模块中代理proto中属性的方法、setter和getter</li>\n<li>chokidar filewatch </li>\n<li>Puppeteer  headless browser</li>\n<li>cross-env Run scripts that set and use environment variables across platforms</li>\n<li>simplemde  markdown editor </li>\n<li>serialize-javascript  Serialize JavaScript to a superset of JSON that includes regular expressions and functions.</li>\n</ol>\n<p>1.route-cache  express router cache</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> routeCache = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;route-cache&#x27;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// cache route for 20 seconds</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/index&#x27;</span>, routeCache.<span class=\"title function_\">cacheSeconds</span>(<span class=\"number\">20</span>), <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// do your dirty work here...</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;you will only see this every 20 seconds.&#x27;</span>);</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;this response will be cached&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>Ws server 端的websoket </p>\n</li>\n<li><p>fastclick  解决浏览器点击的延迟</p>\n</li>\n<li><p>Qs  A querystring parsing and stringifying library with some added security.</p>\n</li>\n<li><p>lru-cache  A cache object that deletes the least-recently-used items.</p>\n</li>\n<li><p>memory-fs  A simple in-memory filesystem. Holds data in a javascript object</p>\n</li>\n<li><p>faker.js  generate massive amounts of fake data in the browser and node.js</p>\n</li>\n<li><p>parseurl 等同node url parse，加了cache</p>\n</li>\n<li><p>vue-lazy-component   Vue.js 2.x 组件级懒加载方案-Vue.js 2.x component level lazy loading solution</p>\n</li>\n<li><p>async-validator  数据验证</p>\n</li>\n<li><p>fast-safe-stringify    Safe and fast serialization alternative to JSON.stringify.</p>\n</li>\n<li><p>node-notifier   Send cross platform native notifications using Node.js.</p>\n</li>\n<li><p>dateformat   node 时间处理函数</p>\n</li>\n<li><p>agentkeepalive  defaut is keepalive</p>\n</li>\n<li><p>copy-to   copy an object’s properties to another one, include propertiy, getter and setter.</p>\n</li>\n<li><p>platform   A platform detection library that works on nearly all JavaScript platforms.</p>\n</li>\n<li><p>svg-captcha 验证码  </p>\n</li>\n<li><p>vue-virtual-scroller  加载大量数据</p>\n</li>\n<li><p>FileSaver.js  保存大于 ram的文档</p>\n</li>\n<li><p>vue-draggable-resizable  Vue2 Component for draggable and resizable elements.</p>\n</li>\n<li><p>ScrollTrigger  根据滚动位置出发事件</p>\n</li>\n<li><p>Vue Virtual Scroller   RecycleScroller 可以渲染列表中的可见项目。如果你不知道项目的大小，最好使用 DynamicScroller</p>\n</li>\n<li><p>Vuetensils  没有样式的component,可定制自己样式</p>\n</li>\n<li><p>v-calendar  日历插件</p>\n</li>\n<li><p>vue-grid-layout 可以拖拽的布局控件</p>\n</li>\n<li><p>Vue-content-loader  占位符控件</p>\n</li>\n<li><p>Sinon   node 端监控方法执行、mock、spy</p>\n</li>\n<li><p>figlet  控制台标题文字</p>\n</li>\n<li><p>Cockatiel  是一个弹性和瞬态故障处理库，如重试，断路器，超时，隔板隔离和回退之类的策略。</p>\n</li>\n<li><p>Signale  一个 Node 的日志格式库，自带16个级别，可以定制颜色和 Emoji。</p>\n</li>\n<li><p>Wiki.js  构建wiki 文档管理 </p>\n</li>\n<li><p>fast-xml-parser xml 和     json 转换</p>\n</li>\n<li><p>js-cloudimage-360-view 360度查看</p>\n</li>\n<li><p>crontab ui</p>\n</li>\n<li><p>X-spreadsheet css 实现的sheet</p>\n</li>\n<li><p>SitDown  <a href=\"http://domchristie.github.io/turndown/\">html to markdown</a></p>\n</li>\n<li><p>Wekan 一个开源的看板软件</p>\n</li>\n<li><p>droppy  提供web界面的可本地部署的文件管理</p>\n</li>\n<li><p>uplot 渲染大量数据，占用资源少</p>\n</li>\n<li><p><a href=\"https://github.com/jlongster/absurd-sql\">https://github.com/jlongster/absurd-sql</a>  sqllite 对indexdb的封装</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/zx\">https://www.npmjs.com/package/zx</a>   zx node shell 的脚本终极方案</p>\n</li>\n<li><p>chan  A golang like channel implementation for JavaScript that works well with co.</p>\n</li>\n<li><p>pump  When using standard source.pipe(dest) source will not be destroyed if dest emits close or an error. You are also not able to provide a callback to tell when then pipe has finished.</p>\n</li>\n<li><p>npx cloc path 用来统计代码行数</p>\n</li>\n<li><p>acorn  A tiny, fast JavaScript parser written in JavaScript.</p>\n</li>\n<li><p>picocolors  The tiniest and the fastest library for terminal output formatting with ANSI colors.添加背景色的。</p>\n</li>\n<li><p>hash-sum  blazing fast unique hash generator</p>\n</li>\n<li><p>micromatch  Glob matching for javascript&#x2F;node.js. A replacement and faster alternative to minimatch and multimatch.</p>\n</li>\n<li><p>xterm-addon-attach  An addon for xterm.js that enables attaching to a web socket. This addon requires xterm.js v4+.</p>\n</li>\n<li><p>node-pty 虚拟的terminal forkpty(3) bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.<br>  asdf</p>\n</li>\n<li><p>dom-to-image 一个可以将任意DOM节点转换为用JavaScript编写的矢量（SVG）或光栅（PNG或JPEG）图像的库</p>\n</li>\n<li><p>pako js 用来压缩和解压</p>\n</li>\n</ol>\n"},{"title":"pattern","date":"2016-12-26T06:05:38.000Z","_content":"##  装饰模式\n\n```\n'use strict';\nclass Sale {\n  constructor(price) {\n    [this.decoratorsList, this.price] = [[], price];\n  }\n\n  decorate(decorator) {\n    if (!Sale[decorator]) throw new Error(`decorator not exist: ${decorator}`);\n    this.decoratorsList.push(Sale[decorator]);\n  }\n\n  getPrice() {\n    for (let decorator of this.decoratorsList) {\n      this.price = decorator(this.price);\n    }\n    return this.price.toFixed(2);\n  }\n\n  static quebec(price) {\n    return price + price * 7.5 / 100;\n  }\n\n  static fedtax(price) {\n    return price + price * 5 / 100;\n  }\n}\nmodule.exports=Sale;\n```\n\n## 工厂模式\n\n\n```\n \n'use strict';\nclass CarMaker {\n  constructor() {\n    this.doors = 0;\n  }\n\n  drive() {\n    console.log(`jaja, i have ${this.doors} doors`);\n  }\n\n  static factory(type) {\n    return new CarMaker[type]();\n  }\n}\n\nCarMaker.Compact = class Compact extends CarMaker {\n  constructor() {\n    super();\n    this.doors = 4;\n  }\n};\n\nmodule.exports=CarMaker;\n\n```\n\n## 策略模式 --自行脑补\n## 单例模式\n\n\n```\n'use strict';\nlet __instance = function () {\n  let instance;\n  return (newInstance) => {\n    if (newInstance) instance = newInstance;\n    return instance;\n  }\n}();\n\nclass Universe {\n  constructor() {\n    if (__instance()) return __instance();\n    __instance(this);\n  }\n}\nmodule.exports=Universe;\n\n```\n\n##订阅者模式\n\n\n```\n/**\n * Created by ryan on 2016/8/29.\n */\n'use strict';\nclass Event {\n  constructor() {\n    this.subscribers = new Map([['any', []]]);\n  }\n\n  on(fn, type = 'any') {\n    let subs = this.subscribers;\n    if (!subs.get(type)) return subs.set(type, [fn]);\n    subs.set(type, (subs.get(type).push(fn)));\n  }\n\n  emit(content, type = 'any') {\n    for (let fn of this.subscribers.get(type)) {\n      fn(content);\n    }\n  }\n}\n\nlet event = new Event();\n\nevent.on((content) => console.log(`get published content: ${content}`), 'myEvent');\nevent.emit('jaja', 'myEvent'); //get published content: jaja\n\n```\n","source":"_posts/pattern.md","raw":"---\ntitle: pattern\ndate: 2016-12-26 14:05:38\ntags: pattern\n---\n##  装饰模式\n\n```\n'use strict';\nclass Sale {\n  constructor(price) {\n    [this.decoratorsList, this.price] = [[], price];\n  }\n\n  decorate(decorator) {\n    if (!Sale[decorator]) throw new Error(`decorator not exist: ${decorator}`);\n    this.decoratorsList.push(Sale[decorator]);\n  }\n\n  getPrice() {\n    for (let decorator of this.decoratorsList) {\n      this.price = decorator(this.price);\n    }\n    return this.price.toFixed(2);\n  }\n\n  static quebec(price) {\n    return price + price * 7.5 / 100;\n  }\n\n  static fedtax(price) {\n    return price + price * 5 / 100;\n  }\n}\nmodule.exports=Sale;\n```\n\n## 工厂模式\n\n\n```\n \n'use strict';\nclass CarMaker {\n  constructor() {\n    this.doors = 0;\n  }\n\n  drive() {\n    console.log(`jaja, i have ${this.doors} doors`);\n  }\n\n  static factory(type) {\n    return new CarMaker[type]();\n  }\n}\n\nCarMaker.Compact = class Compact extends CarMaker {\n  constructor() {\n    super();\n    this.doors = 4;\n  }\n};\n\nmodule.exports=CarMaker;\n\n```\n\n## 策略模式 --自行脑补\n## 单例模式\n\n\n```\n'use strict';\nlet __instance = function () {\n  let instance;\n  return (newInstance) => {\n    if (newInstance) instance = newInstance;\n    return instance;\n  }\n}();\n\nclass Universe {\n  constructor() {\n    if (__instance()) return __instance();\n    __instance(this);\n  }\n}\nmodule.exports=Universe;\n\n```\n\n##订阅者模式\n\n\n```\n/**\n * Created by ryan on 2016/8/29.\n */\n'use strict';\nclass Event {\n  constructor() {\n    this.subscribers = new Map([['any', []]]);\n  }\n\n  on(fn, type = 'any') {\n    let subs = this.subscribers;\n    if (!subs.get(type)) return subs.set(type, [fn]);\n    subs.set(type, (subs.get(type).push(fn)));\n  }\n\n  emit(content, type = 'any') {\n    for (let fn of this.subscribers.get(type)) {\n      fn(content);\n    }\n  }\n}\n\nlet event = new Event();\n\nevent.on((content) => console.log(`get published content: ${content}`), 'myEvent');\nevent.emit('jaja', 'myEvent'); //get published content: jaja\n\n```\n","slug":"pattern","published":1,"updated":"2020-06-29T06:22:24.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5se04001jyy8kch13339z","content":"<h2 id=\"装饰模式\"><a href=\"#装饰模式\" class=\"headerlink\" title=\"装饰模式\"></a>装饰模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">class Sale &#123;</span><br><span class=\"line\">  constructor(price) &#123;</span><br><span class=\"line\">    [this.decoratorsList, this.price] = [[], price];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  decorate(decorator) &#123;</span><br><span class=\"line\">    if (!Sale[decorator]) throw new Error(`decorator not exist: $&#123;decorator&#125;`);</span><br><span class=\"line\">    this.decoratorsList.push(Sale[decorator]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getPrice() &#123;</span><br><span class=\"line\">    for (let decorator of this.decoratorsList) &#123;</span><br><span class=\"line\">      this.price = decorator(this.price);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return this.price.toFixed(2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  static quebec(price) &#123;</span><br><span class=\"line\">    return price + price * 7.5 / 100;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  static fedtax(price) &#123;</span><br><span class=\"line\">    return price + price * 5 / 100;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports=Sale;</span><br></pre></td></tr></table></figure>\n<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">class CarMaker &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    this.doors = 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  drive() &#123;</span><br><span class=\"line\">    console.log(`jaja, i have $&#123;this.doors&#125; doors`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  static factory(type) &#123;</span><br><span class=\"line\">    return new CarMaker[type]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">CarMaker.Compact = class Compact extends CarMaker &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.doors = 4;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports=CarMaker;</span><br></pre></td></tr></table></figure>\n<h2 id=\"策略模式-–自行脑补\"><a href=\"#策略模式-–自行脑补\" class=\"headerlink\" title=\"策略模式 –自行脑补\"></a>策略模式 –自行脑补</h2><h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">let __instance = function () &#123;</span><br><span class=\"line\">  let instance;</span><br><span class=\"line\">  return (newInstance) =&gt; &#123;</span><br><span class=\"line\">    if (newInstance) instance = newInstance;</span><br><span class=\"line\">    return instance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">class Universe &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    if (__instance()) return __instance();</span><br><span class=\"line\">    __instance(this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports=Universe;</span><br></pre></td></tr></table></figure>\n<p>##订阅者模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Created by ryan on 2016/8/29.</span><br><span class=\"line\"> */</span><br><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">class Event &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    this.subscribers = new Map([[&apos;any&apos;, []]]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  on(fn, type = &apos;any&apos;) &#123;</span><br><span class=\"line\">    let subs = this.subscribers;</span><br><span class=\"line\">    if (!subs.get(type)) return subs.set(type, [fn]);</span><br><span class=\"line\">    subs.set(type, (subs.get(type).push(fn)));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  emit(content, type = &apos;any&apos;) &#123;</span><br><span class=\"line\">    for (let fn of this.subscribers.get(type)) &#123;</span><br><span class=\"line\">      fn(content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let event = new Event();</span><br><span class=\"line\"></span><br><span class=\"line\">event.on((content) =&gt; console.log(`get published content: $&#123;content&#125;`), &apos;myEvent&apos;);</span><br><span class=\"line\">event.emit(&apos;jaja&apos;, &apos;myEvent&apos;); //get published content: jaja</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"装饰模式\"><a href=\"#装饰模式\" class=\"headerlink\" title=\"装饰模式\"></a>装饰模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">class Sale &#123;</span><br><span class=\"line\">  constructor(price) &#123;</span><br><span class=\"line\">    [this.decoratorsList, this.price] = [[], price];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  decorate(decorator) &#123;</span><br><span class=\"line\">    if (!Sale[decorator]) throw new Error(`decorator not exist: $&#123;decorator&#125;`);</span><br><span class=\"line\">    this.decoratorsList.push(Sale[decorator]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getPrice() &#123;</span><br><span class=\"line\">    for (let decorator of this.decoratorsList) &#123;</span><br><span class=\"line\">      this.price = decorator(this.price);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return this.price.toFixed(2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  static quebec(price) &#123;</span><br><span class=\"line\">    return price + price * 7.5 / 100;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  static fedtax(price) &#123;</span><br><span class=\"line\">    return price + price * 5 / 100;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports=Sale;</span><br></pre></td></tr></table></figure>\n<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">class CarMaker &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    this.doors = 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  drive() &#123;</span><br><span class=\"line\">    console.log(`jaja, i have $&#123;this.doors&#125; doors`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  static factory(type) &#123;</span><br><span class=\"line\">    return new CarMaker[type]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">CarMaker.Compact = class Compact extends CarMaker &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.doors = 4;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports=CarMaker;</span><br></pre></td></tr></table></figure>\n<h2 id=\"策略模式-–自行脑补\"><a href=\"#策略模式-–自行脑补\" class=\"headerlink\" title=\"策略模式 –自行脑补\"></a>策略模式 –自行脑补</h2><h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">let __instance = function () &#123;</span><br><span class=\"line\">  let instance;</span><br><span class=\"line\">  return (newInstance) =&gt; &#123;</span><br><span class=\"line\">    if (newInstance) instance = newInstance;</span><br><span class=\"line\">    return instance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">class Universe &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    if (__instance()) return __instance();</span><br><span class=\"line\">    __instance(this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports=Universe;</span><br></pre></td></tr></table></figure>\n<p>##订阅者模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Created by ryan on 2016/8/29.</span><br><span class=\"line\"> */</span><br><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">class Event &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    this.subscribers = new Map([[&apos;any&apos;, []]]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  on(fn, type = &apos;any&apos;) &#123;</span><br><span class=\"line\">    let subs = this.subscribers;</span><br><span class=\"line\">    if (!subs.get(type)) return subs.set(type, [fn]);</span><br><span class=\"line\">    subs.set(type, (subs.get(type).push(fn)));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  emit(content, type = &apos;any&apos;) &#123;</span><br><span class=\"line\">    for (let fn of this.subscribers.get(type)) &#123;</span><br><span class=\"line\">      fn(content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let event = new Event();</span><br><span class=\"line\"></span><br><span class=\"line\">event.on((content) =&gt; console.log(`get published content: $&#123;content&#125;`), &apos;myEvent&apos;);</span><br><span class=\"line\">event.emit(&apos;jaja&apos;, &apos;myEvent&apos;); //get published content: jaja</span><br></pre></td></tr></table></figure>\n"},{"title":"manage","date":"2021-04-30T10:54:37.000Z","_content":"\n1. P8 提升技术能力的关键是什么呢？答案是技术深度和技术宽度齐头并进。而 P7 升 P8 的时候，在公司和业界的技术影响力恰恰是评委考察的一个重要方面。\n2. 为能够自主规划一些有利于晋升的工作。但是反过来说，Team Leader 也充满了挑战性，因为大部分人并没有系统地学习和练习过管理技能，所以在实际管理工作中很容易走极端。\n3. P8 来说，能不能拿到好的业务结果，这一点在考核中所占的比重要大得多，基本上和技术能力是平起平坐的地位。这就是 P7 很难晋升 P8 的第二个原因。\n4.  P8 需要负责指挥多个团队，提升自己管理技能的核心是学会抓住三个管理重点：搭建团队梯队，参与目标制定，关注技术演进。好的业务机会本身就非常稀缺，毕竟行业的风口并不是经常有的，业务上大的发展和突破也不是年年都有。而如果业务本身没有大的发展或者突破，相关的各种机会就会比较少\n5.  5W 指的是 5 个不同的英文单词：When（何时）、Where（何地）、Who（何人）、What（何事）、Why（何因），代表需求产生的背景和功能上线后的运行环境，类似于操作系统上下文（Context）的概念。\n6.  一类是核心人员流失，它导致很多重要工作无法开展，所以你需要提前培养核心人员的备份人员，搭建合理的团队梯度。\n7.  深度：理解vue、react 等源码、面向对象对象的学习，ts 设计模式，走技术专家的路线。在业务上也要懂，客户有啥需求，都能给出解决方案；在需求评审试，给出相应的意见。\n    广度：前端各种技术平台、electron、flutter ","source":"_posts/manage.md","raw":"---\ntitle: manage\ndate: 2021-04-30 18:54:37\ntags:\n---\n\n1. P8 提升技术能力的关键是什么呢？答案是技术深度和技术宽度齐头并进。而 P7 升 P8 的时候，在公司和业界的技术影响力恰恰是评委考察的一个重要方面。\n2. 为能够自主规划一些有利于晋升的工作。但是反过来说，Team Leader 也充满了挑战性，因为大部分人并没有系统地学习和练习过管理技能，所以在实际管理工作中很容易走极端。\n3. P8 来说，能不能拿到好的业务结果，这一点在考核中所占的比重要大得多，基本上和技术能力是平起平坐的地位。这就是 P7 很难晋升 P8 的第二个原因。\n4.  P8 需要负责指挥多个团队，提升自己管理技能的核心是学会抓住三个管理重点：搭建团队梯队，参与目标制定，关注技术演进。好的业务机会本身就非常稀缺，毕竟行业的风口并不是经常有的，业务上大的发展和突破也不是年年都有。而如果业务本身没有大的发展或者突破，相关的各种机会就会比较少\n5.  5W 指的是 5 个不同的英文单词：When（何时）、Where（何地）、Who（何人）、What（何事）、Why（何因），代表需求产生的背景和功能上线后的运行环境，类似于操作系统上下文（Context）的概念。\n6.  一类是核心人员流失，它导致很多重要工作无法开展，所以你需要提前培养核心人员的备份人员，搭建合理的团队梯度。\n7.  深度：理解vue、react 等源码、面向对象对象的学习，ts 设计模式，走技术专家的路线。在业务上也要懂，客户有啥需求，都能给出解决方案；在需求评审试，给出相应的意见。\n    广度：前端各种技术平台、electron、flutter ","slug":"manage","published":1,"updated":"2021-04-30T10:57:52.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5se05001lyy8kncpfac8g","content":"<ol>\n<li>P8 提升技术能力的关键是什么呢？答案是技术深度和技术宽度齐头并进。而 P7 升 P8 的时候，在公司和业界的技术影响力恰恰是评委考察的一个重要方面。</li>\n<li>为能够自主规划一些有利于晋升的工作。但是反过来说，Team Leader 也充满了挑战性，因为大部分人并没有系统地学习和练习过管理技能，所以在实际管理工作中很容易走极端。</li>\n<li>P8 来说，能不能拿到好的业务结果，这一点在考核中所占的比重要大得多，基本上和技术能力是平起平坐的地位。这就是 P7 很难晋升 P8 的第二个原因。</li>\n<li>P8 需要负责指挥多个团队，提升自己管理技能的核心是学会抓住三个管理重点：搭建团队梯队，参与目标制定，关注技术演进。好的业务机会本身就非常稀缺，毕竟行业的风口并不是经常有的，业务上大的发展和突破也不是年年都有。而如果业务本身没有大的发展或者突破，相关的各种机会就会比较少</li>\n<li>5W 指的是 5 个不同的英文单词：When（何时）、Where（何地）、Who（何人）、What（何事）、Why（何因），代表需求产生的背景和功能上线后的运行环境，类似于操作系统上下文（Context）的概念。</li>\n<li>一类是核心人员流失，它导致很多重要工作无法开展，所以你需要提前培养核心人员的备份人员，搭建合理的团队梯度。</li>\n<li>深度：理解vue、react 等源码、面向对象对象的学习，ts 设计模式，走技术专家的路线。在业务上也要懂，客户有啥需求，都能给出解决方案；在需求评审试，给出相应的意见。<br>广度：前端各种技术平台、electron、flutter </li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>P8 提升技术能力的关键是什么呢？答案是技术深度和技术宽度齐头并进。而 P7 升 P8 的时候，在公司和业界的技术影响力恰恰是评委考察的一个重要方面。</li>\n<li>为能够自主规划一些有利于晋升的工作。但是反过来说，Team Leader 也充满了挑战性，因为大部分人并没有系统地学习和练习过管理技能，所以在实际管理工作中很容易走极端。</li>\n<li>P8 来说，能不能拿到好的业务结果，这一点在考核中所占的比重要大得多，基本上和技术能力是平起平坐的地位。这就是 P7 很难晋升 P8 的第二个原因。</li>\n<li>P8 需要负责指挥多个团队，提升自己管理技能的核心是学会抓住三个管理重点：搭建团队梯队，参与目标制定，关注技术演进。好的业务机会本身就非常稀缺，毕竟行业的风口并不是经常有的，业务上大的发展和突破也不是年年都有。而如果业务本身没有大的发展或者突破，相关的各种机会就会比较少</li>\n<li>5W 指的是 5 个不同的英文单词：When（何时）、Where（何地）、Who（何人）、What（何事）、Why（何因），代表需求产生的背景和功能上线后的运行环境，类似于操作系统上下文（Context）的概念。</li>\n<li>一类是核心人员流失，它导致很多重要工作无法开展，所以你需要提前培养核心人员的备份人员，搭建合理的团队梯度。</li>\n<li>深度：理解vue、react 等源码、面向对象对象的学习，ts 设计模式，走技术专家的路线。在业务上也要懂，客户有啥需求，都能给出解决方案；在需求评审试，给出相应的意见。<br>广度：前端各种技术平台、electron、flutter </li>\n</ol>\n"},{"title":"pm2","date":"2016-12-29T09:53:39.000Z","_content":"### pm2 start 启动文件的设置\n\n1. 通过 pm2 ecosystem 生成文件\n2. 在配置文件中配置，主要参数如下：\n　　\n```\nmin_uptime：最小运行时间，这里设置的是60s即如果应用程序在60s内退出，pm2会认为程序异常退出，此时触发重启max_restarts设置数量\n\nexec_mode：应用程序启动模式，这里设置的是cluster_mode（集群），默认是fork\nerror_file：自定义应用程序的错误日志文件\nout_file：自定义应用程序日志文件\npid_file：自定义应用程序的pid文件\nwatch：是否启用监控模式，默认是false。如果设置成true，当应用程序变动时，pm2会自动重载。这里也可以设置你要监控的文件\n\nexec_interpreter：应用程序的脚本类型，这里使用的shell，默认是nodejs\ndefaults to “node”. can be “python”, “ruby”, “bash” or whatever interpreter you wish to use. “none” will execute your app as a binary executable\n\n当使用babel的时候： exec_interpreter:\"babel-node\"\n \nmax_memory_restart  超出这个内存后会重新启动\n\n```\n\n3. 可以设置watch 的目录\n   \n```\n{\n  \"name\"        : \"fis-receiver\",  // 应用名称\n  \"script\"      : \"./bin/www\",  // 实际启动脚本\n  \"cwd\"         : \"./\",  // 当前工作路径\n  \"watch\": [  // 监控变化的目录，一旦变化，自动重启\n    \"bin\",\n    \"routers\"\n  ],\n  \"ignore_watch\" : [  // 从监控目录中排除\n    \"node_modules\", \n    \"logs\",\n    \"public\"\n  ],\n  \"watch_options\": {\n    \"followSymlinks\": false\n  },\n  \"error_file\" : \"./logs/app-err.log\",  // 错误日志路径\n  \"out_file\"   : \"./logs/app-out.log\",  // 普通日志路径\n  \"env\": {\n      \"NODE_ENV\": \"production\"  // 环境参数，当前指定为生产环境\n  }\n}\n```\n\n","source":"_posts/pm2.md","raw":"---\ntitle: pm2\ndate: 2016-12-29 17:53:39\ntags: pm2 \n---\n### pm2 start 启动文件的设置\n\n1. 通过 pm2 ecosystem 生成文件\n2. 在配置文件中配置，主要参数如下：\n　　\n```\nmin_uptime：最小运行时间，这里设置的是60s即如果应用程序在60s内退出，pm2会认为程序异常退出，此时触发重启max_restarts设置数量\n\nexec_mode：应用程序启动模式，这里设置的是cluster_mode（集群），默认是fork\nerror_file：自定义应用程序的错误日志文件\nout_file：自定义应用程序日志文件\npid_file：自定义应用程序的pid文件\nwatch：是否启用监控模式，默认是false。如果设置成true，当应用程序变动时，pm2会自动重载。这里也可以设置你要监控的文件\n\nexec_interpreter：应用程序的脚本类型，这里使用的shell，默认是nodejs\ndefaults to “node”. can be “python”, “ruby”, “bash” or whatever interpreter you wish to use. “none” will execute your app as a binary executable\n\n当使用babel的时候： exec_interpreter:\"babel-node\"\n \nmax_memory_restart  超出这个内存后会重新启动\n\n```\n\n3. 可以设置watch 的目录\n   \n```\n{\n  \"name\"        : \"fis-receiver\",  // 应用名称\n  \"script\"      : \"./bin/www\",  // 实际启动脚本\n  \"cwd\"         : \"./\",  // 当前工作路径\n  \"watch\": [  // 监控变化的目录，一旦变化，自动重启\n    \"bin\",\n    \"routers\"\n  ],\n  \"ignore_watch\" : [  // 从监控目录中排除\n    \"node_modules\", \n    \"logs\",\n    \"public\"\n  ],\n  \"watch_options\": {\n    \"followSymlinks\": false\n  },\n  \"error_file\" : \"./logs/app-err.log\",  // 错误日志路径\n  \"out_file\"   : \"./logs/app-out.log\",  // 普通日志路径\n  \"env\": {\n      \"NODE_ENV\": \"production\"  // 环境参数，当前指定为生产环境\n  }\n}\n```\n\n","slug":"pm2","published":1,"updated":"2020-06-29T06:22:24.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5se05001nyy8k5e3tjozz","content":"<h3 id=\"pm2-start-启动文件的设置\"><a href=\"#pm2-start-启动文件的设置\" class=\"headerlink\" title=\"pm2 start 启动文件的设置\"></a>pm2 start 启动文件的设置</h3><ol>\n<li>通过 pm2 ecosystem 生成文件</li>\n<li><p>在配置文件中配置，主要参数如下：\n　　</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">min_uptime：最小运行时间，这里设置的是60s即如果应用程序在60s内退出，pm2会认为程序异常退出，此时触发重启max_restarts设置数量</span><br><span class=\"line\"></span><br><span class=\"line\">exec_mode：应用程序启动模式，这里设置的是cluster_mode（集群），默认是fork</span><br><span class=\"line\">error_file：自定义应用程序的错误日志文件</span><br><span class=\"line\">out_file：自定义应用程序日志文件</span><br><span class=\"line\">pid_file：自定义应用程序的pid文件</span><br><span class=\"line\">watch：是否启用监控模式，默认是false。如果设置成true，当应用程序变动时，pm2会自动重载。这里也可以设置你要监控的文件</span><br><span class=\"line\"></span><br><span class=\"line\">exec_interpreter：应用程序的脚本类型，这里使用的shell，默认是nodejs</span><br><span class=\"line\">defaults to “node”. can be “python”, “ruby”, “bash” or whatever interpreter you wish to use. “none” will execute your app as a binary executable</span><br><span class=\"line\"></span><br><span class=\"line\">当使用babel的时候： exec_interpreter:&quot;babel-node&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">max_memory_restart  超出这个内存后会重新启动</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以设置watch 的目录</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;        : &quot;fis-receiver&quot;,  // 应用名称</span><br><span class=\"line\">  &quot;script&quot;      : &quot;./bin/www&quot;,  // 实际启动脚本</span><br><span class=\"line\">  &quot;cwd&quot;         : &quot;./&quot;,  // 当前工作路径</span><br><span class=\"line\">  &quot;watch&quot;: [  // 监控变化的目录，一旦变化，自动重启</span><br><span class=\"line\">    &quot;bin&quot;,</span><br><span class=\"line\">    &quot;routers&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;ignore_watch&quot; : [  // 从监控目录中排除</span><br><span class=\"line\">    &quot;node_modules&quot;, </span><br><span class=\"line\">    &quot;logs&quot;,</span><br><span class=\"line\">    &quot;public&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;watch_options&quot;: &#123;</span><br><span class=\"line\">    &quot;followSymlinks&quot;: false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;error_file&quot; : &quot;./logs/app-err.log&quot;,  // 错误日志路径</span><br><span class=\"line\">  &quot;out_file&quot;   : &quot;./logs/app-out.log&quot;,  // 普通日志路径</span><br><span class=\"line\">  &quot;env&quot;: &#123;</span><br><span class=\"line\">      &quot;NODE_ENV&quot;: &quot;production&quot;  // 环境参数，当前指定为生产环境</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"pm2-start-启动文件的设置\"><a href=\"#pm2-start-启动文件的设置\" class=\"headerlink\" title=\"pm2 start 启动文件的设置\"></a>pm2 start 启动文件的设置</h3><ol>\n<li>通过 pm2 ecosystem 生成文件</li>\n<li><p>在配置文件中配置，主要参数如下：\n　　</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">min_uptime：最小运行时间，这里设置的是60s即如果应用程序在60s内退出，pm2会认为程序异常退出，此时触发重启max_restarts设置数量</span><br><span class=\"line\"></span><br><span class=\"line\">exec_mode：应用程序启动模式，这里设置的是cluster_mode（集群），默认是fork</span><br><span class=\"line\">error_file：自定义应用程序的错误日志文件</span><br><span class=\"line\">out_file：自定义应用程序日志文件</span><br><span class=\"line\">pid_file：自定义应用程序的pid文件</span><br><span class=\"line\">watch：是否启用监控模式，默认是false。如果设置成true，当应用程序变动时，pm2会自动重载。这里也可以设置你要监控的文件</span><br><span class=\"line\"></span><br><span class=\"line\">exec_interpreter：应用程序的脚本类型，这里使用的shell，默认是nodejs</span><br><span class=\"line\">defaults to “node”. can be “python”, “ruby”, “bash” or whatever interpreter you wish to use. “none” will execute your app as a binary executable</span><br><span class=\"line\"></span><br><span class=\"line\">当使用babel的时候： exec_interpreter:&quot;babel-node&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">max_memory_restart  超出这个内存后会重新启动</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以设置watch 的目录</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;        : &quot;fis-receiver&quot;,  // 应用名称</span><br><span class=\"line\">  &quot;script&quot;      : &quot;./bin/www&quot;,  // 实际启动脚本</span><br><span class=\"line\">  &quot;cwd&quot;         : &quot;./&quot;,  // 当前工作路径</span><br><span class=\"line\">  &quot;watch&quot;: [  // 监控变化的目录，一旦变化，自动重启</span><br><span class=\"line\">    &quot;bin&quot;,</span><br><span class=\"line\">    &quot;routers&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;ignore_watch&quot; : [  // 从监控目录中排除</span><br><span class=\"line\">    &quot;node_modules&quot;, </span><br><span class=\"line\">    &quot;logs&quot;,</span><br><span class=\"line\">    &quot;public&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;watch_options&quot;: &#123;</span><br><span class=\"line\">    &quot;followSymlinks&quot;: false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;error_file&quot; : &quot;./logs/app-err.log&quot;,  // 错误日志路径</span><br><span class=\"line\">  &quot;out_file&quot;   : &quot;./logs/app-out.log&quot;,  // 普通日志路径</span><br><span class=\"line\">  &quot;env&quot;: &#123;</span><br><span class=\"line\">      &quot;NODE_ENV&quot;: &quot;production&quot;  // 环境参数，当前指定为生产环境</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"postgre","date":"2017-02-21T03:18:37.000Z","_content":"\n```\ndb.many(query, values); // expects one or more rows\ndb.one(query, values); // expects a single row\ndb.none(query, values); // expects no rows\ndb.any(query, values); // expects anything, same as `manyOrNone`\ndb.oneOrNone(query, values); // expects 1 or 0 rows\ndb.manyOrNone(query, values); // expects anything, same as `any`\n```\n\nThe library supports named parameters in query formatting, with the syntax of $*propName*, where * is any of the following open-close pairs: {}, (), <>, [], //\n\n\n```\ndb.query('SELECT * FROM users WHERE name=${name} AND active=$/active/', {\n    name: 'John',\n    active: true\n});\n```\n\nthis 的用法：\n```\nvar doc = {\n    id: 123,\n    body: \"some text\"\n};\n\ndb.none(\"INSERT INTO documents(id, doc) VALUES(${id}, ${this})\", doc)\n    .then(function () {\n        // success;\n    })\n    .catch(function (error) {\n        // error;\n    });\n```\n\nwhich will execute:\n\nINSERT INTO documents(id, doc) VALUES(123, '{\"id\":123,\"body\":\"some text\"}')\n\n\n执行函数\n\nAnd when you are not expecting any return results, call db.proc instead. Both methods return a Promise object, but db.proc doesn't take a qrm parameter, always assuming it is one|none.\n```\ndb.func('findAudit', [123, new Date()])\n    .then(function (data) {\n        console.log(data); // printing the data returned \n    })\n    .catch(function (error) {\n        console.log(error); // printing the error \n    });\ndb.proc();\n```\n\n公用一个连接：\n\n```\ndb.task(function (t) {\n    // `t` and `this` here are the same;\n    // execute a chain of queries;\n})\n    .then(function (data) {\n        // success;\n    })\n    .catch(function (error) {\n        // failed;    \n    });\n```\n\n事物：其中可以嵌套事物\n\n```\ndb.tx(function (t) {\n    // t = this;\n    return t.batch([\n        t.one(\"insert into users(name) values($1) returning id\", \"John\"),\n        t.one(\"insert into events(code) values($1) returning id\", 123)\n    ]);\n})\n    .spread(function (user, event) {\n        // print new user id + new event id;\n        console.log(\"DATA:\", user.id, event.id);\n    })\n    .catch(function (error) {\n        console.log(\"ERROR:\", error); // print the error;\n    })\n    .finally(function () {\n    \n\n        pgp.end(); // for immediate app exit, closing the connection pool.   关闭连接池，是的一般不需要\n        \n        If, however you normally exit your application by killing the NodeJS process, then you don't need to use it.\n\n        \n    });\n```\n\n设置隔离级别：\n\n```\nvar TransactionMode = pgp.txMode.TransactionMode;\nvar isolationLevel = pgp.txMode.isolationLevel;\n\n// Create a reusable transaction mode (serializable + read-only + deferrable):\nvar tmSRD = new TransactionMode({\n    tiLevel: isolationLevel.serializable,\n    readOnly: true,\n    deferrable: true\n});\n\nfunction myTransaction() {\n    return this.query('SELECT * FROM table');\n}\n\nmyTransaction.txMode = tmSRD; // assign transaction mode;\n\ndb.tx(myTransaction)\n    .then(function(){\n        // success;\n    });\n```\n重置promise：\n\n```\nvar promise = require('bluebird');\nvar options = {\n    promiseLib: promise\n};\nvar pgp = require('pg-promise')(options);\n```\n\n","source":"_posts/postgre.md","raw":"---\ntitle: postgre\ndate: 2017-02-21 11:18:37\ntags: postgre\n---\n\n```\ndb.many(query, values); // expects one or more rows\ndb.one(query, values); // expects a single row\ndb.none(query, values); // expects no rows\ndb.any(query, values); // expects anything, same as `manyOrNone`\ndb.oneOrNone(query, values); // expects 1 or 0 rows\ndb.manyOrNone(query, values); // expects anything, same as `any`\n```\n\nThe library supports named parameters in query formatting, with the syntax of $*propName*, where * is any of the following open-close pairs: {}, (), <>, [], //\n\n\n```\ndb.query('SELECT * FROM users WHERE name=${name} AND active=$/active/', {\n    name: 'John',\n    active: true\n});\n```\n\nthis 的用法：\n```\nvar doc = {\n    id: 123,\n    body: \"some text\"\n};\n\ndb.none(\"INSERT INTO documents(id, doc) VALUES(${id}, ${this})\", doc)\n    .then(function () {\n        // success;\n    })\n    .catch(function (error) {\n        // error;\n    });\n```\n\nwhich will execute:\n\nINSERT INTO documents(id, doc) VALUES(123, '{\"id\":123,\"body\":\"some text\"}')\n\n\n执行函数\n\nAnd when you are not expecting any return results, call db.proc instead. Both methods return a Promise object, but db.proc doesn't take a qrm parameter, always assuming it is one|none.\n```\ndb.func('findAudit', [123, new Date()])\n    .then(function (data) {\n        console.log(data); // printing the data returned \n    })\n    .catch(function (error) {\n        console.log(error); // printing the error \n    });\ndb.proc();\n```\n\n公用一个连接：\n\n```\ndb.task(function (t) {\n    // `t` and `this` here are the same;\n    // execute a chain of queries;\n})\n    .then(function (data) {\n        // success;\n    })\n    .catch(function (error) {\n        // failed;    \n    });\n```\n\n事物：其中可以嵌套事物\n\n```\ndb.tx(function (t) {\n    // t = this;\n    return t.batch([\n        t.one(\"insert into users(name) values($1) returning id\", \"John\"),\n        t.one(\"insert into events(code) values($1) returning id\", 123)\n    ]);\n})\n    .spread(function (user, event) {\n        // print new user id + new event id;\n        console.log(\"DATA:\", user.id, event.id);\n    })\n    .catch(function (error) {\n        console.log(\"ERROR:\", error); // print the error;\n    })\n    .finally(function () {\n    \n\n        pgp.end(); // for immediate app exit, closing the connection pool.   关闭连接池，是的一般不需要\n        \n        If, however you normally exit your application by killing the NodeJS process, then you don't need to use it.\n\n        \n    });\n```\n\n设置隔离级别：\n\n```\nvar TransactionMode = pgp.txMode.TransactionMode;\nvar isolationLevel = pgp.txMode.isolationLevel;\n\n// Create a reusable transaction mode (serializable + read-only + deferrable):\nvar tmSRD = new TransactionMode({\n    tiLevel: isolationLevel.serializable,\n    readOnly: true,\n    deferrable: true\n});\n\nfunction myTransaction() {\n    return this.query('SELECT * FROM table');\n}\n\nmyTransaction.txMode = tmSRD; // assign transaction mode;\n\ndb.tx(myTransaction)\n    .then(function(){\n        // success;\n    });\n```\n重置promise：\n\n```\nvar promise = require('bluebird');\nvar options = {\n    promiseLib: promise\n};\nvar pgp = require('pg-promise')(options);\n```\n\n","slug":"postgre","published":1,"updated":"2020-06-29T06:22:24.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5se06001pyy8k6hle2lny","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.many(query, values); // expects one or more rows</span><br><span class=\"line\">db.one(query, values); // expects a single row</span><br><span class=\"line\">db.none(query, values); // expects no rows</span><br><span class=\"line\">db.any(query, values); // expects anything, same as `manyOrNone`</span><br><span class=\"line\">db.oneOrNone(query, values); // expects 1 or 0 rows</span><br><span class=\"line\">db.manyOrNone(query, values); // expects anything, same as `any`</span><br></pre></td></tr></table></figure>\n<p>The library supports named parameters in query formatting, with the syntax of $<em>propName</em>, where * is any of the following open-close pairs: {}, (), &lt;&gt;, [], //</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.query(&apos;SELECT * FROM users WHERE name=$&#123;name&#125; AND active=$/active/&apos;, &#123;</span><br><span class=\"line\">    name: &apos;John&apos;,</span><br><span class=\"line\">    active: true</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>this 的用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var doc = &#123;</span><br><span class=\"line\">    id: 123,</span><br><span class=\"line\">    body: &quot;some text&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">db.none(&quot;INSERT INTO documents(id, doc) VALUES($&#123;id&#125;, $&#123;this&#125;)&quot;, doc)</span><br><span class=\"line\">    .then(function () &#123;</span><br><span class=\"line\">        // success;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(function (error) &#123;</span><br><span class=\"line\">        // error;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>which will execute:</p>\n<p>INSERT INTO documents(id, doc) VALUES(123, ‘{“id”:123,”body”:”some text”}’)</p>\n<p>执行函数</p>\n<p>And when you are not expecting any return results, call db.proc instead. Both methods return a Promise object, but db.proc doesn’t take a qrm parameter, always assuming it is one|none.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.func(&apos;findAudit&apos;, [123, new Date()])</span><br><span class=\"line\">    .then(function (data) &#123;</span><br><span class=\"line\">        console.log(data); // printing the data returned </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(function (error) &#123;</span><br><span class=\"line\">        console.log(error); // printing the error </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">db.proc();</span><br></pre></td></tr></table></figure></p>\n<p>公用一个连接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.task(function (t) &#123;</span><br><span class=\"line\">    // `t` and `this` here are the same;</span><br><span class=\"line\">    // execute a chain of queries;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    .then(function (data) &#123;</span><br><span class=\"line\">        // success;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(function (error) &#123;</span><br><span class=\"line\">        // failed;    </span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>事物：其中可以嵌套事物</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.tx(function (t) &#123;</span><br><span class=\"line\">    // t = this;</span><br><span class=\"line\">    return t.batch([</span><br><span class=\"line\">        t.one(&quot;insert into users(name) values($1) returning id&quot;, &quot;John&quot;),</span><br><span class=\"line\">        t.one(&quot;insert into events(code) values($1) returning id&quot;, 123)</span><br><span class=\"line\">    ]);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    .spread(function (user, event) &#123;</span><br><span class=\"line\">        // print new user id + new event id;</span><br><span class=\"line\">        console.log(&quot;DATA:&quot;, user.id, event.id);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(function (error) &#123;</span><br><span class=\"line\">        console.log(&quot;ERROR:&quot;, error); // print the error;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .finally(function () &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">        pgp.end(); // for immediate app exit, closing the connection pool.   关闭连接池，是的一般不需要</span><br><span class=\"line\">        </span><br><span class=\"line\">        If, however you normally exit your application by killing the NodeJS process, then you don&apos;t need to use it.</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>设置隔离级别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var TransactionMode = pgp.txMode.TransactionMode;</span><br><span class=\"line\">var isolationLevel = pgp.txMode.isolationLevel;</span><br><span class=\"line\"></span><br><span class=\"line\">// Create a reusable transaction mode (serializable + read-only + deferrable):</span><br><span class=\"line\">var tmSRD = new TransactionMode(&#123;</span><br><span class=\"line\">    tiLevel: isolationLevel.serializable,</span><br><span class=\"line\">    readOnly: true,</span><br><span class=\"line\">    deferrable: true</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">function myTransaction() &#123;</span><br><span class=\"line\">    return this.query(&apos;SELECT * FROM table&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">myTransaction.txMode = tmSRD; // assign transaction mode;</span><br><span class=\"line\"></span><br><span class=\"line\">db.tx(myTransaction)</span><br><span class=\"line\">    .then(function()&#123;</span><br><span class=\"line\">        // success;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>重置promise：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var promise = require(&apos;bluebird&apos;);</span><br><span class=\"line\">var options = &#123;</span><br><span class=\"line\">    promiseLib: promise</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var pgp = require(&apos;pg-promise&apos;)(options);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.many(query, values); // expects one or more rows</span><br><span class=\"line\">db.one(query, values); // expects a single row</span><br><span class=\"line\">db.none(query, values); // expects no rows</span><br><span class=\"line\">db.any(query, values); // expects anything, same as `manyOrNone`</span><br><span class=\"line\">db.oneOrNone(query, values); // expects 1 or 0 rows</span><br><span class=\"line\">db.manyOrNone(query, values); // expects anything, same as `any`</span><br></pre></td></tr></table></figure>\n<p>The library supports named parameters in query formatting, with the syntax of $<em>propName</em>, where * is any of the following open-close pairs: {}, (), &lt;&gt;, [], //</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.query(&apos;SELECT * FROM users WHERE name=$&#123;name&#125; AND active=$/active/&apos;, &#123;</span><br><span class=\"line\">    name: &apos;John&apos;,</span><br><span class=\"line\">    active: true</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>this 的用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var doc = &#123;</span><br><span class=\"line\">    id: 123,</span><br><span class=\"line\">    body: &quot;some text&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">db.none(&quot;INSERT INTO documents(id, doc) VALUES($&#123;id&#125;, $&#123;this&#125;)&quot;, doc)</span><br><span class=\"line\">    .then(function () &#123;</span><br><span class=\"line\">        // success;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(function (error) &#123;</span><br><span class=\"line\">        // error;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>which will execute:</p>\n<p>INSERT INTO documents(id, doc) VALUES(123, ‘{“id”:123,”body”:”some text”}’)</p>\n<p>执行函数</p>\n<p>And when you are not expecting any return results, call db.proc instead. Both methods return a Promise object, but db.proc doesn’t take a qrm parameter, always assuming it is one|none.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.func(&apos;findAudit&apos;, [123, new Date()])</span><br><span class=\"line\">    .then(function (data) &#123;</span><br><span class=\"line\">        console.log(data); // printing the data returned </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(function (error) &#123;</span><br><span class=\"line\">        console.log(error); // printing the error </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">db.proc();</span><br></pre></td></tr></table></figure></p>\n<p>公用一个连接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.task(function (t) &#123;</span><br><span class=\"line\">    // `t` and `this` here are the same;</span><br><span class=\"line\">    // execute a chain of queries;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    .then(function (data) &#123;</span><br><span class=\"line\">        // success;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(function (error) &#123;</span><br><span class=\"line\">        // failed;    </span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>事物：其中可以嵌套事物</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.tx(function (t) &#123;</span><br><span class=\"line\">    // t = this;</span><br><span class=\"line\">    return t.batch([</span><br><span class=\"line\">        t.one(&quot;insert into users(name) values($1) returning id&quot;, &quot;John&quot;),</span><br><span class=\"line\">        t.one(&quot;insert into events(code) values($1) returning id&quot;, 123)</span><br><span class=\"line\">    ]);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    .spread(function (user, event) &#123;</span><br><span class=\"line\">        // print new user id + new event id;</span><br><span class=\"line\">        console.log(&quot;DATA:&quot;, user.id, event.id);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(function (error) &#123;</span><br><span class=\"line\">        console.log(&quot;ERROR:&quot;, error); // print the error;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .finally(function () &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">        pgp.end(); // for immediate app exit, closing the connection pool.   关闭连接池，是的一般不需要</span><br><span class=\"line\">        </span><br><span class=\"line\">        If, however you normally exit your application by killing the NodeJS process, then you don&apos;t need to use it.</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>设置隔离级别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var TransactionMode = pgp.txMode.TransactionMode;</span><br><span class=\"line\">var isolationLevel = pgp.txMode.isolationLevel;</span><br><span class=\"line\"></span><br><span class=\"line\">// Create a reusable transaction mode (serializable + read-only + deferrable):</span><br><span class=\"line\">var tmSRD = new TransactionMode(&#123;</span><br><span class=\"line\">    tiLevel: isolationLevel.serializable,</span><br><span class=\"line\">    readOnly: true,</span><br><span class=\"line\">    deferrable: true</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">function myTransaction() &#123;</span><br><span class=\"line\">    return this.query(&apos;SELECT * FROM table&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">myTransaction.txMode = tmSRD; // assign transaction mode;</span><br><span class=\"line\"></span><br><span class=\"line\">db.tx(myTransaction)</span><br><span class=\"line\">    .then(function()&#123;</span><br><span class=\"line\">        // success;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>重置promise：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var promise = require(&apos;bluebird&apos;);</span><br><span class=\"line\">var options = &#123;</span><br><span class=\"line\">    promiseLib: promise</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var pgp = require(&apos;pg-promise&apos;)(options);</span><br></pre></td></tr></table></figure>\n"},{"title":"security","date":"2019-12-09T10:11:18.000Z","_content":"\n\n### xss\n\nXSS 的原理是恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。\n\n1. 反射型 XSS \n\n一般是通过给别人发送带有恶意脚本代码参数的 URL，当 URL 地址被打开时，特有的恶意代码参数被 HTML 解析、执行。\n不过一些浏览器如Chrome其内置了一些XSS过滤器，可以防止大部分反射型XSS攻击。\n\n反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等\n\n非持久型 XSS 漏洞攻击有以下几点特征：\n\n即时性，不经过服务器存储，直接通过 HTTP 的 GET 和 POST 请求就能完成一次攻击，拿到用户隐私数据。\n攻击者需要诱骗点击,必须要通过用户点击链接才能发起\n反馈率低，所以较难发现和响应修复\n盗取用户敏感保密信息\n\n2. 存储型 XSS\n\n持久型 XSS 漏洞，一般存在于 Form 表单提交等交互功能，如文章留言，提交文本信息等，黑客利用的 XSS 漏洞，将内容经正常功能提交进入数据库持久保存，当前端页面获得后端从数据库中读出的注入代码时，恰好将其渲染执行。\n\n这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。\n\n持久型 XSS 有以下几个特点：\n\n持久性，植入在数据库中\n盗取用户敏感私密信息\n危害面广\n\n3.DOM xss\n\n它不需要服务器解析响应的直接参与，触发XSS靠的是浏览器端的DOM解析，可以认为完全是客户端的事情。  解决方案通过csp: sript-src 的nonce值处理。\n\n4.jsonp 服务端做处理\n\n防御措施：1. httponly 2. csp 3.转义字符---现在的后端模板引擎都实现了转义 \n\n增加攻击难度，降低攻击后果\n\n\nhttps://xss-game.appspot.com/level1\n\n如果用 Vue/React 技术栈，并且不使用 v-html/dangerouslySetInnerHTML 功能，就在前端 render 阶段避免 innerHTML、outerHTML 的 XSS 隐患。\n\n### csrf\n\nCSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。\n\n\nCSRF的特点\n攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。\n攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据。\n整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”。\n跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。\n\n针对已上特点：同源检测 \n\n1. 同源检测 \n\n在HTTP协议中，每一个异步请求都会携带两个Header，用于标记来源域名：\n\n+ Origin Header\n+ Referer Header\n  这两个Header在浏览器发起请求时，大多数情况会自动带上，并且不能由前端自定义内容。 服务器可以通过解析这两个Header中的域名，确定请求的来源域\n\n但是Origin在以下两种情况下并不存在：\n + IE11同源策略： IE 11 不会在跨站CORS请求上添加Origin标头，Referer头将仍然是唯一的标识。最根本原因是因为IE 11对同源的定义和其他浏览器有不同，有两个主要的区别，可以参考MDN Same-origin_policy#IE_Exceptions\n\n+ 302重定向： 在302重定向之后Origin不包含在重定向的请求中，因为Origin可能会被认为是其他来源的敏感信息。对于302重定向的情况来说都是定向到新的服务器上的URL，因此浏览器不想将Origin泄漏到新的服务器上。\n\n#### 使用Referer Header确定来源域名\n\n根据HTTP协议，在HTTP头中有一个字段叫Referer，记录了该HTTP请求的来源地址。 对于Ajax请求，图片和script等资源请求，Referer为发起请求的页面地址。对于页面跳转，Referer为打开页面历史记录的前一个页面地址。因此我们使用Referer中链接的Origin部分可以得知请求的来源域名。\n\n通过refer 检测，可以定义不同的refer policy \n攻击者可以在自己的请求中隐藏Referer。 \nCSRF大多数情况下来自第三方域名，但并不能排除本域发起。如果攻击者有权限在本域发布评论（含链接、图片等，统称UGC），那么它可以直接在本域发起攻击，这种情况下同源策略无法达到防护的作用。\n\n综上所述：同源验证是一个相对简单的防范方法，能够防范绝大多数的CSRF攻击。但这并不是万无一失的，对于安全性要求较高，或者有较多用户输入内容的网站，我们就要对关键的接口做额外的防护措施。\n\n#### CSRF Token\nCSRF攻击之所以能够成功，是因为服务器误把攻击者发送的请求当成了用户自己的请求。那么我们可以要求所有的用户请求都携带一个CSRF攻击者无法获取到的Token。服务器通过校验请求是否携带正确的Token，来把正常的请求和攻击的请求区分开，也可以防范CSRF的攻击。\n\nToken是一个比较有效的CSRF防护方法，只要页面没有XSS漏洞泄露Token，那么接口的CSRF攻击就无法成功。\n\n验证码和密码其实也可以起到CSRF Token的作用哦，而且更安全。\n\n#### 双重Cookie验证\n\n利用CSRF攻击不能获取到用户Cookie的特点，我们可以要求Ajax和表单请求携带一个Cookie中的值。\n\n此方法相对于CSRF Token就简单了许多。可以直接通过前后端拦截的的方法自动化实现。后端校验也更加方便，只需进行请求中字段的对比，而不需要再进行查询和存储Token。\n\n当然，此方法并没有大规模应用，其在大型网站上的安全性还是没有CSRF Token高，原因我们举例进行说明。\n\n1. 用双重Cookie防御CSRF的优点：\n\n无需使用Session，适用面更广，易于实施。\nToken储存于客户端中，不会给服务器带来压力。\n相对于Token，实施成本更低，可以在前后端统一拦截校验，而不需要一个个接口和页面添加。\n\n2. 缺点：\n\n无法使用httponly，这样造成了cookie的安全风险。\n难以做到子域名的隔离。\n为了确保Cookie传输安全，采用这种防御方式的最好确保用整站HTTPS的方式，如果还没切HTTPS的使用这种方式也会有风险。\n\nSamesite Cookie属性\n\n####Samesite Cookie属性\n\n防止CSRF攻击的办法已经有上面的预防措施。为了从源头上解决这个问题，Google起草了一份草案来改进HTTP协议，那就是为Set-Cookie响应头新增Samesite属性，它用来标明这个 Cookie是个“同站 Cookie”，同站Cookie只能作为第一方Cookie，不能作为第三方Cookie，Samesite 有两个属性值，分别是 Strict 和 Lax，下面分别讲解：\n\nSamesite=Strict\n这种称为严格模式，表明这个 Cookie 在任何情况下都不可能作为第三方 Cookie，绝无例外。比如说 b.com 设置了如下 Cookie：\n\nSamesite=Lax 打开链接或者页面跳转时可带Cookie\n\n1. 另外一个问题是Samesite的兼容性不是很好，现阶段除了从新版Chrome和Firefox支持以外，Safari以及iOS Safari都还不支持，现阶段看来暂时还不能普及。\n2. SamesiteCookie目前有一个致命的缺陷：不支持子域。例如，种在topic.a.com下的Cookie，并不能使用a.com下种植的SamesiteCookie。这就导致了当我们网站有多个子域名时，不能使用SamesiteCookie在主域名存储用户登录信息。每个子域名都需要用户重新登录一次。\n\n\n1. 点击劫持\n1. url 跳转漏洞(url 钓鱼)\n1. 图片钓鱼\n1. iframe 钓鱼\n1. os 命令注入\n\n\nstrict-transport-security HTTP Strict Transport Security（通常简称为HSTS）是一个安全功能，它告诉浏览器只能通过HTTPS访问当前资源，而不是HTTP\n\n1. post 请求，用户访问该网页后激发 2. 链接类 用户点击后激发\n\n利用的form 表单、URL 跳转\n\n\nwaf:\n1. Web攻击防护：帮助您防护SQL注入、XSS跨站攻击等常见的Web攻击。\n1. CC攻击防护：帮助您防护针对页面请求的CC攻击。\n1. 恶意IP惩罚：帮助您自动封禁在短时间内进行多次Web攻击的客户端IP。\n1. 地理IP封禁：帮助您一键封禁来自指定国内省份或海外地区的IP的访问请求。\n\n\n1. XST 的全称是 Cross-Site Tracing，客户端发 TRACE 请求至服务器，如果服务器按照标准实现了 TRACE 响应，则在 response body 里会返回此次请求的完整头信息。通过这种方式，客户端可以获取某些敏感的头字段，例如 httpOnly 的 Cookie。","source":"_posts/security-1.md","raw":"---\ntitle: security\ndate: 2019-12-09 18:11:18\ntags: web 安全\n---\n\n\n### xss\n\nXSS 的原理是恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。\n\n1. 反射型 XSS \n\n一般是通过给别人发送带有恶意脚本代码参数的 URL，当 URL 地址被打开时，特有的恶意代码参数被 HTML 解析、执行。\n不过一些浏览器如Chrome其内置了一些XSS过滤器，可以防止大部分反射型XSS攻击。\n\n反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等\n\n非持久型 XSS 漏洞攻击有以下几点特征：\n\n即时性，不经过服务器存储，直接通过 HTTP 的 GET 和 POST 请求就能完成一次攻击，拿到用户隐私数据。\n攻击者需要诱骗点击,必须要通过用户点击链接才能发起\n反馈率低，所以较难发现和响应修复\n盗取用户敏感保密信息\n\n2. 存储型 XSS\n\n持久型 XSS 漏洞，一般存在于 Form 表单提交等交互功能，如文章留言，提交文本信息等，黑客利用的 XSS 漏洞，将内容经正常功能提交进入数据库持久保存，当前端页面获得后端从数据库中读出的注入代码时，恰好将其渲染执行。\n\n这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。\n\n持久型 XSS 有以下几个特点：\n\n持久性，植入在数据库中\n盗取用户敏感私密信息\n危害面广\n\n3.DOM xss\n\n它不需要服务器解析响应的直接参与，触发XSS靠的是浏览器端的DOM解析，可以认为完全是客户端的事情。  解决方案通过csp: sript-src 的nonce值处理。\n\n4.jsonp 服务端做处理\n\n防御措施：1. httponly 2. csp 3.转义字符---现在的后端模板引擎都实现了转义 \n\n增加攻击难度，降低攻击后果\n\n\nhttps://xss-game.appspot.com/level1\n\n如果用 Vue/React 技术栈，并且不使用 v-html/dangerouslySetInnerHTML 功能，就在前端 render 阶段避免 innerHTML、outerHTML 的 XSS 隐患。\n\n### csrf\n\nCSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。\n\n\nCSRF的特点\n攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。\n攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据。\n整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”。\n跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。\n\n针对已上特点：同源检测 \n\n1. 同源检测 \n\n在HTTP协议中，每一个异步请求都会携带两个Header，用于标记来源域名：\n\n+ Origin Header\n+ Referer Header\n  这两个Header在浏览器发起请求时，大多数情况会自动带上，并且不能由前端自定义内容。 服务器可以通过解析这两个Header中的域名，确定请求的来源域\n\n但是Origin在以下两种情况下并不存在：\n + IE11同源策略： IE 11 不会在跨站CORS请求上添加Origin标头，Referer头将仍然是唯一的标识。最根本原因是因为IE 11对同源的定义和其他浏览器有不同，有两个主要的区别，可以参考MDN Same-origin_policy#IE_Exceptions\n\n+ 302重定向： 在302重定向之后Origin不包含在重定向的请求中，因为Origin可能会被认为是其他来源的敏感信息。对于302重定向的情况来说都是定向到新的服务器上的URL，因此浏览器不想将Origin泄漏到新的服务器上。\n\n#### 使用Referer Header确定来源域名\n\n根据HTTP协议，在HTTP头中有一个字段叫Referer，记录了该HTTP请求的来源地址。 对于Ajax请求，图片和script等资源请求，Referer为发起请求的页面地址。对于页面跳转，Referer为打开页面历史记录的前一个页面地址。因此我们使用Referer中链接的Origin部分可以得知请求的来源域名。\n\n通过refer 检测，可以定义不同的refer policy \n攻击者可以在自己的请求中隐藏Referer。 \nCSRF大多数情况下来自第三方域名，但并不能排除本域发起。如果攻击者有权限在本域发布评论（含链接、图片等，统称UGC），那么它可以直接在本域发起攻击，这种情况下同源策略无法达到防护的作用。\n\n综上所述：同源验证是一个相对简单的防范方法，能够防范绝大多数的CSRF攻击。但这并不是万无一失的，对于安全性要求较高，或者有较多用户输入内容的网站，我们就要对关键的接口做额外的防护措施。\n\n#### CSRF Token\nCSRF攻击之所以能够成功，是因为服务器误把攻击者发送的请求当成了用户自己的请求。那么我们可以要求所有的用户请求都携带一个CSRF攻击者无法获取到的Token。服务器通过校验请求是否携带正确的Token，来把正常的请求和攻击的请求区分开，也可以防范CSRF的攻击。\n\nToken是一个比较有效的CSRF防护方法，只要页面没有XSS漏洞泄露Token，那么接口的CSRF攻击就无法成功。\n\n验证码和密码其实也可以起到CSRF Token的作用哦，而且更安全。\n\n#### 双重Cookie验证\n\n利用CSRF攻击不能获取到用户Cookie的特点，我们可以要求Ajax和表单请求携带一个Cookie中的值。\n\n此方法相对于CSRF Token就简单了许多。可以直接通过前后端拦截的的方法自动化实现。后端校验也更加方便，只需进行请求中字段的对比，而不需要再进行查询和存储Token。\n\n当然，此方法并没有大规模应用，其在大型网站上的安全性还是没有CSRF Token高，原因我们举例进行说明。\n\n1. 用双重Cookie防御CSRF的优点：\n\n无需使用Session，适用面更广，易于实施。\nToken储存于客户端中，不会给服务器带来压力。\n相对于Token，实施成本更低，可以在前后端统一拦截校验，而不需要一个个接口和页面添加。\n\n2. 缺点：\n\n无法使用httponly，这样造成了cookie的安全风险。\n难以做到子域名的隔离。\n为了确保Cookie传输安全，采用这种防御方式的最好确保用整站HTTPS的方式，如果还没切HTTPS的使用这种方式也会有风险。\n\nSamesite Cookie属性\n\n####Samesite Cookie属性\n\n防止CSRF攻击的办法已经有上面的预防措施。为了从源头上解决这个问题，Google起草了一份草案来改进HTTP协议，那就是为Set-Cookie响应头新增Samesite属性，它用来标明这个 Cookie是个“同站 Cookie”，同站Cookie只能作为第一方Cookie，不能作为第三方Cookie，Samesite 有两个属性值，分别是 Strict 和 Lax，下面分别讲解：\n\nSamesite=Strict\n这种称为严格模式，表明这个 Cookie 在任何情况下都不可能作为第三方 Cookie，绝无例外。比如说 b.com 设置了如下 Cookie：\n\nSamesite=Lax 打开链接或者页面跳转时可带Cookie\n\n1. 另外一个问题是Samesite的兼容性不是很好，现阶段除了从新版Chrome和Firefox支持以外，Safari以及iOS Safari都还不支持，现阶段看来暂时还不能普及。\n2. SamesiteCookie目前有一个致命的缺陷：不支持子域。例如，种在topic.a.com下的Cookie，并不能使用a.com下种植的SamesiteCookie。这就导致了当我们网站有多个子域名时，不能使用SamesiteCookie在主域名存储用户登录信息。每个子域名都需要用户重新登录一次。\n\n\n1. 点击劫持\n1. url 跳转漏洞(url 钓鱼)\n1. 图片钓鱼\n1. iframe 钓鱼\n1. os 命令注入\n\n\nstrict-transport-security HTTP Strict Transport Security（通常简称为HSTS）是一个安全功能，它告诉浏览器只能通过HTTPS访问当前资源，而不是HTTP\n\n1. post 请求，用户访问该网页后激发 2. 链接类 用户点击后激发\n\n利用的form 表单、URL 跳转\n\n\nwaf:\n1. Web攻击防护：帮助您防护SQL注入、XSS跨站攻击等常见的Web攻击。\n1. CC攻击防护：帮助您防护针对页面请求的CC攻击。\n1. 恶意IP惩罚：帮助您自动封禁在短时间内进行多次Web攻击的客户端IP。\n1. 地理IP封禁：帮助您一键封禁来自指定国内省份或海外地区的IP的访问请求。\n\n\n1. XST 的全称是 Cross-Site Tracing，客户端发 TRACE 请求至服务器，如果服务器按照标准实现了 TRACE 响应，则在 response body 里会返回此次请求的完整头信息。通过这种方式，客户端可以获取某些敏感的头字段，例如 httpOnly 的 Cookie。","slug":"security-1","published":1,"updated":"2020-06-29T06:22:24.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5se07001qyy8ktj7eu1yc","content":"<h3 id=\"xss\"><a href=\"#xss\" class=\"headerlink\" title=\"xss\"></a>xss</h3><p>XSS 的原理是恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。</p>\n<ol>\n<li>反射型 XSS </li>\n</ol>\n<p>一般是通过给别人发送带有恶意脚本代码参数的 URL，当 URL 地址被打开时，特有的恶意代码参数被 HTML 解析、执行。<br>不过一些浏览器如Chrome其内置了一些XSS过滤器，可以防止大部分反射型XSS攻击。</p>\n<p>反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等</p>\n<p>非持久型 XSS 漏洞攻击有以下几点特征：</p>\n<p>即时性，不经过服务器存储，直接通过 HTTP 的 GET 和 POST 请求就能完成一次攻击，拿到用户隐私数据。<br>攻击者需要诱骗点击,必须要通过用户点击链接才能发起<br>反馈率低，所以较难发现和响应修复<br>盗取用户敏感保密信息</p>\n<ol start=\"2\">\n<li>存储型 XSS</li>\n</ol>\n<p>持久型 XSS 漏洞，一般存在于 Form 表单提交等交互功能，如文章留言，提交文本信息等，黑客利用的 XSS 漏洞，将内容经正常功能提交进入数据库持久保存，当前端页面获得后端从数据库中读出的注入代码时，恰好将其渲染执行。</p>\n<p>这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。</p>\n<p>持久型 XSS 有以下几个特点：</p>\n<p>持久性，植入在数据库中<br>盗取用户敏感私密信息<br>危害面广</p>\n<p>3.DOM xss</p>\n<p>它不需要服务器解析响应的直接参与，触发XSS靠的是浏览器端的DOM解析，可以认为完全是客户端的事情。  解决方案通过csp: sript-src 的nonce值处理。</p>\n<p>4.jsonp 服务端做处理</p>\n<p>防御措施：1. httponly 2. csp 3.转义字符—现在的后端模板引擎都实现了转义 </p>\n<p>增加攻击难度，降低攻击后果</p>\n<p><a href=\"https://xss-game.appspot.com/level1\" target=\"_blank\" rel=\"noopener\">https://xss-game.appspot.com/level1</a></p>\n<p>如果用 Vue/React 技术栈，并且不使用 v-html/dangerouslySetInnerHTML 功能，就在前端 render 阶段避免 innerHTML、outerHTML 的 XSS 隐患。</p>\n<h3 id=\"csrf\"><a href=\"#csrf\" class=\"headerlink\" title=\"csrf\"></a>csrf</h3><p>CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p>\n<p>CSRF的特点<br>攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。<br>攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据。<br>整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”。<br>跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。</p>\n<p>针对已上特点：同源检测 </p>\n<ol>\n<li>同源检测 </li>\n</ol>\n<p>在HTTP协议中，每一个异步请求都会携带两个Header，用于标记来源域名：</p>\n<ul>\n<li>Origin Header</li>\n<li>Referer Header<br>这两个Header在浏览器发起请求时，大多数情况会自动带上，并且不能由前端自定义内容。 服务器可以通过解析这两个Header中的域名，确定请求的来源域</li>\n</ul>\n<p>但是Origin在以下两种情况下并不存在：</p>\n<ul>\n<li>IE11同源策略： IE 11 不会在跨站CORS请求上添加Origin标头，Referer头将仍然是唯一的标识。最根本原因是因为IE 11对同源的定义和其他浏览器有不同，有两个主要的区别，可以参考MDN Same-origin_policy#IE_Exceptions</li>\n</ul>\n<ul>\n<li>302重定向： 在302重定向之后Origin不包含在重定向的请求中，因为Origin可能会被认为是其他来源的敏感信息。对于302重定向的情况来说都是定向到新的服务器上的URL，因此浏览器不想将Origin泄漏到新的服务器上。</li>\n</ul>\n<h4 id=\"使用Referer-Header确定来源域名\"><a href=\"#使用Referer-Header确定来源域名\" class=\"headerlink\" title=\"使用Referer Header确定来源域名\"></a>使用Referer Header确定来源域名</h4><p>根据HTTP协议，在HTTP头中有一个字段叫Referer，记录了该HTTP请求的来源地址。 对于Ajax请求，图片和script等资源请求，Referer为发起请求的页面地址。对于页面跳转，Referer为打开页面历史记录的前一个页面地址。因此我们使用Referer中链接的Origin部分可以得知请求的来源域名。</p>\n<p>通过refer 检测，可以定义不同的refer policy<br>攻击者可以在自己的请求中隐藏Referer。<br>CSRF大多数情况下来自第三方域名，但并不能排除本域发起。如果攻击者有权限在本域发布评论（含链接、图片等，统称UGC），那么它可以直接在本域发起攻击，这种情况下同源策略无法达到防护的作用。</p>\n<p>综上所述：同源验证是一个相对简单的防范方法，能够防范绝大多数的CSRF攻击。但这并不是万无一失的，对于安全性要求较高，或者有较多用户输入内容的网站，我们就要对关键的接口做额外的防护措施。</p>\n<h4 id=\"CSRF-Token\"><a href=\"#CSRF-Token\" class=\"headerlink\" title=\"CSRF Token\"></a>CSRF Token</h4><p>CSRF攻击之所以能够成功，是因为服务器误把攻击者发送的请求当成了用户自己的请求。那么我们可以要求所有的用户请求都携带一个CSRF攻击者无法获取到的Token。服务器通过校验请求是否携带正确的Token，来把正常的请求和攻击的请求区分开，也可以防范CSRF的攻击。</p>\n<p>Token是一个比较有效的CSRF防护方法，只要页面没有XSS漏洞泄露Token，那么接口的CSRF攻击就无法成功。</p>\n<p>验证码和密码其实也可以起到CSRF Token的作用哦，而且更安全。</p>\n<h4 id=\"双重Cookie验证\"><a href=\"#双重Cookie验证\" class=\"headerlink\" title=\"双重Cookie验证\"></a>双重Cookie验证</h4><p>利用CSRF攻击不能获取到用户Cookie的特点，我们可以要求Ajax和表单请求携带一个Cookie中的值。</p>\n<p>此方法相对于CSRF Token就简单了许多。可以直接通过前后端拦截的的方法自动化实现。后端校验也更加方便，只需进行请求中字段的对比，而不需要再进行查询和存储Token。</p>\n<p>当然，此方法并没有大规模应用，其在大型网站上的安全性还是没有CSRF Token高，原因我们举例进行说明。</p>\n<ol>\n<li>用双重Cookie防御CSRF的优点：</li>\n</ol>\n<p>无需使用Session，适用面更广，易于实施。<br>Token储存于客户端中，不会给服务器带来压力。<br>相对于Token，实施成本更低，可以在前后端统一拦截校验，而不需要一个个接口和页面添加。</p>\n<ol start=\"2\">\n<li>缺点：</li>\n</ol>\n<p>无法使用httponly，这样造成了cookie的安全风险。<br>难以做到子域名的隔离。<br>为了确保Cookie传输安全，采用这种防御方式的最好确保用整站HTTPS的方式，如果还没切HTTPS的使用这种方式也会有风险。</p>\n<p>Samesite Cookie属性</p>\n<p>####Samesite Cookie属性</p>\n<p>防止CSRF攻击的办法已经有上面的预防措施。为了从源头上解决这个问题，Google起草了一份草案来改进HTTP协议，那就是为Set-Cookie响应头新增Samesite属性，它用来标明这个 Cookie是个“同站 Cookie”，同站Cookie只能作为第一方Cookie，不能作为第三方Cookie，Samesite 有两个属性值，分别是 Strict 和 Lax，下面分别讲解：</p>\n<p>Samesite=Strict<br>这种称为严格模式，表明这个 Cookie 在任何情况下都不可能作为第三方 Cookie，绝无例外。比如说 b.com 设置了如下 Cookie：</p>\n<p>Samesite=Lax 打开链接或者页面跳转时可带Cookie</p>\n<ol>\n<li>另外一个问题是Samesite的兼容性不是很好，现阶段除了从新版Chrome和Firefox支持以外，Safari以及iOS Safari都还不支持，现阶段看来暂时还不能普及。</li>\n<li>SamesiteCookie目前有一个致命的缺陷：不支持子域。例如，种在topic.a.com下的Cookie，并不能使用a.com下种植的SamesiteCookie。这就导致了当我们网站有多个子域名时，不能使用SamesiteCookie在主域名存储用户登录信息。每个子域名都需要用户重新登录一次。</li>\n</ol>\n<ol>\n<li>点击劫持</li>\n<li>url 跳转漏洞(url 钓鱼)</li>\n<li>图片钓鱼</li>\n<li>iframe 钓鱼</li>\n<li>os 命令注入</li>\n</ol>\n<p>strict-transport-security HTTP Strict Transport Security（通常简称为HSTS）是一个安全功能，它告诉浏览器只能通过HTTPS访问当前资源，而不是HTTP</p>\n<ol>\n<li>post 请求，用户访问该网页后激发 2. 链接类 用户点击后激发</li>\n</ol>\n<p>利用的form 表单、URL 跳转</p>\n<p>waf:</p>\n<ol>\n<li>Web攻击防护：帮助您防护SQL注入、XSS跨站攻击等常见的Web攻击。</li>\n<li>CC攻击防护：帮助您防护针对页面请求的CC攻击。</li>\n<li>恶意IP惩罚：帮助您自动封禁在短时间内进行多次Web攻击的客户端IP。</li>\n<li>地理IP封禁：帮助您一键封禁来自指定国内省份或海外地区的IP的访问请求。</li>\n</ol>\n<ol>\n<li>XST 的全称是 Cross-Site Tracing，客户端发 TRACE 请求至服务器，如果服务器按照标准实现了 TRACE 响应，则在 response body 里会返回此次请求的完整头信息。通过这种方式，客户端可以获取某些敏感的头字段，例如 httpOnly 的 Cookie。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"xss\"><a href=\"#xss\" class=\"headerlink\" title=\"xss\"></a>xss</h3><p>XSS 的原理是恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。</p>\n<ol>\n<li>反射型 XSS </li>\n</ol>\n<p>一般是通过给别人发送带有恶意脚本代码参数的 URL，当 URL 地址被打开时，特有的恶意代码参数被 HTML 解析、执行。<br>不过一些浏览器如Chrome其内置了一些XSS过滤器，可以防止大部分反射型XSS攻击。</p>\n<p>反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等</p>\n<p>非持久型 XSS 漏洞攻击有以下几点特征：</p>\n<p>即时性，不经过服务器存储，直接通过 HTTP 的 GET 和 POST 请求就能完成一次攻击，拿到用户隐私数据。<br>攻击者需要诱骗点击,必须要通过用户点击链接才能发起<br>反馈率低，所以较难发现和响应修复<br>盗取用户敏感保密信息</p>\n<ol start=\"2\">\n<li>存储型 XSS</li>\n</ol>\n<p>持久型 XSS 漏洞，一般存在于 Form 表单提交等交互功能，如文章留言，提交文本信息等，黑客利用的 XSS 漏洞，将内容经正常功能提交进入数据库持久保存，当前端页面获得后端从数据库中读出的注入代码时，恰好将其渲染执行。</p>\n<p>这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。</p>\n<p>持久型 XSS 有以下几个特点：</p>\n<p>持久性，植入在数据库中<br>盗取用户敏感私密信息<br>危害面广</p>\n<p>3.DOM xss</p>\n<p>它不需要服务器解析响应的直接参与，触发XSS靠的是浏览器端的DOM解析，可以认为完全是客户端的事情。  解决方案通过csp: sript-src 的nonce值处理。</p>\n<p>4.jsonp 服务端做处理</p>\n<p>防御措施：1. httponly 2. csp 3.转义字符—现在的后端模板引擎都实现了转义 </p>\n<p>增加攻击难度，降低攻击后果</p>\n<p><a href=\"https://xss-game.appspot.com/level1\" target=\"_blank\" rel=\"noopener\">https://xss-game.appspot.com/level1</a></p>\n<p>如果用 Vue/React 技术栈，并且不使用 v-html/dangerouslySetInnerHTML 功能，就在前端 render 阶段避免 innerHTML、outerHTML 的 XSS 隐患。</p>\n<h3 id=\"csrf\"><a href=\"#csrf\" class=\"headerlink\" title=\"csrf\"></a>csrf</h3><p>CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p>\n<p>CSRF的特点<br>攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。<br>攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据。<br>整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”。<br>跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。</p>\n<p>针对已上特点：同源检测 </p>\n<ol>\n<li>同源检测 </li>\n</ol>\n<p>在HTTP协议中，每一个异步请求都会携带两个Header，用于标记来源域名：</p>\n<ul>\n<li>Origin Header</li>\n<li>Referer Header<br>这两个Header在浏览器发起请求时，大多数情况会自动带上，并且不能由前端自定义内容。 服务器可以通过解析这两个Header中的域名，确定请求的来源域</li>\n</ul>\n<p>但是Origin在以下两种情况下并不存在：</p>\n<ul>\n<li>IE11同源策略： IE 11 不会在跨站CORS请求上添加Origin标头，Referer头将仍然是唯一的标识。最根本原因是因为IE 11对同源的定义和其他浏览器有不同，有两个主要的区别，可以参考MDN Same-origin_policy#IE_Exceptions</li>\n</ul>\n<ul>\n<li>302重定向： 在302重定向之后Origin不包含在重定向的请求中，因为Origin可能会被认为是其他来源的敏感信息。对于302重定向的情况来说都是定向到新的服务器上的URL，因此浏览器不想将Origin泄漏到新的服务器上。</li>\n</ul>\n<h4 id=\"使用Referer-Header确定来源域名\"><a href=\"#使用Referer-Header确定来源域名\" class=\"headerlink\" title=\"使用Referer Header确定来源域名\"></a>使用Referer Header确定来源域名</h4><p>根据HTTP协议，在HTTP头中有一个字段叫Referer，记录了该HTTP请求的来源地址。 对于Ajax请求，图片和script等资源请求，Referer为发起请求的页面地址。对于页面跳转，Referer为打开页面历史记录的前一个页面地址。因此我们使用Referer中链接的Origin部分可以得知请求的来源域名。</p>\n<p>通过refer 检测，可以定义不同的refer policy<br>攻击者可以在自己的请求中隐藏Referer。<br>CSRF大多数情况下来自第三方域名，但并不能排除本域发起。如果攻击者有权限在本域发布评论（含链接、图片等，统称UGC），那么它可以直接在本域发起攻击，这种情况下同源策略无法达到防护的作用。</p>\n<p>综上所述：同源验证是一个相对简单的防范方法，能够防范绝大多数的CSRF攻击。但这并不是万无一失的，对于安全性要求较高，或者有较多用户输入内容的网站，我们就要对关键的接口做额外的防护措施。</p>\n<h4 id=\"CSRF-Token\"><a href=\"#CSRF-Token\" class=\"headerlink\" title=\"CSRF Token\"></a>CSRF Token</h4><p>CSRF攻击之所以能够成功，是因为服务器误把攻击者发送的请求当成了用户自己的请求。那么我们可以要求所有的用户请求都携带一个CSRF攻击者无法获取到的Token。服务器通过校验请求是否携带正确的Token，来把正常的请求和攻击的请求区分开，也可以防范CSRF的攻击。</p>\n<p>Token是一个比较有效的CSRF防护方法，只要页面没有XSS漏洞泄露Token，那么接口的CSRF攻击就无法成功。</p>\n<p>验证码和密码其实也可以起到CSRF Token的作用哦，而且更安全。</p>\n<h4 id=\"双重Cookie验证\"><a href=\"#双重Cookie验证\" class=\"headerlink\" title=\"双重Cookie验证\"></a>双重Cookie验证</h4><p>利用CSRF攻击不能获取到用户Cookie的特点，我们可以要求Ajax和表单请求携带一个Cookie中的值。</p>\n<p>此方法相对于CSRF Token就简单了许多。可以直接通过前后端拦截的的方法自动化实现。后端校验也更加方便，只需进行请求中字段的对比，而不需要再进行查询和存储Token。</p>\n<p>当然，此方法并没有大规模应用，其在大型网站上的安全性还是没有CSRF Token高，原因我们举例进行说明。</p>\n<ol>\n<li>用双重Cookie防御CSRF的优点：</li>\n</ol>\n<p>无需使用Session，适用面更广，易于实施。<br>Token储存于客户端中，不会给服务器带来压力。<br>相对于Token，实施成本更低，可以在前后端统一拦截校验，而不需要一个个接口和页面添加。</p>\n<ol start=\"2\">\n<li>缺点：</li>\n</ol>\n<p>无法使用httponly，这样造成了cookie的安全风险。<br>难以做到子域名的隔离。<br>为了确保Cookie传输安全，采用这种防御方式的最好确保用整站HTTPS的方式，如果还没切HTTPS的使用这种方式也会有风险。</p>\n<p>Samesite Cookie属性</p>\n<p>####Samesite Cookie属性</p>\n<p>防止CSRF攻击的办法已经有上面的预防措施。为了从源头上解决这个问题，Google起草了一份草案来改进HTTP协议，那就是为Set-Cookie响应头新增Samesite属性，它用来标明这个 Cookie是个“同站 Cookie”，同站Cookie只能作为第一方Cookie，不能作为第三方Cookie，Samesite 有两个属性值，分别是 Strict 和 Lax，下面分别讲解：</p>\n<p>Samesite=Strict<br>这种称为严格模式，表明这个 Cookie 在任何情况下都不可能作为第三方 Cookie，绝无例外。比如说 b.com 设置了如下 Cookie：</p>\n<p>Samesite=Lax 打开链接或者页面跳转时可带Cookie</p>\n<ol>\n<li>另外一个问题是Samesite的兼容性不是很好，现阶段除了从新版Chrome和Firefox支持以外，Safari以及iOS Safari都还不支持，现阶段看来暂时还不能普及。</li>\n<li>SamesiteCookie目前有一个致命的缺陷：不支持子域。例如，种在topic.a.com下的Cookie，并不能使用a.com下种植的SamesiteCookie。这就导致了当我们网站有多个子域名时，不能使用SamesiteCookie在主域名存储用户登录信息。每个子域名都需要用户重新登录一次。</li>\n</ol>\n<ol>\n<li>点击劫持</li>\n<li>url 跳转漏洞(url 钓鱼)</li>\n<li>图片钓鱼</li>\n<li>iframe 钓鱼</li>\n<li>os 命令注入</li>\n</ol>\n<p>strict-transport-security HTTP Strict Transport Security（通常简称为HSTS）是一个安全功能，它告诉浏览器只能通过HTTPS访问当前资源，而不是HTTP</p>\n<ol>\n<li>post 请求，用户访问该网页后激发 2. 链接类 用户点击后激发</li>\n</ol>\n<p>利用的form 表单、URL 跳转</p>\n<p>waf:</p>\n<ol>\n<li>Web攻击防护：帮助您防护SQL注入、XSS跨站攻击等常见的Web攻击。</li>\n<li>CC攻击防护：帮助您防护针对页面请求的CC攻击。</li>\n<li>恶意IP惩罚：帮助您自动封禁在短时间内进行多次Web攻击的客户端IP。</li>\n<li>地理IP封禁：帮助您一键封禁来自指定国内省份或海外地区的IP的访问请求。</li>\n</ol>\n<ol>\n<li>XST 的全称是 Cross-Site Tracing，客户端发 TRACE 请求至服务器，如果服务器按照标准实现了 TRACE 响应，则在 response body 里会返回此次请求的完整头信息。通过这种方式，客户端可以获取某些敏感的头字段，例如 httpOnly 的 Cookie。</li>\n</ol>\n"},{"title":"regex","date":"2019-06-24T05:56:32.000Z","_content":"\n### s修饰符使得 . 能够匹配任何字符\n \n/foo.bar/s.test('foo\\nbar')\n\n### ? 非贪婪模式\n\n? 非贪婪模式，只匹配最少的数据。 对 \"123abc\" 应用 /\\d+/ 将会返回 \"123\"，如果使用 /\\d+?/,那么就只会匹配到 \"1”。\n\n### 先行断言\n\nx(?=y)  匹配'x'仅仅当'x'后面跟着'y'.这种叫做先行断言。例如，/Jack(?=Sprat)/会匹配到'Jack'仅仅当它后面跟着'Sprat'。/Jack(?=Sprat|Frost)/匹配‘Jack’仅仅当它后面跟着'Sprat'或者是‘Frost’。但是‘Sprat’和‘Frost’都不是匹配结果的一部分。\n\n### 后行断言 \n\n(?<=y)x  匹配'x'仅仅当'x'前面是'y'.这种叫做后行断言。\n\n类似，匹配前面字符不为$\n  (?<!\\$)browser\n### 正向否定查找\n\nx(?!y)   匹配'x'仅仅当'x'后面不跟着'y',这个叫做正向否定查找。/\\d+(?!\\.)/匹配一个数字仅仅当这个数字后面没有跟小数点的时候。正则表达式/\\d+(?!\\.)/.exec(\"3.141\")匹配‘141’而不是‘3.141’\n\n### 边界 \n\\b 匹配一个词的边界。  \n\\B 匹配一个非单词边界\n\n### w\n\\w 匹配一个单字字符（字母、数字或者下划线）。\n等价于[A-Za-z0-9_]。\n\n例如, /\\w/ 匹配 \"apple,\" 中的 'a'，\"$5.28,\"中的 '5' 和 \"3D.\" 中的 '3’。\n\n\\W 匹配一个非单字字符。\n\n等价于[^A-Za-z0-9_]。\n\n例如, /\\W/ 或者 /[^A-Za-z0-9_]/ 匹配 \"50%.\" 中的 '%’。\n\n### 子字符串匹配\n```\nvar re = /(\\w+)\\s(\\w+)/;\nvar str = \"John Smith\";\nvar newstr = str.replace(re, \"$2, $1\");\nconsole.log(newstr);\n```\n\n#### 非捕获组\n\n?: 用非捕获组 提升匹配效率。\n\ny修饰符的一个应用，是从字符串提取 token（词元），y修饰符确保了匹配之间不会有漏掉的字符。可以修改regex的 lastIndex 。\n\n### 具名匹配\n\n```\nconst RE_DATE = /(\\d{4})-(\\d{2})-(\\d{2})/;\n\n\n\nconst matchObj = RE_DATE.exec('1999-12-31');\n\nconst year = matchObj[1]; // 1999\n\nconst month = matchObj[2]; // 12\n\nconst day = matchObj[3]; // 31\n\nReplace 函数形式：\n\n'2015-01-02'.replace(re, (\n\n   matched, // 整个匹配结果 2015-01-02\n\n   capture1, // 第一个组匹配 2015\n\n   capture2, // 第二个组匹配 01\n\n   capture3, // 第三个组匹配 02\n\n   position, // 匹配开始的位置 0\n\n   S, // 原字符串 2015-01-02\n\n   groups // 具名组构成的一个对象 {year, month, day}\n\n ) => {\n\n let {day, month, year} = groups;\n\n return `${day}/${month}/${year}`;\n\n});\n```\n\n```javascript\n// 可以直接赋值\nlet {groups: {one, two}} = /^(?<one>.*):(?<two>.*)$/u.exec('foo:bar');\none  // foo\ntwo  // bar\n\n// 直接replace\nlet re = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/u;\n\n'2015-01-02'.replace(re, '$<day>/$<month>/$<year>')\n```\n\n### 使用引用(具名)\n\n使用引用：const RE_TWICE = /^(?<word>[a-z]+)!\\k<word>$/;\n\nRE_TWICE.test('abc!abc') // true\nRE_TWICE.test('abc!ab') // false\n\n### 捕获组的使用\nRegex 中捕获组的使用：\n对于普通捕获组和命名捕获组的引用，语法如下：\n普通捕获组反向引用：\\k<number>，通常简写为\\number\n\n命名捕获组反向引用：\\k<name>或者\\k'name'\n\n### 匹配字符和非字符\n\\b matches the empty string at the beginning or end of a word. \n\n\\B matches the empty string not at the beginning or end of a word. \n\n","source":"_posts/regex.md","raw":"---\ntitle: regex\ndate: 2019-06-24 13:56:32\ntags: regex\n---\n\n### s修饰符使得 . 能够匹配任何字符\n \n/foo.bar/s.test('foo\\nbar')\n\n### ? 非贪婪模式\n\n? 非贪婪模式，只匹配最少的数据。 对 \"123abc\" 应用 /\\d+/ 将会返回 \"123\"，如果使用 /\\d+?/,那么就只会匹配到 \"1”。\n\n### 先行断言\n\nx(?=y)  匹配'x'仅仅当'x'后面跟着'y'.这种叫做先行断言。例如，/Jack(?=Sprat)/会匹配到'Jack'仅仅当它后面跟着'Sprat'。/Jack(?=Sprat|Frost)/匹配‘Jack’仅仅当它后面跟着'Sprat'或者是‘Frost’。但是‘Sprat’和‘Frost’都不是匹配结果的一部分。\n\n### 后行断言 \n\n(?<=y)x  匹配'x'仅仅当'x'前面是'y'.这种叫做后行断言。\n\n类似，匹配前面字符不为$\n  (?<!\\$)browser\n### 正向否定查找\n\nx(?!y)   匹配'x'仅仅当'x'后面不跟着'y',这个叫做正向否定查找。/\\d+(?!\\.)/匹配一个数字仅仅当这个数字后面没有跟小数点的时候。正则表达式/\\d+(?!\\.)/.exec(\"3.141\")匹配‘141’而不是‘3.141’\n\n### 边界 \n\\b 匹配一个词的边界。  \n\\B 匹配一个非单词边界\n\n### w\n\\w 匹配一个单字字符（字母、数字或者下划线）。\n等价于[A-Za-z0-9_]。\n\n例如, /\\w/ 匹配 \"apple,\" 中的 'a'，\"$5.28,\"中的 '5' 和 \"3D.\" 中的 '3’。\n\n\\W 匹配一个非单字字符。\n\n等价于[^A-Za-z0-9_]。\n\n例如, /\\W/ 或者 /[^A-Za-z0-9_]/ 匹配 \"50%.\" 中的 '%’。\n\n### 子字符串匹配\n```\nvar re = /(\\w+)\\s(\\w+)/;\nvar str = \"John Smith\";\nvar newstr = str.replace(re, \"$2, $1\");\nconsole.log(newstr);\n```\n\n#### 非捕获组\n\n?: 用非捕获组 提升匹配效率。\n\ny修饰符的一个应用，是从字符串提取 token（词元），y修饰符确保了匹配之间不会有漏掉的字符。可以修改regex的 lastIndex 。\n\n### 具名匹配\n\n```\nconst RE_DATE = /(\\d{4})-(\\d{2})-(\\d{2})/;\n\n\n\nconst matchObj = RE_DATE.exec('1999-12-31');\n\nconst year = matchObj[1]; // 1999\n\nconst month = matchObj[2]; // 12\n\nconst day = matchObj[3]; // 31\n\nReplace 函数形式：\n\n'2015-01-02'.replace(re, (\n\n   matched, // 整个匹配结果 2015-01-02\n\n   capture1, // 第一个组匹配 2015\n\n   capture2, // 第二个组匹配 01\n\n   capture3, // 第三个组匹配 02\n\n   position, // 匹配开始的位置 0\n\n   S, // 原字符串 2015-01-02\n\n   groups // 具名组构成的一个对象 {year, month, day}\n\n ) => {\n\n let {day, month, year} = groups;\n\n return `${day}/${month}/${year}`;\n\n});\n```\n\n```javascript\n// 可以直接赋值\nlet {groups: {one, two}} = /^(?<one>.*):(?<two>.*)$/u.exec('foo:bar');\none  // foo\ntwo  // bar\n\n// 直接replace\nlet re = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/u;\n\n'2015-01-02'.replace(re, '$<day>/$<month>/$<year>')\n```\n\n### 使用引用(具名)\n\n使用引用：const RE_TWICE = /^(?<word>[a-z]+)!\\k<word>$/;\n\nRE_TWICE.test('abc!abc') // true\nRE_TWICE.test('abc!ab') // false\n\n### 捕获组的使用\nRegex 中捕获组的使用：\n对于普通捕获组和命名捕获组的引用，语法如下：\n普通捕获组反向引用：\\k<number>，通常简写为\\number\n\n命名捕获组反向引用：\\k<name>或者\\k'name'\n\n### 匹配字符和非字符\n\\b matches the empty string at the beginning or end of a word. \n\n\\B matches the empty string not at the beginning or end of a word. \n\n","slug":"regex","published":1,"updated":"2021-12-23T06:37:40.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5se08001tyy8kyris7kj2","content":"<h3 id=\"s修饰符使得-能够匹配任何字符\"><a href=\"#s修饰符使得-能够匹配任何字符\" class=\"headerlink\" title=\"s修饰符使得 . 能够匹配任何字符\"></a>s修饰符使得 . 能够匹配任何字符</h3><p>/foo.bar/s.test(‘foo\\nbar’)</p>\n<h3 id=\"非贪婪模式\"><a href=\"#非贪婪模式\" class=\"headerlink\" title=\"? 非贪婪模式\"></a>? 非贪婪模式</h3><p>? 非贪婪模式，只匹配最少的数据。 对 “123abc” 应用 /\\d+/ 将会返回 “123”，如果使用 /\\d+?/,那么就只会匹配到 “1”。</p>\n<h3 id=\"先行断言\"><a href=\"#先行断言\" class=\"headerlink\" title=\"先行断言\"></a>先行断言</h3><p>x(?=y)  匹配’x’仅仅当’x’后面跟着’y’.这种叫做先行断言。例如，/Jack(?=Sprat)/会匹配到’Jack’仅仅当它后面跟着’Sprat’。/Jack(?=Sprat|Frost)/匹配‘Jack’仅仅当它后面跟着’Sprat’或者是‘Frost’。但是‘Sprat’和‘Frost’都不是匹配结果的一部分。</p>\n<h3 id=\"后行断言\"><a href=\"#后行断言\" class=\"headerlink\" title=\"后行断言\"></a>后行断言</h3><p>(?&lt;=y)x  匹配’x’仅仅当’x’前面是’y’.这种叫做后行断言。</p>\n<p>类似，匹配前面字符不为$<br>  (?&lt;!\\$)browser</p>\n<h3 id=\"正向否定查找\"><a href=\"#正向否定查找\" class=\"headerlink\" title=\"正向否定查找\"></a>正向否定查找</h3><p>x(?!y)   匹配’x’仅仅当’x’后面不跟着’y’,这个叫做正向否定查找。/\\d+(?!.)/匹配一个数字仅仅当这个数字后面没有跟小数点的时候。正则表达式/\\d+(?!.)/.exec(“3.141”)匹配‘141’而不是‘3.141’</p>\n<h3 id=\"边界\"><a href=\"#边界\" class=\"headerlink\" title=\"边界\"></a>边界</h3><p>\\b 匹配一个词的边界。<br>\\B 匹配一个非单词边界</p>\n<h3 id=\"w\"><a href=\"#w\" class=\"headerlink\" title=\"w\"></a>w</h3><p>\\w 匹配一个单字字符（字母、数字或者下划线）。<br>等价于[A-Za-z0-9_]。</p>\n<p>例如, /\\w/ 匹配 “apple,” 中的 ‘a’，”$5.28,”中的 ‘5’ 和 “3D.” 中的 ‘3’。</p>\n<p>\\W 匹配一个非单字字符。</p>\n<p>等价于[^A-Za-z0-9_]。</p>\n<p>例如, /\\W/ 或者 /[^A-Za-z0-9_]/ 匹配 “50%.” 中的 ‘%’。</p>\n<h3 id=\"子字符串匹配\"><a href=\"#子字符串匹配\" class=\"headerlink\" title=\"子字符串匹配\"></a>子字符串匹配</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var re = /(\\w+)\\s(\\w+)/;</span><br><span class=\"line\">var str = &quot;John Smith&quot;;</span><br><span class=\"line\">var newstr = str.replace(re, &quot;$2, $1&quot;);</span><br><span class=\"line\">console.log(newstr);</span><br></pre></td></tr></table></figure>\n<h4 id=\"非捕获组\"><a href=\"#非捕获组\" class=\"headerlink\" title=\"非捕获组\"></a>非捕获组</h4><p>?: 用非捕获组 提升匹配效率。</p>\n<p>y修饰符的一个应用，是从字符串提取 token（词元），y修饰符确保了匹配之间不会有漏掉的字符。可以修改regex的 lastIndex 。</p>\n<h3 id=\"具名匹配\"><a href=\"#具名匹配\" class=\"headerlink\" title=\"具名匹配\"></a>具名匹配</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const RE_DATE = /(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">const matchObj = RE_DATE.exec(&apos;1999-12-31&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const year = matchObj[1]; // 1999</span><br><span class=\"line\"></span><br><span class=\"line\">const month = matchObj[2]; // 12</span><br><span class=\"line\"></span><br><span class=\"line\">const day = matchObj[3]; // 31</span><br><span class=\"line\"></span><br><span class=\"line\">Replace 函数形式：</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;2015-01-02&apos;.replace(re, (</span><br><span class=\"line\"></span><br><span class=\"line\">   matched, // 整个匹配结果 2015-01-02</span><br><span class=\"line\"></span><br><span class=\"line\">   capture1, // 第一个组匹配 2015</span><br><span class=\"line\"></span><br><span class=\"line\">   capture2, // 第二个组匹配 01</span><br><span class=\"line\"></span><br><span class=\"line\">   capture3, // 第三个组匹配 02</span><br><span class=\"line\"></span><br><span class=\"line\">   position, // 匹配开始的位置 0</span><br><span class=\"line\"></span><br><span class=\"line\">   S, // 原字符串 2015-01-02</span><br><span class=\"line\"></span><br><span class=\"line\">   groups // 具名组构成的一个对象 &#123;year, month, day&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> ) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> let &#123;day, month, year&#125; = groups;</span><br><span class=\"line\"></span><br><span class=\"line\"> return `$&#123;day&#125;/$&#123;month&#125;/$&#123;year&#125;`;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以直接赋值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">groups</span>: &#123;one, two&#125;&#125; = <span class=\"regexp\">/^(?&lt;one&gt;.*):(?&lt;two&gt;.*)$/u</span>.exec(<span class=\"string\">'foo:bar'</span>);</span><br><span class=\"line\">one  <span class=\"comment\">// foo</span></span><br><span class=\"line\">two  <span class=\"comment\">// bar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 直接replace</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> re = <span class=\"regexp\">/(?&lt;year&gt;\\d&#123;4&#125;)-(?&lt;month&gt;\\d&#123;2&#125;)-(?&lt;day&gt;\\d&#123;2&#125;)/u</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'2015-01-02'</span>.replace(re, <span class=\"string\">'$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用引用-具名\"><a href=\"#使用引用-具名\" class=\"headerlink\" title=\"使用引用(具名)\"></a>使用引用(具名)</h3><p>使用引用：const RE_TWICE = /^(?<word>[a-z]+)!\\k<word>$/;</word></word></p>\n<p>RE_TWICE.test(‘abc!abc’) // true<br>RE_TWICE.test(‘abc!ab’) // false</p>\n<h3 id=\"捕获组的使用\"><a href=\"#捕获组的使用\" class=\"headerlink\" title=\"捕获组的使用\"></a>捕获组的使用</h3><p>Regex 中捕获组的使用：<br>对于普通捕获组和命名捕获组的引用，语法如下：<br>普通捕获组反向引用：\\k<number>，通常简写为\\number</number></p>\n<p>命名捕获组反向引用：\\k<name>或者\\k’name’</name></p>\n<h3 id=\"匹配字符和非字符\"><a href=\"#匹配字符和非字符\" class=\"headerlink\" title=\"匹配字符和非字符\"></a>匹配字符和非字符</h3><p>\\b matches the empty string at the beginning or end of a word. </p>\n<p>\\B matches the empty string not at the beginning or end of a word. </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"s修饰符使得-能够匹配任何字符\"><a href=\"#s修饰符使得-能够匹配任何字符\" class=\"headerlink\" title=\"s修饰符使得 . 能够匹配任何字符\"></a>s修饰符使得 . 能够匹配任何字符</h3><p>/foo.bar/s.test(‘foo\\nbar’)</p>\n<h3 id=\"非贪婪模式\"><a href=\"#非贪婪模式\" class=\"headerlink\" title=\"? 非贪婪模式\"></a>? 非贪婪模式</h3><p>? 非贪婪模式，只匹配最少的数据。 对 “123abc” 应用 /\\d+/ 将会返回 “123”，如果使用 /\\d+?/,那么就只会匹配到 “1”。</p>\n<h3 id=\"先行断言\"><a href=\"#先行断言\" class=\"headerlink\" title=\"先行断言\"></a>先行断言</h3><p>x(?=y)  匹配’x’仅仅当’x’后面跟着’y’.这种叫做先行断言。例如，/Jack(?=Sprat)/会匹配到’Jack’仅仅当它后面跟着’Sprat’。/Jack(?=Sprat|Frost)/匹配‘Jack’仅仅当它后面跟着’Sprat’或者是‘Frost’。但是‘Sprat’和‘Frost’都不是匹配结果的一部分。</p>\n<h3 id=\"后行断言\"><a href=\"#后行断言\" class=\"headerlink\" title=\"后行断言\"></a>后行断言</h3><p>(?&lt;=y)x  匹配’x’仅仅当’x’前面是’y’.这种叫做后行断言。</p>\n<p>类似，匹配前面字符不为$<br>  (?&lt;!\\$)browser</p>\n<h3 id=\"正向否定查找\"><a href=\"#正向否定查找\" class=\"headerlink\" title=\"正向否定查找\"></a>正向否定查找</h3><p>x(?!y)   匹配’x’仅仅当’x’后面不跟着’y’,这个叫做正向否定查找。/\\d+(?!.)/匹配一个数字仅仅当这个数字后面没有跟小数点的时候。正则表达式/\\d+(?!.)/.exec(“3.141”)匹配‘141’而不是‘3.141’</p>\n<h3 id=\"边界\"><a href=\"#边界\" class=\"headerlink\" title=\"边界\"></a>边界</h3><p>\\b 匹配一个词的边界。<br>\\B 匹配一个非单词边界</p>\n<h3 id=\"w\"><a href=\"#w\" class=\"headerlink\" title=\"w\"></a>w</h3><p>\\w 匹配一个单字字符（字母、数字或者下划线）。<br>等价于[A-Za-z0-9_]。</p>\n<p>例如, /\\w/ 匹配 “apple,” 中的 ‘a’，”$5.28,”中的 ‘5’ 和 “3D.” 中的 ‘3’。</p>\n<p>\\W 匹配一个非单字字符。</p>\n<p>等价于[^A-Za-z0-9_]。</p>\n<p>例如, /\\W/ 或者 /[^A-Za-z0-9_]/ 匹配 “50%.” 中的 ‘%’。</p>\n<h3 id=\"子字符串匹配\"><a href=\"#子字符串匹配\" class=\"headerlink\" title=\"子字符串匹配\"></a>子字符串匹配</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var re = /(\\w+)\\s(\\w+)/;</span><br><span class=\"line\">var str = &quot;John Smith&quot;;</span><br><span class=\"line\">var newstr = str.replace(re, &quot;$2, $1&quot;);</span><br><span class=\"line\">console.log(newstr);</span><br></pre></td></tr></table></figure>\n<h4 id=\"非捕获组\"><a href=\"#非捕获组\" class=\"headerlink\" title=\"非捕获组\"></a>非捕获组</h4><p>?: 用非捕获组 提升匹配效率。</p>\n<p>y修饰符的一个应用，是从字符串提取 token（词元），y修饰符确保了匹配之间不会有漏掉的字符。可以修改regex的 lastIndex 。</p>\n<h3 id=\"具名匹配\"><a href=\"#具名匹配\" class=\"headerlink\" title=\"具名匹配\"></a>具名匹配</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const RE_DATE = /(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">const matchObj = RE_DATE.exec(&apos;1999-12-31&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const year = matchObj[1]; // 1999</span><br><span class=\"line\"></span><br><span class=\"line\">const month = matchObj[2]; // 12</span><br><span class=\"line\"></span><br><span class=\"line\">const day = matchObj[3]; // 31</span><br><span class=\"line\"></span><br><span class=\"line\">Replace 函数形式：</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;2015-01-02&apos;.replace(re, (</span><br><span class=\"line\"></span><br><span class=\"line\">   matched, // 整个匹配结果 2015-01-02</span><br><span class=\"line\"></span><br><span class=\"line\">   capture1, // 第一个组匹配 2015</span><br><span class=\"line\"></span><br><span class=\"line\">   capture2, // 第二个组匹配 01</span><br><span class=\"line\"></span><br><span class=\"line\">   capture3, // 第三个组匹配 02</span><br><span class=\"line\"></span><br><span class=\"line\">   position, // 匹配开始的位置 0</span><br><span class=\"line\"></span><br><span class=\"line\">   S, // 原字符串 2015-01-02</span><br><span class=\"line\"></span><br><span class=\"line\">   groups // 具名组构成的一个对象 &#123;year, month, day&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> ) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> let &#123;day, month, year&#125; = groups;</span><br><span class=\"line\"></span><br><span class=\"line\"> return `$&#123;day&#125;/$&#123;month&#125;/$&#123;year&#125;`;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以直接赋值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">groups</span>: &#123;one, two&#125;&#125; = <span class=\"regexp\">/^(?&lt;one&gt;.*):(?&lt;two&gt;.*)$/u</span>.exec(<span class=\"string\">'foo:bar'</span>);</span><br><span class=\"line\">one  <span class=\"comment\">// foo</span></span><br><span class=\"line\">two  <span class=\"comment\">// bar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 直接replace</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> re = <span class=\"regexp\">/(?&lt;year&gt;\\d&#123;4&#125;)-(?&lt;month&gt;\\d&#123;2&#125;)-(?&lt;day&gt;\\d&#123;2&#125;)/u</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'2015-01-02'</span>.replace(re, <span class=\"string\">'$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用引用-具名\"><a href=\"#使用引用-具名\" class=\"headerlink\" title=\"使用引用(具名)\"></a>使用引用(具名)</h3><p>使用引用：const RE_TWICE = /^(?<word>[a-z]+)!\\k<word>$/;</word></word></p>\n<p>RE_TWICE.test(‘abc!abc’) // true<br>RE_TWICE.test(‘abc!ab’) // false</p>\n<h3 id=\"捕获组的使用\"><a href=\"#捕获组的使用\" class=\"headerlink\" title=\"捕获组的使用\"></a>捕获组的使用</h3><p>Regex 中捕获组的使用：<br>对于普通捕获组和命名捕获组的引用，语法如下：<br>普通捕获组反向引用：\\k<number>，通常简写为\\number</number></p>\n<p>命名捕获组反向引用：\\k<name>或者\\k’name’</name></p>\n<h3 id=\"匹配字符和非字符\"><a href=\"#匹配字符和非字符\" class=\"headerlink\" title=\"匹配字符和非字符\"></a>匹配字符和非字符</h3><p>\\b matches the empty string at the beginning or end of a word. </p>\n<p>\\B matches the empty string not at the beginning or end of a word. </p>\n"},{"title":"stringencode","date":"2019-12-10T09:10:23.000Z","_content":"\nASCII、UTF-8\\16\nunicode GB2312 \n\n字符是语言中的概念，但是计算机只认识 0 和 1 这两个数字。因此要想让计算机存储、处理字符串，就必须把字符串用二进制表示出来。在 ASCII 码中，每个英文字母都有自己对应的数字。我们通常把 ASCII 码称为字符集，也就是字符的集合。了解 ASCII 码的同学应该都知道小写字母 a 可以用 97 来表示，97 也被称为字符 a 在 ASCII 字符集中的码位。\n\n可见把字符转换成码位的过程类似于加密(encrypt)，我们称之为编码(encode)，反则则类似于解密，我们称之为解码(decode)\n\n字符转换成码位的过程是编码，这个过程有无数种实现方式。比如 a -> 97、b -> 98 这种就是 ASCII 编码，因为 255 = 2 ^ 8，所以所有 ASCII 编码下的码位恰好都可以由一个字节表示。\n\n除了中国人之外，各个地区的人也都根据自己的语言拓展了相应的编码方式。这样unicode就出现了。\n\n缺点：过于庞大、\n\n中文的utf-8 大于GBk的两个字节\n\n因此，我们有了对 Unicode 字符再次编码的编码方式，常见的有 utf-8，utf-16 等。UTF 表示 Unicode Transfer Format，因此是针对 Unicode 字符集的一系列编码方式。utf-8 是一种变长编码，也就是说不同的 Unicode 字符在 utf-8 编码下的码位长度可能不同，如下表所示:\n\n |Unicode 编码(16进制) | utf-8 码位(二进制)|\n |----|----|\n |000000-00007F       |0xxxxxxx|\n |000080-0007FF|110xxxxx 10xxxxxx|\n |000800-00FFFF|1110xxxx 10xxxxxx 10xxxxxx|\n |010000-1FFFFF|11110xxx10xxxxxx10xxxxxx10xxxxxx|\n\n\n1. escape\n1. encodeURIComponent encodeURI\n\nencodeURI()不会对本身属于URI的特殊字符进行编码，例如冒号、正斜杠、问号和井字号；而encodeURIComponent()则会对它发现的任何非标准字符进行编码。\n使用encodeURI()编码后的结果是除了空格之外的其他字符都原封不动，只有空格被替换成了%20。而encodeURIComponent()方法则会使用对应的编码替换所有非字母数字字符。\n\nescape 在处理 0xff 之外字符的时候，是直接使用字符的 unicode 在前面加上一个 「%u」,举例说明。\n而encodeURI则是先进行 UTF-8，再在 UTF-8 的每个字节码前加上一个 「%」；\nencodeURI 是W3C 的标准，而 Escape 是非标准。\n\n\nJavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为2个字节。对于那些需要4个字节储存的字符（Unicode 码点大于0xFFFF的字符），JavaScript 会认为它们是两个字符。\n","source":"_posts/stringencode.md","raw":"---\ntitle: stringencode\ndate: 2019-12-10 17:10:23\ntags: encode decode\n---\n\nASCII、UTF-8\\16\nunicode GB2312 \n\n字符是语言中的概念，但是计算机只认识 0 和 1 这两个数字。因此要想让计算机存储、处理字符串，就必须把字符串用二进制表示出来。在 ASCII 码中，每个英文字母都有自己对应的数字。我们通常把 ASCII 码称为字符集，也就是字符的集合。了解 ASCII 码的同学应该都知道小写字母 a 可以用 97 来表示，97 也被称为字符 a 在 ASCII 字符集中的码位。\n\n可见把字符转换成码位的过程类似于加密(encrypt)，我们称之为编码(encode)，反则则类似于解密，我们称之为解码(decode)\n\n字符转换成码位的过程是编码，这个过程有无数种实现方式。比如 a -> 97、b -> 98 这种就是 ASCII 编码，因为 255 = 2 ^ 8，所以所有 ASCII 编码下的码位恰好都可以由一个字节表示。\n\n除了中国人之外，各个地区的人也都根据自己的语言拓展了相应的编码方式。这样unicode就出现了。\n\n缺点：过于庞大、\n\n中文的utf-8 大于GBk的两个字节\n\n因此，我们有了对 Unicode 字符再次编码的编码方式，常见的有 utf-8，utf-16 等。UTF 表示 Unicode Transfer Format，因此是针对 Unicode 字符集的一系列编码方式。utf-8 是一种变长编码，也就是说不同的 Unicode 字符在 utf-8 编码下的码位长度可能不同，如下表所示:\n\n |Unicode 编码(16进制) | utf-8 码位(二进制)|\n |----|----|\n |000000-00007F       |0xxxxxxx|\n |000080-0007FF|110xxxxx 10xxxxxx|\n |000800-00FFFF|1110xxxx 10xxxxxx 10xxxxxx|\n |010000-1FFFFF|11110xxx10xxxxxx10xxxxxx10xxxxxx|\n\n\n1. escape\n1. encodeURIComponent encodeURI\n\nencodeURI()不会对本身属于URI的特殊字符进行编码，例如冒号、正斜杠、问号和井字号；而encodeURIComponent()则会对它发现的任何非标准字符进行编码。\n使用encodeURI()编码后的结果是除了空格之外的其他字符都原封不动，只有空格被替换成了%20。而encodeURIComponent()方法则会使用对应的编码替换所有非字母数字字符。\n\nescape 在处理 0xff 之外字符的时候，是直接使用字符的 unicode 在前面加上一个 「%u」,举例说明。\n而encodeURI则是先进行 UTF-8，再在 UTF-8 的每个字节码前加上一个 「%」；\nencodeURI 是W3C 的标准，而 Escape 是非标准。\n\n\nJavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为2个字节。对于那些需要4个字节储存的字符（Unicode 码点大于0xFFFF的字符），JavaScript 会认为它们是两个字符。\n","slug":"stringencode","published":1,"updated":"2020-06-29T06:22:24.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5se09001uyy8k3xjon3gt","content":"<p>ASCII、UTF-8\\16<br>unicode GB2312 </p>\n<p>字符是语言中的概念，但是计算机只认识 0 和 1 这两个数字。因此要想让计算机存储、处理字符串，就必须把字符串用二进制表示出来。在 ASCII 码中，每个英文字母都有自己对应的数字。我们通常把 ASCII 码称为字符集，也就是字符的集合。了解 ASCII 码的同学应该都知道小写字母 a 可以用 97 来表示，97 也被称为字符 a 在 ASCII 字符集中的码位。</p>\n<p>可见把字符转换成码位的过程类似于加密(encrypt)，我们称之为编码(encode)，反则则类似于解密，我们称之为解码(decode)</p>\n<p>字符转换成码位的过程是编码，这个过程有无数种实现方式。比如 a -&gt; 97、b -&gt; 98 这种就是 ASCII 编码，因为 255 = 2 ^ 8，所以所有 ASCII 编码下的码位恰好都可以由一个字节表示。</p>\n<p>除了中国人之外，各个地区的人也都根据自己的语言拓展了相应的编码方式。这样unicode就出现了。</p>\n<p>缺点：过于庞大、</p>\n<p>中文的utf-8 大于GBk的两个字节</p>\n<p>因此，我们有了对 Unicode 字符再次编码的编码方式，常见的有 utf-8，utf-16 等。UTF 表示 Unicode Transfer Format，因此是针对 Unicode 字符集的一系列编码方式。utf-8 是一种变长编码，也就是说不同的 Unicode 字符在 utf-8 编码下的码位长度可能不同，如下表所示:</p>\n<table>\n<thead>\n<tr>\n<th>Unicode 编码(16进制)</th>\n<th>utf-8 码位(二进制)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>000000-00007F</td>\n<td>0xxxxxxx</td>\n</tr>\n<tr>\n<td>000080-0007FF</td>\n<td>110xxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>000800-00FFFF</td>\n<td>1110xxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>010000-1FFFFF</td>\n<td>11110xxx10xxxxxx10xxxxxx10xxxxxx</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>escape</li>\n<li>encodeURIComponent encodeURI</li>\n</ol>\n<p>encodeURI()不会对本身属于URI的特殊字符进行编码，例如冒号、正斜杠、问号和井字号；而encodeURIComponent()则会对它发现的任何非标准字符进行编码。<br>使用encodeURI()编码后的结果是除了空格之外的其他字符都原封不动，只有空格被替换成了%20。而encodeURIComponent()方法则会使用对应的编码替换所有非字母数字字符。</p>\n<p>escape 在处理 0xff 之外字符的时候，是直接使用字符的 unicode 在前面加上一个 「%u」,举例说明。<br>而encodeURI则是先进行 UTF-8，再在 UTF-8 的每个字节码前加上一个 「%」；<br>encodeURI 是W3C 的标准，而 Escape 是非标准。</p>\n<p>JavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为2个字节。对于那些需要4个字节储存的字符（Unicode 码点大于0xFFFF的字符），JavaScript 会认为它们是两个字符。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ASCII、UTF-8\\16<br>unicode GB2312 </p>\n<p>字符是语言中的概念，但是计算机只认识 0 和 1 这两个数字。因此要想让计算机存储、处理字符串，就必须把字符串用二进制表示出来。在 ASCII 码中，每个英文字母都有自己对应的数字。我们通常把 ASCII 码称为字符集，也就是字符的集合。了解 ASCII 码的同学应该都知道小写字母 a 可以用 97 来表示，97 也被称为字符 a 在 ASCII 字符集中的码位。</p>\n<p>可见把字符转换成码位的过程类似于加密(encrypt)，我们称之为编码(encode)，反则则类似于解密，我们称之为解码(decode)</p>\n<p>字符转换成码位的过程是编码，这个过程有无数种实现方式。比如 a -&gt; 97、b -&gt; 98 这种就是 ASCII 编码，因为 255 = 2 ^ 8，所以所有 ASCII 编码下的码位恰好都可以由一个字节表示。</p>\n<p>除了中国人之外，各个地区的人也都根据自己的语言拓展了相应的编码方式。这样unicode就出现了。</p>\n<p>缺点：过于庞大、</p>\n<p>中文的utf-8 大于GBk的两个字节</p>\n<p>因此，我们有了对 Unicode 字符再次编码的编码方式，常见的有 utf-8，utf-16 等。UTF 表示 Unicode Transfer Format，因此是针对 Unicode 字符集的一系列编码方式。utf-8 是一种变长编码，也就是说不同的 Unicode 字符在 utf-8 编码下的码位长度可能不同，如下表所示:</p>\n<table>\n<thead>\n<tr>\n<th>Unicode 编码(16进制)</th>\n<th>utf-8 码位(二进制)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>000000-00007F</td>\n<td>0xxxxxxx</td>\n</tr>\n<tr>\n<td>000080-0007FF</td>\n<td>110xxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>000800-00FFFF</td>\n<td>1110xxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>010000-1FFFFF</td>\n<td>11110xxx10xxxxxx10xxxxxx10xxxxxx</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>escape</li>\n<li>encodeURIComponent encodeURI</li>\n</ol>\n<p>encodeURI()不会对本身属于URI的特殊字符进行编码，例如冒号、正斜杠、问号和井字号；而encodeURIComponent()则会对它发现的任何非标准字符进行编码。<br>使用encodeURI()编码后的结果是除了空格之外的其他字符都原封不动，只有空格被替换成了%20。而encodeURIComponent()方法则会使用对应的编码替换所有非字母数字字符。</p>\n<p>escape 在处理 0xff 之外字符的时候，是直接使用字符的 unicode 在前面加上一个 「%u」,举例说明。<br>而encodeURI则是先进行 UTF-8，再在 UTF-8 的每个字节码前加上一个 「%」；<br>encodeURI 是W3C 的标准，而 Escape 是非标准。</p>\n<p>JavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为2个字节。对于那些需要4个字节储存的字符（Unicode 码点大于0xFFFF的字符），JavaScript 会认为它们是两个字符。</p>\n"},{"title":"security","date":"2019-04-25T08:49:58.000Z","_content":"\n```text\n参考： https://juejin.im/post/5bad9140e51d450e935c6d64#heading-9\n\nxss 攻击类型分为：反射、存储和dom \n\n在纯前端渲染中，我们会明确的告诉浏览器：下面要设置的内容是文本（.innerText），还是属性（.setAttribute），还是样式（.style）等等。浏览器不会被轻易的被欺骗，执行预期外的代码了.\n\n在很多内部、管理系统中，采用纯前端渲染是非常合适的。但对于性能要求高，或有 SEO 需求的页面，我们仍然要面对拼接 HTML 的问题。需要html 转义。\n\n利用模板引擎\n开启模板引擎自带的 HTML 转义功能。例如：\n在 ejs 中，尽量使用 <%= data %> 而不是 <%- data %>；\n在 doT.js 中，尽量使用 {{! data } 而不是 {{= data }；\n在 FreeMarker 中，确保引擎版本高于 2.3.24，并且选择正确的 freemarker.core.OutputFormat。\n避免内联事件\n尽量不要使用 onLoad=\"onload('{{data}}')\"、onClick=\"go('{{action}}')\" 这种拼接内联事件的写法。在 JavaScript 中通过 .addEventlistener() 事件绑定会更安全。\n避免拼接 HTML\n前端采用拼接 HTML 的方法比较危险，如果框架允许，使用 createElement、setAttribute 之类的方法实现。或者采用比较成熟的渲染框架，如 Vue/React 等。\n时刻保持警惕\n在插入位置为 DOM 属性、链接等位置时，要打起精神，严加防范。\n增加攻击难度，降低攻击后果\n通过 CSP、输入长度配置、接口安全措施等方法，增加攻击的难度，降低攻击的后果。\n主动检测和发现\n可使用 XSS 攻击字符串和自动扫描工具寻找潜在的 XSS 漏洞。\n\n```\n\n\n\n","source":"_posts/security.md","raw":"---\ntitle: security\ndate: 2019-04-25 16:49:58\ntags: 安全\n---\n\n```text\n参考： https://juejin.im/post/5bad9140e51d450e935c6d64#heading-9\n\nxss 攻击类型分为：反射、存储和dom \n\n在纯前端渲染中，我们会明确的告诉浏览器：下面要设置的内容是文本（.innerText），还是属性（.setAttribute），还是样式（.style）等等。浏览器不会被轻易的被欺骗，执行预期外的代码了.\n\n在很多内部、管理系统中，采用纯前端渲染是非常合适的。但对于性能要求高，或有 SEO 需求的页面，我们仍然要面对拼接 HTML 的问题。需要html 转义。\n\n利用模板引擎\n开启模板引擎自带的 HTML 转义功能。例如：\n在 ejs 中，尽量使用 <%= data %> 而不是 <%- data %>；\n在 doT.js 中，尽量使用 {{! data } 而不是 {{= data }；\n在 FreeMarker 中，确保引擎版本高于 2.3.24，并且选择正确的 freemarker.core.OutputFormat。\n避免内联事件\n尽量不要使用 onLoad=\"onload('{{data}}')\"、onClick=\"go('{{action}}')\" 这种拼接内联事件的写法。在 JavaScript 中通过 .addEventlistener() 事件绑定会更安全。\n避免拼接 HTML\n前端采用拼接 HTML 的方法比较危险，如果框架允许，使用 createElement、setAttribute 之类的方法实现。或者采用比较成熟的渲染框架，如 Vue/React 等。\n时刻保持警惕\n在插入位置为 DOM 属性、链接等位置时，要打起精神，严加防范。\n增加攻击难度，降低攻击后果\n通过 CSP、输入长度配置、接口安全措施等方法，增加攻击的难度，降低攻击的后果。\n主动检测和发现\n可使用 XSS 攻击字符串和自动扫描工具寻找潜在的 XSS 漏洞。\n\n```\n\n\n\n","slug":"security","published":1,"updated":"2020-08-20T01:59:23.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5se0a001wyy8khyv2rcii","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参考： https://juejin.im/post/5bad9140e51d450e935c6d64#heading-9</span><br><span class=\"line\"></span><br><span class=\"line\">xss 攻击类型分为：反射、存储和dom </span><br><span class=\"line\"></span><br><span class=\"line\">在纯前端渲染中，我们会明确的告诉浏览器：下面要设置的内容是文本（.innerText），还是属性（.setAttribute），还是样式（.style）等等。浏览器不会被轻易的被欺骗，执行预期外的代码了.</span><br><span class=\"line\"></span><br><span class=\"line\">在很多内部、管理系统中，采用纯前端渲染是非常合适的。但对于性能要求高，或有 SEO 需求的页面，我们仍然要面对拼接 HTML 的问题。需要html 转义。</span><br><span class=\"line\"></span><br><span class=\"line\">利用模板引擎</span><br><span class=\"line\">开启模板引擎自带的 HTML 转义功能。例如：</span><br><span class=\"line\">在 ejs 中，尽量使用 &lt;%= data %&gt; 而不是 &lt;%- data %&gt;；</span><br><span class=\"line\">在 doT.js 中，尽量使用 &#123;&#123;! data &#125; 而不是 &#123;&#123;= data &#125;；</span><br><span class=\"line\">在 FreeMarker 中，确保引擎版本高于 2.3.24，并且选择正确的 freemarker.core.OutputFormat。</span><br><span class=\"line\">避免内联事件</span><br><span class=\"line\">尽量不要使用 onLoad=&quot;onload(&apos;&#123;&#123;data&#125;&#125;&apos;)&quot;、onClick=&quot;go(&apos;&#123;&#123;action&#125;&#125;&apos;)&quot; 这种拼接内联事件的写法。在 JavaScript 中通过 .addEventlistener() 事件绑定会更安全。</span><br><span class=\"line\">避免拼接 HTML</span><br><span class=\"line\">前端采用拼接 HTML 的方法比较危险，如果框架允许，使用 createElement、setAttribute 之类的方法实现。或者采用比较成熟的渲染框架，如 Vue/React 等。</span><br><span class=\"line\">时刻保持警惕</span><br><span class=\"line\">在插入位置为 DOM 属性、链接等位置时，要打起精神，严加防范。</span><br><span class=\"line\">增加攻击难度，降低攻击后果</span><br><span class=\"line\">通过 CSP、输入长度配置、接口安全措施等方法，增加攻击的难度，降低攻击的后果。</span><br><span class=\"line\">主动检测和发现</span><br><span class=\"line\">可使用 XSS 攻击字符串和自动扫描工具寻找潜在的 XSS 漏洞。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参考： https://juejin.im/post/5bad9140e51d450e935c6d64#heading-9</span><br><span class=\"line\"></span><br><span class=\"line\">xss 攻击类型分为：反射、存储和dom </span><br><span class=\"line\"></span><br><span class=\"line\">在纯前端渲染中，我们会明确的告诉浏览器：下面要设置的内容是文本（.innerText），还是属性（.setAttribute），还是样式（.style）等等。浏览器不会被轻易的被欺骗，执行预期外的代码了.</span><br><span class=\"line\"></span><br><span class=\"line\">在很多内部、管理系统中，采用纯前端渲染是非常合适的。但对于性能要求高，或有 SEO 需求的页面，我们仍然要面对拼接 HTML 的问题。需要html 转义。</span><br><span class=\"line\"></span><br><span class=\"line\">利用模板引擎</span><br><span class=\"line\">开启模板引擎自带的 HTML 转义功能。例如：</span><br><span class=\"line\">在 ejs 中，尽量使用 &lt;%= data %&gt; 而不是 &lt;%- data %&gt;；</span><br><span class=\"line\">在 doT.js 中，尽量使用 &#123;&#123;! data &#125; 而不是 &#123;&#123;= data &#125;；</span><br><span class=\"line\">在 FreeMarker 中，确保引擎版本高于 2.3.24，并且选择正确的 freemarker.core.OutputFormat。</span><br><span class=\"line\">避免内联事件</span><br><span class=\"line\">尽量不要使用 onLoad=&quot;onload(&apos;&#123;&#123;data&#125;&#125;&apos;)&quot;、onClick=&quot;go(&apos;&#123;&#123;action&#125;&#125;&apos;)&quot; 这种拼接内联事件的写法。在 JavaScript 中通过 .addEventlistener() 事件绑定会更安全。</span><br><span class=\"line\">避免拼接 HTML</span><br><span class=\"line\">前端采用拼接 HTML 的方法比较危险，如果框架允许，使用 createElement、setAttribute 之类的方法实现。或者采用比较成熟的渲染框架，如 Vue/React 等。</span><br><span class=\"line\">时刻保持警惕</span><br><span class=\"line\">在插入位置为 DOM 属性、链接等位置时，要打起精神，严加防范。</span><br><span class=\"line\">增加攻击难度，降低攻击后果</span><br><span class=\"line\">通过 CSP、输入长度配置、接口安全措施等方法，增加攻击的难度，降低攻击的后果。</span><br><span class=\"line\">主动检测和发现</span><br><span class=\"line\">可使用 XSS 攻击字符串和自动扫描工具寻找潜在的 XSS 漏洞。</span><br></pre></td></tr></table></figure>\n"},{"title":"typescript","date":"2019-02-25T02:16:27.000Z","_content":"\n### 只读属性\n```\ninterface Point {\n    readonly x: number;\n    readonly y: number;\n}\n```\n\n###  接口继承  \n    支持多重继承, 比较有意思的事接口可以继承类\n\n### 枚举类型\n ```\n enum Color {Red, Green, Blue}\n let c: Color = Color.Green;\n```\n\n### any \n```angular2html\nlet notSure: any = 4;\nnotSure = \"maybe a string instead\";\nnotSure = false; // okay, definitely a boolean\n\n```\n### 类型断言 \nas 和 <>\n\n### 剩余参数 \n```angular2html\nfunction invokeLater(args: any[], callback: (...args: any[]) => void) {\n    /* ... Invoke callback with 'args' ... */\n}\n\n// Unsound - invokeLater \"might\" provide any number of arguments\ninvokeLater([1, 2], (x, y) => console.log(x + ', ' + y));\n\n```\n\n### 交叉类型 特色\nPerson & Serializable & Loggable同时是 Person 和 Serializable 和 Loggable。 就是说这个类型的对象同时拥有了这三种类型的成员。\n\n### 联合类型 \n 如果一个值的类型是 A | B，我们能够 确定的是它包含了 A 和 B中共有的成员。 -- 用来做代码检查的\n ```\ninterface Bird {\n    fly();\n    layEggs();\n}\n\ninterface Fish {\n    swim();\n    layEggs();\n}\n\nfunction getSmallPet(): Fish | Bird {\n    // ...\n}\n\nlet pet = getSmallPet();\npet.layEggs(); // okay\npet.swim();    // error\n\n需要类型转换：(<Fish>pet).swim()\n\n```\n \n###  谓词为 parameterName is Type这种形式\n```\nfunction isFish(pet: Fish | Bird): pet is Fish {\n    return (<Fish>pet).swim !== undefined;\n}\n```\n### 参数指定默认值 \n```angular2html\nfunction keepWholeObject(wholeObject: { a: string, b?: number }) {\n    let { a, b = 1001 } = wholeObject;\n}\nTypeScript编译器不允许展开泛型函数上的类型参数 。 这个特性会在TypeScript的未来版本中考虑实现。 ...\n\n\nfunction buildName(firstName: string, lastName: string = 'Cat') {\n    return firstName + ' ' + lastName;\n}\n\n```\n### 数组泛型   \nArray<number>  \n\nlet list: any[] = ['Xcat Liu', 25, { website: 'http://xcatliu.com' }];\n\n用接口表示数组：\n\ninterface NumberArray {\n    [index: number]: number;\n}\n\n### 声明语句 \ndeclare var jQuery: (string) => any;\n\n我们约定声明文件以 .d.ts 为后缀。\n### 元组 \n```angular2html\nlet xcatliu: [string, number];\nxcatliu[0] = 'Xcat Liu';\nxcatliu[1] = 25;\n```\n### 命名空间  来源于C# \nnamespace Validation {}\n\nimport 别名\n```angular2html\namespace Shapes {\n    export namespace Polygons {\n        export class Triangle { }\n        export class Square { }\n    }\n}\n\nimport polygons = Shapes.Polygons;\nlet sq = new polygons.Square();\n```\n### index \n```angular2html\ntype Index = 'a' | 'b' | 'c'\ntype FromIndex = { [k in Index]?: number }\n\nconst good: FromIndex = {b:1, c:2}\n\n// Error:\n// Type '{ b: number; c: number; d: number; }' is not assignable to type 'FromIndex'.\n// Object literal may only specify known properties, and 'd' does not exist in type 'FromIndex'.\nconst bad: FromIndex = {b:1, c:2, d:3};\n```\n### this 参数\n```angular2html\ninterface Card {\n    suit: string;\n    card: number;\n}\ninterface Deck {\n    suits: string[];\n    cards: number[];\n    createCardPicker(this: Deck): () => Card;\n}\nlet deck: Deck = {\n    suits: [\"hearts\", \"spades\", \"clubs\", \"diamonds\"],\n    cards: Array(52),\n    // NOTE: The function now explicitly specifies that its callee must be of type Deck\n    createCardPicker: function(this: Deck) {\n        return () => {\n            let pickedCard = Math.floor(Math.random() * 52);\n            let pickedSuit = Math.floor(pickedCard / 13);\n\n            return {suit: this.suits[pickedSuit], card: pickedCard % 13};\n        }\n    }\n}\n```\n\n","source":"_posts/typescript.md","raw":"---\ntitle: typescript\ndate: 2019-02-25 10:16:27\ntags: ts\n---\n\n### 只读属性\n```\ninterface Point {\n    readonly x: number;\n    readonly y: number;\n}\n```\n\n###  接口继承  \n    支持多重继承, 比较有意思的事接口可以继承类\n\n### 枚举类型\n ```\n enum Color {Red, Green, Blue}\n let c: Color = Color.Green;\n```\n\n### any \n```angular2html\nlet notSure: any = 4;\nnotSure = \"maybe a string instead\";\nnotSure = false; // okay, definitely a boolean\n\n```\n### 类型断言 \nas 和 <>\n\n### 剩余参数 \n```angular2html\nfunction invokeLater(args: any[], callback: (...args: any[]) => void) {\n    /* ... Invoke callback with 'args' ... */\n}\n\n// Unsound - invokeLater \"might\" provide any number of arguments\ninvokeLater([1, 2], (x, y) => console.log(x + ', ' + y));\n\n```\n\n### 交叉类型 特色\nPerson & Serializable & Loggable同时是 Person 和 Serializable 和 Loggable。 就是说这个类型的对象同时拥有了这三种类型的成员。\n\n### 联合类型 \n 如果一个值的类型是 A | B，我们能够 确定的是它包含了 A 和 B中共有的成员。 -- 用来做代码检查的\n ```\ninterface Bird {\n    fly();\n    layEggs();\n}\n\ninterface Fish {\n    swim();\n    layEggs();\n}\n\nfunction getSmallPet(): Fish | Bird {\n    // ...\n}\n\nlet pet = getSmallPet();\npet.layEggs(); // okay\npet.swim();    // error\n\n需要类型转换：(<Fish>pet).swim()\n\n```\n \n###  谓词为 parameterName is Type这种形式\n```\nfunction isFish(pet: Fish | Bird): pet is Fish {\n    return (<Fish>pet).swim !== undefined;\n}\n```\n### 参数指定默认值 \n```angular2html\nfunction keepWholeObject(wholeObject: { a: string, b?: number }) {\n    let { a, b = 1001 } = wholeObject;\n}\nTypeScript编译器不允许展开泛型函数上的类型参数 。 这个特性会在TypeScript的未来版本中考虑实现。 ...\n\n\nfunction buildName(firstName: string, lastName: string = 'Cat') {\n    return firstName + ' ' + lastName;\n}\n\n```\n### 数组泛型   \nArray<number>  \n\nlet list: any[] = ['Xcat Liu', 25, { website: 'http://xcatliu.com' }];\n\n用接口表示数组：\n\ninterface NumberArray {\n    [index: number]: number;\n}\n\n### 声明语句 \ndeclare var jQuery: (string) => any;\n\n我们约定声明文件以 .d.ts 为后缀。\n### 元组 \n```angular2html\nlet xcatliu: [string, number];\nxcatliu[0] = 'Xcat Liu';\nxcatliu[1] = 25;\n```\n### 命名空间  来源于C# \nnamespace Validation {}\n\nimport 别名\n```angular2html\namespace Shapes {\n    export namespace Polygons {\n        export class Triangle { }\n        export class Square { }\n    }\n}\n\nimport polygons = Shapes.Polygons;\nlet sq = new polygons.Square();\n```\n### index \n```angular2html\ntype Index = 'a' | 'b' | 'c'\ntype FromIndex = { [k in Index]?: number }\n\nconst good: FromIndex = {b:1, c:2}\n\n// Error:\n// Type '{ b: number; c: number; d: number; }' is not assignable to type 'FromIndex'.\n// Object literal may only specify known properties, and 'd' does not exist in type 'FromIndex'.\nconst bad: FromIndex = {b:1, c:2, d:3};\n```\n### this 参数\n```angular2html\ninterface Card {\n    suit: string;\n    card: number;\n}\ninterface Deck {\n    suits: string[];\n    cards: number[];\n    createCardPicker(this: Deck): () => Card;\n}\nlet deck: Deck = {\n    suits: [\"hearts\", \"spades\", \"clubs\", \"diamonds\"],\n    cards: Array(52),\n    // NOTE: The function now explicitly specifies that its callee must be of type Deck\n    createCardPicker: function(this: Deck) {\n        return () => {\n            let pickedCard = Math.floor(Math.random() * 52);\n            let pickedSuit = Math.floor(pickedCard / 13);\n\n            return {suit: this.suits[pickedSuit], card: pickedCard % 13};\n        }\n    }\n}\n```\n\n","slug":"typescript","published":1,"updated":"2020-06-29T06:22:24.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5se0b001yyy8k12cc98uq","content":"<h3 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Point &#123;</span><br><span class=\"line\">    readonly x: number;</span><br><span class=\"line\">    readonly y: number;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"接口继承\"><a href=\"#接口继承\" class=\"headerlink\" title=\"接口继承\"></a>接口继承</h3><pre><code>支持多重继承, 比较有意思的事接口可以继承类\n</code></pre><h3 id=\"枚举类型\"><a href=\"#枚举类型\" class=\"headerlink\" title=\"枚举类型\"></a>枚举类型</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Color &#123;Red, Green, Blue&#125;</span><br><span class=\"line\">let c: Color = Color.Green;</span><br></pre></td></tr></table></figure>\n<h3 id=\"any\"><a href=\"#any\" class=\"headerlink\" title=\"any\"></a>any</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let notSure: any = 4;</span><br><span class=\"line\">notSure = &quot;maybe a string instead&quot;;</span><br><span class=\"line\">notSure = false; // okay, definitely a boolean</span><br></pre></td></tr></table></figure>\n<h3 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h3><p>as 和 &lt;&gt;</p>\n<h3 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function invokeLater(args: any[], callback: (...args: any[]) =&gt; void) &#123;</span><br><span class=\"line\">    /* ... Invoke callback with &apos;args&apos; ... */</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Unsound - invokeLater &quot;might&quot; provide any number of arguments</span><br><span class=\"line\">invokeLater([1, 2], (x, y) =&gt; console.log(x + &apos;, &apos; + y));</span><br></pre></td></tr></table></figure>\n<h3 id=\"交叉类型-特色\"><a href=\"#交叉类型-特色\" class=\"headerlink\" title=\"交叉类型 特色\"></a>交叉类型 特色</h3><p>Person &amp; Serializable &amp; Loggable同时是 Person 和 Serializable 和 Loggable。 就是说这个类型的对象同时拥有了这三种类型的成员。</p>\n<h3 id=\"联合类型\"><a href=\"#联合类型\" class=\"headerlink\" title=\"联合类型\"></a>联合类型</h3><p> 如果一个值的类型是 A | B，我们能够 确定的是它包含了 A 和 B中共有的成员。 – 用来做代码检查的<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Bird &#123;</span><br><span class=\"line\">    fly();</span><br><span class=\"line\">    layEggs();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Fish &#123;</span><br><span class=\"line\">    swim();</span><br><span class=\"line\">    layEggs();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function getSmallPet(): Fish | Bird &#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let pet = getSmallPet();</span><br><span class=\"line\">pet.layEggs(); // okay</span><br><span class=\"line\">pet.swim();    // error</span><br><span class=\"line\"></span><br><span class=\"line\">需要类型转换：(&lt;Fish&gt;pet).swim()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"谓词为-parameterName-is-Type这种形式\"><a href=\"#谓词为-parameterName-is-Type这种形式\" class=\"headerlink\" title=\"谓词为 parameterName is Type这种形式\"></a>谓词为 parameterName is Type这种形式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isFish(pet: Fish | Bird): pet is Fish &#123;</span><br><span class=\"line\">    return (&lt;Fish&gt;pet).swim !== undefined;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数指定默认值\"><a href=\"#参数指定默认值\" class=\"headerlink\" title=\"参数指定默认值\"></a>参数指定默认值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function keepWholeObject(wholeObject: &#123; a: string, b?: number &#125;) &#123;</span><br><span class=\"line\">    let &#123; a, b = 1001 &#125; = wholeObject;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">TypeScript编译器不允许展开泛型函数上的类型参数 。 这个特性会在TypeScript的未来版本中考虑实现。 ...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">function buildName(firstName: string, lastName: string = &apos;Cat&apos;) &#123;</span><br><span class=\"line\">    return firstName + &apos; &apos; + lastName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组泛型\"><a href=\"#数组泛型\" class=\"headerlink\" title=\"数组泛型\"></a>数组泛型</h3><p>Array<number>  </number></p>\n<p>let list: any[] = [‘Xcat Liu’, 25, { website: ‘<a href=\"http://xcatliu.com&#39;\" target=\"_blank\" rel=\"noopener\">http://xcatliu.com&#39;</a> }];</p>\n<p>用接口表示数组：</p>\n<p>interface NumberArray {<br>    [index: number]: number;<br>}</p>\n<h3 id=\"声明语句\"><a href=\"#声明语句\" class=\"headerlink\" title=\"声明语句\"></a>声明语句</h3><p>declare var jQuery: (string) =&gt; any;</p>\n<p>我们约定声明文件以 .d.ts 为后缀。</p>\n<h3 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let xcatliu: [string, number];</span><br><span class=\"line\">xcatliu[0] = &apos;Xcat Liu&apos;;</span><br><span class=\"line\">xcatliu[1] = 25;</span><br></pre></td></tr></table></figure>\n<h3 id=\"命名空间-来源于C\"><a href=\"#命名空间-来源于C\" class=\"headerlink\" title=\"命名空间  来源于C\"></a>命名空间  来源于C</h3><p>namespace Validation {}</p>\n<p>import 别名<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">amespace Shapes &#123;</span><br><span class=\"line\">    export namespace Polygons &#123;</span><br><span class=\"line\">        export class Triangle &#123; &#125;</span><br><span class=\"line\">        export class Square &#123; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">import polygons = Shapes.Polygons;</span><br><span class=\"line\">let sq = new polygons.Square();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index\"></a>index</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Index = &apos;a&apos; | &apos;b&apos; | &apos;c&apos;</span><br><span class=\"line\">type FromIndex = &#123; [k in Index]?: number &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const good: FromIndex = &#123;b:1, c:2&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Error:</span><br><span class=\"line\">// Type &apos;&#123; b: number; c: number; d: number; &#125;&apos; is not assignable to type &apos;FromIndex&apos;.</span><br><span class=\"line\">// Object literal may only specify known properties, and &apos;d&apos; does not exist in type &apos;FromIndex&apos;.</span><br><span class=\"line\">const bad: FromIndex = &#123;b:1, c:2, d:3&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"this-参数\"><a href=\"#this-参数\" class=\"headerlink\" title=\"this 参数\"></a>this 参数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Card &#123;</span><br><span class=\"line\">    suit: string;</span><br><span class=\"line\">    card: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Deck &#123;</span><br><span class=\"line\">    suits: string[];</span><br><span class=\"line\">    cards: number[];</span><br><span class=\"line\">    createCardPicker(this: Deck): () =&gt; Card;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let deck: Deck = &#123;</span><br><span class=\"line\">    suits: [&quot;hearts&quot;, &quot;spades&quot;, &quot;clubs&quot;, &quot;diamonds&quot;],</span><br><span class=\"line\">    cards: Array(52),</span><br><span class=\"line\">    // NOTE: The function now explicitly specifies that its callee must be of type Deck</span><br><span class=\"line\">    createCardPicker: function(this: Deck) &#123;</span><br><span class=\"line\">        return () =&gt; &#123;</span><br><span class=\"line\">            let pickedCard = Math.floor(Math.random() * 52);</span><br><span class=\"line\">            let pickedSuit = Math.floor(pickedCard / 13);</span><br><span class=\"line\"></span><br><span class=\"line\">            return &#123;suit: this.suits[pickedSuit], card: pickedCard % 13&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Point &#123;</span><br><span class=\"line\">    readonly x: number;</span><br><span class=\"line\">    readonly y: number;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"接口继承\"><a href=\"#接口继承\" class=\"headerlink\" title=\"接口继承\"></a>接口继承</h3><pre><code>支持多重继承, 比较有意思的事接口可以继承类\n</code></pre><h3 id=\"枚举类型\"><a href=\"#枚举类型\" class=\"headerlink\" title=\"枚举类型\"></a>枚举类型</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Color &#123;Red, Green, Blue&#125;</span><br><span class=\"line\">let c: Color = Color.Green;</span><br></pre></td></tr></table></figure>\n<h3 id=\"any\"><a href=\"#any\" class=\"headerlink\" title=\"any\"></a>any</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let notSure: any = 4;</span><br><span class=\"line\">notSure = &quot;maybe a string instead&quot;;</span><br><span class=\"line\">notSure = false; // okay, definitely a boolean</span><br></pre></td></tr></table></figure>\n<h3 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h3><p>as 和 &lt;&gt;</p>\n<h3 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function invokeLater(args: any[], callback: (...args: any[]) =&gt; void) &#123;</span><br><span class=\"line\">    /* ... Invoke callback with &apos;args&apos; ... */</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Unsound - invokeLater &quot;might&quot; provide any number of arguments</span><br><span class=\"line\">invokeLater([1, 2], (x, y) =&gt; console.log(x + &apos;, &apos; + y));</span><br></pre></td></tr></table></figure>\n<h3 id=\"交叉类型-特色\"><a href=\"#交叉类型-特色\" class=\"headerlink\" title=\"交叉类型 特色\"></a>交叉类型 特色</h3><p>Person &amp; Serializable &amp; Loggable同时是 Person 和 Serializable 和 Loggable。 就是说这个类型的对象同时拥有了这三种类型的成员。</p>\n<h3 id=\"联合类型\"><a href=\"#联合类型\" class=\"headerlink\" title=\"联合类型\"></a>联合类型</h3><p> 如果一个值的类型是 A | B，我们能够 确定的是它包含了 A 和 B中共有的成员。 – 用来做代码检查的<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Bird &#123;</span><br><span class=\"line\">    fly();</span><br><span class=\"line\">    layEggs();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Fish &#123;</span><br><span class=\"line\">    swim();</span><br><span class=\"line\">    layEggs();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function getSmallPet(): Fish | Bird &#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let pet = getSmallPet();</span><br><span class=\"line\">pet.layEggs(); // okay</span><br><span class=\"line\">pet.swim();    // error</span><br><span class=\"line\"></span><br><span class=\"line\">需要类型转换：(&lt;Fish&gt;pet).swim()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"谓词为-parameterName-is-Type这种形式\"><a href=\"#谓词为-parameterName-is-Type这种形式\" class=\"headerlink\" title=\"谓词为 parameterName is Type这种形式\"></a>谓词为 parameterName is Type这种形式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isFish(pet: Fish | Bird): pet is Fish &#123;</span><br><span class=\"line\">    return (&lt;Fish&gt;pet).swim !== undefined;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数指定默认值\"><a href=\"#参数指定默认值\" class=\"headerlink\" title=\"参数指定默认值\"></a>参数指定默认值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function keepWholeObject(wholeObject: &#123; a: string, b?: number &#125;) &#123;</span><br><span class=\"line\">    let &#123; a, b = 1001 &#125; = wholeObject;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">TypeScript编译器不允许展开泛型函数上的类型参数 。 这个特性会在TypeScript的未来版本中考虑实现。 ...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">function buildName(firstName: string, lastName: string = &apos;Cat&apos;) &#123;</span><br><span class=\"line\">    return firstName + &apos; &apos; + lastName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组泛型\"><a href=\"#数组泛型\" class=\"headerlink\" title=\"数组泛型\"></a>数组泛型</h3><p>Array<number>  </number></p>\n<p>let list: any[] = [‘Xcat Liu’, 25, { website: ‘<a href=\"http://xcatliu.com&#39;\" target=\"_blank\" rel=\"noopener\">http://xcatliu.com&#39;</a> }];</p>\n<p>用接口表示数组：</p>\n<p>interface NumberArray {<br>    [index: number]: number;<br>}</p>\n<h3 id=\"声明语句\"><a href=\"#声明语句\" class=\"headerlink\" title=\"声明语句\"></a>声明语句</h3><p>declare var jQuery: (string) =&gt; any;</p>\n<p>我们约定声明文件以 .d.ts 为后缀。</p>\n<h3 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let xcatliu: [string, number];</span><br><span class=\"line\">xcatliu[0] = &apos;Xcat Liu&apos;;</span><br><span class=\"line\">xcatliu[1] = 25;</span><br></pre></td></tr></table></figure>\n<h3 id=\"命名空间-来源于C\"><a href=\"#命名空间-来源于C\" class=\"headerlink\" title=\"命名空间  来源于C\"></a>命名空间  来源于C</h3><p>namespace Validation {}</p>\n<p>import 别名<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">amespace Shapes &#123;</span><br><span class=\"line\">    export namespace Polygons &#123;</span><br><span class=\"line\">        export class Triangle &#123; &#125;</span><br><span class=\"line\">        export class Square &#123; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">import polygons = Shapes.Polygons;</span><br><span class=\"line\">let sq = new polygons.Square();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index\"></a>index</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Index = &apos;a&apos; | &apos;b&apos; | &apos;c&apos;</span><br><span class=\"line\">type FromIndex = &#123; [k in Index]?: number &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const good: FromIndex = &#123;b:1, c:2&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Error:</span><br><span class=\"line\">// Type &apos;&#123; b: number; c: number; d: number; &#125;&apos; is not assignable to type &apos;FromIndex&apos;.</span><br><span class=\"line\">// Object literal may only specify known properties, and &apos;d&apos; does not exist in type &apos;FromIndex&apos;.</span><br><span class=\"line\">const bad: FromIndex = &#123;b:1, c:2, d:3&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"this-参数\"><a href=\"#this-参数\" class=\"headerlink\" title=\"this 参数\"></a>this 参数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Card &#123;</span><br><span class=\"line\">    suit: string;</span><br><span class=\"line\">    card: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Deck &#123;</span><br><span class=\"line\">    suits: string[];</span><br><span class=\"line\">    cards: number[];</span><br><span class=\"line\">    createCardPicker(this: Deck): () =&gt; Card;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let deck: Deck = &#123;</span><br><span class=\"line\">    suits: [&quot;hearts&quot;, &quot;spades&quot;, &quot;clubs&quot;, &quot;diamonds&quot;],</span><br><span class=\"line\">    cards: Array(52),</span><br><span class=\"line\">    // NOTE: The function now explicitly specifies that its callee must be of type Deck</span><br><span class=\"line\">    createCardPicker: function(this: Deck) &#123;</span><br><span class=\"line\">        return () =&gt; &#123;</span><br><span class=\"line\">            let pickedCard = Math.floor(Math.random() * 52);</span><br><span class=\"line\">            let pickedSuit = Math.floor(pickedCard / 13);</span><br><span class=\"line\"></span><br><span class=\"line\">            return &#123;suit: this.suits[pickedSuit], card: pickedCard % 13&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"vue","date":"2017-01-19T07:19:03.000Z","_content":"### js\n1. 这里对该vm注册一个Watcher实例，Watcher的getter为updateComponent函数，用于触发所有渲染所需要用到的数据的getter，进行依赖收集，就是在mounted的时候进行依赖收集。\n\n用户的自定义 watcher 要优先于渲染 watcher 执行；因为用户自定义 watcher 是在渲染 watcher 之前创建的。Vm._watcher.update()\n\n1. 对于渲染 watcher 而言，它在执行 this.get() 方法求值的时候，会执行 getter 方法： updateComponent = () => {\n   updateComponent = () => { vm._update(vm._render(), hydrating)\n1. vue diff 算法\n```text\n//相同的话进行patch\npatchVnode (oldVnode, vnode) {\n    const el = vnode.el = oldVnode.el\n    let i, oldCh = oldVnode.children, ch = vnode.children\n    if (oldVnode === vnode) return\n    if (oldVnode.text !== null && vnode.text !== null && oldVnode.text !== vnode.text) {\n        api.setTextContent(el, vnode.text)\n    }else {\n        updateEle(el, vnode, oldVnode)\n    \tif (oldCh && ch && oldCh !== ch) {\n            updateChildren(el, oldCh, ch)\n    \t}else if (ch){\n            createEle(vnode) //create el's children dom\n    \t}else if (oldCh){\n            api.removeChildren(el)\n    \t}\n    }\n}\n```\n1. 提高性能\n```text\n\n压缩代码\n提取页面公共资源 基础包cdn\\splitchunks\nTree shaking \nscope hoisting\n图片压缩 \n动态polyfill \n\n```\n1. 事件代理：1. 减少事件注册，节省内存。 2. 简化了dom更新时，上面的事件off与on 操作。focus，blur之类的，本身就没用冒泡的特性\n2. 函数式组件与普通组件的区别\n   \n   函数式组件需要在声明组件是指定functional\n   函数式组件不需要实例化，所以没有this,this通过render函数的第二个参数来代替\n   函数式组件没有生命周期钩子函数，不能使用计算属性，watch等等\n   函数式组件不能通过$emit对外暴露事件，调用事件只能通过context.listeners.click的方式调用外部传入的事件\n   因为函数式组件是没有实例化的，所以在外部通过ref去引用组件时，实际引用的是HTMLElement\n   函数式组件的props可以不用显示声明，所以没有在props里面声明的属性都会被自动隐式解析为prop,而普通组件所有未声明的属性都被解析到$attrs里面，并自动挂载到组件根元素上面(可以通过inheritAttrs属性禁止)\n\n3. 「适合引入自动化测试的场景：」\n\n公共库类的开发维护\n中长期项目的迭代/重构\n引用了不可控的第三方依赖\n\n1. Observer 是一个类，它的作用是给对象的属性添加 getter 和 setter，用于依赖收集和派发更新。Render 时通过getter 进行依赖收集。\n2. Dep 是一个 Class，它定义了一些属性和方法，这里需要特别注意的是它有一个静态属性 target，这是一个全局唯一 Watcher，这是一个非常巧妙的设计，\n因为在同一时间只能有一个全局的 Watcher 被计算，另外它的自身属性 subs 也是 Watcher 的数组。\n3. vue array 拦截\n```js\n /*取得原生数组的原型*/\nconst arrayProto = Array.prototype\n/*创建一个新的数组对象，修改该对象上的数组的七个方法，防止污染原生数组方法*/\nexport const arrayMethods = Object.create(arrayProto)\n```\n1. 首先通过 Vue.options = Object.create(null) 创建一个空对象，然后遍历 ASSET_TYPES: \n    Vue.options.components = {}\n    Vue.options.directives = {} \n    Vue.options.filters = {}\n \n3. vue 父子组件：\n加载渲染过程\n父beforeCreate->父created->父beforeMount->子beforeCreate->子created->子beforeMount->子mounted->父mounted\n父beforeUpdate->子beforeUpdate->子updated->父updated\n父组件更新过程\n父beforeUpdate->父updated\n销毁过程\n父beforeDestroy->子beforeDestroy->子destroyed->父destroyed\n\n1. for await...of循环，则是用于遍历异步的 Iterator 接口。\n```javascript\nfunction main(inputFilePath) {\n  const readStream = fs.createReadStream(\n    inputFilePath,\n    { encoding: 'utf8', highWaterMark: 1024 }\n  );\n  readStream.on('data', (chunk) => {\n    console.log('>>> '+chunk);\n  });\n  readStream.on('end', () => {\n    console.log('### DONE ###');\n  });\n}\n\n// 异步遍历器写法\nasync function main(inputFilePath) {\n  const readStream = fs.createReadStream(\n    inputFilePath,\n    { encoding: 'utf8', highWaterMark: 1024 }\n  );\n\n  for await (const chunk of readStream) {\n    console.log('>>> '+chunk);\n  }\n  console.log('### DONE ###');\n}\n```  \n1. Vm.$watch this._data.$$state 的值，/* 检测store中的_committing的值，如果是true代表不是通过mutation的方法修改的 */\n2. /* 这里new了一个Vue对象，运用Vue内部的响应式实现注册state以及computed*/\n    store._vm = new Vue({ data: {$$state: state }, computed })\n3. this.$on('hook:updated', () => {})\n \n1. Vue.config.optionMergeStrategies  \n1.  在Vue2.5之前，使用函数式组件只能通过JSX的方式，在之后，可以通过模板语法来生命函数式组件\n ```html\n <!--在template 上面添加 functional属性-->\n<template functional>\n  <img :src=\"avatar ? avatar : 'default-avatar.png'\" />\n</template>\n<!--根据上一节第六条，可以省略声明props-->\n ```\n\n1. Vue beforecreated:data vue 实例化、init events\n \n1.  作用域插槽 this.$scopedSlots.header({ text: this.headerText })\n   \n2. 全局的components ，通过vue 的options merge 到组件上。 最后通过 extend(Vue.options.components, builtInComponents) 把一些内置组件扩展到 Vue.options.components 上，\nVue 的内置组件目前有 <keep-alive>、<transition> 和 <transition-group> 组件，这也就是为什么我们在其它组件中使用 <keep-alive> 组件不需要注册的原因\n\n11. components，filters，directives\n   两个对象合并的时候，不会相互覆盖，而是 权重小的 被放到 权重大 的 的原型上\n13. 数组叠加   包括生命周期函数和watch\n14. 函数合并叠加   包括选项：data，provide，权重大的优先 \n1. 最主要最关键的原因是函数式组件不需要实例化，无状态，没有生命周期，所以渲染性能要好于普通组件\n   函数式组件结构比较简单，代码结构更清晰\n4. inject 用法：\n\n```javastript\n   inject: {\n   // 注入的属性名称 parentForm: {\n   // 通过 from 指定从哪个属性注入\n   from: 'customForm',\n    default: () => ({ size: 'default' }) } },\n```\n1. redirective  \n\n```text\nbinding：一个对象，包含以下 property：\nname：指令名，不包括 v- 前缀。\nvalue：指令的绑定值，例如：v-my-directive=\"1 + 1\" 中，绑定值为 2。\noldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。\nexpression：字符串形式的指令表达式。例如 v-my-directive=\"1 + 1\" 中，表达式为 \"1 + 1\"。\narg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 \"foo\"。\nmodifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。\n```\n\n1. Async validator\n ```javascript\n asyncValidator: (rule, value) => {\n        return new Promise((resolve, reject) => {\n          if (value < 18) {\n            reject(\"too young\");  // reject with error message\n          } else {\n            resolve();\n          }\n        });\n      }\n ```\n\n1.  ref用创建一个包装对象，只具备一个响应式属性value，如果将对象指定为ref的值，该对象将被reactive方法深度遍历。如果传入 ref 的是一个对象，将调用 reactive 方法进行深层响应转换。所以ref 可以解构\n1. history 模式：\n```text\n通过 history.pushState() 方法改变地址栏\n监听 popstate 事件\n根据当前路由地址找到对应组件重新渲染\n```\n\n1. `<input type=\"text\" v-on=\"{ input:onInput,focus:onFocus,blur:onBlur, }\">`   同样 v-bind \n1. keepalive mouted 只会执行一次，vnode上关联的component intance,在patch 阶段会转换为真实的dom.\n1.\n```javascript\n/*parse解析得到ast树*/\n  \n    const ast = parse(template.trim(), options)\n    /*\n      将AST树进行优化\n      优化的目标：生成模板AST树，检测不需要进行DOM改变的静态子树。\n      一旦检测到这些静态树，我们就能做以下这些事情：\n      1.把它们变成常数，这样我们就再也不需要每次重新渲染时创建新的节点了。\n      2.在patch的过程中直接跳过。\n   */\n    optimize(ast, options)\n```\n\n  optimize的主要作用是标记static静态节点，这是Vue在编译过程中的一处优化，后面当update更新界面时，会有一个patch的过程，diff算法会直接跳过静态节点，从而减少了比较的过程，优化了patch的性能。\n  \n1. Render\n// resolve template/el and convert to render function 。mounted 方法中\n在此方法中调用 vm._render 方法先生成虚拟 Node(render 函数返回的就是vnode)，最终调用 vm._update 更新 DOM。\n\nUpdate 调用的时机：1.首次渲染 2.数据更新 \n\n \n1. \n1. Vue 通过在内存中实现文档结构的虚拟表示来解决此问题，其中虚拟节点（VNode）表示 DOM 树中的节点。当需要操纵时，可以在虚拟 DOM的 内存中执行计算和操作，而不是在真实 DOM 上进行操纵。这自然会更快，并且允许虚拟 DOM 算法计算出最优化的方式来更新实际 DOM 结构。\n1. \nVue 不会对 provide 中的变量进行响应式处理。所以，要想 inject 接受的变量是响应式的，provide 提供的变量本身就需要是响应式的。单项数据流\n\ninheritAttrs: false, // 可以关闭自动挂载到组件根元素上的没有在props声明的属性\n1. 子组件不需要任何处理，只需要在父组件引用的时候通过@hook来监听即可，代码重写如下：<Child @hook:mounted=\"doSomething”/>\n1. 数据动态变化：\n   export const store = Vue.observable({ count: 0 });\n1. vue life cycle\n```\nparse阶段：使用正在表达式将template进行字符串解析，得到指令、class、style等数据，生成抽象语法树 AST。\noptimize阶段：寻找 AST 中的静态节点进行标记，为后面 VNode 的 patch 过程中对比做优化。被标记为 static 的节点在后面的 diff 算法中会被直接忽略，不做详细的比较。\n\ngenerate阶段：根据 AST 结构拼接生成 render 函数的字符串。\n```\n [life cycle](https://user-gold-cdn.xitu.io/2019/12/26/16f40a08cac6d3cb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n1. 每个逻辑关注点的代码现在都在复合函数中并置在一起。 这大大减少了在处理大型组件时需要不断“跳转”的情况。 组合函数也可以在编辑器中折叠，使组件更容易扫描:\n\n1. js 链接 defer 和 async\n1. keep-alive 的实现正是用到了 LRU 策略,将最近访问的组件 push 到 this.keys 最后面,this.keys[0]也就是最久没被访问的组件,当缓存实例超过 max 设置值,删除 this.keys[0]\n\n```text\ndefer 和 async 都是并行加载的，主要区别在于下载后何时执行。\n每一个 async 属性的脚本都在它下载结束之后立刻执行，所以就有可能出现脚本执行顺序被打乱的情况\n每一个 defer 属性的脚本会在 HTML 解析完成后, DOMContentLoaded 之前，按照 DOM 中的顺序执行（ie>=10）\ndefer 和 async 都只适用于外部脚本文件，对与内联的 script 标签是不起作用\n\n```\n1. preload 用 “as” 或者用 “type” 属性来表示他们请求资源的优先级（比如说 preload 使用 as=\"style\" 属性将获得最高的优先级）。没有 “as” 属性的将被看作异步请求，“Early”意味着在所有未被预加载的图片请求之前被请求（“late”意味着之后）\n \n \n \n2. Vue.config.errorHandler   \n3. v-pre  场景:vue 是响应式系统,但是有些静态的标签不需要多次编译,这样可以节省性能\n4. v-loader transformAssetUrls  \n在模板编译过程中，编译器可以将某些特性转换为 require 调用，例如 src 中的 URL。因此这些目标资源可以被 webpack 处理。例如 <img src=\"./foo.png\"> 会找到你文件系统中的 ./foo.png 并将其作为一个依赖包含在你的包里\n\n1. view router加key  场景:由于 Vue 会复用相同组件, 即 /page/1 => /page/2 或者 /page?id=1 => /page?id=2 这类链接跳转时, 将不在执行created, mounted之类的钩子\n\n1.![事件循环](https://github.com/ryansecret/blog/blob/master/source/asset/eventloop.jpg)\n1. 生命周期\n```text\nbeforeCreate阶段：vue实例的挂载元素el和数据对象data都是undefined，还没有初始化。\ncreated阶段：vue实例的数据对象data有了，可以访问里面的数据和方法，未挂载到DOM，el还没有\nbeforeMount阶段：vue实例的el和data都初始化了，但是挂载之前为虚拟的dom节点\nmounted阶段：vue实例挂载到真实DOM上，就可以通过DOM获取DOM节点\nbeforeUpdate阶段：响应式数据更新时调用，发生在虚拟DOM打补丁之前，适合在更新之前访问现有的DOM，比如手动移除已添加的事件监听器\nupdated阶段：虚拟DOM重新渲染和打补丁之后调用，组成新的DOM已经更新，避免在这个钩子函数中操作数据，防止死循环\nbeforeDestroy阶段：实例销毁前调用，实例还可以用，this能获取到实例，常用于销毁定时器，解绑事件\ndestroyed阶段：实例销毁后调用，调用后所有事件监听器会被移除，所有的子实例都会被销毁  \n```         \n1. __proto__ 属性，这是历史遗留的非标准的语法，但在现代浏览器中广泛实现。获得原型的更可靠方法是使用 Object.getPrototypeOf(new Object())；例如：\n ```javascript\nconst car = {}\nconst list = []\n \nconsole.log(Object.getPrototypeOf(car));\nconsole.log(Object.getPrototypeOf(list));\n```\n \n### 内部机制 \n\nvue-loader \n\ncompiler 目录包含 Vue.js 所有编译相关的代码。它包括把模板解析成 ast 语法树，ast 语法树优化，代码生成等功能。\n\n\n微任务的例子：micortask\n\nprocess.nextTick\npromise\nObject.observe\n\n宏任务的例子：\n\nsetTimeout\nsetInterval\nsetImmediate\nI/O\n\n需要注意的是node 和 浏览器的 event loop 是有区别的(需要注意的是node v12.0 之后和浏览器处理事一致的)：\n\n```text\n浏览器的事件循环：\n\n执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；\n全局Script代码执行完毕后，调用栈Stack会清空；\n从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；\n继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；\nmicrotask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；\n取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；\n执行完毕后，调用栈Stack为空；\n重复第3-7个步骤；\n重复第3-7个步骤；\n……\n\nNodeJS中微队列主要有2个：\nNext Tick Queue：是放置process.nextTick(callback)的回调任务的\nOther Micro Queue：放置其他microtask，比如Promise等\n\n具体参见： https://segmentfault.com/a/1190000016278115\n\n```\n\n\n``` \ntimers 阶段：这个阶段执行timer（setTimeout、setInterval）的回调\nI/O callbacks 阶段：执行一些系统调用错误，比如网络通信的错误回调\nidle, prepare 阶段：仅node内部使用\npoll 阶段：获取新的I/O事件, 适当的条件下node将阻塞在这里\ncheck 阶段：执行 setImmediate() 的回调\nclose callbacks 阶段：执行 socket 的 close 事件回调\n\ntimers 是事件循环的第一个阶段，Node 会去检查有无已过期的timer，如果有则把它的回调压入timer的任务队列中等待执行，事实上，Node 并不能保证timer在预设时间到了就会立即执行，因为Node对timer的过期检查不一定靠谱，它会受机器上其它运行程序影响，或者那个时间点主线程不空闲。比如下面的代码，setTimeout() 和 setImmediate() 的执行顺序是不确定的。\n\npoll 阶段\npoll 阶段主要有2个功能：\n\n处理 poll 队列的事件\n当有已超时的 timer，执行它的回调函数\neven loop将同步执行poll队列里的回调，直到队列为空或执行的回调达到系统上限（上限具体多少未详），接下来even loop会去检查有无预设的setImmediate()，分两种情况：\n\n若有预设的setImmediate(), event loop将结束poll阶段进入check阶段，并执行check阶段的任务队列\n若没有预设的setImmediate()，event loop将阻塞在该阶段等待\n注意一个细节，没有setImmediate()会导致event loop阻塞在poll阶段，这样之前设置的timer岂不是执行不了了？所以咧，在poll阶段event loop会有一个检查机制，检查timer队列是否为空，如果timer队列非空，event loop就开始下一轮事件循环，即重新进入到timer阶段。\n\ncheck 阶段\nsetImmediate()的回调会被加入check队列中，从event loop的阶段图可以知道，check阶段的执行顺序在poll阶段之后。\n\n\n回顾上一篇，浏览器环境下，microtask的任务队列是每个macrotask执行完之后执行。而在Node.js中，microtask会在事件循环的各个阶段之间执行，也就是一个阶段执行完毕，就会去执行microtask队列的任务。详见：http://lynnelv.github.io/js-event-loop-nodejs\n\nprocess.nextTick() 会在各个事件阶段之间执行，一旦执行，要直到nextTick队列被清空，才会进入到下一个事件阶段，所以如果递归调用 process.nextTick()，会导致出现I/O starving（饥饿）的问题\n\n官方文档：https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\n\n```\n\n\n\n###vitual dom\n \n\nVD 最大的特点是将页面的状态抽象为 JS 对象的形式，配合不同的渲染工具，使跨平台渲染成为可能。如 React 就借助 VD 实现了服务端渲染、浏览器渲染和移动端渲染等功能。\njs计算-》生成渲染树-》渲染页面\n\n通过VD的比较，我们可以将多个操作合并成一个批量的操作，从而减少dom重排的次数，进而缩短了生成渲染树和绘制所花的时间。\n\n在mounted 方法中会将template 编译成为render 方法。这是一个编译过程，render中会调用createElement 创建vnode。\n\n![流程图片](https://ustbhuangyi.github.io/vue-analysis/assets/new-vue.png)\n\n\n回到 mountComponent 函数的过程，我们已经知道 createElement 是如何创建了一个 VNode，接下来就是要把这个 VNode 渲染成一个真实的 DOM 并渲染出来，这个过程是通过 vm._update 完成的\n\nVue 的 _update 是实例的一个私有方法，它被调用的时机有 2 个，一个是首次渲染，一个是数据更新的时候；由于我们这一章节只分析首次渲染部分，数据更新部分会在之后分析响应式原理的时候涉及。_update 方法的作用是把 VNode 渲染成真实的 DOM\n\n\n在我们之前对 setter 的分析过程知道，当响应式数据发送变化后，触发了 watcher.update()，只是把这个 watcher 推送到一个队列中，在 nextTick 后才会真正执行 watcher 的回调函数。而一旦我们设置了 sync，就可以在当前 Tick 中同步执行 watcher 的回调函数。\n \n\n##### 修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()\n\n```\n<!-- 阻止单击事件冒泡 -->\n<a v-on:click.stop=\"doThis\"></a>\n<!-- 提交事件不再重载页面 -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n<!-- 修饰符可以串联  -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n<!-- 只有修饰符 -->\n<form v-on:submit.prevent></form>\n<!-- 添加事件侦听器时使用事件捕获模式 -->\n<div v-on:click.capture=\"doThis\">...</div>\n<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->\n<div v-on:click.self=\"doThat\">...</div>\n<a v-on:click.once=\"doThis\"></a>\n```\n \n\n##### 按键修饰符\n记住所有的 keyCode 比较困难，组合键 所以 Vue 为最常用的按键提供了别名：\n\n```\n<!-- Alt + C -->\n<input v-on:keyup.alt.67=\"clear\">\n\n<!-- Ctrl + Click -->\n<div v-on:click.ctrl=\"doSomething\">Do something</div>\n<!-- 同上 -->\n<input v-on:keyup.enter=\"submit\">\n<!-- 缩写语法 -->\n<input @keyup.enter=\"submit\">\n全部的按键别名：\n.enter\n.tab\n.delete (捕获 “删除” 和 “退格” 键)\n.esc\n.space\n.up\n.down\n.left\n.right\n```\n \n\n#### mock vuex\n```\nsetup() {\n          useLoginStatusProvide()\n          return {}\n        },\n\n\n        import { provide, inject, ref } from '@vue/composition-api'\n\nconst StatusSymbol = Symbol('status')\n\nexport const useLoginStatusProvide = () => {\n  const loginStatus = ref(false)\n\n  const setLoginStatus = val => (loginStatus.value = val)\n  provide(StatusSymbol, { loginStatus, setLoginStatus })\n}\n\nexport const useLoginStatusInject = () => {\n  const context = inject(StatusSymbol)\n  if (!context) throw new Error('useLoginStatusInject must be used after useLoginStatusProvide')\n\n  return context\n}\n\n```","source":"_posts/vue.md","raw":"---\ntitle: vue\ndate: 2017-01-19 15:19:03\ntags: vue eventloop js \n---\n### js\n1. 这里对该vm注册一个Watcher实例，Watcher的getter为updateComponent函数，用于触发所有渲染所需要用到的数据的getter，进行依赖收集，就是在mounted的时候进行依赖收集。\n\n用户的自定义 watcher 要优先于渲染 watcher 执行；因为用户自定义 watcher 是在渲染 watcher 之前创建的。Vm._watcher.update()\n\n1. 对于渲染 watcher 而言，它在执行 this.get() 方法求值的时候，会执行 getter 方法： updateComponent = () => {\n   updateComponent = () => { vm._update(vm._render(), hydrating)\n1. vue diff 算法\n```text\n//相同的话进行patch\npatchVnode (oldVnode, vnode) {\n    const el = vnode.el = oldVnode.el\n    let i, oldCh = oldVnode.children, ch = vnode.children\n    if (oldVnode === vnode) return\n    if (oldVnode.text !== null && vnode.text !== null && oldVnode.text !== vnode.text) {\n        api.setTextContent(el, vnode.text)\n    }else {\n        updateEle(el, vnode, oldVnode)\n    \tif (oldCh && ch && oldCh !== ch) {\n            updateChildren(el, oldCh, ch)\n    \t}else if (ch){\n            createEle(vnode) //create el's children dom\n    \t}else if (oldCh){\n            api.removeChildren(el)\n    \t}\n    }\n}\n```\n1. 提高性能\n```text\n\n压缩代码\n提取页面公共资源 基础包cdn\\splitchunks\nTree shaking \nscope hoisting\n图片压缩 \n动态polyfill \n\n```\n1. 事件代理：1. 减少事件注册，节省内存。 2. 简化了dom更新时，上面的事件off与on 操作。focus，blur之类的，本身就没用冒泡的特性\n2. 函数式组件与普通组件的区别\n   \n   函数式组件需要在声明组件是指定functional\n   函数式组件不需要实例化，所以没有this,this通过render函数的第二个参数来代替\n   函数式组件没有生命周期钩子函数，不能使用计算属性，watch等等\n   函数式组件不能通过$emit对外暴露事件，调用事件只能通过context.listeners.click的方式调用外部传入的事件\n   因为函数式组件是没有实例化的，所以在外部通过ref去引用组件时，实际引用的是HTMLElement\n   函数式组件的props可以不用显示声明，所以没有在props里面声明的属性都会被自动隐式解析为prop,而普通组件所有未声明的属性都被解析到$attrs里面，并自动挂载到组件根元素上面(可以通过inheritAttrs属性禁止)\n\n3. 「适合引入自动化测试的场景：」\n\n公共库类的开发维护\n中长期项目的迭代/重构\n引用了不可控的第三方依赖\n\n1. Observer 是一个类，它的作用是给对象的属性添加 getter 和 setter，用于依赖收集和派发更新。Render 时通过getter 进行依赖收集。\n2. Dep 是一个 Class，它定义了一些属性和方法，这里需要特别注意的是它有一个静态属性 target，这是一个全局唯一 Watcher，这是一个非常巧妙的设计，\n因为在同一时间只能有一个全局的 Watcher 被计算，另外它的自身属性 subs 也是 Watcher 的数组。\n3. vue array 拦截\n```js\n /*取得原生数组的原型*/\nconst arrayProto = Array.prototype\n/*创建一个新的数组对象，修改该对象上的数组的七个方法，防止污染原生数组方法*/\nexport const arrayMethods = Object.create(arrayProto)\n```\n1. 首先通过 Vue.options = Object.create(null) 创建一个空对象，然后遍历 ASSET_TYPES: \n    Vue.options.components = {}\n    Vue.options.directives = {} \n    Vue.options.filters = {}\n \n3. vue 父子组件：\n加载渲染过程\n父beforeCreate->父created->父beforeMount->子beforeCreate->子created->子beforeMount->子mounted->父mounted\n父beforeUpdate->子beforeUpdate->子updated->父updated\n父组件更新过程\n父beforeUpdate->父updated\n销毁过程\n父beforeDestroy->子beforeDestroy->子destroyed->父destroyed\n\n1. for await...of循环，则是用于遍历异步的 Iterator 接口。\n```javascript\nfunction main(inputFilePath) {\n  const readStream = fs.createReadStream(\n    inputFilePath,\n    { encoding: 'utf8', highWaterMark: 1024 }\n  );\n  readStream.on('data', (chunk) => {\n    console.log('>>> '+chunk);\n  });\n  readStream.on('end', () => {\n    console.log('### DONE ###');\n  });\n}\n\n// 异步遍历器写法\nasync function main(inputFilePath) {\n  const readStream = fs.createReadStream(\n    inputFilePath,\n    { encoding: 'utf8', highWaterMark: 1024 }\n  );\n\n  for await (const chunk of readStream) {\n    console.log('>>> '+chunk);\n  }\n  console.log('### DONE ###');\n}\n```  \n1. Vm.$watch this._data.$$state 的值，/* 检测store中的_committing的值，如果是true代表不是通过mutation的方法修改的 */\n2. /* 这里new了一个Vue对象，运用Vue内部的响应式实现注册state以及computed*/\n    store._vm = new Vue({ data: {$$state: state }, computed })\n3. this.$on('hook:updated', () => {})\n \n1. Vue.config.optionMergeStrategies  \n1.  在Vue2.5之前，使用函数式组件只能通过JSX的方式，在之后，可以通过模板语法来生命函数式组件\n ```html\n <!--在template 上面添加 functional属性-->\n<template functional>\n  <img :src=\"avatar ? avatar : 'default-avatar.png'\" />\n</template>\n<!--根据上一节第六条，可以省略声明props-->\n ```\n\n1. Vue beforecreated:data vue 实例化、init events\n \n1.  作用域插槽 this.$scopedSlots.header({ text: this.headerText })\n   \n2. 全局的components ，通过vue 的options merge 到组件上。 最后通过 extend(Vue.options.components, builtInComponents) 把一些内置组件扩展到 Vue.options.components 上，\nVue 的内置组件目前有 <keep-alive>、<transition> 和 <transition-group> 组件，这也就是为什么我们在其它组件中使用 <keep-alive> 组件不需要注册的原因\n\n11. components，filters，directives\n   两个对象合并的时候，不会相互覆盖，而是 权重小的 被放到 权重大 的 的原型上\n13. 数组叠加   包括生命周期函数和watch\n14. 函数合并叠加   包括选项：data，provide，权重大的优先 \n1. 最主要最关键的原因是函数式组件不需要实例化，无状态，没有生命周期，所以渲染性能要好于普通组件\n   函数式组件结构比较简单，代码结构更清晰\n4. inject 用法：\n\n```javastript\n   inject: {\n   // 注入的属性名称 parentForm: {\n   // 通过 from 指定从哪个属性注入\n   from: 'customForm',\n    default: () => ({ size: 'default' }) } },\n```\n1. redirective  \n\n```text\nbinding：一个对象，包含以下 property：\nname：指令名，不包括 v- 前缀。\nvalue：指令的绑定值，例如：v-my-directive=\"1 + 1\" 中，绑定值为 2。\noldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。\nexpression：字符串形式的指令表达式。例如 v-my-directive=\"1 + 1\" 中，表达式为 \"1 + 1\"。\narg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 \"foo\"。\nmodifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。\n```\n\n1. Async validator\n ```javascript\n asyncValidator: (rule, value) => {\n        return new Promise((resolve, reject) => {\n          if (value < 18) {\n            reject(\"too young\");  // reject with error message\n          } else {\n            resolve();\n          }\n        });\n      }\n ```\n\n1.  ref用创建一个包装对象，只具备一个响应式属性value，如果将对象指定为ref的值，该对象将被reactive方法深度遍历。如果传入 ref 的是一个对象，将调用 reactive 方法进行深层响应转换。所以ref 可以解构\n1. history 模式：\n```text\n通过 history.pushState() 方法改变地址栏\n监听 popstate 事件\n根据当前路由地址找到对应组件重新渲染\n```\n\n1. `<input type=\"text\" v-on=\"{ input:onInput,focus:onFocus,blur:onBlur, }\">`   同样 v-bind \n1. keepalive mouted 只会执行一次，vnode上关联的component intance,在patch 阶段会转换为真实的dom.\n1.\n```javascript\n/*parse解析得到ast树*/\n  \n    const ast = parse(template.trim(), options)\n    /*\n      将AST树进行优化\n      优化的目标：生成模板AST树，检测不需要进行DOM改变的静态子树。\n      一旦检测到这些静态树，我们就能做以下这些事情：\n      1.把它们变成常数，这样我们就再也不需要每次重新渲染时创建新的节点了。\n      2.在patch的过程中直接跳过。\n   */\n    optimize(ast, options)\n```\n\n  optimize的主要作用是标记static静态节点，这是Vue在编译过程中的一处优化，后面当update更新界面时，会有一个patch的过程，diff算法会直接跳过静态节点，从而减少了比较的过程，优化了patch的性能。\n  \n1. Render\n// resolve template/el and convert to render function 。mounted 方法中\n在此方法中调用 vm._render 方法先生成虚拟 Node(render 函数返回的就是vnode)，最终调用 vm._update 更新 DOM。\n\nUpdate 调用的时机：1.首次渲染 2.数据更新 \n\n \n1. \n1. Vue 通过在内存中实现文档结构的虚拟表示来解决此问题，其中虚拟节点（VNode）表示 DOM 树中的节点。当需要操纵时，可以在虚拟 DOM的 内存中执行计算和操作，而不是在真实 DOM 上进行操纵。这自然会更快，并且允许虚拟 DOM 算法计算出最优化的方式来更新实际 DOM 结构。\n1. \nVue 不会对 provide 中的变量进行响应式处理。所以，要想 inject 接受的变量是响应式的，provide 提供的变量本身就需要是响应式的。单项数据流\n\ninheritAttrs: false, // 可以关闭自动挂载到组件根元素上的没有在props声明的属性\n1. 子组件不需要任何处理，只需要在父组件引用的时候通过@hook来监听即可，代码重写如下：<Child @hook:mounted=\"doSomething”/>\n1. 数据动态变化：\n   export const store = Vue.observable({ count: 0 });\n1. vue life cycle\n```\nparse阶段：使用正在表达式将template进行字符串解析，得到指令、class、style等数据，生成抽象语法树 AST。\noptimize阶段：寻找 AST 中的静态节点进行标记，为后面 VNode 的 patch 过程中对比做优化。被标记为 static 的节点在后面的 diff 算法中会被直接忽略，不做详细的比较。\n\ngenerate阶段：根据 AST 结构拼接生成 render 函数的字符串。\n```\n [life cycle](https://user-gold-cdn.xitu.io/2019/12/26/16f40a08cac6d3cb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n1. 每个逻辑关注点的代码现在都在复合函数中并置在一起。 这大大减少了在处理大型组件时需要不断“跳转”的情况。 组合函数也可以在编辑器中折叠，使组件更容易扫描:\n\n1. js 链接 defer 和 async\n1. keep-alive 的实现正是用到了 LRU 策略,将最近访问的组件 push 到 this.keys 最后面,this.keys[0]也就是最久没被访问的组件,当缓存实例超过 max 设置值,删除 this.keys[0]\n\n```text\ndefer 和 async 都是并行加载的，主要区别在于下载后何时执行。\n每一个 async 属性的脚本都在它下载结束之后立刻执行，所以就有可能出现脚本执行顺序被打乱的情况\n每一个 defer 属性的脚本会在 HTML 解析完成后, DOMContentLoaded 之前，按照 DOM 中的顺序执行（ie>=10）\ndefer 和 async 都只适用于外部脚本文件，对与内联的 script 标签是不起作用\n\n```\n1. preload 用 “as” 或者用 “type” 属性来表示他们请求资源的优先级（比如说 preload 使用 as=\"style\" 属性将获得最高的优先级）。没有 “as” 属性的将被看作异步请求，“Early”意味着在所有未被预加载的图片请求之前被请求（“late”意味着之后）\n \n \n \n2. Vue.config.errorHandler   \n3. v-pre  场景:vue 是响应式系统,但是有些静态的标签不需要多次编译,这样可以节省性能\n4. v-loader transformAssetUrls  \n在模板编译过程中，编译器可以将某些特性转换为 require 调用，例如 src 中的 URL。因此这些目标资源可以被 webpack 处理。例如 <img src=\"./foo.png\"> 会找到你文件系统中的 ./foo.png 并将其作为一个依赖包含在你的包里\n\n1. view router加key  场景:由于 Vue 会复用相同组件, 即 /page/1 => /page/2 或者 /page?id=1 => /page?id=2 这类链接跳转时, 将不在执行created, mounted之类的钩子\n\n1.![事件循环](https://github.com/ryansecret/blog/blob/master/source/asset/eventloop.jpg)\n1. 生命周期\n```text\nbeforeCreate阶段：vue实例的挂载元素el和数据对象data都是undefined，还没有初始化。\ncreated阶段：vue实例的数据对象data有了，可以访问里面的数据和方法，未挂载到DOM，el还没有\nbeforeMount阶段：vue实例的el和data都初始化了，但是挂载之前为虚拟的dom节点\nmounted阶段：vue实例挂载到真实DOM上，就可以通过DOM获取DOM节点\nbeforeUpdate阶段：响应式数据更新时调用，发生在虚拟DOM打补丁之前，适合在更新之前访问现有的DOM，比如手动移除已添加的事件监听器\nupdated阶段：虚拟DOM重新渲染和打补丁之后调用，组成新的DOM已经更新，避免在这个钩子函数中操作数据，防止死循环\nbeforeDestroy阶段：实例销毁前调用，实例还可以用，this能获取到实例，常用于销毁定时器，解绑事件\ndestroyed阶段：实例销毁后调用，调用后所有事件监听器会被移除，所有的子实例都会被销毁  \n```         \n1. __proto__ 属性，这是历史遗留的非标准的语法，但在现代浏览器中广泛实现。获得原型的更可靠方法是使用 Object.getPrototypeOf(new Object())；例如：\n ```javascript\nconst car = {}\nconst list = []\n \nconsole.log(Object.getPrototypeOf(car));\nconsole.log(Object.getPrototypeOf(list));\n```\n \n### 内部机制 \n\nvue-loader \n\ncompiler 目录包含 Vue.js 所有编译相关的代码。它包括把模板解析成 ast 语法树，ast 语法树优化，代码生成等功能。\n\n\n微任务的例子：micortask\n\nprocess.nextTick\npromise\nObject.observe\n\n宏任务的例子：\n\nsetTimeout\nsetInterval\nsetImmediate\nI/O\n\n需要注意的是node 和 浏览器的 event loop 是有区别的(需要注意的是node v12.0 之后和浏览器处理事一致的)：\n\n```text\n浏览器的事件循环：\n\n执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；\n全局Script代码执行完毕后，调用栈Stack会清空；\n从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；\n继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；\nmicrotask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；\n取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；\n执行完毕后，调用栈Stack为空；\n重复第3-7个步骤；\n重复第3-7个步骤；\n……\n\nNodeJS中微队列主要有2个：\nNext Tick Queue：是放置process.nextTick(callback)的回调任务的\nOther Micro Queue：放置其他microtask，比如Promise等\n\n具体参见： https://segmentfault.com/a/1190000016278115\n\n```\n\n\n``` \ntimers 阶段：这个阶段执行timer（setTimeout、setInterval）的回调\nI/O callbacks 阶段：执行一些系统调用错误，比如网络通信的错误回调\nidle, prepare 阶段：仅node内部使用\npoll 阶段：获取新的I/O事件, 适当的条件下node将阻塞在这里\ncheck 阶段：执行 setImmediate() 的回调\nclose callbacks 阶段：执行 socket 的 close 事件回调\n\ntimers 是事件循环的第一个阶段，Node 会去检查有无已过期的timer，如果有则把它的回调压入timer的任务队列中等待执行，事实上，Node 并不能保证timer在预设时间到了就会立即执行，因为Node对timer的过期检查不一定靠谱，它会受机器上其它运行程序影响，或者那个时间点主线程不空闲。比如下面的代码，setTimeout() 和 setImmediate() 的执行顺序是不确定的。\n\npoll 阶段\npoll 阶段主要有2个功能：\n\n处理 poll 队列的事件\n当有已超时的 timer，执行它的回调函数\neven loop将同步执行poll队列里的回调，直到队列为空或执行的回调达到系统上限（上限具体多少未详），接下来even loop会去检查有无预设的setImmediate()，分两种情况：\n\n若有预设的setImmediate(), event loop将结束poll阶段进入check阶段，并执行check阶段的任务队列\n若没有预设的setImmediate()，event loop将阻塞在该阶段等待\n注意一个细节，没有setImmediate()会导致event loop阻塞在poll阶段，这样之前设置的timer岂不是执行不了了？所以咧，在poll阶段event loop会有一个检查机制，检查timer队列是否为空，如果timer队列非空，event loop就开始下一轮事件循环，即重新进入到timer阶段。\n\ncheck 阶段\nsetImmediate()的回调会被加入check队列中，从event loop的阶段图可以知道，check阶段的执行顺序在poll阶段之后。\n\n\n回顾上一篇，浏览器环境下，microtask的任务队列是每个macrotask执行完之后执行。而在Node.js中，microtask会在事件循环的各个阶段之间执行，也就是一个阶段执行完毕，就会去执行microtask队列的任务。详见：http://lynnelv.github.io/js-event-loop-nodejs\n\nprocess.nextTick() 会在各个事件阶段之间执行，一旦执行，要直到nextTick队列被清空，才会进入到下一个事件阶段，所以如果递归调用 process.nextTick()，会导致出现I/O starving（饥饿）的问题\n\n官方文档：https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\n\n```\n\n\n\n###vitual dom\n \n\nVD 最大的特点是将页面的状态抽象为 JS 对象的形式，配合不同的渲染工具，使跨平台渲染成为可能。如 React 就借助 VD 实现了服务端渲染、浏览器渲染和移动端渲染等功能。\njs计算-》生成渲染树-》渲染页面\n\n通过VD的比较，我们可以将多个操作合并成一个批量的操作，从而减少dom重排的次数，进而缩短了生成渲染树和绘制所花的时间。\n\n在mounted 方法中会将template 编译成为render 方法。这是一个编译过程，render中会调用createElement 创建vnode。\n\n![流程图片](https://ustbhuangyi.github.io/vue-analysis/assets/new-vue.png)\n\n\n回到 mountComponent 函数的过程，我们已经知道 createElement 是如何创建了一个 VNode，接下来就是要把这个 VNode 渲染成一个真实的 DOM 并渲染出来，这个过程是通过 vm._update 完成的\n\nVue 的 _update 是实例的一个私有方法，它被调用的时机有 2 个，一个是首次渲染，一个是数据更新的时候；由于我们这一章节只分析首次渲染部分，数据更新部分会在之后分析响应式原理的时候涉及。_update 方法的作用是把 VNode 渲染成真实的 DOM\n\n\n在我们之前对 setter 的分析过程知道，当响应式数据发送变化后，触发了 watcher.update()，只是把这个 watcher 推送到一个队列中，在 nextTick 后才会真正执行 watcher 的回调函数。而一旦我们设置了 sync，就可以在当前 Tick 中同步执行 watcher 的回调函数。\n \n\n##### 修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()\n\n```\n<!-- 阻止单击事件冒泡 -->\n<a v-on:click.stop=\"doThis\"></a>\n<!-- 提交事件不再重载页面 -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n<!-- 修饰符可以串联  -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n<!-- 只有修饰符 -->\n<form v-on:submit.prevent></form>\n<!-- 添加事件侦听器时使用事件捕获模式 -->\n<div v-on:click.capture=\"doThis\">...</div>\n<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->\n<div v-on:click.self=\"doThat\">...</div>\n<a v-on:click.once=\"doThis\"></a>\n```\n \n\n##### 按键修饰符\n记住所有的 keyCode 比较困难，组合键 所以 Vue 为最常用的按键提供了别名：\n\n```\n<!-- Alt + C -->\n<input v-on:keyup.alt.67=\"clear\">\n\n<!-- Ctrl + Click -->\n<div v-on:click.ctrl=\"doSomething\">Do something</div>\n<!-- 同上 -->\n<input v-on:keyup.enter=\"submit\">\n<!-- 缩写语法 -->\n<input @keyup.enter=\"submit\">\n全部的按键别名：\n.enter\n.tab\n.delete (捕获 “删除” 和 “退格” 键)\n.esc\n.space\n.up\n.down\n.left\n.right\n```\n \n\n#### mock vuex\n```\nsetup() {\n          useLoginStatusProvide()\n          return {}\n        },\n\n\n        import { provide, inject, ref } from '@vue/composition-api'\n\nconst StatusSymbol = Symbol('status')\n\nexport const useLoginStatusProvide = () => {\n  const loginStatus = ref(false)\n\n  const setLoginStatus = val => (loginStatus.value = val)\n  provide(StatusSymbol, { loginStatus, setLoginStatus })\n}\n\nexport const useLoginStatusInject = () => {\n  const context = inject(StatusSymbol)\n  if (!context) throw new Error('useLoginStatusInject must be used after useLoginStatusProvide')\n\n  return context\n}\n\n```","slug":"vue","published":1,"updated":"2021-12-22T13:08:52.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5se0d0020yy8k43w0lz0a","content":"<h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><ol>\n<li>这里对该vm注册一个Watcher实例，Watcher的getter为updateComponent函数，用于触发所有渲染所需要用到的数据的getter，进行依赖收集，就是在mounted的时候进行依赖收集。</li>\n</ol>\n<p>用户的自定义 watcher 要优先于渲染 watcher 执行；因为用户自定义 watcher 是在渲染 watcher 之前创建的。Vm._watcher.update()</p>\n<ol>\n<li>对于渲染 watcher 而言，它在执行 this.get() 方法求值的时候，会执行 getter 方法： updateComponent = () =&gt; {<br>updateComponent = () =&gt; { vm._update(vm._render(), hydrating)</li>\n<li><p>vue diff 算法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//相同的话进行patch</span><br><span class=\"line\">patchVnode (oldVnode, vnode) &#123;</span><br><span class=\"line\">    const el = vnode.el = oldVnode.el</span><br><span class=\"line\">    let i, oldCh = oldVnode.children, ch = vnode.children</span><br><span class=\"line\">    if (oldVnode === vnode) return</span><br><span class=\"line\">    if (oldVnode.text !== null &amp;&amp; vnode.text !== null &amp;&amp; oldVnode.text !== vnode.text) &#123;</span><br><span class=\"line\">        api.setTextContent(el, vnode.text)</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        updateEle(el, vnode, oldVnode)</span><br><span class=\"line\">    \tif (oldCh &amp;&amp; ch &amp;&amp; oldCh !== ch) &#123;</span><br><span class=\"line\">            updateChildren(el, oldCh, ch)</span><br><span class=\"line\">    \t&#125;else if (ch)&#123;</span><br><span class=\"line\">            createEle(vnode) //create el&apos;s children dom</span><br><span class=\"line\">    \t&#125;else if (oldCh)&#123;</span><br><span class=\"line\">            api.removeChildren(el)</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提高性能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">压缩代码</span><br><span class=\"line\">提取页面公共资源 基础包cdn\\splitchunks</span><br><span class=\"line\">Tree shaking </span><br><span class=\"line\">scope hoisting</span><br><span class=\"line\">图片压缩 </span><br><span class=\"line\">动态polyfill</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>事件代理：1. 减少事件注册，节省内存。 2. 简化了dom更新时，上面的事件off与on 操作。focus，blur之类的，本身就没用冒泡的特性</p>\n</li>\n<li><p>函数式组件与普通组件的区别</p>\n<p>函数式组件需要在声明组件是指定functional<br>函数式组件不需要实例化，所以没有this,this通过render函数的第二个参数来代替<br>函数式组件没有生命周期钩子函数，不能使用计算属性，watch等等<br>函数式组件不能通过$emit对外暴露事件，调用事件只能通过context.listeners.click的方式调用外部传入的事件<br>因为函数式组件是没有实例化的，所以在外部通过ref去引用组件时，实际引用的是HTMLElement<br>函数式组件的props可以不用显示声明，所以没有在props里面声明的属性都会被自动隐式解析为prop,而普通组件所有未声明的属性都被解析到$attrs里面，并自动挂载到组件根元素上面(可以通过inheritAttrs属性禁止)</p>\n</li>\n<li><p>「适合引入自动化测试的场景：」</p>\n</li>\n</ol>\n<p>公共库类的开发维护<br>中长期项目的迭代/重构<br>引用了不可控的第三方依赖</p>\n<ol>\n<li>Observer 是一个类，它的作用是给对象的属性添加 getter 和 setter，用于依赖收集和派发更新。Render 时通过getter 进行依赖收集。</li>\n<li>Dep 是一个 Class，它定义了一些属性和方法，这里需要特别注意的是它有一个静态属性 target，这是一个全局唯一 Watcher，这是一个非常巧妙的设计，<br>因为在同一时间只能有一个全局的 Watcher 被计算，另外它的自身属性 subs 也是 Watcher 的数组。</li>\n<li><p>vue array 拦截</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/*取得原生数组的原型*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayProto = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"comment\">/*创建一个新的数组对象，修改该对象上的数组的七个方法，防止污染原生数组方法*/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> arrayMethods = <span class=\"built_in\">Object</span>.create(arrayProto)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>首先通过 Vue.options = Object.create(null) 创建一个空对象，然后遍历 ASSET_TYPES:<br> Vue.options.components = {}<br> Vue.options.directives = {}<br> Vue.options.filters = {}</p>\n</li>\n<li><p>vue 父子组件：<br>加载渲染过程<br>父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted<br>父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated<br>父组件更新过程<br>父beforeUpdate-&gt;父updated<br>销毁过程<br>父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</p>\n</li>\n<li><p>for await…of循环，则是用于遍历异步的 Iterator 接口。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">inputFilePath</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> readStream = fs.createReadStream(</span><br><span class=\"line\">    inputFilePath,</span><br><span class=\"line\">    &#123; <span class=\"attr\">encoding</span>: <span class=\"string\">'utf8'</span>, <span class=\"attr\">highWaterMark</span>: <span class=\"number\">1024</span> &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  readStream.on(<span class=\"string\">'data'</span>, (chunk) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'&gt;&gt;&gt; '</span>+chunk);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  readStream.on(<span class=\"string\">'end'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'### DONE ###'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 异步遍历器写法</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">inputFilePath</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> readStream = fs.createReadStream(</span><br><span class=\"line\">    inputFilePath,</span><br><span class=\"line\">    &#123; <span class=\"attr\">encoding</span>: <span class=\"string\">'utf8'</span>, <span class=\"attr\">highWaterMark</span>: <span class=\"number\">1024</span> &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">const</span> chunk <span class=\"keyword\">of</span> readStream) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'&gt;&gt;&gt; '</span>+chunk);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'### DONE ###'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\">1. Vm.$watch this._data.$$state 的值，/* 检测store中的_committing的值，如果是true代表不是通过mutation的方法修改的 */</span></span><br><span class=\"line\"><span class=\"string\">2. /* 这里new了一个Vue对象，运用Vue内部的响应式实现注册state以及computed*/</span></span><br><span class=\"line\"><span class=\"string\">    store._vm = new Vue(&#123; data: &#123;$$state: state &#125;, computed &#125;)</span></span><br><span class=\"line\"><span class=\"string\">3. this.$on('hook:updated', () =&gt; &#123;&#125;)</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">1. Vue.config.optionMergeStrategies  </span></span><br><span class=\"line\"><span class=\"string\">1.  在Vue2.5之前，使用函数式组件只能通过JSX的方式，在之后，可以通过模板语法来生命函数式组件</span></span><br><span class=\"line\"><span class=\"string\"> `</span><span class=\"string\">``</span>html</span><br><span class=\"line\"> &lt;!--在template 上面添加 functional属性--&gt;</span><br><span class=\"line\">&lt;template functional&gt;</span><br><span class=\"line\">  &lt;img :src=<span class=\"string\">\"avatar ? avatar : 'default-avatar.png'\"</span> /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;!--根据上一节第六条，可以省略声明props--&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Vue beforecreated:data vue 实例化、init events</p>\n</li>\n<li><p>作用域插槽 this.$scopedSlots.header({ text: this.headerText })</p>\n</li>\n<li><p>全局的components ，通过vue 的options merge 到组件上。 最后通过 extend(Vue.options.components, builtInComponents) 把一些内置组件扩展到 Vue.options.components 上，<br>Vue 的内置组件目前有 <keep-alive>、<transition> 和 <transition-group> 组件，这也就是为什么我们在其它组件中使用 <keep-alive> 组件不需要注册的原因</keep-alive></transition-group></transition></keep-alive></p>\n</li>\n<li><p>components，filters，directives<br>两个对象合并的时候，不会相互覆盖，而是 权重小的 被放到 权重大 的 的原型上</p>\n</li>\n<li>数组叠加   包括生命周期函数和watch</li>\n<li>函数合并叠加   包括选项：data，provide，权重大的优先 </li>\n<li>最主要最关键的原因是函数式组件不需要实例化，无状态，没有生命周期，所以渲染性能要好于普通组件<br>函数式组件结构比较简单，代码结构更清晰</li>\n<li>inject 用法：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inject: &#123;</span><br><span class=\"line\">// 注入的属性名称 parentForm: &#123;</span><br><span class=\"line\">// 通过 from 指定从哪个属性注入</span><br><span class=\"line\">from: &apos;customForm&apos;,</span><br><span class=\"line\"> default: () =&gt; (&#123; size: &apos;default&apos; &#125;) &#125; &#125;,</span><br></pre></td></tr></table></figure>\n<ol>\n<li>redirective  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding：一个对象，包含以下 property：</span><br><span class=\"line\">name：指令名，不包括 v- 前缀。</span><br><span class=\"line\">value：指令的绑定值，例如：v-my-directive=&quot;1 + 1&quot; 中，绑定值为 2。</span><br><span class=\"line\">oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</span><br><span class=\"line\">expression：字符串形式的指令表达式。例如 v-my-directive=&quot;1 + 1&quot; 中，表达式为 &quot;1 + 1&quot;。</span><br><span class=\"line\">arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 &quot;foo&quot;。</span><br><span class=\"line\">modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 &#123; foo: true, bar: true &#125;。</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>Async validator</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asyncValidator: <span class=\"function\">(<span class=\"params\">rule, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">           reject(<span class=\"string\">\"too young\"</span>);  <span class=\"comment\">// reject with error message</span></span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           resolve();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ref用创建一个包装对象，只具备一个响应式属性value，如果将对象指定为ref的值，该对象将被reactive方法深度遍历。如果传入 ref 的是一个对象，将调用 reactive 方法进行深层响应转换。所以ref 可以解构</p>\n</li>\n<li><p>history 模式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过 history.pushState() 方法改变地址栏</span><br><span class=\"line\">监听 popstate 事件</span><br><span class=\"line\">根据当前路由地址找到对应组件重新渲染</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>&lt;input type=&quot;text&quot; v-on=&quot;{ input:onInput,focus:onFocus,blur:onBlur, }&quot;&gt;</code>   同样 v-bind </p>\n</li>\n<li><p>keepalive mouted 只会执行一次，vnode上关联的component intance,在patch 阶段会转换为真实的dom.<br>1.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*parse解析得到ast树*/</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">const</span> ast = parse(template.trim(), options)</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      将AST树进行优化</span></span><br><span class=\"line\"><span class=\"comment\">      优化的目标：生成模板AST树，检测不需要进行DOM改变的静态子树。</span></span><br><span class=\"line\"><span class=\"comment\">      一旦检测到这些静态树，我们就能做以下这些事情：</span></span><br><span class=\"line\"><span class=\"comment\">      1.把它们变成常数，这样我们就再也不需要每次重新渲染时创建新的节点了。</span></span><br><span class=\"line\"><span class=\"comment\">      2.在patch的过程中直接跳过。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">    optimize(ast, options)</span><br></pre></td></tr></table></figure>\n<p>optimize的主要作用是标记static静态节点，这是Vue在编译过程中的一处优化，后面当update更新界面时，会有一个patch的过程，diff算法会直接跳过静态节点，从而减少了比较的过程，优化了patch的性能。</p>\n</li>\n<li><p>Render<br>// resolve template/el and convert to render function 。mounted 方法中<br>在此方法中调用 vm._render 方法先生成虚拟 Node(render 函数返回的就是vnode)，最终调用 vm._update 更新 DOM。</p>\n</li>\n</ol>\n<p>Update 调用的时机：1.首次渲染 2.数据更新 </p>\n<ol>\n<li></li>\n<li>Vue 通过在内存中实现文档结构的虚拟表示来解决此问题，其中虚拟节点（VNode）表示 DOM 树中的节点。当需要操纵时，可以在虚拟 DOM的 内存中执行计算和操作，而不是在真实 DOM 上进行操纵。这自然会更快，并且允许虚拟 DOM 算法计算出最优化的方式来更新实际 DOM 结构。</li>\n<li>Vue 不会对 provide 中的变量进行响应式处理。所以，要想 inject 接受的变量是响应式的，provide 提供的变量本身就需要是响应式的。单项数据流</li>\n</ol>\n<p>inheritAttrs: false, // 可以关闭自动挂载到组件根元素上的没有在props声明的属性</p>\n<ol>\n<li>子组件不需要任何处理，只需要在父组件引用的时候通过@hook来监听即可，代码重写如下：&lt;Child @hook:mounted=”doSomething”/&gt;</li>\n<li>数据动态变化：<br>export const store = Vue.observable({ count: 0 });</li>\n<li><p>vue life cycle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parse阶段：使用正在表达式将template进行字符串解析，得到指令、class、style等数据，生成抽象语法树 AST。</span><br><span class=\"line\">optimize阶段：寻找 AST 中的静态节点进行标记，为后面 VNode 的 patch 过程中对比做优化。被标记为 static 的节点在后面的 diff 算法中会被直接忽略，不做详细的比较。</span><br><span class=\"line\"></span><br><span class=\"line\">generate阶段：根据 AST 结构拼接生成 render 函数的字符串。</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://user-gold-cdn.xitu.io/2019/12/26/16f40a08cac6d3cb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" target=\"_blank\" rel=\"noopener\">life cycle</a></p>\n</li>\n<li><p>每个逻辑关注点的代码现在都在复合函数中并置在一起。 这大大减少了在处理大型组件时需要不断“跳转”的情况。 组合函数也可以在编辑器中折叠，使组件更容易扫描:</p>\n</li>\n<li><p>js 链接 defer 和 async</p>\n</li>\n<li>keep-alive 的实现正是用到了 LRU 策略,将最近访问的组件 push 到 this.keys 最后面,this.keys[0]也就是最久没被访问的组件,当缓存实例超过 max 设置值,删除 this.keys[0]</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defer 和 async 都是并行加载的，主要区别在于下载后何时执行。</span><br><span class=\"line\">每一个 async 属性的脚本都在它下载结束之后立刻执行，所以就有可能出现脚本执行顺序被打乱的情况</span><br><span class=\"line\">每一个 defer 属性的脚本会在 HTML 解析完成后, DOMContentLoaded 之前，按照 DOM 中的顺序执行（ie&gt;=10）</span><br><span class=\"line\">defer 和 async 都只适用于外部脚本文件，对与内联的 script 标签是不起作用</span><br></pre></td></tr></table></figure>\n<ol>\n<li>preload 用 “as” 或者用 “type” 属性来表示他们请求资源的优先级（比如说 preload 使用 as=”style” 属性将获得最高的优先级）。没有 “as” 属性的将被看作异步请求，“Early”意味着在所有未被预加载的图片请求之前被请求（“late”意味着之后）</li>\n</ol>\n<ol start=\"2\">\n<li>Vue.config.errorHandler   </li>\n<li>v-pre  场景:vue 是响应式系统,但是有些静态的标签不需要多次编译,这样可以节省性能</li>\n<li><p>v-loader transformAssetUrls<br>在模板编译过程中，编译器可以将某些特性转换为 require 调用，例如 src 中的 URL。因此这些目标资源可以被 webpack 处理。例如 <img src=\"./foo.png\"> 会找到你文件系统中的 ./foo.png 并将其作为一个依赖包含在你的包里</p>\n</li>\n<li><p>view router加key  场景:由于 Vue 会复用相同组件, 即 /page/1 =&gt; /page/2 或者 /page?id=1 =&gt; /page?id=2 这类链接跳转时, 将不在执行created, mounted之类的钩子</p>\n</li>\n</ol>\n<p>1.<img src=\"https://github.com/ryansecret/blog/blob/master/source/asset/eventloop.jpg\" alt=\"事件循环\"></p>\n<ol>\n<li>生命周期<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeCreate阶段：vue实例的挂载元素el和数据对象data都是undefined，还没有初始化。</span><br><span class=\"line\">created阶段：vue实例的数据对象data有了，可以访问里面的数据和方法，未挂载到DOM，el还没有</span><br><span class=\"line\">beforeMount阶段：vue实例的el和data都初始化了，但是挂载之前为虚拟的dom节点</span><br><span class=\"line\">mounted阶段：vue实例挂载到真实DOM上，就可以通过DOM获取DOM节点</span><br><span class=\"line\">beforeUpdate阶段：响应式数据更新时调用，发生在虚拟DOM打补丁之前，适合在更新之前访问现有的DOM，比如手动移除已添加的事件监听器</span><br><span class=\"line\">updated阶段：虚拟DOM重新渲染和打补丁之后调用，组成新的DOM已经更新，避免在这个钩子函数中操作数据，防止死循环</span><br><span class=\"line\">beforeDestroy阶段：实例销毁前调用，实例还可以用，this能获取到实例，常用于销毁定时器，解绑事件</span><br><span class=\"line\">destroyed阶段：实例销毁后调用，调用后所有事件监听器会被移除，所有的子实例都会被销毁  </span><br><span class=\"line\">```         </span><br><span class=\"line\">1. __proto__ 属性，这是历史遗留的非标准的语法，但在现代浏览器中广泛实现。获得原型的更可靠方法是使用 Object.getPrototypeOf(new Object())；例如：</span><br><span class=\"line\"> ```javascript</span><br><span class=\"line\">const car = &#123;&#125;</span><br><span class=\"line\">const list = []</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(Object.getPrototypeOf(car));</span><br><span class=\"line\">console.log(Object.getPrototypeOf(list));</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"内部机制\"><a href=\"#内部机制\" class=\"headerlink\" title=\"内部机制\"></a>内部机制</h3><p>vue-loader </p>\n<p>compiler 目录包含 Vue.js 所有编译相关的代码。它包括把模板解析成 ast 语法树，ast 语法树优化，代码生成等功能。</p>\n<p>微任务的例子：micortask</p>\n<p>process.nextTick<br>promise<br>Object.observe</p>\n<p>宏任务的例子：</p>\n<p>setTimeout<br>setInterval<br>setImmediate<br>I/O</p>\n<p>需要注意的是node 和 浏览器的 event loop 是有区别的(需要注意的是node v12.0 之后和浏览器处理事一致的)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">浏览器的事件循环：</span><br><span class=\"line\"></span><br><span class=\"line\">执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；</span><br><span class=\"line\">全局Script代码执行完毕后，调用栈Stack会清空；</span><br><span class=\"line\">从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；</span><br><span class=\"line\">继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；</span><br><span class=\"line\">microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；</span><br><span class=\"line\">取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；</span><br><span class=\"line\">执行完毕后，调用栈Stack为空；</span><br><span class=\"line\">重复第3-7个步骤；</span><br><span class=\"line\">重复第3-7个步骤；</span><br><span class=\"line\">……</span><br><span class=\"line\"></span><br><span class=\"line\">NodeJS中微队列主要有2个：</span><br><span class=\"line\">Next Tick Queue：是放置process.nextTick(callback)的回调任务的</span><br><span class=\"line\">Other Micro Queue：放置其他microtask，比如Promise等</span><br><span class=\"line\"></span><br><span class=\"line\">具体参见： https://segmentfault.com/a/1190000016278115</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timers 阶段：这个阶段执行timer（setTimeout、setInterval）的回调</span><br><span class=\"line\">I/O callbacks 阶段：执行一些系统调用错误，比如网络通信的错误回调</span><br><span class=\"line\">idle, prepare 阶段：仅node内部使用</span><br><span class=\"line\">poll 阶段：获取新的I/O事件, 适当的条件下node将阻塞在这里</span><br><span class=\"line\">check 阶段：执行 setImmediate() 的回调</span><br><span class=\"line\">close callbacks 阶段：执行 socket 的 close 事件回调</span><br><span class=\"line\"></span><br><span class=\"line\">timers 是事件循环的第一个阶段，Node 会去检查有无已过期的timer，如果有则把它的回调压入timer的任务队列中等待执行，事实上，Node 并不能保证timer在预设时间到了就会立即执行，因为Node对timer的过期检查不一定靠谱，它会受机器上其它运行程序影响，或者那个时间点主线程不空闲。比如下面的代码，setTimeout() 和 setImmediate() 的执行顺序是不确定的。</span><br><span class=\"line\"></span><br><span class=\"line\">poll 阶段</span><br><span class=\"line\">poll 阶段主要有2个功能：</span><br><span class=\"line\"></span><br><span class=\"line\">处理 poll 队列的事件</span><br><span class=\"line\">当有已超时的 timer，执行它的回调函数</span><br><span class=\"line\">even loop将同步执行poll队列里的回调，直到队列为空或执行的回调达到系统上限（上限具体多少未详），接下来even loop会去检查有无预设的setImmediate()，分两种情况：</span><br><span class=\"line\"></span><br><span class=\"line\">若有预设的setImmediate(), event loop将结束poll阶段进入check阶段，并执行check阶段的任务队列</span><br><span class=\"line\">若没有预设的setImmediate()，event loop将阻塞在该阶段等待</span><br><span class=\"line\">注意一个细节，没有setImmediate()会导致event loop阻塞在poll阶段，这样之前设置的timer岂不是执行不了了？所以咧，在poll阶段event loop会有一个检查机制，检查timer队列是否为空，如果timer队列非空，event loop就开始下一轮事件循环，即重新进入到timer阶段。</span><br><span class=\"line\"></span><br><span class=\"line\">check 阶段</span><br><span class=\"line\">setImmediate()的回调会被加入check队列中，从event loop的阶段图可以知道，check阶段的执行顺序在poll阶段之后。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">回顾上一篇，浏览器环境下，microtask的任务队列是每个macrotask执行完之后执行。而在Node.js中，microtask会在事件循环的各个阶段之间执行，也就是一个阶段执行完毕，就会去执行microtask队列的任务。详见：http://lynnelv.github.io/js-event-loop-nodejs</span><br><span class=\"line\"></span><br><span class=\"line\">process.nextTick() 会在各个事件阶段之间执行，一旦执行，要直到nextTick队列被清空，才会进入到下一个事件阶段，所以如果递归调用 process.nextTick()，会导致出现I/O starving（饥饿）的问题</span><br><span class=\"line\"></span><br><span class=\"line\">官方文档：https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/</span><br></pre></td></tr></table></figure>\n<p>###vitual dom</p>\n<p>VD 最大的特点是将页面的状态抽象为 JS 对象的形式，配合不同的渲染工具，使跨平台渲染成为可能。如 React 就借助 VD 实现了服务端渲染、浏览器渲染和移动端渲染等功能。<br>js计算-》生成渲染树-》渲染页面</p>\n<p>通过VD的比较，我们可以将多个操作合并成一个批量的操作，从而减少dom重排的次数，进而缩短了生成渲染树和绘制所花的时间。</p>\n<p>在mounted 方法中会将template 编译成为render 方法。这是一个编译过程，render中会调用createElement 创建vnode。</p>\n<p><img src=\"https://ustbhuangyi.github.io/vue-analysis/assets/new-vue.png\" alt=\"流程图片\"></p>\n<p>回到 mountComponent 函数的过程，我们已经知道 createElement 是如何创建了一个 VNode，接下来就是要把这个 VNode 渲染成一个真实的 DOM 并渲染出来，这个过程是通过 vm._update 完成的</p>\n<p>Vue 的 _update 是实例的一个私有方法，它被调用的时机有 2 个，一个是首次渲染，一个是数据更新的时候；由于我们这一章节只分析首次渲染部分，数据更新部分会在之后分析响应式原理的时候涉及。_update 方法的作用是把 VNode 渲染成真实的 DOM</p>\n<p>在我们之前对 setter 的分析过程知道，当响应式数据发送变化后，触发了 watcher.update()，只是把这个 watcher 推送到一个队列中，在 nextTick 后才会真正执行 watcher 的回调函数。而一旦我们设置了 sync，就可以在当前 Tick 中同步执行 watcher 的回调函数。</p>\n<h5 id=\"修饰符（Modifiers）是以半角句号-指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，-prevent-修饰符告诉-v-on-指令对于触发的事件调用-event-preventDefault\"><a href=\"#修饰符（Modifiers）是以半角句号-指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，-prevent-修饰符告诉-v-on-指令对于触发的事件调用-event-preventDefault\" class=\"headerlink\" title=\"修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()\"></a>修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 阻止单击事件冒泡 --&gt;</span><br><span class=\"line\">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class=\"line\">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class=\"line\">&lt;!-- 修饰符可以串联  --&gt;</span><br><span class=\"line\">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;!-- 只有修饰符 --&gt;</span><br><span class=\"line\">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</span><br><span class=\"line\">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span><br><span class=\"line\">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span><br><span class=\"line\">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</span><br><span class=\"line\">&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h5><p>记住所有的 keyCode 比较困难，组合键 所以 Vue 为最常用的按键提供了别名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Alt + C --&gt;</span><br><span class=\"line\">&lt;input v-on:keyup.alt.67=&quot;clear&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- Ctrl + Click --&gt;</span><br><span class=\"line\">&lt;div v-on:click.ctrl=&quot;doSomething&quot;&gt;Do something&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- 同上 --&gt;</span><br><span class=\"line\">&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;</span><br><span class=\"line\">&lt;!-- 缩写语法 --&gt;</span><br><span class=\"line\">&lt;input @keyup.enter=&quot;submit&quot;&gt;</span><br><span class=\"line\">全部的按键别名：</span><br><span class=\"line\">.enter</span><br><span class=\"line\">.tab</span><br><span class=\"line\">.delete (捕获 “删除” 和 “退格” 键)</span><br><span class=\"line\">.esc</span><br><span class=\"line\">.space</span><br><span class=\"line\">.up</span><br><span class=\"line\">.down</span><br><span class=\"line\">.left</span><br><span class=\"line\">.right</span><br></pre></td></tr></table></figure>\n<h4 id=\"mock-vuex\"><a href=\"#mock-vuex\" class=\"headerlink\" title=\"mock vuex\"></a>mock vuex</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setup() &#123;</span><br><span class=\"line\">          useLoginStatusProvide()</span><br><span class=\"line\">          return &#123;&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        import &#123; provide, inject, ref &#125; from &apos;@vue/composition-api&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const StatusSymbol = Symbol(&apos;status&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">export const useLoginStatusProvide = () =&gt; &#123;</span><br><span class=\"line\">  const loginStatus = ref(false)</span><br><span class=\"line\"></span><br><span class=\"line\">  const setLoginStatus = val =&gt; (loginStatus.value = val)</span><br><span class=\"line\">  provide(StatusSymbol, &#123; loginStatus, setLoginStatus &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export const useLoginStatusInject = () =&gt; &#123;</span><br><span class=\"line\">  const context = inject(StatusSymbol)</span><br><span class=\"line\">  if (!context) throw new Error(&apos;useLoginStatusInject must be used after useLoginStatusProvide&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">  return context</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><ol>\n<li>这里对该vm注册一个Watcher实例，Watcher的getter为updateComponent函数，用于触发所有渲染所需要用到的数据的getter，进行依赖收集，就是在mounted的时候进行依赖收集。</li>\n</ol>\n<p>用户的自定义 watcher 要优先于渲染 watcher 执行；因为用户自定义 watcher 是在渲染 watcher 之前创建的。Vm._watcher.update()</p>\n<ol>\n<li>对于渲染 watcher 而言，它在执行 this.get() 方法求值的时候，会执行 getter 方法： updateComponent = () =&gt; {<br>updateComponent = () =&gt; { vm._update(vm._render(), hydrating)</li>\n<li><p>vue diff 算法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//相同的话进行patch</span><br><span class=\"line\">patchVnode (oldVnode, vnode) &#123;</span><br><span class=\"line\">    const el = vnode.el = oldVnode.el</span><br><span class=\"line\">    let i, oldCh = oldVnode.children, ch = vnode.children</span><br><span class=\"line\">    if (oldVnode === vnode) return</span><br><span class=\"line\">    if (oldVnode.text !== null &amp;&amp; vnode.text !== null &amp;&amp; oldVnode.text !== vnode.text) &#123;</span><br><span class=\"line\">        api.setTextContent(el, vnode.text)</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        updateEle(el, vnode, oldVnode)</span><br><span class=\"line\">    \tif (oldCh &amp;&amp; ch &amp;&amp; oldCh !== ch) &#123;</span><br><span class=\"line\">            updateChildren(el, oldCh, ch)</span><br><span class=\"line\">    \t&#125;else if (ch)&#123;</span><br><span class=\"line\">            createEle(vnode) //create el&apos;s children dom</span><br><span class=\"line\">    \t&#125;else if (oldCh)&#123;</span><br><span class=\"line\">            api.removeChildren(el)</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提高性能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">压缩代码</span><br><span class=\"line\">提取页面公共资源 基础包cdn\\splitchunks</span><br><span class=\"line\">Tree shaking </span><br><span class=\"line\">scope hoisting</span><br><span class=\"line\">图片压缩 </span><br><span class=\"line\">动态polyfill</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>事件代理：1. 减少事件注册，节省内存。 2. 简化了dom更新时，上面的事件off与on 操作。focus，blur之类的，本身就没用冒泡的特性</p>\n</li>\n<li><p>函数式组件与普通组件的区别</p>\n<p>函数式组件需要在声明组件是指定functional<br>函数式组件不需要实例化，所以没有this,this通过render函数的第二个参数来代替<br>函数式组件没有生命周期钩子函数，不能使用计算属性，watch等等<br>函数式组件不能通过$emit对外暴露事件，调用事件只能通过context.listeners.click的方式调用外部传入的事件<br>因为函数式组件是没有实例化的，所以在外部通过ref去引用组件时，实际引用的是HTMLElement<br>函数式组件的props可以不用显示声明，所以没有在props里面声明的属性都会被自动隐式解析为prop,而普通组件所有未声明的属性都被解析到$attrs里面，并自动挂载到组件根元素上面(可以通过inheritAttrs属性禁止)</p>\n</li>\n<li><p>「适合引入自动化测试的场景：」</p>\n</li>\n</ol>\n<p>公共库类的开发维护<br>中长期项目的迭代/重构<br>引用了不可控的第三方依赖</p>\n<ol>\n<li>Observer 是一个类，它的作用是给对象的属性添加 getter 和 setter，用于依赖收集和派发更新。Render 时通过getter 进行依赖收集。</li>\n<li>Dep 是一个 Class，它定义了一些属性和方法，这里需要特别注意的是它有一个静态属性 target，这是一个全局唯一 Watcher，这是一个非常巧妙的设计，<br>因为在同一时间只能有一个全局的 Watcher 被计算，另外它的自身属性 subs 也是 Watcher 的数组。</li>\n<li><p>vue array 拦截</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/*取得原生数组的原型*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayProto = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"comment\">/*创建一个新的数组对象，修改该对象上的数组的七个方法，防止污染原生数组方法*/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> arrayMethods = <span class=\"built_in\">Object</span>.create(arrayProto)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>首先通过 Vue.options = Object.create(null) 创建一个空对象，然后遍历 ASSET_TYPES:<br> Vue.options.components = {}<br> Vue.options.directives = {}<br> Vue.options.filters = {}</p>\n</li>\n<li><p>vue 父子组件：<br>加载渲染过程<br>父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted<br>父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated<br>父组件更新过程<br>父beforeUpdate-&gt;父updated<br>销毁过程<br>父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</p>\n</li>\n<li><p>for await…of循环，则是用于遍历异步的 Iterator 接口。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">inputFilePath</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> readStream = fs.createReadStream(</span><br><span class=\"line\">    inputFilePath,</span><br><span class=\"line\">    &#123; <span class=\"attr\">encoding</span>: <span class=\"string\">'utf8'</span>, <span class=\"attr\">highWaterMark</span>: <span class=\"number\">1024</span> &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  readStream.on(<span class=\"string\">'data'</span>, (chunk) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'&gt;&gt;&gt; '</span>+chunk);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  readStream.on(<span class=\"string\">'end'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'### DONE ###'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 异步遍历器写法</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">inputFilePath</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> readStream = fs.createReadStream(</span><br><span class=\"line\">    inputFilePath,</span><br><span class=\"line\">    &#123; <span class=\"attr\">encoding</span>: <span class=\"string\">'utf8'</span>, <span class=\"attr\">highWaterMark</span>: <span class=\"number\">1024</span> &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">const</span> chunk <span class=\"keyword\">of</span> readStream) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'&gt;&gt;&gt; '</span>+chunk);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'### DONE ###'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\">1. Vm.$watch this._data.$$state 的值，/* 检测store中的_committing的值，如果是true代表不是通过mutation的方法修改的 */</span></span><br><span class=\"line\"><span class=\"string\">2. /* 这里new了一个Vue对象，运用Vue内部的响应式实现注册state以及computed*/</span></span><br><span class=\"line\"><span class=\"string\">    store._vm = new Vue(&#123; data: &#123;$$state: state &#125;, computed &#125;)</span></span><br><span class=\"line\"><span class=\"string\">3. this.$on('hook:updated', () =&gt; &#123;&#125;)</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">1. Vue.config.optionMergeStrategies  </span></span><br><span class=\"line\"><span class=\"string\">1.  在Vue2.5之前，使用函数式组件只能通过JSX的方式，在之后，可以通过模板语法来生命函数式组件</span></span><br><span class=\"line\"><span class=\"string\"> `</span><span class=\"string\">``</span>html</span><br><span class=\"line\"> &lt;!--在template 上面添加 functional属性--&gt;</span><br><span class=\"line\">&lt;template functional&gt;</span><br><span class=\"line\">  &lt;img :src=<span class=\"string\">\"avatar ? avatar : 'default-avatar.png'\"</span> /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;!--根据上一节第六条，可以省略声明props--&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Vue beforecreated:data vue 实例化、init events</p>\n</li>\n<li><p>作用域插槽 this.$scopedSlots.header({ text: this.headerText })</p>\n</li>\n<li><p>全局的components ，通过vue 的options merge 到组件上。 最后通过 extend(Vue.options.components, builtInComponents) 把一些内置组件扩展到 Vue.options.components 上，<br>Vue 的内置组件目前有 <keep-alive>、<transition> 和 <transition-group> 组件，这也就是为什么我们在其它组件中使用 <keep-alive> 组件不需要注册的原因</keep-alive></transition-group></transition></keep-alive></p>\n</li>\n<li><p>components，filters，directives<br>两个对象合并的时候，不会相互覆盖，而是 权重小的 被放到 权重大 的 的原型上</p>\n</li>\n<li>数组叠加   包括生命周期函数和watch</li>\n<li>函数合并叠加   包括选项：data，provide，权重大的优先 </li>\n<li>最主要最关键的原因是函数式组件不需要实例化，无状态，没有生命周期，所以渲染性能要好于普通组件<br>函数式组件结构比较简单，代码结构更清晰</li>\n<li>inject 用法：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inject: &#123;</span><br><span class=\"line\">// 注入的属性名称 parentForm: &#123;</span><br><span class=\"line\">// 通过 from 指定从哪个属性注入</span><br><span class=\"line\">from: &apos;customForm&apos;,</span><br><span class=\"line\"> default: () =&gt; (&#123; size: &apos;default&apos; &#125;) &#125; &#125;,</span><br></pre></td></tr></table></figure>\n<ol>\n<li>redirective  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding：一个对象，包含以下 property：</span><br><span class=\"line\">name：指令名，不包括 v- 前缀。</span><br><span class=\"line\">value：指令的绑定值，例如：v-my-directive=&quot;1 + 1&quot; 中，绑定值为 2。</span><br><span class=\"line\">oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</span><br><span class=\"line\">expression：字符串形式的指令表达式。例如 v-my-directive=&quot;1 + 1&quot; 中，表达式为 &quot;1 + 1&quot;。</span><br><span class=\"line\">arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 &quot;foo&quot;。</span><br><span class=\"line\">modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 &#123; foo: true, bar: true &#125;。</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>Async validator</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asyncValidator: <span class=\"function\">(<span class=\"params\">rule, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">           reject(<span class=\"string\">\"too young\"</span>);  <span class=\"comment\">// reject with error message</span></span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           resolve();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ref用创建一个包装对象，只具备一个响应式属性value，如果将对象指定为ref的值，该对象将被reactive方法深度遍历。如果传入 ref 的是一个对象，将调用 reactive 方法进行深层响应转换。所以ref 可以解构</p>\n</li>\n<li><p>history 模式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过 history.pushState() 方法改变地址栏</span><br><span class=\"line\">监听 popstate 事件</span><br><span class=\"line\">根据当前路由地址找到对应组件重新渲染</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>&lt;input type=&quot;text&quot; v-on=&quot;{ input:onInput,focus:onFocus,blur:onBlur, }&quot;&gt;</code>   同样 v-bind </p>\n</li>\n<li><p>keepalive mouted 只会执行一次，vnode上关联的component intance,在patch 阶段会转换为真实的dom.<br>1.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*parse解析得到ast树*/</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">const</span> ast = parse(template.trim(), options)</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      将AST树进行优化</span></span><br><span class=\"line\"><span class=\"comment\">      优化的目标：生成模板AST树，检测不需要进行DOM改变的静态子树。</span></span><br><span class=\"line\"><span class=\"comment\">      一旦检测到这些静态树，我们就能做以下这些事情：</span></span><br><span class=\"line\"><span class=\"comment\">      1.把它们变成常数，这样我们就再也不需要每次重新渲染时创建新的节点了。</span></span><br><span class=\"line\"><span class=\"comment\">      2.在patch的过程中直接跳过。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">    optimize(ast, options)</span><br></pre></td></tr></table></figure>\n<p>optimize的主要作用是标记static静态节点，这是Vue在编译过程中的一处优化，后面当update更新界面时，会有一个patch的过程，diff算法会直接跳过静态节点，从而减少了比较的过程，优化了patch的性能。</p>\n</li>\n<li><p>Render<br>// resolve template/el and convert to render function 。mounted 方法中<br>在此方法中调用 vm._render 方法先生成虚拟 Node(render 函数返回的就是vnode)，最终调用 vm._update 更新 DOM。</p>\n</li>\n</ol>\n<p>Update 调用的时机：1.首次渲染 2.数据更新 </p>\n<ol>\n<li></li>\n<li>Vue 通过在内存中实现文档结构的虚拟表示来解决此问题，其中虚拟节点（VNode）表示 DOM 树中的节点。当需要操纵时，可以在虚拟 DOM的 内存中执行计算和操作，而不是在真实 DOM 上进行操纵。这自然会更快，并且允许虚拟 DOM 算法计算出最优化的方式来更新实际 DOM 结构。</li>\n<li>Vue 不会对 provide 中的变量进行响应式处理。所以，要想 inject 接受的变量是响应式的，provide 提供的变量本身就需要是响应式的。单项数据流</li>\n</ol>\n<p>inheritAttrs: false, // 可以关闭自动挂载到组件根元素上的没有在props声明的属性</p>\n<ol>\n<li>子组件不需要任何处理，只需要在父组件引用的时候通过@hook来监听即可，代码重写如下：&lt;Child @hook:mounted=”doSomething”/&gt;</li>\n<li>数据动态变化：<br>export const store = Vue.observable({ count: 0 });</li>\n<li><p>vue life cycle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parse阶段：使用正在表达式将template进行字符串解析，得到指令、class、style等数据，生成抽象语法树 AST。</span><br><span class=\"line\">optimize阶段：寻找 AST 中的静态节点进行标记，为后面 VNode 的 patch 过程中对比做优化。被标记为 static 的节点在后面的 diff 算法中会被直接忽略，不做详细的比较。</span><br><span class=\"line\"></span><br><span class=\"line\">generate阶段：根据 AST 结构拼接生成 render 函数的字符串。</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://user-gold-cdn.xitu.io/2019/12/26/16f40a08cac6d3cb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" target=\"_blank\" rel=\"noopener\">life cycle</a></p>\n</li>\n<li><p>每个逻辑关注点的代码现在都在复合函数中并置在一起。 这大大减少了在处理大型组件时需要不断“跳转”的情况。 组合函数也可以在编辑器中折叠，使组件更容易扫描:</p>\n</li>\n<li><p>js 链接 defer 和 async</p>\n</li>\n<li>keep-alive 的实现正是用到了 LRU 策略,将最近访问的组件 push 到 this.keys 最后面,this.keys[0]也就是最久没被访问的组件,当缓存实例超过 max 设置值,删除 this.keys[0]</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defer 和 async 都是并行加载的，主要区别在于下载后何时执行。</span><br><span class=\"line\">每一个 async 属性的脚本都在它下载结束之后立刻执行，所以就有可能出现脚本执行顺序被打乱的情况</span><br><span class=\"line\">每一个 defer 属性的脚本会在 HTML 解析完成后, DOMContentLoaded 之前，按照 DOM 中的顺序执行（ie&gt;=10）</span><br><span class=\"line\">defer 和 async 都只适用于外部脚本文件，对与内联的 script 标签是不起作用</span><br></pre></td></tr></table></figure>\n<ol>\n<li>preload 用 “as” 或者用 “type” 属性来表示他们请求资源的优先级（比如说 preload 使用 as=”style” 属性将获得最高的优先级）。没有 “as” 属性的将被看作异步请求，“Early”意味着在所有未被预加载的图片请求之前被请求（“late”意味着之后）</li>\n</ol>\n<ol start=\"2\">\n<li>Vue.config.errorHandler   </li>\n<li>v-pre  场景:vue 是响应式系统,但是有些静态的标签不需要多次编译,这样可以节省性能</li>\n<li><p>v-loader transformAssetUrls<br>在模板编译过程中，编译器可以将某些特性转换为 require 调用，例如 src 中的 URL。因此这些目标资源可以被 webpack 处理。例如 <img src=\"./foo.png\"> 会找到你文件系统中的 ./foo.png 并将其作为一个依赖包含在你的包里</p>\n</li>\n<li><p>view router加key  场景:由于 Vue 会复用相同组件, 即 /page/1 =&gt; /page/2 或者 /page?id=1 =&gt; /page?id=2 这类链接跳转时, 将不在执行created, mounted之类的钩子</p>\n</li>\n</ol>\n<p>1.<img src=\"https://github.com/ryansecret/blog/blob/master/source/asset/eventloop.jpg\" alt=\"事件循环\"></p>\n<ol>\n<li>生命周期<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeCreate阶段：vue实例的挂载元素el和数据对象data都是undefined，还没有初始化。</span><br><span class=\"line\">created阶段：vue实例的数据对象data有了，可以访问里面的数据和方法，未挂载到DOM，el还没有</span><br><span class=\"line\">beforeMount阶段：vue实例的el和data都初始化了，但是挂载之前为虚拟的dom节点</span><br><span class=\"line\">mounted阶段：vue实例挂载到真实DOM上，就可以通过DOM获取DOM节点</span><br><span class=\"line\">beforeUpdate阶段：响应式数据更新时调用，发生在虚拟DOM打补丁之前，适合在更新之前访问现有的DOM，比如手动移除已添加的事件监听器</span><br><span class=\"line\">updated阶段：虚拟DOM重新渲染和打补丁之后调用，组成新的DOM已经更新，避免在这个钩子函数中操作数据，防止死循环</span><br><span class=\"line\">beforeDestroy阶段：实例销毁前调用，实例还可以用，this能获取到实例，常用于销毁定时器，解绑事件</span><br><span class=\"line\">destroyed阶段：实例销毁后调用，调用后所有事件监听器会被移除，所有的子实例都会被销毁  </span><br><span class=\"line\">```         </span><br><span class=\"line\">1. __proto__ 属性，这是历史遗留的非标准的语法，但在现代浏览器中广泛实现。获得原型的更可靠方法是使用 Object.getPrototypeOf(new Object())；例如：</span><br><span class=\"line\"> ```javascript</span><br><span class=\"line\">const car = &#123;&#125;</span><br><span class=\"line\">const list = []</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(Object.getPrototypeOf(car));</span><br><span class=\"line\">console.log(Object.getPrototypeOf(list));</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"内部机制\"><a href=\"#内部机制\" class=\"headerlink\" title=\"内部机制\"></a>内部机制</h3><p>vue-loader </p>\n<p>compiler 目录包含 Vue.js 所有编译相关的代码。它包括把模板解析成 ast 语法树，ast 语法树优化，代码生成等功能。</p>\n<p>微任务的例子：micortask</p>\n<p>process.nextTick<br>promise<br>Object.observe</p>\n<p>宏任务的例子：</p>\n<p>setTimeout<br>setInterval<br>setImmediate<br>I/O</p>\n<p>需要注意的是node 和 浏览器的 event loop 是有区别的(需要注意的是node v12.0 之后和浏览器处理事一致的)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">浏览器的事件循环：</span><br><span class=\"line\"></span><br><span class=\"line\">执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；</span><br><span class=\"line\">全局Script代码执行完毕后，调用栈Stack会清空；</span><br><span class=\"line\">从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；</span><br><span class=\"line\">继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；</span><br><span class=\"line\">microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；</span><br><span class=\"line\">取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；</span><br><span class=\"line\">执行完毕后，调用栈Stack为空；</span><br><span class=\"line\">重复第3-7个步骤；</span><br><span class=\"line\">重复第3-7个步骤；</span><br><span class=\"line\">……</span><br><span class=\"line\"></span><br><span class=\"line\">NodeJS中微队列主要有2个：</span><br><span class=\"line\">Next Tick Queue：是放置process.nextTick(callback)的回调任务的</span><br><span class=\"line\">Other Micro Queue：放置其他microtask，比如Promise等</span><br><span class=\"line\"></span><br><span class=\"line\">具体参见： https://segmentfault.com/a/1190000016278115</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timers 阶段：这个阶段执行timer（setTimeout、setInterval）的回调</span><br><span class=\"line\">I/O callbacks 阶段：执行一些系统调用错误，比如网络通信的错误回调</span><br><span class=\"line\">idle, prepare 阶段：仅node内部使用</span><br><span class=\"line\">poll 阶段：获取新的I/O事件, 适当的条件下node将阻塞在这里</span><br><span class=\"line\">check 阶段：执行 setImmediate() 的回调</span><br><span class=\"line\">close callbacks 阶段：执行 socket 的 close 事件回调</span><br><span class=\"line\"></span><br><span class=\"line\">timers 是事件循环的第一个阶段，Node 会去检查有无已过期的timer，如果有则把它的回调压入timer的任务队列中等待执行，事实上，Node 并不能保证timer在预设时间到了就会立即执行，因为Node对timer的过期检查不一定靠谱，它会受机器上其它运行程序影响，或者那个时间点主线程不空闲。比如下面的代码，setTimeout() 和 setImmediate() 的执行顺序是不确定的。</span><br><span class=\"line\"></span><br><span class=\"line\">poll 阶段</span><br><span class=\"line\">poll 阶段主要有2个功能：</span><br><span class=\"line\"></span><br><span class=\"line\">处理 poll 队列的事件</span><br><span class=\"line\">当有已超时的 timer，执行它的回调函数</span><br><span class=\"line\">even loop将同步执行poll队列里的回调，直到队列为空或执行的回调达到系统上限（上限具体多少未详），接下来even loop会去检查有无预设的setImmediate()，分两种情况：</span><br><span class=\"line\"></span><br><span class=\"line\">若有预设的setImmediate(), event loop将结束poll阶段进入check阶段，并执行check阶段的任务队列</span><br><span class=\"line\">若没有预设的setImmediate()，event loop将阻塞在该阶段等待</span><br><span class=\"line\">注意一个细节，没有setImmediate()会导致event loop阻塞在poll阶段，这样之前设置的timer岂不是执行不了了？所以咧，在poll阶段event loop会有一个检查机制，检查timer队列是否为空，如果timer队列非空，event loop就开始下一轮事件循环，即重新进入到timer阶段。</span><br><span class=\"line\"></span><br><span class=\"line\">check 阶段</span><br><span class=\"line\">setImmediate()的回调会被加入check队列中，从event loop的阶段图可以知道，check阶段的执行顺序在poll阶段之后。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">回顾上一篇，浏览器环境下，microtask的任务队列是每个macrotask执行完之后执行。而在Node.js中，microtask会在事件循环的各个阶段之间执行，也就是一个阶段执行完毕，就会去执行microtask队列的任务。详见：http://lynnelv.github.io/js-event-loop-nodejs</span><br><span class=\"line\"></span><br><span class=\"line\">process.nextTick() 会在各个事件阶段之间执行，一旦执行，要直到nextTick队列被清空，才会进入到下一个事件阶段，所以如果递归调用 process.nextTick()，会导致出现I/O starving（饥饿）的问题</span><br><span class=\"line\"></span><br><span class=\"line\">官方文档：https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/</span><br></pre></td></tr></table></figure>\n<p>###vitual dom</p>\n<p>VD 最大的特点是将页面的状态抽象为 JS 对象的形式，配合不同的渲染工具，使跨平台渲染成为可能。如 React 就借助 VD 实现了服务端渲染、浏览器渲染和移动端渲染等功能。<br>js计算-》生成渲染树-》渲染页面</p>\n<p>通过VD的比较，我们可以将多个操作合并成一个批量的操作，从而减少dom重排的次数，进而缩短了生成渲染树和绘制所花的时间。</p>\n<p>在mounted 方法中会将template 编译成为render 方法。这是一个编译过程，render中会调用createElement 创建vnode。</p>\n<p><img src=\"https://ustbhuangyi.github.io/vue-analysis/assets/new-vue.png\" alt=\"流程图片\"></p>\n<p>回到 mountComponent 函数的过程，我们已经知道 createElement 是如何创建了一个 VNode，接下来就是要把这个 VNode 渲染成一个真实的 DOM 并渲染出来，这个过程是通过 vm._update 完成的</p>\n<p>Vue 的 _update 是实例的一个私有方法，它被调用的时机有 2 个，一个是首次渲染，一个是数据更新的时候；由于我们这一章节只分析首次渲染部分，数据更新部分会在之后分析响应式原理的时候涉及。_update 方法的作用是把 VNode 渲染成真实的 DOM</p>\n<p>在我们之前对 setter 的分析过程知道，当响应式数据发送变化后，触发了 watcher.update()，只是把这个 watcher 推送到一个队列中，在 nextTick 后才会真正执行 watcher 的回调函数。而一旦我们设置了 sync，就可以在当前 Tick 中同步执行 watcher 的回调函数。</p>\n<h5 id=\"修饰符（Modifiers）是以半角句号-指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，-prevent-修饰符告诉-v-on-指令对于触发的事件调用-event-preventDefault\"><a href=\"#修饰符（Modifiers）是以半角句号-指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，-prevent-修饰符告诉-v-on-指令对于触发的事件调用-event-preventDefault\" class=\"headerlink\" title=\"修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()\"></a>修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 阻止单击事件冒泡 --&gt;</span><br><span class=\"line\">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class=\"line\">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class=\"line\">&lt;!-- 修饰符可以串联  --&gt;</span><br><span class=\"line\">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;!-- 只有修饰符 --&gt;</span><br><span class=\"line\">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</span><br><span class=\"line\">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span><br><span class=\"line\">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span><br><span class=\"line\">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</span><br><span class=\"line\">&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h5><p>记住所有的 keyCode 比较困难，组合键 所以 Vue 为最常用的按键提供了别名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Alt + C --&gt;</span><br><span class=\"line\">&lt;input v-on:keyup.alt.67=&quot;clear&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- Ctrl + Click --&gt;</span><br><span class=\"line\">&lt;div v-on:click.ctrl=&quot;doSomething&quot;&gt;Do something&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- 同上 --&gt;</span><br><span class=\"line\">&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;</span><br><span class=\"line\">&lt;!-- 缩写语法 --&gt;</span><br><span class=\"line\">&lt;input @keyup.enter=&quot;submit&quot;&gt;</span><br><span class=\"line\">全部的按键别名：</span><br><span class=\"line\">.enter</span><br><span class=\"line\">.tab</span><br><span class=\"line\">.delete (捕获 “删除” 和 “退格” 键)</span><br><span class=\"line\">.esc</span><br><span class=\"line\">.space</span><br><span class=\"line\">.up</span><br><span class=\"line\">.down</span><br><span class=\"line\">.left</span><br><span class=\"line\">.right</span><br></pre></td></tr></table></figure>\n<h4 id=\"mock-vuex\"><a href=\"#mock-vuex\" class=\"headerlink\" title=\"mock vuex\"></a>mock vuex</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setup() &#123;</span><br><span class=\"line\">          useLoginStatusProvide()</span><br><span class=\"line\">          return &#123;&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        import &#123; provide, inject, ref &#125; from &apos;@vue/composition-api&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const StatusSymbol = Symbol(&apos;status&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">export const useLoginStatusProvide = () =&gt; &#123;</span><br><span class=\"line\">  const loginStatus = ref(false)</span><br><span class=\"line\"></span><br><span class=\"line\">  const setLoginStatus = val =&gt; (loginStatus.value = val)</span><br><span class=\"line\">  provide(StatusSymbol, &#123; loginStatus, setLoginStatus &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export const useLoginStatusInject = () =&gt; &#123;</span><br><span class=\"line\">  const context = inject(StatusSymbol)</span><br><span class=\"line\">  if (!context) throw new Error(&apos;useLoginStatusInject must be used after useLoginStatusProvide&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">  return context</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"stock","date":"2021-07-09T02:05:05.000Z","_content":"\n格力\n48.5 \n47.5 1w\n46.5 1w\n45.5 1W\n44.5 1W\n43.5 1.5W\n42.5 1.5W ","source":"_posts/stock.md","raw":"---\ntitle: stock\ndate: 2021-07-09 10:05:05\ntags:\n---\n\n格力\n48.5 \n47.5 1w\n46.5 1w\n45.5 1W\n44.5 1W\n43.5 1.5W\n42.5 1.5W ","slug":"stock","published":1,"updated":"2021-07-09T02:06:53.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5se0e0022yy8krzfyh5ai","content":"<p>格力<br>48.5<br>47.5 1w<br>46.5 1w<br>45.5 1W<br>44.5 1W<br>43.5 1.5W<br>42.5 1.5W </p>\n","site":{"data":{}},"excerpt":"","more":"<p>格力<br>48.5<br>47.5 1w<br>46.5 1w<br>45.5 1W<br>44.5 1W<br>43.5 1.5W<br>42.5 1.5W </p>\n"},{"title":"webpack","date":"2017-01-17T06:58:02.000Z","_content":"### babel相关\n1. DefinePlugin  需要字段是json,stringfy\n1. <!doctype html> 的作用就是让浏览器进入标准模式，使用最新的 HTML5标准来解析渲染页面；如果不写，浏览器就会进入混杂模式，我们需要避免此类情况发生。   \n   \n2. 转义的过程：\n   ```text\n   编写ES6代码\n   babylon 进行解析\n   解析得到 AST\n   plugin 用 babel-traverse 对 AST 树进行遍历转译\n   得到新的 AST树\n   用 babel-generator 通过 AST 树生成 ES5 代码\n   ```\n3. use(new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/)) \n4. require.context 参数：\n```text\n文件夹路径\n是否递归查找子文件夹下的模块\n模块匹配规则，一般匹配文件后缀名\n```\n1. 虽然@babel/polyfill提供了我们想要的所有新方法新类，但是这里依然存在一些问题：\n   \n   体积太大：比如我只用了String的新特性，但是我把整个包都引进来了，，这不是徒增了很多无用的代码。\n   污染全局环境：如果你引用了 @babel/polyfill，那么像Promise这样的新类就是挂载在全局上的，这样就会污染了全局命名空间。可能在一个团建建立的项目问题不太大，但是如果你是一个工具的开发者，你把全局环境污染了，别人用你的工具，就有可能把别人给坑了\n   \n1.  @babel/plugin-transform-runtime会为代码创建一个沙盒环境，为core-js这里内建的实例提供假名，你可以无缝的使用这些新特性，而不需要使用require polyfill。\n    \n    一个解决方案就是引入transform runtime 来替代 @babel/polyfill。\n    幸运的是，我们有env这个preset，它又一个useBuiltIns选项，如果设置成\"usage\"，那么将会自动检测语法帮你require你代码中使用到的功能。  \n1. @babel/core\n   其中最核心的包就是@babel/core，它主要的作用就是编译.\n   \n   Babel-cli \n   光有core是无法在命令行使用这些功能的，@babel/cli支持你直接在命令行中编译代码。\n   这句话会编译你src目录下的所有js代码，并编译成你想要的那样（babel.config.js配置的），并输出到lib目录下。 \n1. @babel/preset-env\n如果useBuiltIns为true，项目中必须引入babel-polyfill。\n\n1.  我们可以配置webpack的特殊注释(需要 Webpack > 2.4)，将一些按需加载的路由打包到同一个js文件\n```javascript\n   const Foo = () => import(/* webpackChunkName: \"group-foo\" */ './Foo.vue')\n   const Bar = () => import(/* webpackChunkName: \"group-foo\" */ './Bar.vue')\n   const Baz = () => import(/* webpackChunkName: \"group-foo\" */ './Baz.vue')\n```   \n\n1. babel的转译过程分为三个阶段：parsing、transforming、generating，以ES6代码转译为ES5代码为例，babel转译的具体过程如下：\n   \n   ES6代码输入\n   \n   babylon 进行解析得到 AST\n   \n   plugin 用 babel-traverse 对 AST 树进行遍历转译,得到新的AST树\n   \n   用 babel-generator 通过 AST 树生成 ES5 代码\n\n1. UglifyJS: vue-cli 默认使用的压缩代码方式，它使用的是单线程压缩代码，打包时间较慢\n   ParallelUglifyPlugin: 开启多个子进程，把对多个文件压缩的工作分别给多个子进程去完成\n\n1. Vue Loader 是一个 webpack 的 loader，它允许你以一种名为单文件组件 (SFCs)的格式撰写 Vue 组件.   \n1. autoprefixer 自动补充前缀\n\n2.  webpack-dev-server 修改了webpack 配置中的 entry 属性，在里面添加了 webpack-dev-client 的代码，这样在最后的 bundle.js 文件中就会有接收 websocket 消息的代码了。\n\n3.  WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。\n\n4. Webpack splitchunk 将各个模块的交集部分抽离出来 \n\n5. Webpack ProvidePlugin 自动加载js，不必import。\n   new webpack.ProvidePlugin({\n     _map: ['lodash', 'map']\n   })\n\n6. Webpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试\n\n具体配置参考：http://www.jianshu.com/p/42e11515c10f\n\n感叹号的作用在于使同一文件能够使用不同类型的loader\n\n对css 分模块：\n\n```\n{\n        test: /\\.css$/,\n        loader: 'style!css?modules'//跟前面相比就在后面加上了?modules\n}\n```\n\nLoaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。\n\n####  常用命令\n\n\n```\n$ webpack --config webpack.min.js //另一份配置文件\n\n$ webpack --display-error-details //显示异常信息\n\n$ webpack --watch   //监听变动并自动打包\n \n$ webpack -p    //压缩混淆脚本，这个非常非常重要！\n \n$ webpack -d    //生成map映射文件，告知哪些模块被最终打包到哪里了\n```\n\n对公共库的封装：\n\n```\nentry: {\n  vendor: [\"jquery\", \"other-lib\"],\n  app: \"./entry\"\n}\nnew CommonsChunkPlugin({\n  name: \"vendor\",\n\n  // filename: \"vendor.js\"\n  // (Give the chunk a different name)\n\n  minChunks: Infinity,\n  // (with more entries, this ensures that no other module\n  //  goes into the vendor chunk)\n})\n```\n\n关于express webpack middleware 的配置\n\nhttp://www.cnblogs.com/linfangshuhellowored/p/5657285.html\n\n给文件自动添加hash后缀\n\n根据chunkhash的定义知道，chunkhash是根据具体模块文件的内容计算所得的hash值，所以某个文件的改动只会影响它本身的hash指纹，不会影响其他文件。配置webpack的output如下：\n```\noutput: {\n    filename: '[name].[chunkhash:8].js',\n    path: __dirname + '/built'\n}\noutput: {\n    filename: '[name].[hash:8].js',\n    path: __dirname + '/built'\n}\n```","source":"_posts/webpack.md","raw":"---\ntitle: webpack\ndate: 2017-01-17 14:58:02\ntags: webpack  \n---\n### babel相关\n1. DefinePlugin  需要字段是json,stringfy\n1. <!doctype html> 的作用就是让浏览器进入标准模式，使用最新的 HTML5标准来解析渲染页面；如果不写，浏览器就会进入混杂模式，我们需要避免此类情况发生。   \n   \n2. 转义的过程：\n   ```text\n   编写ES6代码\n   babylon 进行解析\n   解析得到 AST\n   plugin 用 babel-traverse 对 AST 树进行遍历转译\n   得到新的 AST树\n   用 babel-generator 通过 AST 树生成 ES5 代码\n   ```\n3. use(new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/)) \n4. require.context 参数：\n```text\n文件夹路径\n是否递归查找子文件夹下的模块\n模块匹配规则，一般匹配文件后缀名\n```\n1. 虽然@babel/polyfill提供了我们想要的所有新方法新类，但是这里依然存在一些问题：\n   \n   体积太大：比如我只用了String的新特性，但是我把整个包都引进来了，，这不是徒增了很多无用的代码。\n   污染全局环境：如果你引用了 @babel/polyfill，那么像Promise这样的新类就是挂载在全局上的，这样就会污染了全局命名空间。可能在一个团建建立的项目问题不太大，但是如果你是一个工具的开发者，你把全局环境污染了，别人用你的工具，就有可能把别人给坑了\n   \n1.  @babel/plugin-transform-runtime会为代码创建一个沙盒环境，为core-js这里内建的实例提供假名，你可以无缝的使用这些新特性，而不需要使用require polyfill。\n    \n    一个解决方案就是引入transform runtime 来替代 @babel/polyfill。\n    幸运的是，我们有env这个preset，它又一个useBuiltIns选项，如果设置成\"usage\"，那么将会自动检测语法帮你require你代码中使用到的功能。  \n1. @babel/core\n   其中最核心的包就是@babel/core，它主要的作用就是编译.\n   \n   Babel-cli \n   光有core是无法在命令行使用这些功能的，@babel/cli支持你直接在命令行中编译代码。\n   这句话会编译你src目录下的所有js代码，并编译成你想要的那样（babel.config.js配置的），并输出到lib目录下。 \n1. @babel/preset-env\n如果useBuiltIns为true，项目中必须引入babel-polyfill。\n\n1.  我们可以配置webpack的特殊注释(需要 Webpack > 2.4)，将一些按需加载的路由打包到同一个js文件\n```javascript\n   const Foo = () => import(/* webpackChunkName: \"group-foo\" */ './Foo.vue')\n   const Bar = () => import(/* webpackChunkName: \"group-foo\" */ './Bar.vue')\n   const Baz = () => import(/* webpackChunkName: \"group-foo\" */ './Baz.vue')\n```   \n\n1. babel的转译过程分为三个阶段：parsing、transforming、generating，以ES6代码转译为ES5代码为例，babel转译的具体过程如下：\n   \n   ES6代码输入\n   \n   babylon 进行解析得到 AST\n   \n   plugin 用 babel-traverse 对 AST 树进行遍历转译,得到新的AST树\n   \n   用 babel-generator 通过 AST 树生成 ES5 代码\n\n1. UglifyJS: vue-cli 默认使用的压缩代码方式，它使用的是单线程压缩代码，打包时间较慢\n   ParallelUglifyPlugin: 开启多个子进程，把对多个文件压缩的工作分别给多个子进程去完成\n\n1. Vue Loader 是一个 webpack 的 loader，它允许你以一种名为单文件组件 (SFCs)的格式撰写 Vue 组件.   \n1. autoprefixer 自动补充前缀\n\n2.  webpack-dev-server 修改了webpack 配置中的 entry 属性，在里面添加了 webpack-dev-client 的代码，这样在最后的 bundle.js 文件中就会有接收 websocket 消息的代码了。\n\n3.  WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。\n\n4. Webpack splitchunk 将各个模块的交集部分抽离出来 \n\n5. Webpack ProvidePlugin 自动加载js，不必import。\n   new webpack.ProvidePlugin({\n     _map: ['lodash', 'map']\n   })\n\n6. Webpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试\n\n具体配置参考：http://www.jianshu.com/p/42e11515c10f\n\n感叹号的作用在于使同一文件能够使用不同类型的loader\n\n对css 分模块：\n\n```\n{\n        test: /\\.css$/,\n        loader: 'style!css?modules'//跟前面相比就在后面加上了?modules\n}\n```\n\nLoaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。\n\n####  常用命令\n\n\n```\n$ webpack --config webpack.min.js //另一份配置文件\n\n$ webpack --display-error-details //显示异常信息\n\n$ webpack --watch   //监听变动并自动打包\n \n$ webpack -p    //压缩混淆脚本，这个非常非常重要！\n \n$ webpack -d    //生成map映射文件，告知哪些模块被最终打包到哪里了\n```\n\n对公共库的封装：\n\n```\nentry: {\n  vendor: [\"jquery\", \"other-lib\"],\n  app: \"./entry\"\n}\nnew CommonsChunkPlugin({\n  name: \"vendor\",\n\n  // filename: \"vendor.js\"\n  // (Give the chunk a different name)\n\n  minChunks: Infinity,\n  // (with more entries, this ensures that no other module\n  //  goes into the vendor chunk)\n})\n```\n\n关于express webpack middleware 的配置\n\nhttp://www.cnblogs.com/linfangshuhellowored/p/5657285.html\n\n给文件自动添加hash后缀\n\n根据chunkhash的定义知道，chunkhash是根据具体模块文件的内容计算所得的hash值，所以某个文件的改动只会影响它本身的hash指纹，不会影响其他文件。配置webpack的output如下：\n```\noutput: {\n    filename: '[name].[chunkhash:8].js',\n    path: __dirname + '/built'\n}\noutput: {\n    filename: '[name].[hash:8].js',\n    path: __dirname + '/built'\n}\n```","slug":"webpack","published":1,"updated":"2020-08-18T02:14:14.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzf5se0h0024yy8k46qvj5vn","content":"<h3 id=\"babel相关\"><a href=\"#babel相关\" class=\"headerlink\" title=\"babel相关\"></a>babel相关</h3><ol>\n<li>DefinePlugin  需要字段是json,stringfy</li>\n<li><p>&lt;!doctype html&gt; 的作用就是让浏览器进入标准模式，使用最新的 HTML5标准来解析渲染页面；如果不写，浏览器就会进入混杂模式，我们需要避免此类情况发生。   </p>\n</li>\n<li><p>转义的过程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编写ES6代码</span><br><span class=\"line\">babylon 进行解析</span><br><span class=\"line\">解析得到 AST</span><br><span class=\"line\">plugin 用 babel-traverse 对 AST 树进行遍历转译</span><br><span class=\"line\">得到新的 AST树</span><br><span class=\"line\">用 babel-generator 通过 AST 树生成 ES5 代码</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>use(new webpack.IgnorePlugin(/^.\\/locale$/, /moment$/)) </p>\n</li>\n<li><p>require.context 参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文件夹路径</span><br><span class=\"line\">是否递归查找子文件夹下的模块</span><br><span class=\"line\">模块匹配规则，一般匹配文件后缀名</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>虽然@babel/polyfill提供了我们想要的所有新方法新类，但是这里依然存在一些问题：</p>\n<p>体积太大：比如我只用了String的新特性，但是我把整个包都引进来了，，这不是徒增了很多无用的代码。<br>污染全局环境：如果你引用了 @babel/polyfill，那么像Promise这样的新类就是挂载在全局上的，这样就会污染了全局命名空间。可能在一个团建建立的项目问题不太大，但是如果你是一个工具的开发者，你把全局环境污染了，别人用你的工具，就有可能把别人给坑了</p>\n</li>\n<li><p>@babel/plugin-transform-runtime会为代码创建一个沙盒环境，为core-js这里内建的实例提供假名，你可以无缝的使用这些新特性，而不需要使用require polyfill。</p>\n<p>一个解决方案就是引入transform runtime 来替代 @babel/polyfill。<br>幸运的是，我们有env这个preset，它又一个useBuiltIns选项，如果设置成”usage”，那么将会自动检测语法帮你require你代码中使用到的功能。  </p>\n</li>\n<li><p>@babel/core<br>其中最核心的包就是@babel/core，它主要的作用就是编译.</p>\n<p>Babel-cli<br>光有core是无法在命令行使用这些功能的，@babel/cli支持你直接在命令行中编译代码。<br>这句话会编译你src目录下的所有js代码，并编译成你想要的那样（babel.config.js配置的），并输出到lib目录下。 </p>\n</li>\n<li><p>@babel/preset-env<br>如果useBuiltIns为true，项目中必须引入babel-polyfill。</p>\n</li>\n<li><p>我们可以配置webpack的特殊注释(需要 Webpack &gt; 2.4)，将一些按需加载的路由打包到同一个js文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">const</span> Foo = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"group-foo\" */</span> <span class=\"string\">'./Foo.vue'</span>)</span><br><span class=\"line\">   <span class=\"keyword\">const</span> Bar = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"group-foo\" */</span> <span class=\"string\">'./Bar.vue'</span>)</span><br><span class=\"line\">   <span class=\"keyword\">const</span> Baz = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"group-foo\" */</span> <span class=\"string\">'./Baz.vue'</span>)</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">1. babel的转译过程分为三个阶段：parsing、transforming、generating，以ES6代码转译为ES5代码为例，babel转译的具体过程如下：</span></span><br><span class=\"line\"><span class=\"string\">   </span></span><br><span class=\"line\"><span class=\"string\">   ES6代码输入</span></span><br><span class=\"line\"><span class=\"string\">   </span></span><br><span class=\"line\"><span class=\"string\">   babylon 进行解析得到 AST</span></span><br><span class=\"line\"><span class=\"string\">   </span></span><br><span class=\"line\"><span class=\"string\">   plugin 用 babel-traverse 对 AST 树进行遍历转译,得到新的AST树</span></span><br><span class=\"line\"><span class=\"string\">   </span></span><br><span class=\"line\"><span class=\"string\">   用 babel-generator 通过 AST 树生成 ES5 代码</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">1. UglifyJS: vue-cli 默认使用的压缩代码方式，它使用的是单线程压缩代码，打包时间较慢</span></span><br><span class=\"line\"><span class=\"string\">   ParallelUglifyPlugin: 开启多个子进程，把对多个文件压缩的工作分别给多个子进程去完成</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">1. Vue Loader 是一个 webpack 的 loader，它允许你以一种名为单文件组件 (SFCs)的格式撰写 Vue 组件.   </span></span><br><span class=\"line\"><span class=\"string\">1. autoprefixer 自动补充前缀</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">2.  webpack-dev-server 修改了webpack 配置中的 entry 属性，在里面添加了 webpack-dev-client 的代码，这样在最后的 bundle.js 文件中就会有接收 websocket 消息的代码了。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">3.  WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">4. Webpack splitchunk 将各个模块的交集部分抽离出来 </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">5. Webpack ProvidePlugin 自动加载js，不必import。</span></span><br><span class=\"line\"><span class=\"string\">   new webpack.ProvidePlugin(&#123;</span></span><br><span class=\"line\"><span class=\"string\">     _map: ['lodash', 'map']</span></span><br><span class=\"line\"><span class=\"string\">   &#125;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">6. Webpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">具体配置参考：http://www.jianshu.com/p/42e11515c10f</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">感叹号的作用在于使同一文件能够使用不同类型的loader</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">对css 分模块：</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>{<br>        test: /.css$/,<br>        loader: ‘style!css?modules’//跟前面相比就在后面加上了?modules<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Loaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。</span><br><span class=\"line\"></span><br><span class=\"line\">####  常用命令</span><br></pre></td></tr></table></figure></p>\n<p>$ webpack –config webpack.min.js //另一份配置文件</p>\n<p>$ webpack –display-error-details //显示异常信息</p>\n<p>$ webpack –watch   //监听变动并自动打包</p>\n<p>$ webpack -p    //压缩混淆脚本，这个非常非常重要！</p>\n<p>$ webpack -d    //生成map映射文件，告知哪些模块被最终打包到哪里了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">对公共库的封装：</span><br></pre></td></tr></table></figure></p>\n<p>entry: {<br>  vendor: [“jquery”, “other-lib”],<br>  app: “./entry”<br>}<br>new CommonsChunkPlugin({<br>  name: “vendor”,</p>\n<p>  // filename: “vendor.js”<br>  // (Give the chunk a different name)</p>\n<p>  minChunks: Infinity,<br>  // (with more entries, this ensures that no other module<br>  //  goes into the vendor chunk)<br>})<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">关于express webpack middleware 的配置</span><br><span class=\"line\"></span><br><span class=\"line\">http://www.cnblogs.com/linfangshuhellowored/p/5657285.html</span><br><span class=\"line\"></span><br><span class=\"line\">给文件自动添加hash后缀</span><br><span class=\"line\"></span><br><span class=\"line\">根据chunkhash的定义知道，chunkhash是根据具体模块文件的内容计算所得的hash值，所以某个文件的改动只会影响它本身的hash指纹，不会影响其他文件。配置webpack的output如下：</span><br></pre></td></tr></table></figure></p>\n<p>output: {<br>    filename: ‘[name].[chunkhash:8].js’,<br>    path: <strong>dirname + ‘/built’<br>}<br>output: {<br>    filename: ‘[name].[hash:8].js’,<br>    path: </strong>dirname + ‘/built’<br>}<br><code>`</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"babel相关\"><a href=\"#babel相关\" class=\"headerlink\" title=\"babel相关\"></a>babel相关</h3><ol>\n<li>DefinePlugin  需要字段是json,stringfy</li>\n<li><p>&lt;!doctype html&gt; 的作用就是让浏览器进入标准模式，使用最新的 HTML5标准来解析渲染页面；如果不写，浏览器就会进入混杂模式，我们需要避免此类情况发生。   </p>\n</li>\n<li><p>转义的过程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编写ES6代码</span><br><span class=\"line\">babylon 进行解析</span><br><span class=\"line\">解析得到 AST</span><br><span class=\"line\">plugin 用 babel-traverse 对 AST 树进行遍历转译</span><br><span class=\"line\">得到新的 AST树</span><br><span class=\"line\">用 babel-generator 通过 AST 树生成 ES5 代码</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>use(new webpack.IgnorePlugin(/^.\\/locale$/, /moment$/)) </p>\n</li>\n<li><p>require.context 参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文件夹路径</span><br><span class=\"line\">是否递归查找子文件夹下的模块</span><br><span class=\"line\">模块匹配规则，一般匹配文件后缀名</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>虽然@babel/polyfill提供了我们想要的所有新方法新类，但是这里依然存在一些问题：</p>\n<p>体积太大：比如我只用了String的新特性，但是我把整个包都引进来了，，这不是徒增了很多无用的代码。<br>污染全局环境：如果你引用了 @babel/polyfill，那么像Promise这样的新类就是挂载在全局上的，这样就会污染了全局命名空间。可能在一个团建建立的项目问题不太大，但是如果你是一个工具的开发者，你把全局环境污染了，别人用你的工具，就有可能把别人给坑了</p>\n</li>\n<li><p>@babel/plugin-transform-runtime会为代码创建一个沙盒环境，为core-js这里内建的实例提供假名，你可以无缝的使用这些新特性，而不需要使用require polyfill。</p>\n<p>一个解决方案就是引入transform runtime 来替代 @babel/polyfill。<br>幸运的是，我们有env这个preset，它又一个useBuiltIns选项，如果设置成”usage”，那么将会自动检测语法帮你require你代码中使用到的功能。  </p>\n</li>\n<li><p>@babel/core<br>其中最核心的包就是@babel/core，它主要的作用就是编译.</p>\n<p>Babel-cli<br>光有core是无法在命令行使用这些功能的，@babel/cli支持你直接在命令行中编译代码。<br>这句话会编译你src目录下的所有js代码，并编译成你想要的那样（babel.config.js配置的），并输出到lib目录下。 </p>\n</li>\n<li><p>@babel/preset-env<br>如果useBuiltIns为true，项目中必须引入babel-polyfill。</p>\n</li>\n<li><p>我们可以配置webpack的特殊注释(需要 Webpack &gt; 2.4)，将一些按需加载的路由打包到同一个js文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">const</span> Foo = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"group-foo\" */</span> <span class=\"string\">'./Foo.vue'</span>)</span><br><span class=\"line\">   <span class=\"keyword\">const</span> Bar = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"group-foo\" */</span> <span class=\"string\">'./Bar.vue'</span>)</span><br><span class=\"line\">   <span class=\"keyword\">const</span> Baz = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"group-foo\" */</span> <span class=\"string\">'./Baz.vue'</span>)</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">1. babel的转译过程分为三个阶段：parsing、transforming、generating，以ES6代码转译为ES5代码为例，babel转译的具体过程如下：</span></span><br><span class=\"line\"><span class=\"string\">   </span></span><br><span class=\"line\"><span class=\"string\">   ES6代码输入</span></span><br><span class=\"line\"><span class=\"string\">   </span></span><br><span class=\"line\"><span class=\"string\">   babylon 进行解析得到 AST</span></span><br><span class=\"line\"><span class=\"string\">   </span></span><br><span class=\"line\"><span class=\"string\">   plugin 用 babel-traverse 对 AST 树进行遍历转译,得到新的AST树</span></span><br><span class=\"line\"><span class=\"string\">   </span></span><br><span class=\"line\"><span class=\"string\">   用 babel-generator 通过 AST 树生成 ES5 代码</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">1. UglifyJS: vue-cli 默认使用的压缩代码方式，它使用的是单线程压缩代码，打包时间较慢</span></span><br><span class=\"line\"><span class=\"string\">   ParallelUglifyPlugin: 开启多个子进程，把对多个文件压缩的工作分别给多个子进程去完成</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">1. Vue Loader 是一个 webpack 的 loader，它允许你以一种名为单文件组件 (SFCs)的格式撰写 Vue 组件.   </span></span><br><span class=\"line\"><span class=\"string\">1. autoprefixer 自动补充前缀</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">2.  webpack-dev-server 修改了webpack 配置中的 entry 属性，在里面添加了 webpack-dev-client 的代码，这样在最后的 bundle.js 文件中就会有接收 websocket 消息的代码了。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">3.  WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">4. Webpack splitchunk 将各个模块的交集部分抽离出来 </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">5. Webpack ProvidePlugin 自动加载js，不必import。</span></span><br><span class=\"line\"><span class=\"string\">   new webpack.ProvidePlugin(&#123;</span></span><br><span class=\"line\"><span class=\"string\">     _map: ['lodash', 'map']</span></span><br><span class=\"line\"><span class=\"string\">   &#125;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">6. Webpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">具体配置参考：http://www.jianshu.com/p/42e11515c10f</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">感叹号的作用在于使同一文件能够使用不同类型的loader</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">对css 分模块：</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>{<br>        test: /.css$/,<br>        loader: ‘style!css?modules’//跟前面相比就在后面加上了?modules<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Loaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。</span><br><span class=\"line\"></span><br><span class=\"line\">####  常用命令</span><br></pre></td></tr></table></figure></p>\n<p>$ webpack –config webpack.min.js //另一份配置文件</p>\n<p>$ webpack –display-error-details //显示异常信息</p>\n<p>$ webpack –watch   //监听变动并自动打包</p>\n<p>$ webpack -p    //压缩混淆脚本，这个非常非常重要！</p>\n<p>$ webpack -d    //生成map映射文件，告知哪些模块被最终打包到哪里了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">对公共库的封装：</span><br></pre></td></tr></table></figure></p>\n<p>entry: {<br>  vendor: [“jquery”, “other-lib”],<br>  app: “./entry”<br>}<br>new CommonsChunkPlugin({<br>  name: “vendor”,</p>\n<p>  // filename: “vendor.js”<br>  // (Give the chunk a different name)</p>\n<p>  minChunks: Infinity,<br>  // (with more entries, this ensures that no other module<br>  //  goes into the vendor chunk)<br>})<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">关于express webpack middleware 的配置</span><br><span class=\"line\"></span><br><span class=\"line\">http://www.cnblogs.com/linfangshuhellowored/p/5657285.html</span><br><span class=\"line\"></span><br><span class=\"line\">给文件自动添加hash后缀</span><br><span class=\"line\"></span><br><span class=\"line\">根据chunkhash的定义知道，chunkhash是根据具体模块文件的内容计算所得的hash值，所以某个文件的改动只会影响它本身的hash指纹，不会影响其他文件。配置webpack的output如下：</span><br></pre></td></tr></table></figure></p>\n<p>output: {<br>    filename: ‘[name].[chunkhash:8].js’,<br>    path: <strong>dirname + ‘/built’<br>}<br>output: {<br>    filename: ‘[name].[hash:8].js’,<br>    path: </strong>dirname + ‘/built’<br>}<br><code>`</code></p>\n"},{"title":"vite","date":"2022-06-06T07:44:53.000Z","_content":"\n1. 上面提到Vite是基于浏览器原生支持ESM的能力实现的，但要求用户的代码模块必须是ESM模块，因此必须将commonJs的文件提前处理，转化成 ESM 模块并缓存入 node_modules/.vite\n2. 减少模块和请求数量  Vite 将有许多内部模块的 ESM 依赖关系转换为单个模块，以提高后续页面加载性能。\n3. handleHotUpdate  热更新hook\n4. configureServer   是用于配置开发服务器的钩子。最常见的用例是在内部 connect 应用程序中添加自定义中间件:\n\n```\n以下钩子在服务器启动时被调用：\n\noptions\nbuildStart\n\n以下钩子会在每个传入模块请求时被调用：\n\nresolveId\nload\ntransform\n以下钩子在服务器关闭时被调用：\n\nbuildEnd\ncloseBundle\n如果你的插件使用 'virtual modules'（比如帮助函数），给模块名加上 \\0 前缀。这可以阻止其他插件执行它。\n\nconst myPlugin = {\n    name: 'my-plugin', //  必须的插件标志\n    apply: 'build' | 'serve', //  表明此插件应用在何种模式\n    enforce: 'post' | 'pre', //  插件排序\n\n    // rollup通用插件，ctx是一个plugins集合的上下文\n    options(ctx,pluginOptions) {\n      //  返回plugin opthons ，类型：async, sequential\n      return somePluginOptions\n    },\n    buildStart(ctx,pluginOptions) {\n      //  在服务启动前开始执行，类型：async, parallel\n      //  ...do something\n    },\n    resolveId(ctx,srouce, importer, pluginOptions) {\n      //  srouce为资源的路径，importer为引入此资源的文件\n      //  如果有返回值，则将替换掉importer中引入的路径，同时将返回值传递给其他hook\n      //  类型 async, first\n      //  ...do something\n      return srouce\n    },\n    load(ctx,id, srr) {\n      //  id为resolveId返回的值\n      //  加载资源并返回 类型 async, first\n      //  ...do something\n      return code\n    },\n    transform(ctx,code, id, ssr) {\n      //  code为load返回的值，id为resolveId返回的值\n      //  转译code并返回转译结果 类型 async, first，\n      //  ...do something\n      return transformCode\n    },\n    buildEnd(err) {\n      //  构建结束的回调，可以捕获错误。类型 async, parallel\n    },\n    closeBundle() {\n      //  构建结束的最终回调，类型 async, parallel\n    },\n\n    //  vite 独有插件\n    config(config, env) {\n      //  返回一个配置对象，merge到最终config中\n      //  类型 sync, sequential\n      return config\n    },\n    configResolved(config) {\n      //  解析 Vite 配置后调用 类型 sync, parallel\n    },\n    configureServer(server) {\n      //  服务器配置完后的hook 类型 sync, paralle\n    },\n    transformIndexHtml() {\n      // 转换 index.html 的专用钩子。钩子接收当前的 HTML 字符串和转换上下文\n      // 类型 async, sequential\n    },\n    handleHotUpdate(HmrContext) {\n      //  触发热更新时的hook，可以更加精确的控制hmr\n      //  类型\n    }\n  }\n\n```\n\n\n1. ","source":"_posts/vite.md","raw":"---\ntitle: vite \ndate: 2022-06-06 15:44:53\ntags:\n---\n\n1. 上面提到Vite是基于浏览器原生支持ESM的能力实现的，但要求用户的代码模块必须是ESM模块，因此必须将commonJs的文件提前处理，转化成 ESM 模块并缓存入 node_modules/.vite\n2. 减少模块和请求数量  Vite 将有许多内部模块的 ESM 依赖关系转换为单个模块，以提高后续页面加载性能。\n3. handleHotUpdate  热更新hook\n4. configureServer   是用于配置开发服务器的钩子。最常见的用例是在内部 connect 应用程序中添加自定义中间件:\n\n```\n以下钩子在服务器启动时被调用：\n\noptions\nbuildStart\n\n以下钩子会在每个传入模块请求时被调用：\n\nresolveId\nload\ntransform\n以下钩子在服务器关闭时被调用：\n\nbuildEnd\ncloseBundle\n如果你的插件使用 'virtual modules'（比如帮助函数），给模块名加上 \\0 前缀。这可以阻止其他插件执行它。\n\nconst myPlugin = {\n    name: 'my-plugin', //  必须的插件标志\n    apply: 'build' | 'serve', //  表明此插件应用在何种模式\n    enforce: 'post' | 'pre', //  插件排序\n\n    // rollup通用插件，ctx是一个plugins集合的上下文\n    options(ctx,pluginOptions) {\n      //  返回plugin opthons ，类型：async, sequential\n      return somePluginOptions\n    },\n    buildStart(ctx,pluginOptions) {\n      //  在服务启动前开始执行，类型：async, parallel\n      //  ...do something\n    },\n    resolveId(ctx,srouce, importer, pluginOptions) {\n      //  srouce为资源的路径，importer为引入此资源的文件\n      //  如果有返回值，则将替换掉importer中引入的路径，同时将返回值传递给其他hook\n      //  类型 async, first\n      //  ...do something\n      return srouce\n    },\n    load(ctx,id, srr) {\n      //  id为resolveId返回的值\n      //  加载资源并返回 类型 async, first\n      //  ...do something\n      return code\n    },\n    transform(ctx,code, id, ssr) {\n      //  code为load返回的值，id为resolveId返回的值\n      //  转译code并返回转译结果 类型 async, first，\n      //  ...do something\n      return transformCode\n    },\n    buildEnd(err) {\n      //  构建结束的回调，可以捕获错误。类型 async, parallel\n    },\n    closeBundle() {\n      //  构建结束的最终回调，类型 async, parallel\n    },\n\n    //  vite 独有插件\n    config(config, env) {\n      //  返回一个配置对象，merge到最终config中\n      //  类型 sync, sequential\n      return config\n    },\n    configResolved(config) {\n      //  解析 Vite 配置后调用 类型 sync, parallel\n    },\n    configureServer(server) {\n      //  服务器配置完后的hook 类型 sync, paralle\n    },\n    transformIndexHtml() {\n      // 转换 index.html 的专用钩子。钩子接收当前的 HTML 字符串和转换上下文\n      // 类型 async, sequential\n    },\n    handleHotUpdate(HmrContext) {\n      //  触发热更新时的hook，可以更加精确的控制hmr\n      //  类型\n    }\n  }\n\n```\n\n\n1. ","slug":"vite","published":1,"updated":"2022-06-06T07:52:51.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl42gnsc70000yr8kcpgf3e5p","content":"<ol>\n<li>上面提到Vite是基于浏览器原生支持ESM的能力实现的，但要求用户的代码模块必须是ESM模块，因此必须将commonJs的文件提前处理，转化成 ESM 模块并缓存入 node_modules&#x2F;.vite</li>\n<li>减少模块和请求数量  Vite 将有许多内部模块的 ESM 依赖关系转换为单个模块，以提高后续页面加载性能。</li>\n<li>handleHotUpdate  热更新hook</li>\n<li>configureServer   是用于配置开发服务器的钩子。最常见的用例是在内部 connect 应用程序中添加自定义中间件:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下钩子在服务器启动时被调用：</span><br><span class=\"line\"></span><br><span class=\"line\">options</span><br><span class=\"line\">buildStart</span><br><span class=\"line\"></span><br><span class=\"line\">以下钩子会在每个传入模块请求时被调用：</span><br><span class=\"line\"></span><br><span class=\"line\">resolveId</span><br><span class=\"line\">load</span><br><span class=\"line\">transform</span><br><span class=\"line\">以下钩子在服务器关闭时被调用：</span><br><span class=\"line\"></span><br><span class=\"line\">buildEnd</span><br><span class=\"line\">closeBundle</span><br><span class=\"line\">如果你的插件使用 &#x27;virtual modules&#x27;（比如帮助函数），给模块名加上 \\0 前缀。这可以阻止其他插件执行它。</span><br><span class=\"line\"></span><br><span class=\"line\">const myPlugin = &#123;</span><br><span class=\"line\">    name: &#x27;my-plugin&#x27;, //  必须的插件标志</span><br><span class=\"line\">    apply: &#x27;build&#x27; | &#x27;serve&#x27;, //  表明此插件应用在何种模式</span><br><span class=\"line\">    enforce: &#x27;post&#x27; | &#x27;pre&#x27;, //  插件排序</span><br><span class=\"line\"></span><br><span class=\"line\">    // rollup通用插件，ctx是一个plugins集合的上下文</span><br><span class=\"line\">    options(ctx,pluginOptions) &#123;</span><br><span class=\"line\">      //  返回plugin opthons ，类型：async, sequential</span><br><span class=\"line\">      return somePluginOptions</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    buildStart(ctx,pluginOptions) &#123;</span><br><span class=\"line\">      //  在服务启动前开始执行，类型：async, parallel</span><br><span class=\"line\">      //  ...do something</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolveId(ctx,srouce, importer, pluginOptions) &#123;</span><br><span class=\"line\">      //  srouce为资源的路径，importer为引入此资源的文件</span><br><span class=\"line\">      //  如果有返回值，则将替换掉importer中引入的路径，同时将返回值传递给其他hook</span><br><span class=\"line\">      //  类型 async, first</span><br><span class=\"line\">      //  ...do something</span><br><span class=\"line\">      return srouce</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    load(ctx,id, srr) &#123;</span><br><span class=\"line\">      //  id为resolveId返回的值</span><br><span class=\"line\">      //  加载资源并返回 类型 async, first</span><br><span class=\"line\">      //  ...do something</span><br><span class=\"line\">      return code</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    transform(ctx,code, id, ssr) &#123;</span><br><span class=\"line\">      //  code为load返回的值，id为resolveId返回的值</span><br><span class=\"line\">      //  转译code并返回转译结果 类型 async, first，</span><br><span class=\"line\">      //  ...do something</span><br><span class=\"line\">      return transformCode</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    buildEnd(err) &#123;</span><br><span class=\"line\">      //  构建结束的回调，可以捕获错误。类型 async, parallel</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    closeBundle() &#123;</span><br><span class=\"line\">      //  构建结束的最终回调，类型 async, parallel</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    //  vite 独有插件</span><br><span class=\"line\">    config(config, env) &#123;</span><br><span class=\"line\">      //  返回一个配置对象，merge到最终config中</span><br><span class=\"line\">      //  类型 sync, sequential</span><br><span class=\"line\">      return config</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    configResolved(config) &#123;</span><br><span class=\"line\">      //  解析 Vite 配置后调用 类型 sync, parallel</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    configureServer(server) &#123;</span><br><span class=\"line\">      //  服务器配置完后的hook 类型 sync, paralle</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    transformIndexHtml() &#123;</span><br><span class=\"line\">      // 转换 index.html 的专用钩子。钩子接收当前的 HTML 字符串和转换上下文</span><br><span class=\"line\">      // 类型 async, sequential</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    handleHotUpdate(HmrContext) &#123;</span><br><span class=\"line\">      //  触发热更新时的hook，可以更加精确的控制hmr</span><br><span class=\"line\">      //  类型</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>1. </p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>上面提到Vite是基于浏览器原生支持ESM的能力实现的，但要求用户的代码模块必须是ESM模块，因此必须将commonJs的文件提前处理，转化成 ESM 模块并缓存入 node_modules&#x2F;.vite</li>\n<li>减少模块和请求数量  Vite 将有许多内部模块的 ESM 依赖关系转换为单个模块，以提高后续页面加载性能。</li>\n<li>handleHotUpdate  热更新hook</li>\n<li>configureServer   是用于配置开发服务器的钩子。最常见的用例是在内部 connect 应用程序中添加自定义中间件:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下钩子在服务器启动时被调用：</span><br><span class=\"line\"></span><br><span class=\"line\">options</span><br><span class=\"line\">buildStart</span><br><span class=\"line\"></span><br><span class=\"line\">以下钩子会在每个传入模块请求时被调用：</span><br><span class=\"line\"></span><br><span class=\"line\">resolveId</span><br><span class=\"line\">load</span><br><span class=\"line\">transform</span><br><span class=\"line\">以下钩子在服务器关闭时被调用：</span><br><span class=\"line\"></span><br><span class=\"line\">buildEnd</span><br><span class=\"line\">closeBundle</span><br><span class=\"line\">如果你的插件使用 &#x27;virtual modules&#x27;（比如帮助函数），给模块名加上 \\0 前缀。这可以阻止其他插件执行它。</span><br><span class=\"line\"></span><br><span class=\"line\">const myPlugin = &#123;</span><br><span class=\"line\">    name: &#x27;my-plugin&#x27;, //  必须的插件标志</span><br><span class=\"line\">    apply: &#x27;build&#x27; | &#x27;serve&#x27;, //  表明此插件应用在何种模式</span><br><span class=\"line\">    enforce: &#x27;post&#x27; | &#x27;pre&#x27;, //  插件排序</span><br><span class=\"line\"></span><br><span class=\"line\">    // rollup通用插件，ctx是一个plugins集合的上下文</span><br><span class=\"line\">    options(ctx,pluginOptions) &#123;</span><br><span class=\"line\">      //  返回plugin opthons ，类型：async, sequential</span><br><span class=\"line\">      return somePluginOptions</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    buildStart(ctx,pluginOptions) &#123;</span><br><span class=\"line\">      //  在服务启动前开始执行，类型：async, parallel</span><br><span class=\"line\">      //  ...do something</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolveId(ctx,srouce, importer, pluginOptions) &#123;</span><br><span class=\"line\">      //  srouce为资源的路径，importer为引入此资源的文件</span><br><span class=\"line\">      //  如果有返回值，则将替换掉importer中引入的路径，同时将返回值传递给其他hook</span><br><span class=\"line\">      //  类型 async, first</span><br><span class=\"line\">      //  ...do something</span><br><span class=\"line\">      return srouce</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    load(ctx,id, srr) &#123;</span><br><span class=\"line\">      //  id为resolveId返回的值</span><br><span class=\"line\">      //  加载资源并返回 类型 async, first</span><br><span class=\"line\">      //  ...do something</span><br><span class=\"line\">      return code</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    transform(ctx,code, id, ssr) &#123;</span><br><span class=\"line\">      //  code为load返回的值，id为resolveId返回的值</span><br><span class=\"line\">      //  转译code并返回转译结果 类型 async, first，</span><br><span class=\"line\">      //  ...do something</span><br><span class=\"line\">      return transformCode</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    buildEnd(err) &#123;</span><br><span class=\"line\">      //  构建结束的回调，可以捕获错误。类型 async, parallel</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    closeBundle() &#123;</span><br><span class=\"line\">      //  构建结束的最终回调，类型 async, parallel</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    //  vite 独有插件</span><br><span class=\"line\">    config(config, env) &#123;</span><br><span class=\"line\">      //  返回一个配置对象，merge到最终config中</span><br><span class=\"line\">      //  类型 sync, sequential</span><br><span class=\"line\">      return config</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    configResolved(config) &#123;</span><br><span class=\"line\">      //  解析 Vite 配置后调用 类型 sync, parallel</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    configureServer(server) &#123;</span><br><span class=\"line\">      //  服务器配置完后的hook 类型 sync, paralle</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    transformIndexHtml() &#123;</span><br><span class=\"line\">      // 转换 index.html 的专用钩子。钩子接收当前的 HTML 字符串和转换上下文</span><br><span class=\"line\">      // 类型 async, sequential</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    handleHotUpdate(HmrContext) &#123;</span><br><span class=\"line\">      //  触发热更新时的hook，可以更加精确的控制hmr</span><br><span class=\"line\">      //  类型</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>1. </p>\n"},{"title":"yanbao","date":"2022-07-06T01:52:11.000Z","_content":"\n## 协鑫\n掌握颗粒硅量产技术，迈入万吨级产能规模。公司未来规划徐州 10 万吨、\n乐山 10 万吨以及包头 30 万吨颗粒硅产能。预计 21-22 年公司颗粒硅产\n能可达 3/26 万吨，实现大幅提升。颗粒硅产能规模的扩大助力公司具备\n规模优势，生产成本有望进一步降低，盈利能力有望逐步提升\n\n目前生产 1 千克颗粒硅耗电\n仅 18 度，相较于西门子法 60 度/千克有显著下降；水耗氢耗方面，FBR\n方法较西门子法降低 30%/42%。投资方面，颗粒硅每万吨产能仅需要 7\n亿初始投资，相较西门子法可降低 1.5-2 亿元，具备成本优势。   \n\n硅料N型时代全面到来，P型产能可能会在2024会全面出清，硅料市场上能稳定持续供应就3800，通威，大全三家，还有半家就是新特，基本上新玩家绝大部分要全军覆没了，所以硅料实际供应产能看老玩家就可以了，这个形势到今年下半年就会非常明朗；\n\n也许半年，也许一年，距离彻底颠覆棒状硅的时刻已经越来越近了。下个月，乐山二期就开始动工了，包头二期应该也不远了。念念不忘，必有回响\n\n## 甜味剂\n与其他糖醇类产品相比，赤藓糖醇不被人体代谢，因此几乎不产生热量，也不引起血糖变化，是正宗的“零热量”天然甜味剂；另外，赤藓糖醇物理属性优异，耐热性较好，性质稳定，易于添加存储，综合优势鲜明突出，获得市场青睐\n唯独赤藓糖醇直接通过小肠进入肾脏被尿液排出人体，因此是各糖醇类中人体耐受度最高的低倍甜味剂，\n赤藓糖醇生产是在葡萄糖的基础上，接入菌种、添加发酵培养基进行深层发酵，然后经过净化提纯所得。赤藓糖醇是天然零热量的甜味剂，木糖醇是有热量的\n\n\n抗性糊精由淀粉加工而成，是将焙烤糊精的难消化成分用工业技术提取处理并精炼而成的一种低热量葡聚糖，属于低分子水溶性膳食纤维。作为一种低热量可溶性食品原料，在食品工业中具有的广阔的发展前景。\n\n纯天然甜味剂代糖产品中,赤藓糖醇采用发酵生产, 它溶解于水中时具有吸热效果，溶解度较低、易结晶，所以入口具有清凉感，更适合清爽型的饮料当中。 而阿洛酮糖采用生物法制备,它可以抑制人体血糖的快速升高，调节血糖等有益人体健康的特殊功能，更适合烘培类产品、医药等领域。\n\n阿洛酮糖是一种新型甜味剂，具有降血糖、低热量等优异性能，\n\n化学合成糖目前最好的解决方案是三氯蔗糖，植物提取糖目前最好的解决方案是甜菊糖苷，在生物发酵糖里面目前在国内的解决方案是赤藓糖醇，在海外的解决方案是阿洛酮糖，\n \n\n木糖醇難以被口腔中的細菌分解產生酸性物質，因此不易引起蛀牙，木糖醇代謝時不需要胰島素就可直接進入細胞，並不會引起血糖飆高，糖尿病病人可做為蔗糖替代品，但仍會產生熱量，所以不可過量攝取。\n\n聚葡萄糖和抗性糊精均为可溶性膳食纤维\n蛋白质、脂肪、碳水化合物、维生素、矿物质与水并列\n可溶性膳食纤维由于具有良好的溶解性，无异味，受到广大食品加工企业追捧，作为增稠剂、乳化剂等运用于食品饮料中\n\n功能与加工性更出众的可溶膳食纤维。抗性糊精是低热量葡聚 糖的一种新型式，是一种重要低分子、非黏性水溶性膳食纤维。由于结构 中存在α-1,2，α-1,3，α-1,6 键，不能被体内的消化酶所分解，在消化道 内也不会被小肠吸收消化，可以直接进入大肠，被大肠内益生菌发酵，作 为膳食纤维发挥各种生理作用。\n\n益生元是指能够选择性地促进肠道内原有的一种或多种有益细菌（益生菌）生长繁殖和/或增加碳水化合物代谢的物质，主要包括各类功能性低聚糖。常见的益生元包括低聚果糖、低聚半乳糖、菊粉、低聚木糖和低聚异麦芽糖等，不同产品物化性能及生理功能有所差异\n\n## 光伏 TCL\n\n目前市场没有认可中环通过使用低等级便宜硅料、提高生产效率来提升利润率的逻辑，对中环Q4业绩预期不高\n\n如果考虑硅片业务技术研发投入已经进入成熟期，而半导体硅片业务（12英寸、IOS硅片、碳化硅等新业务）、组件与电池业务（叠瓦，电池，XBC等）尚处于研发投入高速增长期。\n\n中环210P现有最新客户：晶科（已经上升到第一大客户）、协鑫、东方日升、天合、通威、晶澳等。\n其一基于在硅料涨价背景下对供应安全的应对性需求；其二是出于“先抢地，再耕田”的战略性行为；其三是大尺寸硅片呈确定性趋势，硅片产能仍面临结构性供应不足。\n\n### 光伏\n大厂为消化产能、提高出货规模，现在亏损也卖，先把中小企业挤死再说。目前，一线组件厂商开工率还在70%—80%；但二三线厂商开工率只剩约40%，已有中型光伏制造企业单月就亏损上亿元。一线厂商“一体化”，就是为了在产能出清阶段，靠自身产业链不同板块调剂利润、保障现金流。当下，在整个光伏产业链中，上游硅料盈利，中游硅片微利、电池组件则全线亏损，终端产品组件的成本账已毫厘必争，即使‘一体化’，1元/瓦能有微利，低于0.99元/瓦基本就亏\n\n## 碳纤维\n\nZT7、ZT8、ZT9 系列和高模型 M40J 级、M40X 级石墨纤维工程产业化 能力，其中 ZT7 系列产品已正式进入稳定的批量生产阶段，打破了国外对高性能碳 纤维的封锁和限制。公司现已成为国内航空航天领域 ZT7 系列碳纤维产品的批量稳 定供应商。未来，公司将通过自有核心技术改进 ZT9 系列高强度碳纤维产品性能， 攻关 M65J 级高模量石墨纤维等新一代国产碳纤维批量稳定制备技术，同时扩充高 性能碳纤维产能，\n\n## 万科\n分业务类型看，本集团营业收入中，来自房地产开发及相关资产经营业务的营业收入 1,843.6 亿元，\n占比 91.8%；来自物业服务的营业收入 140.4 亿元，占比 7.0%。\n\n、相关资产经营业务主要包括物流、公寓、商业、办公等业务收入。\n“万纬物流”为本集团物流仓储服务及一体化供应链解决方案平台，目前综合实力位列行业第一梯队。\n上半年物流业务（含非并表项目）实现经营收入 19.5亿元，同比增长 17.0%，其中高标库营业收入\n11.4 亿元，同比增长 9.1%；冷链营业收入（不含供应链业务收入）8.1 亿元，同比增长 30.3%\n\n本集团旗下“泊寓”作为全国最大的集中式公寓提供商，致力于为新进入城市的青年提供综合租住服务。\n上半年租赁住宅业务（含非并表项目）实现营业收入 16.4 亿元，同比增长 10.6%。\n\n报告期内本集团商业业务(含非并表项目)营业收入 43.0 亿元，同比增长 7.3%。其中，印力管理的商\n业项目营业收入 27.4 亿元，整体出租率 94.7%，同比提高 2.0 个百分点。\n\n2021 年公司地产业务收入增速为 7.36%，物业业务 32.1%，物流仓储业务68.9%，商业开发运营业务 20.6%，长租公寓业务 13.9%，多元化布局已初现规模，将成为公司未来发展新的利润蓄水池和增长点\n\n住宅物业服务：作为公司住宅物业服务板块，公司主要以万科物业为品牌提供基础物业服务，主要包括向住宅物业业主或住户提供的清洁服务、秩序维护服务、园艺服务及维修及保养服务。\n\n房屋再装修及美居服务\n\n以 2021 年的业绩来看，万科地产业务收入\n同比增长 7.36%，物业业务增速 32.1%，物流仓储业务增速 68.9%，商业开发运营\n业务增速 20.6%，长租公寓业务增速 13.9%\n\n### 奥瑞金\n\n覆膜铁材料由奥瑞金自主研发,拥有独立的知识产权,已经实现规模化生产,是预制菜金属包装的理想原材料。 \n覆膜铁材料具有高耐腐蚀性能,现在的预制菜基本都是含盐食品,覆膜铁包装能够地很好满足含盐高温杀菌食品对包装极为苛刻的要求,此外,覆膜铁材料在高耐加\n工性能、食品卫生安全方面也有优势\n\n2023 年观察青岛啤酒灌装投产后的利润 以及大宗价格下降\n23Q1-3 毛利率16.1%，同增3.1pct，净利率6.4%，同增1.4pct\n\n枣庄项目一期产能预计今年年底开始生产,主要客户是青啤。 --- 智能体现在2024了\n佛山项目预计2026年上半年完成两条产线20亿产能搬迁。 \n主要客户是百威、可口可乐、健力宝、天地壹号、青岛啤酒、屈臣氏等。 \n\n拟要约收购中粮包装，产业格局有望优化\n\n公司主要服务的快消品品牌有红牛、飞鹤、旺旺、露露、林家铺子、东鹏特饮、战马、健力宝、安利、百威啤酒、青岛啤酒、燕京啤酒、雪花啤酒、加多宝、可\n口可乐、百事可乐、元气森林、天地壹号、大窑、林家铺子、麦富迪宠物食品等\n\n目前我们有澳洲的子公司Jamestrong,还有和中粮包装一起在欧洲投资制罐公司。 \n这些布局已经在公司内部形成了清晰的产品协同、制造协同和市场协同条件。 \n 公司高度重视海外市场增长机会,并适时加大投资布局\n\n 啤酒行业增长逻辑由“量”向“质”转变，产品结\n构升级成为主流啤酒厂商核心策略（我国罐装啤酒换算价格为1.16 元/100ml，高于瓶装\n啤酒 0.71 元/100ml）。 目前啤酒罐占二片罐需求近 58%，2016-2021 年啤酒罐化率由\n23.2%提升至26.3%，但是与成熟啤酒市场英国64%、美国67%、韩国74%、以及日\n本90%的罐化率相比，我国仍有较大提升空间。\n\n\n产能扩张落地，盈利结构优化。产能扩张方面，9 月份公司江门工厂建成投产，自动化制罐生产线已进入产能爬坡期，规划年产能为二片罐10 亿罐。公司对外延并购的波尔工厂持续进行产能整合与调整，\n二片罐产能及产能利用率均有提升空间。随着二片罐业务的盈利增长，公司盈利端对单一客户的依赖程度有望不断下降，盈利结构将优化\n\n二片罐方面，啤酒罐化率迎来加速提升期，驱动二片罐下游需求增加。二片罐下游需求以啤酒为主，其次为碳酸饮料、茶饮料等，\n\n### 万华化学\n\n精细化学品及新材料板块：精细化学品及新材料众多项目计划于 2023-25 年\n投产放量，23 年公司尼龙 12、PC、柠檬醛、磷酸铁锂、NMP 等计划投产，24 年 TPU、\n特种胺、柠檬醛、PC 等产品也会相继投产释放；25 年 PC 进一步扩产，润肤剂、香料\n及营养品、SAP 水性树脂、抛光垫及抛光液、聚乳酸等产品计划相继投放，板块未来\n几年有望呈现较高增速。毛利率上，受益宏观修复和高价值产品不断投产，以及公司\n在精细化工领域的管理能力不断提升，板块毛利率有望稳步提升\n\n精细化学品及新材料业务多集中在眉山基地和烟台总部。目前烟台基地主要有\n聚氨酯材料（TPU、ADI）、高性能塑料（尼龙 12、MMA、PMMA、PC）、半导体材料（抛\n光垫、抛光液等）、香精香料（柠檬醛及衍生物、W 酯）、维生素（VE）等。\n![Alt text](image-6.png)\n![Alt text](image-7.png)\n聚碳酸酯因其优良的介电强度、耐热老化性、绝缘性能、抗冲击性、透光性等优\n点在电子电器、板材/片材/薄膜、汽车等行业领域应用广泛\n\n从万华规划产能投放节奏来看，精细化学品及新材料众多项目在 2023-2025 年\n放量，公司有望突破 MDI 主业的增长空间，迎来新材料业务端的业绩成长。而其中\nADI、工程塑料、SAP 及其他半导体和新能源材料项目布局值得重点关注\n\n分领域来看，全球聚合 MDI 最大的应用领域是建筑和保温工程，2021 年其应用\n占比约 49%，其次是家电、胶粘剂/密封件/涂料、汽车和冷藏集装箱，分别占比 21%、\n17%、11%和 1%。全球纯 MDI 最大的应用领域为 TPU，占比 40%，氨纶、合成革、微孔\n弹性体、胶粘剂/涂料分别占比 15%、13%、12%和 4%。\n\n整体来看，MDI 的需求与地产景气度相关度较高。22 年以来国内家电、地产等领\n域需求较弱，叠加 22 年下半年以来海外经济增速回落下出口需求亦走弱，MDI 价格\n价差整体回落。当前 MDI 价差处于近十年相对低位，行业景气较低迷\n\n2023 年前三季度，伴随新装置产能释放，公司各主要业务板块销量同比增长，\n但下游需求处于恢复阶段，产品价格有所下降，前三季度公司实现营业收入 1326 亿\n元，同比增长 2%，实现归母净利润 127 亿元，同比下降 7%\n\n市场认为 MDI 主业与地产周期高度相关，地产萎靡将长期抑制 MDI 需求和公司主业\n盈利能力。我们认为当下已处于地产行业低谷，验证了公司 MDI 仍有较好盈利水平，\n且随着地产刺激政策陆续出台以及新能源车等领域的增量需求提振，MDI 需求长期向\n好。再者，MDI 垄断格局有望进一步强化，公司 MDI 主业长期有着较好的盈利能力。 \n另外，公司有较强的化工生产技术和研发经验积累，布局的多种大品类、高附加值专\n用化学品具有较大的市场空间，相关多元化布局的潜力未被市场充分认知。\n\nMDI 为聚氨酯的关键原料，生产流程长、工艺复杂、技术壁垒深厚、规模优\n势显著，行业长期呈寡头垄断格局，CR3 约 68%。万华 MDI 工艺和产能全球\n领先，单套产能达 110 万吨系全球最大，装置规模优势突出，投资和成本\n最低。并且公司持续进行装置改进，宁波改扩建完成后单套产能可达 120\n万吨，进一步拓宽 MDI 产业护城河。短期地产萎靡、宏观经济疲软致 MDI\n产业需求低迷，但公司仍有较好的盈利和现金流，已呈修复和增长态势。\n石化产业平台完善公司原料保障\n\n高端化、差异化是中国化工产业发展的痛点和明确的产业发展方向，也是\n公司在精细化学品及新材料板块追求的方向。公司积极开发多种大品类、\n高附加值专用化学品，在 ADI 聚氨酯材料、工程塑料、SAP 吸水树脂、半导\n体和新能源材料等领域均有布局，打开了公司的成长上限\n\n据我们不完全统计，按照 2023 年平均价格计算，如果万华化学现有规划项目全\n部如期投产，预计 2022-2023 年新项目将新增年营收 353 亿元，2022-2024 年\n新项目将新增年营收累计 862 亿元，全部项目均投产后将新增年营收累计 1893\n亿元\n\n按照 2022年平均价格计算，如果万华化学现有规划项目全部如期投产，预计 2022年将新增营收 208亿元，2022-2023年投产项目将新增年营收累计 542亿元，全部项目均投产后将新增营收 1808亿元。\n![Alt text](image.png)\n\n公司依托自身强大的研发实力和产业链一体化优势，全面进入新能源、营养品、高端国产替代等领域，在抛光液和抛光垫等半导体材料、三元材料和磷酸铁锂等电池材料、PBAT 和PLA 等可降解材料POE 等高端聚烯烃材料、柠檬醛衍生物等材料均有规划布局，根据公司新材料投产进度，尼龙12 已经于近期投产，HDI、柠檬醛及衍生物、顺酐、新增PC、磷酸铁锂等预计2023 年相继投产，POE、PLA、NMP、新增PMMA、聚醚胺等预计2024 年相继投产。站在当前时间节点，新材料板块已经进入快速发展期。根据我们的预测，2022-2024 新材料板块主要项目建成投产后，新增年化营业收入贡献能够达到521.45 亿，未来3 年新材料营收保持60%\nMDI有以下特点 1. 行业集中度高 2.未来2年只有万华扩产 3. 欧洲设备老化 检修影响价格\n![Alt text](image-1.png)\n\n聚合MDI 下游应用中47%用于家电冰柜保温材料中，是聚合MDI 下游最大的应用领域，24%用于建筑相关领域，包括建筑板材，建筑涂料等；10%用于胶粘剂中，而胶粘剂下游主要也是用于基建施工，家用包装，建筑制品等领域，和建筑领域息息相关；6%用于汽车领域，受益于汽车轻量化的需求带动，聚氨酯材料在汽车结构配件中的应用愈加广泛\n\n下游主要用于生\n产软质聚氨酯泡沫及聚氨酯弹性体、涂料、胶黏剂。TDI 下游 70%用于软泡领域，主要包括海绵类产品，用于坐垫，沙发等家居领域；20%以涂料固化剂的形式用于涂料中，用于建筑、汽车、电子电器等领域；其余 5%用于胶粘剂中，5%用于弹性体\n中使用，TDI 行业景气度和下游家居、汽车、建筑等传统制造业景气度息息相关。\n\n### 福耀玻璃\n\n。由于 22Q3 和 23Q2 人民币贬值\n公司分别产生汇兑收益 5.54 亿元、7.18 亿元，而 23Q3 产生汇兑损失 2.64 亿元，若同\n步剔除汇兑，则 23Q3 公司利润总额同比+35.9%、环比+23.6%，盈利能力恢复较好。\n\nASP、新业务、份额三箭齐发，从周期到成长再出发。我们持续看好 Hud+天幕渗透率加\n速下公司汽车玻璃 Asp 的提升，格局进一步优化下公司海外市场份额的提升，以及铝\n饰条业务有望迎来反转步入收获期\n\n铝饰条业务拐点已至即将开启放量周期：SAM OEM 订单投产在即，国内福清、长春工厂投产逐步爬坡\n\n福耀在全景天幕市场的占\n有率达60%以上，主要配套车型包括路虎极光、吉利星瑞、东风岚图、蔚来EC6、福特\nmustang-e、路虎 I-PACE等。\n\n\n着汽车智能化程度不断提升，预计科\n技功能的渗透率从2021年的5%提升至2026年的30%以上，随着技术的进步，HUD和其\n他科技的成本逐渐下降，而天幕处于发展初期，随着科技含量的提升，价格也将持续\n增长。在多方因素的作用下，预计2026年汽车玻璃的市场规模将达421.1亿元，年复\n合增长率为14.3%\n \n\n三季度公司天幕玻璃、HUD 玻璃等高附加\n值产品占比由 5.7%提升至 43.8%。Q3 天然气价格仍处于高位，纯\n碱、海运费等成本项目呈现企稳回落趋势，公司综合毛利率为\n34.9%，环比增长2.3pct，修复明显。\n\n\n8 月 30 日公司公\n告将对美国福耀增加投资 6.5 亿美元，其中 3 亿用于投资建设镀膜、\n钢化夹层边窗生产线；3.5 亿用于建设一窑两线用于生产浮法玻璃、\n以及 4 条太阳能背板玻璃加工线和配套厂房。同时，公司在郑州规划\n500 亩左右用地，用于未来发展所需。公司新一轮扩产周期开启，以应对全球化的深入以及玻璃量价齐升的需求。\n\n海外业务：三季度SAM收入环比降低15%，亏损环比扩大\n360万欧元，主要系欧洲汽车业受供应链扰动影响+天然气与电价格上涨。\n\n汽玻市场空间扩容，天幕玻璃、调光玻璃、HUD 显示玻璃等高附加值汽玻\n增量加速兑现。根据测算，2020 年天幕玻璃在新能源车中渗透率约 16.4%，\n2021 年增长至 23.5%，天幕玻璃渗透率快速提升\n\n铝饰条业务，德国 SAM 整合接近尾声，国内铝饰条产能布局稳步推进。\n目前 SAM 已从原 11 个工厂整合到 2 个生产工厂+1 个备用工厂，硬件改\n造到位，新 ERP 系统上线，虽然当前还处于亏损状态但在逐步向好。国\n内产能方面，长春工厂两条铝饰条产线已完成建设，预计 2023 年陆续会\n有产品交付；此外福清第二条铝饰条产线的扩建工作正在进行，苏州工\n厂计划 2023 年开始建设，预计到 2023 年底或 2024 年初，国内会形成 6\n条铝饰条生产线的产业布局，成为未来福耀营收的新增长极\n\n2021 年，福耀的全景\n天幕玻璃、可调光玻璃、抬头显示玻璃、镀膜可加热玻璃等高附加值产品占比持续提升，同比提升 3.31 个百分点，价值得以体现。据测算，福耀 2021 年汽玻 ASP 为\n181 元/平米，较 2020 年提升 7 元/平米。而 2022 年 H1，福耀汽玻 ASP 预期同比增\n长 11.6%，单价达到 200 元/平米左右\n\n性价比方面，全景天幕为不可开启式设计，摒弃了\n滑动天窗所需的中控驱动、排水系统等复杂结构件，同时避免出现失控、漏水等现\n象，较传统天窗有更高的性价比。\n\n幕玻璃的夹层特性，叠加福耀生产关的严格把控，并不会降低车辆安全性能。福\n耀生产的全景天幕均采用夹层玻璃，其中夹层材料 PVB 膜具有高粘性特点，比钢化\n玻璃具有更高的抗冲击强度。并且在受到外力冲击时，能有效防止玻璃碎片飞溅。\n生产方面，福耀进行严格的质量测试，能够保证天幕玻璃在静止状态下可以承受\n40MPa 的应力\n\n![Alt text](image-2.png)\n\n福耀成功将镀膜隔热、智能调光、LOW-E 隔热三大技术集成于超大玻璃天\n幕上，推出“福耀智能全景天幕”，在实现超大视野享受与极佳采光效果的同时，还\n能调节光线透过，防晒隔热，减少车辆空调使用能耗，并具备隐私保护的效果，为\n智能座舱的发展做出了贡献。\n\n福耀通过特殊材料的印刷工艺，可以在天幕上个性化定制\n图案，灯光在玻璃内传导后将图案反射至车内。另外，氛围灯还能与其他设备连接，\n随着音乐节奏变换。在节能环保方面，福耀积极推进太阳能天幕的研发。全景天幕\n面积大采光好，如果利用天幕将太阳能转化为电能，为车载电器提供电源，可以降\n低油耗。福耀提出并设计了太阳能天幕的工作原理，通过在玻璃里加入太阳能电池\n组实现能量转换，在未来值得关注。\n\nHUD 加速迭代，W-HUD 成为当前市场主流，AR-HUD 蓄势待发\n汽车网联化是未来发展趋势，福耀布局智能玻璃天线\n\n`持续关注铝条饰品的放量`\n\n### 安踏\n2016 年，合资引入 DESCENTE，定位中国高端体育服装，涉及滑雪、综训、跑步等，DESCENTE\n已经成为品牌矩阵中新的增长点；2017 年，收购 Kolon Sport 中国经营权，定位为专\n业户外（登山）运动，2022H1 流水增速超过 50%；2018 年，与多方财团斥资 371\n亿元收购了 Amer  Sports ，并坐拥旗下的顶级户外及运动品牌 ARC'TERYX 、\nSALOMON、WILSON 等，覆盖网球、羽毛球、高尔夫、高山滑雪、越野滑雪、滑板、\n自行车、越野跑装备、徒步装备及潜水等多种运动项目。\n\n\n\n### 晨光生物\n\n赞比亚原料基地将落地叶黄素生产线，明年有望销售叶黄素产品。由于国内万寿菊种植相较国外成本优势逐渐减弱，明年公司或将优先发展万寿菊种植面积。赞比亚土地和人工成本低廉，就地生产销售将有力拉高\n叶黄素利润水平。\n\n甜菊糖：受益无糖、减糖产品发展，市场潜力巨大。公司上线新工艺，得率逐渐爬坡至设计水平，同时取得的副产物绿原酸能够摊薄成本。今年甜叶菊产量同比增长，目前采购工作正在进行，预计明年销量能够实现增长。\n\n，2019 年初晨光生物完成对邯郸金诺药业的收购，这标志着晨光生物开始进军中药行业。公司目前已有板蓝根颗粒、牛黄解毒片、桑菊感冒颗粒等等多个药品注册批准证书，并开展了胃灵颗粒、桑菊感冒颗粒、牛黄解毒片等多个中药产品质量标准提升研究项目。目前公司中药业务规模小，长期看中药集采政策的持续推进与优化，有利于公司发挥低成本工业化生产优势，扩大中药业务规模\n\n 同时在生产过程中可以充分去除植物原料中的农残等有害成分，相比香辛\n植物原料，在食品安全、食品标准化、成本控制有着无可比拟的优势\n\n综合各细项来看：1）收入端：全年收入端其他植物提取物在低基数与环境转好背景下收入增速最快，其次为稳定增长的辣椒红、辣椒精，叶黄素受销售节奏影响下滑，整体全年植提业务将呈现稳定增长趋\n势。预计 2024-2025 年叶黄素业务恢复正常增长轨道，同时公司不断充产品矩阵，收入增长或提速。2）利润端：全年来看，较高毛利水平的\n饲料级叶黄素在收入中占比降低，业务结构变化导致整体毛利率降低。\n\n但境外各地的法律、税收、外汇管理、人文环境、中外政府关系等方面存在较大差异，如 2023 年 8 月美国国土安全部将\n公司列入“维吾尔强迫劳动预防法”的实体清单中，\n\n保健食品业务过去的利润率呈现上升趋势,去年首次实现盈亏平衡,今年有望实现正向利润贡献,未来会随着规模效应提升、客户结构改善,盈利能力保持提升趋势\n\n三季度业绩增速较上半年有所回落,主要原因是: \n饲料级叶黄素及棉籽类业务收入同比下降;棉籽类业务套期保值持有的期货合约公允价值变动影响了业务季度间波动。\n 叶黄素主要应用于饲料添加剂领域,小部分用于大健康领域。 \n从需求端来看,饲料添加剂领域的客户需求稳定,大健康领域的需求增长较快。 \n现阶段叶黄素的价格受原材料供应量影响更大,需求侧对产品价格的影响较小。 \n7\n\n### 伊利股份\n\n毛利率稳中有升，费用率拖累盈利表现。受销售费用率拖累，公司 Q3 扣非归母净利率 5.6%,同比下滑 3.3pct。22Q3 毛利率为 30.8%（+0.6pct），主要系公司控制买赠促销力度维持价盘稳\n定，此外生鲜乳价格 Q3 同比小幅下行。22Q3 销售费用率18.8%(+3.3pct)，主要系液奶事业部费用率提升以及部分综艺因疫情影响延期至三季度进行播放 \n\n持续夯实海外供应链，并以冰淇淋等品类摸索东南亚市场本土化打法。当前公司一\n方面，收购 Westland 等企业强化奶源布局，另一方面，通过印尼建厂、收购泰国冰\n淇淋公司等方式，以奶源依赖度相对较低、且适合东南亚当地消费发展阶段的品类，\n进行海外市场的本土化摸索，预计在中长期有望逐步贡献增量\n\n### 格力电器\n\n安为比亚迪新能源车热管理系统的稳定供应商，核心零部件已突破技术壁垒。盾安目\n前已具备为各大新能源车企以及零部件厂商提供高质量产品的能力。目前盾安已与主流\n新能源汽车主机厂（比亚迪、理想、蔚来、一汽等）、电池企业（宁德时代、微宏动力\n等）、商用车企（宇通、中车等）建立良好合作关系，有望在新能源领域加速产业布局。\n格力受让盾安股权之后，其控股子公司格力钛未来有望与盾安开展业务协同，拓展客户，\n提升产能、充分发挥资金和产业的规模效应，扩大市场份额，提升格力在新能源领域的\n市场优势，实现业务多元化。\n\n### 乐普医疗\n\n城乡居民疾病死亡构成比中心血管疾病占首位，\n2020 年农村、城市心血管病死亡率分别为每十万人 135.88、126.91 人，随着老龄化\n加速以及精准诊治推及，行业需求处于上行趋势，存在大量未被满足的临床需求，\n创新优效的药物和医疗器械潜在市场空间巨大。\n\n药品集采后公司加大器械创新投入，研发强度由此前的 6%左右提升至\n2021 年 10%左右，其中 75%以上投入到器械中，以医疗器械收入作为分母则研发强度\n超 15%。\n\n随着老龄化加剧、基层市场扩容、集采降价驱动等，对标发达国家的\n人均 PCI 例数仍有 2 倍的增长空间，有望达到 300 万例 PCI/年\n\n2023 年 Q1-Q3 公司研发\n费用 6.7 亿元（+0.46%），研发费用率 10.78%（+2.13pct）。公司可降解 PFO 封\n堵器、半自动 AED 已获批上市，脉冲声波球囊、射频房间隔穿刺系统处于上\n市前发补阶段，甘精胰岛素预计较快获批，司美格鲁肽准备申报 IND。公司投\n资的民为生物 GLP-1 三靶点候选药物 101 I 期临床入组基本结束，预计年底\n前获正式报告，并于 2024 年 Q1 开始 II 期临床。此外，公司积极加速向消费\n业务转型，目前已在皮肤科、眼科领域有多项产品布局，公司收入中医保来源\n占比已低于 45%（剔除集采后<25%）\n\n。分业务看，器械板块收入 28.6 亿元\n（-34%），主要系去年应急业务高基数影响，其中心血管植介入创新产品组合营\n收同比增长 6.1%，外科麻醉业务同比增长 6.9%，报告期内公司下属公司上海\n形状记忆合金材料有限公司自主研发的 MemoSorb® 生物可降解卵圆孔未闭\n封堵器正式获得国家药品监督管理局（NMPA）注册批准。药品板块 Q1-3同比\n下降 6%，单 Q3季度收入基本持平，目前公司西格列汀片、恩格列净片、甲磺\n酸多沙唑嗪缓释片、瑞舒伐他汀钙片已获批上市。医疗服务及健康管理板块收\n入 9.8 亿元，公司基于乐普云平台，聚焦医疗级心脏监测、居家健康监 测及智\n慧康复护理三大服务，为各级医院和个人消费者提供各类生命体征监测产品和\n服务，其中心电检测类产品依托人工智能 AI-ECG Platform，可远程提供长程动\n态心电监测服务。同时公司在消费医疗开展战略布局，在皮肤科、眼科、齿科\n均已有产品面世，有望贡献新增长点。\n\n### 制冷\n\n，我国二代制冷剂作为非原料的产量和消费量已于2013年被冻结，2020年配额削减35%，2025年配额削减67.5%，2040\n年以后将完全淘汰。而三代制冷剂2024 年冻结HFCs的消费和生产规模，自2029年才开始削减，因此未来较长一段时间，三代制冷剂将成为主\n\n电子氟化液在半导体领域主要用作清洗剂、脱水剂、光刻机控温液以及\n芯片封装工序的检漏液等，目前大部分市场被海外企业垄断，其中，3M\n电子氟化液产品占据了全球芯片干法蚀刻设备制冷剂90%的市场份额。\n考虑到全球对 PFAS 物质的监管正在加速以及环保因素，3M 决定到 \n2025  年底前退出包括电子氟化液在内的PFAS 产品，电子级氟化液竞\n争格局有望重塑。国内新宙邦、巨化股份等企业已经布局氟化液相关产\n能，其中新宙邦 Boreaf 电子氟化液系列产品可用于半导体  Chiller  冷\n却、精密清洗、气相焊接、电子检漏等领域。相关产品采用绿色清洁的\n工艺路线，通过了海外客户的认证，生产产品符合当地的法规要求，已\n供应全球半导体主流制造商，有望承接3M 氟化液市场。\n\n随着数据中心规模和单机功率的不断提升，浸没式液\n冷数据中心占比有望快速提升。氟化液作为一种高效可靠的冷却液，需\n求未来有望较快增长\n\n化液广泛应用于半导体加工环节。氟化液在芯片制程工艺中被广泛应用，炉管、\n光刻、刻蚀及封装测试环节都需要使用氟化液作为清洗剂、脱水剂、光刻机控温液以及\n芯片封装工序的检漏液等\n氟化液可作为半导体湿法清洗的清洗剂\n\n氟化液在干法刻蚀环节用做控温液，可帮助提升芯片制程中的整体良率，缩短芯片\n研发周期。\n\n全氟聚醚润滑脂广泛用于航空航天、核工业、化工、机械工业等领域。全氟聚醚润\n滑脂常用于高温、高负载、化学腐蚀环境中的轴承以及要求终身润滑的部件，具有极佳\n的化学惰性、耐久性和低挥发性，能够在极端高温条件下保持润滑性能，一般可耐受高\n达300 摄氏度的温度。对酸、碱、溶剂等具有良好的抵抗，适用于恶劣化学环境下的润\n滑需求。\n\n### 巨化股份\n\n由于市场需求疲弱、产品供\n给能力增加影响，公司主要产品市场竞争加剧，产品均价同比出现较大幅度下降，\n且三季度沿袭下降，但制冷剂、石化材料、基础化工产品均价环比企稳。前三季度\n公司综合毛利率为12.87%，同比下降5.89 pct。\n\n三制冷剂价格稳步上涨是大概率事件，三代制冷剂行业将迎来10年景气周期，这是巨化第一增长曲线\n\n 有三代制冷剂利润后，巨化就会有更多的资源投入研发。高性能、高附加值氟化工高端产品将是巨化未来第二增长曲线\n\n 全球氟化工有限公司在阿联酋氟2万吨134a已经基本建成。巨化拥有三代制冷剂全球最大份额，全球化也许是巨化未来第三增长曲线\n\n 碳交易。2022年欧盟平均碳价预计为88欧元/吨，折合人民币650元。目前国内碳交易一吨58元，未来有十年有10-20倍的上涨空间。三代制冷剂巨化配额换算为碳当量估计5亿吨，三美2.7亿。这是未来的一个想象空间\n\n 混改。8月份巨化股份控股母公司“巨化集团混改资产评估项目”中标公示，22年是混改的收官之年，以此推测，巨化集团混改正进行中\n\n \n \n氟化液：经济社会数字化转型背景下的节能减排最优解 \n冷却系统能耗占比为 43%，浸没式液冷技术成为必然选择\n\n相比于传统冷却方式，浸没式液体冷却的优势显著。（1）节能降耗，相对于传统风冷数据中心能耗降低 90%  ～  95%，降低  PUE  可大幅降低机房的运营成本。\n（2）低噪无污染，无需使用风扇，最大限度减少噪声的污染，同时无需担心空气中的灰尘对高洁净度要求器件的干扰。（3）节约空间，利用浸没式液冷的数据中心冷却系统所占的空间体积可减小至风冷系统的  1  /3。（ 4）换热能力强，能够满足超高热流密度器件的散热需\n\n“巨芯冷却液”实现国产高性能氟化液突破，迈入产业化阶段\n目前公司间接控股 95%的浙江创氟高科新材料有限公司计划投资 5.1 亿元规划建设 5000t/a\n浸没式冷却液项目，产品适用于大数据中心换热所需的冷却介质及尖端产业、电子流体，计划三季度投运。其中一期 1000 吨/年项目已于 2022 年上半年基本建成。\n目前，数据中心浸没式冷却液总市场规模达到3 万吨，2025 年有望达到 10 万吨级，\n看好公司未来氟化液业务成长\n\n综上，我们坚定看好三代制冷剂价格回暖带来的业绩增量以及巨化氟氯联动带\n来的成本优势。同时公司布局含氟新材料，高附加值拉升公司毛利率中枢。预计公\n司 2022-2024 年归母净利润分别为 19.25 、26.31 、32.44 亿元，同比增速为\n+73.6%、+36.6%、+23.3%。\n\n年报看下应该会超出预期。\n\n配额制定进入尾声，制冷剂行业已进入拐点区间\n\n三代制冷剂配额争夺将于2 0 2 2 年末结束，2 0 2 4 - 2 0 2 9 年的生产配额将依据2 0 2 0 - 2 0 2 2 年间各公司三代制冷剂销售\n情况进行分配。\n\n### 半导体\n\n湿法刻蚀是较为原始的刻蚀技术，利用溶液与薄膜的化学反应去除薄膜未被保护\n掩模覆盖的部分，从而达到刻蚀的目的。其反应产物必须是气体或可溶于刻蚀剂\n的物质，否则会出现反应物沉淀的问题，影响刻蚀的正常进行。通常，使用湿法\n刻蚀处理的材料包括硅，铝和二氧化硅等。\n\n随着集成电路的发展，湿法刻蚀呈现出以下局限：不能运用 3 微米以下的图形；\n湿法刻蚀为各向同性，容易导致刻蚀图形变形；液体化学品潜在的毒性和污染；\n需要额外的冲洗和干燥步骤等\n\n\n干法刻蚀技术的出现解决了湿法刻蚀面临的难题。干法刻蚀使用气体作为主要刻\n蚀材料，不需要液体化学品冲洗。干法刻蚀主要分为等离子刻蚀，离子溅射刻蚀，\n反应离子刻蚀三种，运用在不同的工艺步骤中\n\n 等离子体刻蚀是将刻蚀气体电离，产生带电离子，分子，电子以及化学活性很\n强的原子（分子）团，然后原子（分子）团会与待刻蚀材料反应，生成具有挥\n发性的物质，并被真空设备抽气排出\n\n### 潍柴动力\n\n发动机销售36.7万台，同比增长29%，其中500马力以上国内重卡发动机市场占有率达到31.7%，同比提高19.7个百分点，盈利能力大幅增强；出口销量3.9万台，同比增长52%；变速箱销售42.5万台，同比增长33%；出口销量2.2万台，同比增长93%；车桥销售36.1万根，同比增长31%。战略高端产品继续发力，大缸径发动机实现收入人民币17.1亿元，同比增长77%，高端液压实现国内收入人民币5.0亿元，同比增长46%。商用车业务上半年累计销售重型卡车6.1万辆，同比增长58%；出口销量2.6万辆，同比增长97%；其中天然气产品累计销量突破1万辆，同比增长241%，市场份额再提升2.8%。潍柴雷沃大马力智能拖拉机、大喂入量谷物收获机械、复式播种机继续走俏市场，销量保持全国领先。智能物流业务实现销售收入56亿欧元，同比增长2%。工业车辆和服务业务利润收入显著提高，经营业绩远超预期。\n\n科技创新驱动高质量发展，行业领先地位持续巩固。建立针对各细分市场的产品研发体系，提升全流程研发能力，更全面、更快速地满足客户需求。轻型动力产品动力性、可靠性及经济性全面提升，持续强化产品竞争力，赢得市场良好口碑。大马力高端产品不断发力，WP14H、WP14T、WP15H、WP15T、WP15NG等产品在干线物流、绿通冷链、快递快运、港口运输、危化品运输等市场树立了行业新标杆，成为客户首选动力。高端大缸径发动机在数据中心、矿用应急电源、矿卡等高端市场，配套量节节攀升，成为企业新的增长点，产品结构调整成效显著。动力总成差异化优势显著，核心竞争力不断凸显。新一代高热效率动力总成产品高可靠性和高传动效率优势明显，持续引领中国大马力重卡节能新时代。重磅发布WP7H挖掘机液压动力总成、WP15H挖掘机液压动力总成，动力强劲、可靠性高，成为广大用户的“掘”佳利器。WP17T发动机+林德液压动力总成首次批量配套80吨级挖掘机，性能可靠，油耗对比同吨位设备显著降低，成为新一代矿山王者。大马力智能CVT拖拉机批量投放市场，快速建立起高端农业装备的核心竞争优势，有力推动我国农业机械行业转型升级。\n\n。燃料电池取得全球领先性突破，引领行业多元能源技术发展。发布全球首款大功率金属支撑商业化固体氧化物燃料电池SOFC商业化产品，热电联产效率高达92.55%，打造全球最高纪录，为分布式能源和微电网提供绿色低碳解决方案。氢燃料电池业务持续引领行业发展，装配潍柴氢燃料电池发动机的公交车累计行驶里程超过3000万公里，产品寿命达3万小时。\n\n业务结构和盈利能力不断改善\n\n积极拓展海外市场及战略新兴业务：1）海外市场开拓加速，22Q1-3 公司发动机/重卡整车出口分别同比+40%/+77%，其中 Q3 出口分别同比+60%/+125%，出口对公司的贡献逐渐放大。2）大缸径发动机增长强劲，22Q1-3 实现收入同比+75%，销量超 5000 台，同比+40%，单价继续提升，其中 Q3 实现收入同比+84%。3）上半年雷沃农机实现销量 7.6万台，同比+28%。8 月 30 日发布公告，拟对潍柴雷沃分拆上市，有利于协同本部发展，做强做大高端农业装备业务\n\n1）受订单周期及欧美高通胀带来的供应链压力影响，凯傲 22Q3 出现亏损近 1 亿欧元，若剔除该影响，Q3 公司净利润同比增长超 10%，预计 Q4 起凯傲盈利能力将逐渐好转。中长期来看，到 2025年我国智能物流行业规模有望达万亿，5 年 CAGR 为 10.9%，前景广阔，凯傲+德马泰克的供应链整体解决方案有望助力公司持续增长。2）前瞻布局氢燃料电池产业链，持续积极推进新能源战略落地，有望在未来取得先发优势大缸径发动机应用领域广泛，\n包括发电设备、5G 大型数据中心备用电源等工业动力，远洋捕捞、公务用艇及内河航运等船舶动力，以及其他大型机械等领域。\n\n目前重卡行业运行态势 据中汽协及第一商用车网数据显示,1-10月份重卡行业累计销售78.8万辆,同比增长38%。 \n其中国内部分细分市场呈现恢复态势,海外市场需求饱满,出口销量继续增长。 \n长期来看,随着经济持续回升向好及公路运输效率不断提升,重卡行业将迎来良好发展机遇\n\n### 安琪酵母\n中式面点发酵之外，我国\n烘焙行业的扩容拉动酵母制品需求的增长。与发达国家相比，YE在我国食品鲜味剂中的\n渗透率还有较大提升空间。而酶制剂、酵母替代蛋白等精深加工产品打开高值化蓝海\n\n国内酵母业务需求刚性，竞争格局稳定，公司具备市场话语权，新一轮扩产扩大规\n模领先优势，出海路径逐步清晰；提价、水解糖替代多措并举对冲成本压力，今明\n年效果显现，叠加糖蜜价格稳中趋降，未来盈利能力更为稳健；立足酵母同心多元\n化发展，在生物发酵、新型包材、动植物营养领域培育新增长曲线。\n\n发酵蛋白：精深加工打开高值化蓝海\n\n酶制剂是酵母产业高附加值延伸的重要方向。酶制剂是微生物发酵产生的具有催\n化功能的蛋白质，具有催化效率高、专一性较高、作用条件温和、能耗较低、化学污\n染少等优点，其应用领域遍布饮料（啤酒、葡萄酒、白酒、果汁等）、食品（面包烘\n焙、制糖、乳品等）、纺织、饲料、洗涤剂、造纸、皮革、医药以及能源开发、环境\n保护等方面\n\n 在酵母衍生品领域，酵母提取物 YE 在食品鲜味剂中的渗透率还有较大\n YE 是天然的鲜味剂，顺应健康、营养、美味的消费需求，正在食品加工领\n域替代味精，具备发展潜力但 YE 在鲜味剂中的占比差别较大，速冻食品\n高达 80.2%，调味品则只有 22.5%左右。横向比较,日本和西欧调味品 YE 使用量在鲜\n味剂中占比分别为 83.2%和 45.9%。受益于国内消费升级和食品品质进化迭代，国内\nYE 市渗透率仍有较大的成长空间\n\n为拓展海外业务，公司同步优化组织架构。过去每个部门都涉及海外业务，现在\n所有海外业务都按区域划分到 6 个海外事业部。每个事业部负责所有产品在当地市场\n的业务。此外，公司在新加坡、墨西哥、美国、德国设立，加速融入本地市场。 \n\n树立大食物观，向酵母要蛋白，商业推广已有初步成果。微生物蛋白将成为人\n们补充蛋白的新选择，酵母蛋白的发展值得期待。酵母蛋白含有人体必需的 8 种氨基\n酸，属于全价蛋白，营养丰富。除此之外，酵母蛋白的消化利用率更高。植物蛋白的\n消化利用率是 80%，肉类蛋白为 90%，酵母蛋白则为 95%左右。公司已实现利用酵\n母蛋白替代纯植物蛋白制成的素肉中 50%的植物蛋白，使得素肉制品豆腥味减弱、\n肉味更浓郁，其质感及纹里更接近肉。公司酵母蛋白在市场上供不应求，预计今年产\n量将突破 1 万吨。\n\n### 中科三环\n\n受益下游新能源领域高景气，磁材产销量两旺拉动业绩高增。下游新能源车、变频家\n电、节能电梯、风力发电高景气拉动稀土永磁材料需求大幅增长，2021 年以来公司磁\n材产品订单大增，下属工厂接近满负荷运行，产能利用率与产销量大幅增长\n\n稀土磁材行业壁垒日益提升。伴随终端应用高效率、小型化场景需求提升，尤其高端\nEV/变频空调/消费电子等产品对磁材热稳定性、高磁能积提出更高要求，客户认证、工\n艺难度、投资强度等方面要求愈发苛刻，我们认为，稀土磁材行业具有较高的新进入者\n壁垒，主要存在四点：\n✓ 壁垒一：工艺流程长达 16 道环节，产品一致性、稳定性需要长期经验积累。\n✓ 壁垒二：客户深度绑定（认证期 2-3 年），客户不会轻易更换供应商。\n✓ 壁垒三：项目周期长达 2-3 年，时间壁垒高。\n✓ 壁垒四：投资强度大，万吨级投资 10 亿元+，高端产品 30-40 亿元。\n\n\n### 中国核电\n\n我国四代核技术世界领先，2021 年 5 月，世界首座钍基熔盐堆—\n—甘肃武威钍盐核反应堆主体工程基本完工；同年 12 月，世界首座高温气\n冷堆——石岛湾核电站 1 号反应堆首次并网成功\n\n### 今天国际\n\n国外自动化物流系统提供商在\n高端物流软硬件技术和行业经验方面具有优势，在一些高端自动化物流系统项目中占有一\n定优势。 国内企业在与国外先进的自动化物流系统提供商竞争中不断发展，推出具有自\n主知识产权自动化物流产品，凭借较好的本地化服务优势，在一些项目中具备了较强的竞\n争优势，并成功进入高端项目领域。\n\n上述 20 多家自动化物流系统提供商在各个应用领域各有优势。如，在烟草行业，今天国\n际具有较强的竞争优势；在医药行业，日本大福，美国德马泰克等国外企业具有较强的竞\n争优势，国内企业起院在这一行业也具有竞争力；在机场方面，西门子、范德兰德等国外\n物流系统集成商具有较强优势\n\n### 思摩尔国际\n分业务来看，虽然思摩尔国际的业务收入集中来自于新型烟草行业，但若把思\n摩尔国际就此定义为传统的电子烟制造商将有失偏颇，原因有三：（1）公司的核心\n雾化技术在特殊雾化设备，如医疗、美容甚至航空等领域有很强的可迁移性；（2）\n思摩尔近年以通过专利申请、研发投入等布局医疗、美容及大麻雾化领域并取得了\n一定进展；（3）据弗若斯特沙利文数据，全球特殊雾化市场增速亮眼，目前市场规\n模为 11 亿美元，预计 2022 年至 2026 年将以 46%的复合增速发展。长期来看，我们\n认为思摩尔国际发展更趋向为雾化技术平台型企业，大麻雾化、医疗雾化等特殊用\n途的电子雾化设备制造将支撑公司第二增长曲线加速打开。\n \n\n### 中炬高新\n\n中炬高新董事会和管理层完成更替，品类和区域扩展空间广阔，中期净利润率目标\n15%左右。目前火炬集团及一致行动人目前持股19.93%，公司控制权基本确认。10 月\n中市场化招聘公司总经理及其他高管到位，华润雪花背景余向阳为总经理。11 月初内\n外部全员竞聘中高层职务，美味鲜现有管理层稳定。高层落地后，首要工作是梳理内\n部工作流程和提升内部工作效率，强调优胜劣汰和提质增效。后续多重催化剂可期，\n1H24 股权激励有望落地，目标3 年内引入战投，房地产业务函待剥离，诉讼预计负债\n已经在 2022 至 1H23 报表中计提。\n\n目前中炬高新美味鲜在酱油和蚝油市占率仅 3%，\n体量提升空间较大；鸡精鸡粉竞争优势较强，份额进入前三；料酒和醋体量预期过\n亿，会持续发展支持。南部和东部五省是中炬高新美味鲜的主要销售区域，未来华东\n和北部区域的扩张将成为重点。受到原材料和产能利用率影响，公司利润率压力较\n大，新领导班子重视提升内部工作效率，费用率有望下行，公司中期净利率目标 15%\n左右。\n\n目前火锅底料是复合调味料最大的子行业，头部企业市占率仅 11%，能够容纳足够多\n的企业，是布局复合调味料的重要赛道之一。蚝油子行业海天味业的优势得天独厚，\n长期仍为行业龙头，中炬高新 2022 年蚝油收入近 3 个亿。鸡精鸡粉份额基本被外资\n品牌垄断，有机会做少量的国产替代。其他中式调味料均有布局的机会，如川式调味\n料中的酸菜鱼调料、小龙虾调料等\n\n厨邦酱油采用南派酿造工艺，用料更高级。①酿造工艺：高盐稀态发酵工\n\n艺生产周期长且成品品质优良，现为酱油行业主流酿造工艺；②原材料：\n\n厨邦酱油原材料为 100%大豆，竞品酱油原材料为大豆+豆粕的组合。油脂含量高，口感更醇厚，且价格比豆粕每斤高 20%以上；③曲种：厨邦\n\n主要采用高产量单菌种，发酵后可强化氨基酸态氮指标。综合对比，厨邦\n\n酱油使用的原材料更高级，酱油品质更高。\n\n厨邦酱油价格位于中等水平，性价比优势突出。厨邦酱油在保证口感美味\n\n品质上乘的同时，价格相对实惠。对比同类高鲜产品，厨邦酱油价格处于\n\n中位，厨邦味极鲜价格为 9.87 元/500ml，相比同等氨基酸态氮含量的李\n\n锦记味极鲜/加加味极鲜/欣和六月鲜特级酱油分别便宜 0.3%/6.9%/37.5%。\n\n对比零添加产品，高鲜酱油氨基酸态氮含量更高，价格更低。综合来看，\n\n厨邦酱油拥有明显的高性价比\n\n鸡精粉：目前鸡精粉行业属于成熟发展阶段，由外资品牌占据主要市场，\n\n厨邦位于行业第三。公司 2012 年推出鸡精粉，相比竞品，厨邦鸡精粉总\n\n氮含量更高，鲜味更足，同时鸡精污染物三氯丙醇（3-MCPD）含量更低，\n\n产品安全健康。鸡精粉主要在餐饮渠道销售，2021 年随着餐饮端需求逐渐\n\n恢复，公司鸡精粉营收同比提升 10.5%\n\n海天定位中低端餐饮，产品主要应用在热菜领域，海天通过高性价\n\n比实现餐饮渗透和高周转，目前海天餐饮渠道占比 60%，在中低端市场形成了\n\n无法撼动的规模优势\n\n对比第二梯队其他参与者：千禾味业餐饮占比约 5%，加加食品餐饮布局处于\n\n起步阶段，餐饮占比仅为 2%。对比之下，公司餐饮渠道占比 25%，叠加拥有完\n\n善的产品矩阵&高性价比优势，在第二梯队中具备突围餐饮渠道的基础\n\n\n差异化+常规化措施并行，有望实现餐饮渠道突围。公司重视餐饮渠道的开拓，目\n\n前主要合作品牌包括西贝莜面村和海底捞，年销售额在千万级别。对标龙头海天味业餐\n\n饮渠道占比约 60%的水平，长期看公司餐饮渠道占比仍有较大提升空间。\n\n差异化措施：以凉菜切入餐饮渠道+推进餐批旗舰店建设\n\n常规化措施：大包装产品&一站式采购+经销商扶持+厨师训练营\n\n2021 年公司较海天扣非归母净利率低 11.7%，核心\n\n差异在管理费用率，2012-2021 年平均管理费用率中炬约为海天的 2.4 倍，近年来中炬管理费用率呈现持续下降的趋势管理人员较多：如果将除生产、销售、技术以外的人员归为管理人员，\n2018 年中炬管理人员共 1584 人，海天管理人员共 508 人，主要是由于总部管理人员较多。2019 年公司转为民营体制，积极剥离相关人员，2021年管理人员数量降低到 637 人； \n管理层激励不充分，管理效率较低：2021 年海天 16 位高管合计薪酬 3255\n\n万元，12 位高管持股市值合计 655 亿元，中炬高新 22 位高管合计薪酬\n\n3423 万元，无持股，中炬管理层薪酬待遇和人均创收相比海天有较大差\n\n### 宋城演艺\n\n未来公司将更加坚定专注演艺主业,持续打造非同凡响的高品质演艺作品,不断营造新奇特的景区和度假体验。 \n 花房集团是公司参股35.35%的联营企业,公司对花房集团采用长期股权投资权益法核算,按相关规定每年对长期股权投资进行减值测试。 \n2023年,受宏观环境、行业环境和内部环境等方面因素影响,花房集团主动采取了更加谨慎的运营策略,于2023年5月份起进一步加强了风险管理和内控措施,整体\n运营规模收缩,经营业绩出现大幅下滑。 \n综合各方面因素分析,预计花房集团未来经营不及预期,公司对花房集团长期股权投资执行了减值测试为目的的评估,根据初步评估结果拟计提减值准备8.6-9亿\n元。 \n本次拟计提的金额为初步测算结果,最终金额将在最终评估和审计后确定。 \n\n西安有着厚重的历史文化和丰富的旅游资源,也是个网红城市,游客底量庞大。 \n西安有着多台品质较高的演艺节目,演艺市场竞争比较激烈。 \n西安千古情开业后,迅速在激烈的市场竞争中占得一席之地。 \n未来西安项目将进一步发挥演艺+景区的优势,发挥室内演出晴雨皆宜、全天候上演的优势,不断提升市场占有率。 \n目前西安千古情工作日基础场次已达4场,周末达到5场,未来经营看好。 \n上海宋城三楼和四楼的整改提升预计将于3月底完成,将增加餐饮区、互动体验区、商业等内容,进一步提升游览空间、产品品质和接待水平。 \n上海的城市人口基数大,商业发达,本地亲子家庭、年轻时尚群体、企业团建等各种专题市场需求旺盛,2024年将实现集中整改提升后的完整年度运营,经营前景看\n好\n\n受益于补偿性需求的释放,加上公司做了很多针对性非常强的主题活动,2023年整体的门票收入已经基本恢复到2019年。 \n 四季度本身是文旅消费的淡季,对全年业绩的影响较小。 \n公司各个项目根据当地市场特色做了针对性的营销活动,杭州宋城国庆期间受到当地重大活动的一些影响,但其后的学生秋游团和银发团表现较好,上海宋城的企业\n团建市场也在不断发力。 \n 元旦假期公司整体场次和人次较2019年同期均有较好增长,一方面受益于项目数量的增加,西安、上海等项目收客局面良好;另一方面杭州宋城等景区通过开展跨\n年活动充分挖掘周边散客市场实现较好增长。 \n目前公司各个项目已做好狂欢中国年新春主题活动的全面准备,将以饱满的热情迎接新年新气象\n\n占位优势：卡位一线旅游目的地，占据客流高地\n\n渠道优势：卡位旅行社渠道，拓宽新渠道 \n\n桂林项目卡位高客源景区，张家界项目科技含量高，均处于快速爬坡期\n\n珠海项目拟将100%股权转让给宋城集团，回收4.58 亿元，未来收取\n\n一揽子服务费及后续的管理服务费，我们预计成熟期业绩超0.5 亿元。\n\n￼ \n\n### 百龙创园\n\n益生元、膳食纤维系列产品目前贡献 90%的收入；毛利方面，\n\n益生元、膳食纤维贡献 80%的毛利；以阿洛酮糖为主的健康甜味剂产品是\n\n公司 2020 年新推出的产品系列，有望逐步成为公司新的利润增长点。\n\n公司产品聚葡萄糖和抗性糊精均为可溶性膳食纤维。可溶性膳食纤维由于\n\n具有良好的溶解性，无异味，受到广大食品加工企业追捧，作为增稠剂、\n\n乳化剂等运用于食品饮料中，既增加营养健康卖点，也可以丰富口感，也\n\n正是由于可溶性膳食纤维出色的生理性能成就了其更广泛的应用领域与下\n\n游市场\n\n抗性糊精可以帮助人体更好吸收微量元素如钙、铁、锌、硒，成就抗性糊\n\n精强大消费概念。根据泰莱公司（Tate&Lyle）实验数据，人们平时喝牛奶\n\n补充钙质大约只有 30%可以被人体吸收，其它的会全部流失掉，而将抗性\n\n糊精与牛奶结合可有效增加 20%的钙吸收量，也就是饮用含有抗性糊精的\n\n牛奶可以将钙吸收量从原来的 30%增长到现在的 36%。 \n\n益生元是指能够选择性地促进肠道内原有的一种或多种有益细菌（益生菌）\n\n生长繁殖和/或增加碳水化合物代谢的物质，主要包括各类功能性低聚糖。\n\n常见的益生元包括低聚果糖、低聚半乳糖、菊粉、低聚木糖和低聚异麦芽\n\n糖等，不同产品物化性能及生理功能有所差异\n\n### 金禾实业\n\n全球麦芽酚产能基本由我国垄断。生产甲、乙基麦芽酚需要用到一种重要原材料——糠醛，糠醛可以从玉米穗轴、麦麸、锯木屑中萃取得到\n\n规划山梨酸钾产业链，食品防腐剂业务未来可期。山梨酸钾是国际粮农组织和卫生组织推荐的高效安全的防腐保鲜剂，广泛应用于食品、饮料、烟草、农药、化妆品、宠物家禽饲料等行业中。其防腐效果是苯甲酸钠的 5-10 倍，而毒性仅为传统防腐剂苯甲酸钠的1/40，\n\n山梨酸及山梨酸钾是国际粮农组织和卫生组织推荐的高效安全的防腐保鲜剂，它的防腐效果明显高于苯甲酸类，是苯甲酸盐的 5~10；产品毒性低，是苯\n\n甲酸盐的 1/4,与食盐相当；不改变食品特性，参与人体的新陈，代谢，产生二氧化碳和水；\n\n使用范围广泛，在医药、烟草、造纸、化妆品、牙膏、饲料等行业均有很大应用\n\n### 澜起科技\n\n内存接口芯片行业高增长，5G、云计算、AI 发展如火如荼，海量数据对存\n\n储的需求持续推动内存接口芯片量价齐升和市场高速扩容\n\nDDR5 内存性能远超DDR4 的规格上限，配套内存接口芯片性能及技术难度随之提升，\n\n推高内存接口芯片ASP。DRR5 相较于DDR4 单颗DRAM 内存密度提升4 倍至64Gbit，\n\n最大数据传输速率提升一倍达到6.4Gbps，工作电压由1.2V 压低至1.1V 使对应功耗降\n\n低超过20％，故而DDR5 内存将对保证内存数据传输速率和稳定性的内存接口芯片提出\n\n更高要求，进而新一代内存接口芯片在满足更高性能要求的同时技术难度也相应提升，\n\n从而提高新一代内存接口芯片价值量\n\n自主掌握核心技术，牢控话语权。公司是全球可提供从DDR2 到DDR5 内存全缓冲/半缓\n\n冲完整解决方案的主要供应商之一，在内存接口芯片及津逮服务器平台领域核心技术均\n\n基于自主研发，突破了一系列关键技术壁垒，并均已实现量产。公司提出的DDR4“1+9”\n\n架构被采纳为JEDEC 标准，并将在DDR5 世代演化为“1+10”框架，继续作为LRDIMM\n\n的国际标准。公司还牵头制定了DDR5 第一子代、第二子代、第三子代内存接口芯片国\n\n际标准，体现出公司在该领域内享有重要话语权。\n\n科研系内存接口芯片行业主要动能，公司高研发转化率保障产品高速率迭代，毛利率有\n\n望进一步优化。公司在DDR4 时代长期处于业内领先地位，内存接口芯片毛利率常年维\n\n持较高水平。2021 年DDR4 进入产品生命周期后期，DDR5 新兴产品崭露头角，毛利率\n\n短期承压。进入DDR5 世代后，内存接口芯片价值量提升，相关芯片市场规模大幅增长，\n\n有望持续优化产品毛利率水平。2022H1 公司互联类芯片产品线营收 12.36 亿元，同比\n\n+80.04%，毛利率60.08%。 \n\n经过多年耕耘，公司已与三星、SK 海力士、美光等下游主要客户建立长期稳定、良好\n\n的合作关系。公司主业直接下游为DRAM 厂商，根据 IC Insights，2021 年三星市占率\n\n43.6%，SK 海力士市占率27.7%，美光22.8%，三巨头垄断了94%的市场份额。另外\n\n公司外延拓展服务器CPU 等业务，逐渐与全球主流的服务器厂商及软件系统提供商均建\n\n立了长期稳定的合作关系，优质的客户资源和产业生态为公司业务规模的扩大奠定坚实\n\n的基础。\n\n\n### 国瓷\n\nMLCC（Multi-layer Ceramic Capacitors）是片式多层陶瓷电容器，由印好\n电极（内电极）的陶瓷介质膜片以错位的方式叠合起来，经过一次性高温烧结形成\n陶瓷芯片，再在芯片的两端封上金属层（外电极），也叫独石电容器。\n\n国瓷材料是国内 MLCC 粉体材料龙头，国内市占率达 80%、全球市占率超过\n25%。\n\n新能源汽车的增长和汽车电子化率的提高，促进 MLCC 产品需求增长。一方\n面，汽车电子系统较多，包括定位系统、中央控制系统、无线电导航系统、车身稳\n定控制系统、驾驶辅助系统、汽车音响及娱乐系统、车载通信系统等，随着汽车电\n子化率提升，对集成电路中被动元器件 MLCC 的用量必然增多。\n\n 蜂窝陶瓷：尾气后处理的核心，寡头长期垄断市场\n\n 为了满足更高的排放标准，蜂窝陶瓷载体需提高处理尾气的效率，不断提高各\n项性能指标。\n\n外国寡头垄断格局打破，国产替代提速。蜂窝陶瓷载体全球市场长期由美国康\n宁公司和日本 NGK 公司垄断，截至 2020 年二者合共约占全球蜂窝陶瓷载体 90%\n以上市场份额，蜂窝陶瓷的核心技术和产品掌握在两家巨头手上。康宁和 NGK 享\n受了汽车产业高速发展的先发红利，而国内载体厂商则将充分受益于环保法规带\n来的渗透率提升，以奥福环保、宜兴化机为代表的国内蜂窝陶瓷载体厂商的技术突\n破和市场份额的提高，国内主机和整车厂商逐步开启了蜂窝陶瓷载体国产化替代\n进程\n\n国六阶段蜂窝陶瓷的市场增量主要来自汽油车和柴油车加装载体，单台车载\n体用量放大\n\n生物医疗板块：齿科材料需求高速增长，海内外双\n轮开拓市场 \n公司凭借自身在陶瓷材料领域领先的技术与市场优势，基于高纯氧化锆粉体\n业务，向下游口腔医学材料与器械积极拓展，2015 年战略入股深圳爱尔创，2018\n年全资收购深圳爱尔创，目前公司产品涵盖齿科氧化锆陶瓷从粉体到瓷块、玻璃陶\n瓷、树脂陶瓷等。受益于口腔医疗行业的快速发展与海外市场的积极开拓，加之高\n瓴与松柏的战略投资，公司口腔医疗材料业务持续快速增\n\n面对持续增长的口腔医疗市场规模，我国牙科材料需求持续提升，产品结构不\n断调整，新技术和新产品不断涌现，市场也随之扩大，牙科材料已经逐渐成为我国\n医疗器械制造业的重要组成部分。氧化锆陶瓷材料由于兼具优良的机械性能、生物\n相容性与美观性，在牙科材料具有广阔的应用前景。放眼全球市场，氧化锆牙科材\n料产量与收入呈现逐年提升态势，据 QYresearch 统计，2021 年全球氧化锆牙科\n材料收入 1.26 亿美元，预计 2026 年将达到 1.69 亿美元，CAGR 达到 6.0%。反\n观国内市场，由于欧美发达国家在相关领域起步早，技术先进，海外大品牌一直垄\n断全球市场，部分产品外资品牌占有率达到 90%，国产化程度仍有较大空间。公\n司作为国产牙科用纳米级复合氧化锆粉体材料及瓷块的主要供应商，面向国内外\n 广阔的市场，将有望借助自身成本和服务优势打破国外产品的垄断地位，迎来快速\n增长\n\n\n陶瓷墨水喷墨打印前景广阔。陶瓷墨水是釉面材料的一种，主要用于陶瓷表面\n的装饰层，通过喷墨打印技术，计算机控制将墨水直接打印到陶瓷表面进行表面装\n饰，实现产品个性化设计和制造，特别适合于设计复杂图案，进一步提高陶瓷装饰\n效果。\n\n氮化硅轴承球：攻克关键技术，打破国外垄断\n\n氮化硅陶瓷性能出色，轴承滚子替代首选。氮化硅是一种典型的强共价键化物，\n氮化硅陶瓷材料具有熔点高、硬度大、耐磨损、抗弯强度高、导热性能好等优越的\n物理化学性能，被广泛地应用到国防、能源、电子等关键领域。\n\n新能源\n时代的来临为汽车电机轴承提出了新的要求，金属材料导致电机产生交变电流进而造成电腐蚀成了关键缺陷，而性能的陶瓷材料则可以完全避免，较大地提高了电\n机的使用寿命。另一方面，海上风力发电导致传统的金属轴承易受高盐环境的侵蚀，\n而陶瓷材料轴承球具有优异的耐腐蚀能力，平均寿命比轴承钢高 4-25 倍。随着新\n能源汽车与风力发电的快速发展，陶瓷轴承球需求将被进一步拉动，有望成为未来\n公司利润新的增长点。\n\n1）电子材料板块：（1）MLCC 粉体：一方面 23 年消费电子景气度有望底部\n回升，带动销量逐步回升，公司规划 23-25 年产能逐步从 10000 吨/年爬升至\n15000 吨/年，另一方面由于行业格局稳定，假设 MLCC 介质材料销售均价和毛利\n率保持稳定；（2）氧化铝/勃姆石：未来下游新能源需求仍维持高速增长，公司氧\n化铝和勃姆石快速扩产带动销量增加，假设 23-25 年价格维持在 1.8 万/吨，毛利\n率为 20%； \n2）催化板块：船舶国二标准和非道路国 IV 标准 2022 年相继全面实施，尾气\n治理市场容量持续拓宽的同时，公司在商用车、乘用车、非道路机械和船机等应用\n领域快速突破，公司 23-24 年募投产能逐步释放带动销量增长，假设蜂窝陶瓷载\n体毛利率维持 50%，预计 23-25 年收入增速分别为 77%、48%和 46%； \n3）建筑材料板块：国内建筑陶瓷墨水经过多年发展目前渗透率较高叠加国内\n地产增速放缓，公司该板块收入增速放缓，主要业务增量来自于国内陶瓷企业出海\n的需求，假设 23-25 年增速为 15%、10%、10%，毛利率随上游原材料价格回落\n得到修复，假设 23-25 年毛利率维持稳定在 25%左右； \n4）生物医疗板块：爱尔创受益于口腔医疗市场持续增长和集采带动的齿科耗\n材需求提升，预计 23-25 年收入增速为 20%、15%和 15%，国瓷材料齿科材料占\n下游成本较小，且国内竞争对手较少，假设产品毛利率保持在 58%左右\n\n### 半导体\n\n周期角度看：2023年受半导体周期下行、美系设备出口管制等影响，下游头部晶圆厂扩产有所放缓，主要资本支出用于储备\n海外关键机台，国产设备招标有所延后。但从终端来看，2023Q3华为引领3C需求复苏，全球智能手机出货在经历连续8个季度同比下滑后，\n在2023Q3实现同比微增；晶圆端看，中芯国际产能利用率自2023Q2开始逐步回升，行业已进入周期上行通道。2）成长角度看：2022年中国\n大陆半导体设备整体国产化率水平约14.5%；2023年受出口管制影响，长存仍处于国产线攻关突破阶段，半导体设备国产替代仍需求迫切。\n因此，展望2024年，我们认为，周期复苏铺底，前道半导体设备叠加长存国产线突破、后道半导体设备叠加核心客户先进封装突破，半导\n体设备板块将迎来“周期”与“成长”共振。\n\n硅基OLED：主要指尺寸小于1英寸的显示器。OLED按照驱动方式可以分为被动式和主动式；按屏幕大小可以分为大尺寸、中尺寸和微型显示器；\n按照基板不同可以分为玻璃基板、硅基板、柔性基板等，由于PPI的差异，微型OLED一般选用硅基板，中大尺寸一般采用玻璃基板/柔性基板\n\n### 光伏\nN 型TOPCon 电池走量，相关设备耗材迎来技术升级迭代。预计2023\n年TOPCon 新建产能400GW，预计2024 年新增产能超过200GW，相\n关TOPCon 产线设备供应商在手订单充裕。2024 年TOPCon 电池出货\n量占比有望达到60%以上，伴随N 型TOPCon 电池放量，低氧型硅片\n需求增长，相关低氧单晶炉、磁场磁体、大抽速真空泵等相关设备迎\n来技术迭代。同时，TOPCon 和HJT 等N 型电池银浆消耗量增加，多\n主栅、无主栅、激光转印等降本技术有望加速应用\n\nTOPCon 的 N 型硅片氧含量要求更加严格。目前，TOPCon 电池和 PERC 电池的 PN 结\n都为同质结，由 N 型/P 型硅片表面进行硼扩/磷扩制成。由于硼元素的扩散难度大，因此\nTOPCon 的硼扩工艺温度（900-1100°C）相比PERC 电池由磷扩工艺温度（600-900°C）更高。\n高温下硅片中的氧元素移动，冷却后沉淀形成氧环（同心圆），降低电池效率。HJT 电池的\nPN 结为两种不同硅材料形成，采用气相沉积工艺实现掺杂制结，无需进行高温扩散，减少了\n此类问题。PERC 电池的磷扩工艺温度相对较低，也减少此类问题。基于以上原因，TOPCon\n使用硅片的氧含量指标（低于12ppma）要求比HJT 使用硅片（低于14ppma）、PERC 使用硅\n片（低于16ppma）更为严格，硅片少子寿命的要求（大于800μs）也高于PERC 硅片（大于\n70μs）。 \n  \n### 紫金\n\n我们对 2025 年铜价更为乐观且看好更有节奏的配置组合：1）2024 年看金。我们认为在\n2H24 年美国降息周期或启动以及市场降息预期提前的环境下，黄金价格或将在2024 年重\n回上涨趋势，此外全球央行大举购金也将作为支撑黄金价格更高中枢水平的结构性因素。\n我们预计 2024/2025 年黄金均价为 2,300/2,300 美元/盎司，而若美联储 2024 年降息的力\n度超过我们的预期，黄金价格将有更显著的上行风险。2）2025 年看铜，且较市场更为乐\n观。我们认为 2024 年铜的基本面受铜矿项目产量集中释放影响压力较大，或将出现 38.6\n万吨的供应盈余；而在2025 之后由于缺乏大型新项目，铜矿的供给增长将逐步放缓，在新\n能源用铜需求的拉动下或将出现供需缺口逐步放大。在基准供需判断之上，11 月第一量子\n的 Cobre  Panama 项目停产事件对 2024 年基本面有较大弹性的影响，如果长期停产将会\n较大程度削弱铜矿增量对基本面的冲击，且市场可能提前反映2025 年由于供应增长放缓且\n新能源用铜需求拉动共同作用下的供需收紧，这也是我们较市场而言对2025 年铜价更为乐\n观的因素之一。我们预计2024/2025 年铜价中枢为8,800/10,000 美元/吨\n\n2024 年看金，2025 年看铜，铜金组合攻守兼备 \n铜\n需求动能新旧更替，能源转型驱动用铜前景可期。虽然受全球经济，尤其是欧洲地区经济\n疲弱影响下铜传统的下游需求领域表现较为平淡，但从结构性角度来看铜的消费仍具有较\n大弹性。我们认为在新能源发展变革下，铜的应用场景会得到全面拓宽，其导电性、延展\n性和低反应性等在新能源领域有着广泛且必需的应用。尤其是电动汽车以及风电光伏的深\n化发展将成推动新周期铜需求增长的主要驱动力，待本轮新增产能释放平稳后，我们预计\n铜矿的供应增速将不及新能源用铜拉动的需求增速\n\n电动汽车用铜单耗是传统汽车的约4 倍，在传统燃油车的基础上,电动汽车的驱动电机、电\n池、高压线束等部件均需要使用大量的高导电性能的铜材料，以确保电机和电控系统的正\n常运行。根据铜业发展协会的数据，纯电动汽车单车用铜约83kg，而传统燃油车单车用铜\n约22kg。随着新能源汽车渗透率的不断提升，铜的需求也将受到显著的推动。根据IEA 的\n统计，基于各国的现有政策以及发展目标，2030 年全球电动汽车的市场占有率已从过去该\n机构预测的25%提升到35%，中国仍将继续保持最大市场的地位，占全球电动汽车总销量\n的40%。\n\n我们预计 2025 年全球光伏及风电用铜将达到 307 万吨。由于铜优良的导电特性，光伏和\n风电的发电系统中的电缆和线路需要用铜作为主要材料。光伏组件中的热量交换器、缆线\n和连接器需要使用大量的铜材料，此外光伏逆变器中也需要使用铜线圈和其他铜制品。根\n据铜业发展协会测算，每兆瓦光伏系统大约使用5.5 吨铜。根据我们测算，2025 年全球光\n伏新增装机用铜量将达到2436 万吨，其中65.3%来自中国市场，从中国出口到海外部分占\n全球总量 25%。同样，风电发电机中的缆线、涡轮机等部件也会使用到铜，尤其是海上风\n电的海底电缆用铜强度将较大。我们预计到 2025 年全球风电新增装机用铜量将达到 63.5\n万吨，其中中国和海外占比分别为53.3%和46.7%。2025 年全球光伏和风电总用铜量预计\n将达到307 万吨，23-25 年间年均复合增长率为16.3%。","source":"_posts/yanbao.md","raw":"---\ntitle: yanbao\ndate: 2022-07-06 09:52:11\ntags:\n---\n\n## 协鑫\n掌握颗粒硅量产技术，迈入万吨级产能规模。公司未来规划徐州 10 万吨、\n乐山 10 万吨以及包头 30 万吨颗粒硅产能。预计 21-22 年公司颗粒硅产\n能可达 3/26 万吨，实现大幅提升。颗粒硅产能规模的扩大助力公司具备\n规模优势，生产成本有望进一步降低，盈利能力有望逐步提升\n\n目前生产 1 千克颗粒硅耗电\n仅 18 度，相较于西门子法 60 度/千克有显著下降；水耗氢耗方面，FBR\n方法较西门子法降低 30%/42%。投资方面，颗粒硅每万吨产能仅需要 7\n亿初始投资，相较西门子法可降低 1.5-2 亿元，具备成本优势。   \n\n硅料N型时代全面到来，P型产能可能会在2024会全面出清，硅料市场上能稳定持续供应就3800，通威，大全三家，还有半家就是新特，基本上新玩家绝大部分要全军覆没了，所以硅料实际供应产能看老玩家就可以了，这个形势到今年下半年就会非常明朗；\n\n也许半年，也许一年，距离彻底颠覆棒状硅的时刻已经越来越近了。下个月，乐山二期就开始动工了，包头二期应该也不远了。念念不忘，必有回响\n\n## 甜味剂\n与其他糖醇类产品相比，赤藓糖醇不被人体代谢，因此几乎不产生热量，也不引起血糖变化，是正宗的“零热量”天然甜味剂；另外，赤藓糖醇物理属性优异，耐热性较好，性质稳定，易于添加存储，综合优势鲜明突出，获得市场青睐\n唯独赤藓糖醇直接通过小肠进入肾脏被尿液排出人体，因此是各糖醇类中人体耐受度最高的低倍甜味剂，\n赤藓糖醇生产是在葡萄糖的基础上，接入菌种、添加发酵培养基进行深层发酵，然后经过净化提纯所得。赤藓糖醇是天然零热量的甜味剂，木糖醇是有热量的\n\n\n抗性糊精由淀粉加工而成，是将焙烤糊精的难消化成分用工业技术提取处理并精炼而成的一种低热量葡聚糖，属于低分子水溶性膳食纤维。作为一种低热量可溶性食品原料，在食品工业中具有的广阔的发展前景。\n\n纯天然甜味剂代糖产品中,赤藓糖醇采用发酵生产, 它溶解于水中时具有吸热效果，溶解度较低、易结晶，所以入口具有清凉感，更适合清爽型的饮料当中。 而阿洛酮糖采用生物法制备,它可以抑制人体血糖的快速升高，调节血糖等有益人体健康的特殊功能，更适合烘培类产品、医药等领域。\n\n阿洛酮糖是一种新型甜味剂，具有降血糖、低热量等优异性能，\n\n化学合成糖目前最好的解决方案是三氯蔗糖，植物提取糖目前最好的解决方案是甜菊糖苷，在生物发酵糖里面目前在国内的解决方案是赤藓糖醇，在海外的解决方案是阿洛酮糖，\n \n\n木糖醇難以被口腔中的細菌分解產生酸性物質，因此不易引起蛀牙，木糖醇代謝時不需要胰島素就可直接進入細胞，並不會引起血糖飆高，糖尿病病人可做為蔗糖替代品，但仍會產生熱量，所以不可過量攝取。\n\n聚葡萄糖和抗性糊精均为可溶性膳食纤维\n蛋白质、脂肪、碳水化合物、维生素、矿物质与水并列\n可溶性膳食纤维由于具有良好的溶解性，无异味，受到广大食品加工企业追捧，作为增稠剂、乳化剂等运用于食品饮料中\n\n功能与加工性更出众的可溶膳食纤维。抗性糊精是低热量葡聚 糖的一种新型式，是一种重要低分子、非黏性水溶性膳食纤维。由于结构 中存在α-1,2，α-1,3，α-1,6 键，不能被体内的消化酶所分解，在消化道 内也不会被小肠吸收消化，可以直接进入大肠，被大肠内益生菌发酵，作 为膳食纤维发挥各种生理作用。\n\n益生元是指能够选择性地促进肠道内原有的一种或多种有益细菌（益生菌）生长繁殖和/或增加碳水化合物代谢的物质，主要包括各类功能性低聚糖。常见的益生元包括低聚果糖、低聚半乳糖、菊粉、低聚木糖和低聚异麦芽糖等，不同产品物化性能及生理功能有所差异\n\n## 光伏 TCL\n\n目前市场没有认可中环通过使用低等级便宜硅料、提高生产效率来提升利润率的逻辑，对中环Q4业绩预期不高\n\n如果考虑硅片业务技术研发投入已经进入成熟期，而半导体硅片业务（12英寸、IOS硅片、碳化硅等新业务）、组件与电池业务（叠瓦，电池，XBC等）尚处于研发投入高速增长期。\n\n中环210P现有最新客户：晶科（已经上升到第一大客户）、协鑫、东方日升、天合、通威、晶澳等。\n其一基于在硅料涨价背景下对供应安全的应对性需求；其二是出于“先抢地，再耕田”的战略性行为；其三是大尺寸硅片呈确定性趋势，硅片产能仍面临结构性供应不足。\n\n### 光伏\n大厂为消化产能、提高出货规模，现在亏损也卖，先把中小企业挤死再说。目前，一线组件厂商开工率还在70%—80%；但二三线厂商开工率只剩约40%，已有中型光伏制造企业单月就亏损上亿元。一线厂商“一体化”，就是为了在产能出清阶段，靠自身产业链不同板块调剂利润、保障现金流。当下，在整个光伏产业链中，上游硅料盈利，中游硅片微利、电池组件则全线亏损，终端产品组件的成本账已毫厘必争，即使‘一体化’，1元/瓦能有微利，低于0.99元/瓦基本就亏\n\n## 碳纤维\n\nZT7、ZT8、ZT9 系列和高模型 M40J 级、M40X 级石墨纤维工程产业化 能力，其中 ZT7 系列产品已正式进入稳定的批量生产阶段，打破了国外对高性能碳 纤维的封锁和限制。公司现已成为国内航空航天领域 ZT7 系列碳纤维产品的批量稳 定供应商。未来，公司将通过自有核心技术改进 ZT9 系列高强度碳纤维产品性能， 攻关 M65J 级高模量石墨纤维等新一代国产碳纤维批量稳定制备技术，同时扩充高 性能碳纤维产能，\n\n## 万科\n分业务类型看，本集团营业收入中，来自房地产开发及相关资产经营业务的营业收入 1,843.6 亿元，\n占比 91.8%；来自物业服务的营业收入 140.4 亿元，占比 7.0%。\n\n、相关资产经营业务主要包括物流、公寓、商业、办公等业务收入。\n“万纬物流”为本集团物流仓储服务及一体化供应链解决方案平台，目前综合实力位列行业第一梯队。\n上半年物流业务（含非并表项目）实现经营收入 19.5亿元，同比增长 17.0%，其中高标库营业收入\n11.4 亿元，同比增长 9.1%；冷链营业收入（不含供应链业务收入）8.1 亿元，同比增长 30.3%\n\n本集团旗下“泊寓”作为全国最大的集中式公寓提供商，致力于为新进入城市的青年提供综合租住服务。\n上半年租赁住宅业务（含非并表项目）实现营业收入 16.4 亿元，同比增长 10.6%。\n\n报告期内本集团商业业务(含非并表项目)营业收入 43.0 亿元，同比增长 7.3%。其中，印力管理的商\n业项目营业收入 27.4 亿元，整体出租率 94.7%，同比提高 2.0 个百分点。\n\n2021 年公司地产业务收入增速为 7.36%，物业业务 32.1%，物流仓储业务68.9%，商业开发运营业务 20.6%，长租公寓业务 13.9%，多元化布局已初现规模，将成为公司未来发展新的利润蓄水池和增长点\n\n住宅物业服务：作为公司住宅物业服务板块，公司主要以万科物业为品牌提供基础物业服务，主要包括向住宅物业业主或住户提供的清洁服务、秩序维护服务、园艺服务及维修及保养服务。\n\n房屋再装修及美居服务\n\n以 2021 年的业绩来看，万科地产业务收入\n同比增长 7.36%，物业业务增速 32.1%，物流仓储业务增速 68.9%，商业开发运营\n业务增速 20.6%，长租公寓业务增速 13.9%\n\n### 奥瑞金\n\n覆膜铁材料由奥瑞金自主研发,拥有独立的知识产权,已经实现规模化生产,是预制菜金属包装的理想原材料。 \n覆膜铁材料具有高耐腐蚀性能,现在的预制菜基本都是含盐食品,覆膜铁包装能够地很好满足含盐高温杀菌食品对包装极为苛刻的要求,此外,覆膜铁材料在高耐加\n工性能、食品卫生安全方面也有优势\n\n2023 年观察青岛啤酒灌装投产后的利润 以及大宗价格下降\n23Q1-3 毛利率16.1%，同增3.1pct，净利率6.4%，同增1.4pct\n\n枣庄项目一期产能预计今年年底开始生产,主要客户是青啤。 --- 智能体现在2024了\n佛山项目预计2026年上半年完成两条产线20亿产能搬迁。 \n主要客户是百威、可口可乐、健力宝、天地壹号、青岛啤酒、屈臣氏等。 \n\n拟要约收购中粮包装，产业格局有望优化\n\n公司主要服务的快消品品牌有红牛、飞鹤、旺旺、露露、林家铺子、东鹏特饮、战马、健力宝、安利、百威啤酒、青岛啤酒、燕京啤酒、雪花啤酒、加多宝、可\n口可乐、百事可乐、元气森林、天地壹号、大窑、林家铺子、麦富迪宠物食品等\n\n目前我们有澳洲的子公司Jamestrong,还有和中粮包装一起在欧洲投资制罐公司。 \n这些布局已经在公司内部形成了清晰的产品协同、制造协同和市场协同条件。 \n 公司高度重视海外市场增长机会,并适时加大投资布局\n\n 啤酒行业增长逻辑由“量”向“质”转变，产品结\n构升级成为主流啤酒厂商核心策略（我国罐装啤酒换算价格为1.16 元/100ml，高于瓶装\n啤酒 0.71 元/100ml）。 目前啤酒罐占二片罐需求近 58%，2016-2021 年啤酒罐化率由\n23.2%提升至26.3%，但是与成熟啤酒市场英国64%、美国67%、韩国74%、以及日\n本90%的罐化率相比，我国仍有较大提升空间。\n\n\n产能扩张落地，盈利结构优化。产能扩张方面，9 月份公司江门工厂建成投产，自动化制罐生产线已进入产能爬坡期，规划年产能为二片罐10 亿罐。公司对外延并购的波尔工厂持续进行产能整合与调整，\n二片罐产能及产能利用率均有提升空间。随着二片罐业务的盈利增长，公司盈利端对单一客户的依赖程度有望不断下降，盈利结构将优化\n\n二片罐方面，啤酒罐化率迎来加速提升期，驱动二片罐下游需求增加。二片罐下游需求以啤酒为主，其次为碳酸饮料、茶饮料等，\n\n### 万华化学\n\n精细化学品及新材料板块：精细化学品及新材料众多项目计划于 2023-25 年\n投产放量，23 年公司尼龙 12、PC、柠檬醛、磷酸铁锂、NMP 等计划投产，24 年 TPU、\n特种胺、柠檬醛、PC 等产品也会相继投产释放；25 年 PC 进一步扩产，润肤剂、香料\n及营养品、SAP 水性树脂、抛光垫及抛光液、聚乳酸等产品计划相继投放，板块未来\n几年有望呈现较高增速。毛利率上，受益宏观修复和高价值产品不断投产，以及公司\n在精细化工领域的管理能力不断提升，板块毛利率有望稳步提升\n\n精细化学品及新材料业务多集中在眉山基地和烟台总部。目前烟台基地主要有\n聚氨酯材料（TPU、ADI）、高性能塑料（尼龙 12、MMA、PMMA、PC）、半导体材料（抛\n光垫、抛光液等）、香精香料（柠檬醛及衍生物、W 酯）、维生素（VE）等。\n![Alt text](image-6.png)\n![Alt text](image-7.png)\n聚碳酸酯因其优良的介电强度、耐热老化性、绝缘性能、抗冲击性、透光性等优\n点在电子电器、板材/片材/薄膜、汽车等行业领域应用广泛\n\n从万华规划产能投放节奏来看，精细化学品及新材料众多项目在 2023-2025 年\n放量，公司有望突破 MDI 主业的增长空间，迎来新材料业务端的业绩成长。而其中\nADI、工程塑料、SAP 及其他半导体和新能源材料项目布局值得重点关注\n\n分领域来看，全球聚合 MDI 最大的应用领域是建筑和保温工程，2021 年其应用\n占比约 49%，其次是家电、胶粘剂/密封件/涂料、汽车和冷藏集装箱，分别占比 21%、\n17%、11%和 1%。全球纯 MDI 最大的应用领域为 TPU，占比 40%，氨纶、合成革、微孔\n弹性体、胶粘剂/涂料分别占比 15%、13%、12%和 4%。\n\n整体来看，MDI 的需求与地产景气度相关度较高。22 年以来国内家电、地产等领\n域需求较弱，叠加 22 年下半年以来海外经济增速回落下出口需求亦走弱，MDI 价格\n价差整体回落。当前 MDI 价差处于近十年相对低位，行业景气较低迷\n\n2023 年前三季度，伴随新装置产能释放，公司各主要业务板块销量同比增长，\n但下游需求处于恢复阶段，产品价格有所下降，前三季度公司实现营业收入 1326 亿\n元，同比增长 2%，实现归母净利润 127 亿元，同比下降 7%\n\n市场认为 MDI 主业与地产周期高度相关，地产萎靡将长期抑制 MDI 需求和公司主业\n盈利能力。我们认为当下已处于地产行业低谷，验证了公司 MDI 仍有较好盈利水平，\n且随着地产刺激政策陆续出台以及新能源车等领域的增量需求提振，MDI 需求长期向\n好。再者，MDI 垄断格局有望进一步强化，公司 MDI 主业长期有着较好的盈利能力。 \n另外，公司有较强的化工生产技术和研发经验积累，布局的多种大品类、高附加值专\n用化学品具有较大的市场空间，相关多元化布局的潜力未被市场充分认知。\n\nMDI 为聚氨酯的关键原料，生产流程长、工艺复杂、技术壁垒深厚、规模优\n势显著，行业长期呈寡头垄断格局，CR3 约 68%。万华 MDI 工艺和产能全球\n领先，单套产能达 110 万吨系全球最大，装置规模优势突出，投资和成本\n最低。并且公司持续进行装置改进，宁波改扩建完成后单套产能可达 120\n万吨，进一步拓宽 MDI 产业护城河。短期地产萎靡、宏观经济疲软致 MDI\n产业需求低迷，但公司仍有较好的盈利和现金流，已呈修复和增长态势。\n石化产业平台完善公司原料保障\n\n高端化、差异化是中国化工产业发展的痛点和明确的产业发展方向，也是\n公司在精细化学品及新材料板块追求的方向。公司积极开发多种大品类、\n高附加值专用化学品，在 ADI 聚氨酯材料、工程塑料、SAP 吸水树脂、半导\n体和新能源材料等领域均有布局，打开了公司的成长上限\n\n据我们不完全统计，按照 2023 年平均价格计算，如果万华化学现有规划项目全\n部如期投产，预计 2022-2023 年新项目将新增年营收 353 亿元，2022-2024 年\n新项目将新增年营收累计 862 亿元，全部项目均投产后将新增年营收累计 1893\n亿元\n\n按照 2022年平均价格计算，如果万华化学现有规划项目全部如期投产，预计 2022年将新增营收 208亿元，2022-2023年投产项目将新增年营收累计 542亿元，全部项目均投产后将新增营收 1808亿元。\n![Alt text](image.png)\n\n公司依托自身强大的研发实力和产业链一体化优势，全面进入新能源、营养品、高端国产替代等领域，在抛光液和抛光垫等半导体材料、三元材料和磷酸铁锂等电池材料、PBAT 和PLA 等可降解材料POE 等高端聚烯烃材料、柠檬醛衍生物等材料均有规划布局，根据公司新材料投产进度，尼龙12 已经于近期投产，HDI、柠檬醛及衍生物、顺酐、新增PC、磷酸铁锂等预计2023 年相继投产，POE、PLA、NMP、新增PMMA、聚醚胺等预计2024 年相继投产。站在当前时间节点，新材料板块已经进入快速发展期。根据我们的预测，2022-2024 新材料板块主要项目建成投产后，新增年化营业收入贡献能够达到521.45 亿，未来3 年新材料营收保持60%\nMDI有以下特点 1. 行业集中度高 2.未来2年只有万华扩产 3. 欧洲设备老化 检修影响价格\n![Alt text](image-1.png)\n\n聚合MDI 下游应用中47%用于家电冰柜保温材料中，是聚合MDI 下游最大的应用领域，24%用于建筑相关领域，包括建筑板材，建筑涂料等；10%用于胶粘剂中，而胶粘剂下游主要也是用于基建施工，家用包装，建筑制品等领域，和建筑领域息息相关；6%用于汽车领域，受益于汽车轻量化的需求带动，聚氨酯材料在汽车结构配件中的应用愈加广泛\n\n下游主要用于生\n产软质聚氨酯泡沫及聚氨酯弹性体、涂料、胶黏剂。TDI 下游 70%用于软泡领域，主要包括海绵类产品，用于坐垫，沙发等家居领域；20%以涂料固化剂的形式用于涂料中，用于建筑、汽车、电子电器等领域；其余 5%用于胶粘剂中，5%用于弹性体\n中使用，TDI 行业景气度和下游家居、汽车、建筑等传统制造业景气度息息相关。\n\n### 福耀玻璃\n\n。由于 22Q3 和 23Q2 人民币贬值\n公司分别产生汇兑收益 5.54 亿元、7.18 亿元，而 23Q3 产生汇兑损失 2.64 亿元，若同\n步剔除汇兑，则 23Q3 公司利润总额同比+35.9%、环比+23.6%，盈利能力恢复较好。\n\nASP、新业务、份额三箭齐发，从周期到成长再出发。我们持续看好 Hud+天幕渗透率加\n速下公司汽车玻璃 Asp 的提升，格局进一步优化下公司海外市场份额的提升，以及铝\n饰条业务有望迎来反转步入收获期\n\n铝饰条业务拐点已至即将开启放量周期：SAM OEM 订单投产在即，国内福清、长春工厂投产逐步爬坡\n\n福耀在全景天幕市场的占\n有率达60%以上，主要配套车型包括路虎极光、吉利星瑞、东风岚图、蔚来EC6、福特\nmustang-e、路虎 I-PACE等。\n\n\n着汽车智能化程度不断提升，预计科\n技功能的渗透率从2021年的5%提升至2026年的30%以上，随着技术的进步，HUD和其\n他科技的成本逐渐下降，而天幕处于发展初期，随着科技含量的提升，价格也将持续\n增长。在多方因素的作用下，预计2026年汽车玻璃的市场规模将达421.1亿元，年复\n合增长率为14.3%\n \n\n三季度公司天幕玻璃、HUD 玻璃等高附加\n值产品占比由 5.7%提升至 43.8%。Q3 天然气价格仍处于高位，纯\n碱、海运费等成本项目呈现企稳回落趋势，公司综合毛利率为\n34.9%，环比增长2.3pct，修复明显。\n\n\n8 月 30 日公司公\n告将对美国福耀增加投资 6.5 亿美元，其中 3 亿用于投资建设镀膜、\n钢化夹层边窗生产线；3.5 亿用于建设一窑两线用于生产浮法玻璃、\n以及 4 条太阳能背板玻璃加工线和配套厂房。同时，公司在郑州规划\n500 亩左右用地，用于未来发展所需。公司新一轮扩产周期开启，以应对全球化的深入以及玻璃量价齐升的需求。\n\n海外业务：三季度SAM收入环比降低15%，亏损环比扩大\n360万欧元，主要系欧洲汽车业受供应链扰动影响+天然气与电价格上涨。\n\n汽玻市场空间扩容，天幕玻璃、调光玻璃、HUD 显示玻璃等高附加值汽玻\n增量加速兑现。根据测算，2020 年天幕玻璃在新能源车中渗透率约 16.4%，\n2021 年增长至 23.5%，天幕玻璃渗透率快速提升\n\n铝饰条业务，德国 SAM 整合接近尾声，国内铝饰条产能布局稳步推进。\n目前 SAM 已从原 11 个工厂整合到 2 个生产工厂+1 个备用工厂，硬件改\n造到位，新 ERP 系统上线，虽然当前还处于亏损状态但在逐步向好。国\n内产能方面，长春工厂两条铝饰条产线已完成建设，预计 2023 年陆续会\n有产品交付；此外福清第二条铝饰条产线的扩建工作正在进行，苏州工\n厂计划 2023 年开始建设，预计到 2023 年底或 2024 年初，国内会形成 6\n条铝饰条生产线的产业布局，成为未来福耀营收的新增长极\n\n2021 年，福耀的全景\n天幕玻璃、可调光玻璃、抬头显示玻璃、镀膜可加热玻璃等高附加值产品占比持续提升，同比提升 3.31 个百分点，价值得以体现。据测算，福耀 2021 年汽玻 ASP 为\n181 元/平米，较 2020 年提升 7 元/平米。而 2022 年 H1，福耀汽玻 ASP 预期同比增\n长 11.6%，单价达到 200 元/平米左右\n\n性价比方面，全景天幕为不可开启式设计，摒弃了\n滑动天窗所需的中控驱动、排水系统等复杂结构件，同时避免出现失控、漏水等现\n象，较传统天窗有更高的性价比。\n\n幕玻璃的夹层特性，叠加福耀生产关的严格把控，并不会降低车辆安全性能。福\n耀生产的全景天幕均采用夹层玻璃，其中夹层材料 PVB 膜具有高粘性特点，比钢化\n玻璃具有更高的抗冲击强度。并且在受到外力冲击时，能有效防止玻璃碎片飞溅。\n生产方面，福耀进行严格的质量测试，能够保证天幕玻璃在静止状态下可以承受\n40MPa 的应力\n\n![Alt text](image-2.png)\n\n福耀成功将镀膜隔热、智能调光、LOW-E 隔热三大技术集成于超大玻璃天\n幕上，推出“福耀智能全景天幕”，在实现超大视野享受与极佳采光效果的同时，还\n能调节光线透过，防晒隔热，减少车辆空调使用能耗，并具备隐私保护的效果，为\n智能座舱的发展做出了贡献。\n\n福耀通过特殊材料的印刷工艺，可以在天幕上个性化定制\n图案，灯光在玻璃内传导后将图案反射至车内。另外，氛围灯还能与其他设备连接，\n随着音乐节奏变换。在节能环保方面，福耀积极推进太阳能天幕的研发。全景天幕\n面积大采光好，如果利用天幕将太阳能转化为电能，为车载电器提供电源，可以降\n低油耗。福耀提出并设计了太阳能天幕的工作原理，通过在玻璃里加入太阳能电池\n组实现能量转换，在未来值得关注。\n\nHUD 加速迭代，W-HUD 成为当前市场主流，AR-HUD 蓄势待发\n汽车网联化是未来发展趋势，福耀布局智能玻璃天线\n\n`持续关注铝条饰品的放量`\n\n### 安踏\n2016 年，合资引入 DESCENTE，定位中国高端体育服装，涉及滑雪、综训、跑步等，DESCENTE\n已经成为品牌矩阵中新的增长点；2017 年，收购 Kolon Sport 中国经营权，定位为专\n业户外（登山）运动，2022H1 流水增速超过 50%；2018 年，与多方财团斥资 371\n亿元收购了 Amer  Sports ，并坐拥旗下的顶级户外及运动品牌 ARC'TERYX 、\nSALOMON、WILSON 等，覆盖网球、羽毛球、高尔夫、高山滑雪、越野滑雪、滑板、\n自行车、越野跑装备、徒步装备及潜水等多种运动项目。\n\n\n\n### 晨光生物\n\n赞比亚原料基地将落地叶黄素生产线，明年有望销售叶黄素产品。由于国内万寿菊种植相较国外成本优势逐渐减弱，明年公司或将优先发展万寿菊种植面积。赞比亚土地和人工成本低廉，就地生产销售将有力拉高\n叶黄素利润水平。\n\n甜菊糖：受益无糖、减糖产品发展，市场潜力巨大。公司上线新工艺，得率逐渐爬坡至设计水平，同时取得的副产物绿原酸能够摊薄成本。今年甜叶菊产量同比增长，目前采购工作正在进行，预计明年销量能够实现增长。\n\n，2019 年初晨光生物完成对邯郸金诺药业的收购，这标志着晨光生物开始进军中药行业。公司目前已有板蓝根颗粒、牛黄解毒片、桑菊感冒颗粒等等多个药品注册批准证书，并开展了胃灵颗粒、桑菊感冒颗粒、牛黄解毒片等多个中药产品质量标准提升研究项目。目前公司中药业务规模小，长期看中药集采政策的持续推进与优化，有利于公司发挥低成本工业化生产优势，扩大中药业务规模\n\n 同时在生产过程中可以充分去除植物原料中的农残等有害成分，相比香辛\n植物原料，在食品安全、食品标准化、成本控制有着无可比拟的优势\n\n综合各细项来看：1）收入端：全年收入端其他植物提取物在低基数与环境转好背景下收入增速最快，其次为稳定增长的辣椒红、辣椒精，叶黄素受销售节奏影响下滑，整体全年植提业务将呈现稳定增长趋\n势。预计 2024-2025 年叶黄素业务恢复正常增长轨道，同时公司不断充产品矩阵，收入增长或提速。2）利润端：全年来看，较高毛利水平的\n饲料级叶黄素在收入中占比降低，业务结构变化导致整体毛利率降低。\n\n但境外各地的法律、税收、外汇管理、人文环境、中外政府关系等方面存在较大差异，如 2023 年 8 月美国国土安全部将\n公司列入“维吾尔强迫劳动预防法”的实体清单中，\n\n保健食品业务过去的利润率呈现上升趋势,去年首次实现盈亏平衡,今年有望实现正向利润贡献,未来会随着规模效应提升、客户结构改善,盈利能力保持提升趋势\n\n三季度业绩增速较上半年有所回落,主要原因是: \n饲料级叶黄素及棉籽类业务收入同比下降;棉籽类业务套期保值持有的期货合约公允价值变动影响了业务季度间波动。\n 叶黄素主要应用于饲料添加剂领域,小部分用于大健康领域。 \n从需求端来看,饲料添加剂领域的客户需求稳定,大健康领域的需求增长较快。 \n现阶段叶黄素的价格受原材料供应量影响更大,需求侧对产品价格的影响较小。 \n7\n\n### 伊利股份\n\n毛利率稳中有升，费用率拖累盈利表现。受销售费用率拖累，公司 Q3 扣非归母净利率 5.6%,同比下滑 3.3pct。22Q3 毛利率为 30.8%（+0.6pct），主要系公司控制买赠促销力度维持价盘稳\n定，此外生鲜乳价格 Q3 同比小幅下行。22Q3 销售费用率18.8%(+3.3pct)，主要系液奶事业部费用率提升以及部分综艺因疫情影响延期至三季度进行播放 \n\n持续夯实海外供应链，并以冰淇淋等品类摸索东南亚市场本土化打法。当前公司一\n方面，收购 Westland 等企业强化奶源布局，另一方面，通过印尼建厂、收购泰国冰\n淇淋公司等方式，以奶源依赖度相对较低、且适合东南亚当地消费发展阶段的品类，\n进行海外市场的本土化摸索，预计在中长期有望逐步贡献增量\n\n### 格力电器\n\n安为比亚迪新能源车热管理系统的稳定供应商，核心零部件已突破技术壁垒。盾安目\n前已具备为各大新能源车企以及零部件厂商提供高质量产品的能力。目前盾安已与主流\n新能源汽车主机厂（比亚迪、理想、蔚来、一汽等）、电池企业（宁德时代、微宏动力\n等）、商用车企（宇通、中车等）建立良好合作关系，有望在新能源领域加速产业布局。\n格力受让盾安股权之后，其控股子公司格力钛未来有望与盾安开展业务协同，拓展客户，\n提升产能、充分发挥资金和产业的规模效应，扩大市场份额，提升格力在新能源领域的\n市场优势，实现业务多元化。\n\n### 乐普医疗\n\n城乡居民疾病死亡构成比中心血管疾病占首位，\n2020 年农村、城市心血管病死亡率分别为每十万人 135.88、126.91 人，随着老龄化\n加速以及精准诊治推及，行业需求处于上行趋势，存在大量未被满足的临床需求，\n创新优效的药物和医疗器械潜在市场空间巨大。\n\n药品集采后公司加大器械创新投入，研发强度由此前的 6%左右提升至\n2021 年 10%左右，其中 75%以上投入到器械中，以医疗器械收入作为分母则研发强度\n超 15%。\n\n随着老龄化加剧、基层市场扩容、集采降价驱动等，对标发达国家的\n人均 PCI 例数仍有 2 倍的增长空间，有望达到 300 万例 PCI/年\n\n2023 年 Q1-Q3 公司研发\n费用 6.7 亿元（+0.46%），研发费用率 10.78%（+2.13pct）。公司可降解 PFO 封\n堵器、半自动 AED 已获批上市，脉冲声波球囊、射频房间隔穿刺系统处于上\n市前发补阶段，甘精胰岛素预计较快获批，司美格鲁肽准备申报 IND。公司投\n资的民为生物 GLP-1 三靶点候选药物 101 I 期临床入组基本结束，预计年底\n前获正式报告，并于 2024 年 Q1 开始 II 期临床。此外，公司积极加速向消费\n业务转型，目前已在皮肤科、眼科领域有多项产品布局，公司收入中医保来源\n占比已低于 45%（剔除集采后<25%）\n\n。分业务看，器械板块收入 28.6 亿元\n（-34%），主要系去年应急业务高基数影响，其中心血管植介入创新产品组合营\n收同比增长 6.1%，外科麻醉业务同比增长 6.9%，报告期内公司下属公司上海\n形状记忆合金材料有限公司自主研发的 MemoSorb® 生物可降解卵圆孔未闭\n封堵器正式获得国家药品监督管理局（NMPA）注册批准。药品板块 Q1-3同比\n下降 6%，单 Q3季度收入基本持平，目前公司西格列汀片、恩格列净片、甲磺\n酸多沙唑嗪缓释片、瑞舒伐他汀钙片已获批上市。医疗服务及健康管理板块收\n入 9.8 亿元，公司基于乐普云平台，聚焦医疗级心脏监测、居家健康监 测及智\n慧康复护理三大服务，为各级医院和个人消费者提供各类生命体征监测产品和\n服务，其中心电检测类产品依托人工智能 AI-ECG Platform，可远程提供长程动\n态心电监测服务。同时公司在消费医疗开展战略布局，在皮肤科、眼科、齿科\n均已有产品面世，有望贡献新增长点。\n\n### 制冷\n\n，我国二代制冷剂作为非原料的产量和消费量已于2013年被冻结，2020年配额削减35%，2025年配额削减67.5%，2040\n年以后将完全淘汰。而三代制冷剂2024 年冻结HFCs的消费和生产规模，自2029年才开始削减，因此未来较长一段时间，三代制冷剂将成为主\n\n电子氟化液在半导体领域主要用作清洗剂、脱水剂、光刻机控温液以及\n芯片封装工序的检漏液等，目前大部分市场被海外企业垄断，其中，3M\n电子氟化液产品占据了全球芯片干法蚀刻设备制冷剂90%的市场份额。\n考虑到全球对 PFAS 物质的监管正在加速以及环保因素，3M 决定到 \n2025  年底前退出包括电子氟化液在内的PFAS 产品，电子级氟化液竞\n争格局有望重塑。国内新宙邦、巨化股份等企业已经布局氟化液相关产\n能，其中新宙邦 Boreaf 电子氟化液系列产品可用于半导体  Chiller  冷\n却、精密清洗、气相焊接、电子检漏等领域。相关产品采用绿色清洁的\n工艺路线，通过了海外客户的认证，生产产品符合当地的法规要求，已\n供应全球半导体主流制造商，有望承接3M 氟化液市场。\n\n随着数据中心规模和单机功率的不断提升，浸没式液\n冷数据中心占比有望快速提升。氟化液作为一种高效可靠的冷却液，需\n求未来有望较快增长\n\n化液广泛应用于半导体加工环节。氟化液在芯片制程工艺中被广泛应用，炉管、\n光刻、刻蚀及封装测试环节都需要使用氟化液作为清洗剂、脱水剂、光刻机控温液以及\n芯片封装工序的检漏液等\n氟化液可作为半导体湿法清洗的清洗剂\n\n氟化液在干法刻蚀环节用做控温液，可帮助提升芯片制程中的整体良率，缩短芯片\n研发周期。\n\n全氟聚醚润滑脂广泛用于航空航天、核工业、化工、机械工业等领域。全氟聚醚润\n滑脂常用于高温、高负载、化学腐蚀环境中的轴承以及要求终身润滑的部件，具有极佳\n的化学惰性、耐久性和低挥发性，能够在极端高温条件下保持润滑性能，一般可耐受高\n达300 摄氏度的温度。对酸、碱、溶剂等具有良好的抵抗，适用于恶劣化学环境下的润\n滑需求。\n\n### 巨化股份\n\n由于市场需求疲弱、产品供\n给能力增加影响，公司主要产品市场竞争加剧，产品均价同比出现较大幅度下降，\n且三季度沿袭下降，但制冷剂、石化材料、基础化工产品均价环比企稳。前三季度\n公司综合毛利率为12.87%，同比下降5.89 pct。\n\n三制冷剂价格稳步上涨是大概率事件，三代制冷剂行业将迎来10年景气周期，这是巨化第一增长曲线\n\n 有三代制冷剂利润后，巨化就会有更多的资源投入研发。高性能、高附加值氟化工高端产品将是巨化未来第二增长曲线\n\n 全球氟化工有限公司在阿联酋氟2万吨134a已经基本建成。巨化拥有三代制冷剂全球最大份额，全球化也许是巨化未来第三增长曲线\n\n 碳交易。2022年欧盟平均碳价预计为88欧元/吨，折合人民币650元。目前国内碳交易一吨58元，未来有十年有10-20倍的上涨空间。三代制冷剂巨化配额换算为碳当量估计5亿吨，三美2.7亿。这是未来的一个想象空间\n\n 混改。8月份巨化股份控股母公司“巨化集团混改资产评估项目”中标公示，22年是混改的收官之年，以此推测，巨化集团混改正进行中\n\n \n \n氟化液：经济社会数字化转型背景下的节能减排最优解 \n冷却系统能耗占比为 43%，浸没式液冷技术成为必然选择\n\n相比于传统冷却方式，浸没式液体冷却的优势显著。（1）节能降耗，相对于传统风冷数据中心能耗降低 90%  ～  95%，降低  PUE  可大幅降低机房的运营成本。\n（2）低噪无污染，无需使用风扇，最大限度减少噪声的污染，同时无需担心空气中的灰尘对高洁净度要求器件的干扰。（3）节约空间，利用浸没式液冷的数据中心冷却系统所占的空间体积可减小至风冷系统的  1  /3。（ 4）换热能力强，能够满足超高热流密度器件的散热需\n\n“巨芯冷却液”实现国产高性能氟化液突破，迈入产业化阶段\n目前公司间接控股 95%的浙江创氟高科新材料有限公司计划投资 5.1 亿元规划建设 5000t/a\n浸没式冷却液项目，产品适用于大数据中心换热所需的冷却介质及尖端产业、电子流体，计划三季度投运。其中一期 1000 吨/年项目已于 2022 年上半年基本建成。\n目前，数据中心浸没式冷却液总市场规模达到3 万吨，2025 年有望达到 10 万吨级，\n看好公司未来氟化液业务成长\n\n综上，我们坚定看好三代制冷剂价格回暖带来的业绩增量以及巨化氟氯联动带\n来的成本优势。同时公司布局含氟新材料，高附加值拉升公司毛利率中枢。预计公\n司 2022-2024 年归母净利润分别为 19.25 、26.31 、32.44 亿元，同比增速为\n+73.6%、+36.6%、+23.3%。\n\n年报看下应该会超出预期。\n\n配额制定进入尾声，制冷剂行业已进入拐点区间\n\n三代制冷剂配额争夺将于2 0 2 2 年末结束，2 0 2 4 - 2 0 2 9 年的生产配额将依据2 0 2 0 - 2 0 2 2 年间各公司三代制冷剂销售\n情况进行分配。\n\n### 半导体\n\n湿法刻蚀是较为原始的刻蚀技术，利用溶液与薄膜的化学反应去除薄膜未被保护\n掩模覆盖的部分，从而达到刻蚀的目的。其反应产物必须是气体或可溶于刻蚀剂\n的物质，否则会出现反应物沉淀的问题，影响刻蚀的正常进行。通常，使用湿法\n刻蚀处理的材料包括硅，铝和二氧化硅等。\n\n随着集成电路的发展，湿法刻蚀呈现出以下局限：不能运用 3 微米以下的图形；\n湿法刻蚀为各向同性，容易导致刻蚀图形变形；液体化学品潜在的毒性和污染；\n需要额外的冲洗和干燥步骤等\n\n\n干法刻蚀技术的出现解决了湿法刻蚀面临的难题。干法刻蚀使用气体作为主要刻\n蚀材料，不需要液体化学品冲洗。干法刻蚀主要分为等离子刻蚀，离子溅射刻蚀，\n反应离子刻蚀三种，运用在不同的工艺步骤中\n\n 等离子体刻蚀是将刻蚀气体电离，产生带电离子，分子，电子以及化学活性很\n强的原子（分子）团，然后原子（分子）团会与待刻蚀材料反应，生成具有挥\n发性的物质，并被真空设备抽气排出\n\n### 潍柴动力\n\n发动机销售36.7万台，同比增长29%，其中500马力以上国内重卡发动机市场占有率达到31.7%，同比提高19.7个百分点，盈利能力大幅增强；出口销量3.9万台，同比增长52%；变速箱销售42.5万台，同比增长33%；出口销量2.2万台，同比增长93%；车桥销售36.1万根，同比增长31%。战略高端产品继续发力，大缸径发动机实现收入人民币17.1亿元，同比增长77%，高端液压实现国内收入人民币5.0亿元，同比增长46%。商用车业务上半年累计销售重型卡车6.1万辆，同比增长58%；出口销量2.6万辆，同比增长97%；其中天然气产品累计销量突破1万辆，同比增长241%，市场份额再提升2.8%。潍柴雷沃大马力智能拖拉机、大喂入量谷物收获机械、复式播种机继续走俏市场，销量保持全国领先。智能物流业务实现销售收入56亿欧元，同比增长2%。工业车辆和服务业务利润收入显著提高，经营业绩远超预期。\n\n科技创新驱动高质量发展，行业领先地位持续巩固。建立针对各细分市场的产品研发体系，提升全流程研发能力，更全面、更快速地满足客户需求。轻型动力产品动力性、可靠性及经济性全面提升，持续强化产品竞争力，赢得市场良好口碑。大马力高端产品不断发力，WP14H、WP14T、WP15H、WP15T、WP15NG等产品在干线物流、绿通冷链、快递快运、港口运输、危化品运输等市场树立了行业新标杆，成为客户首选动力。高端大缸径发动机在数据中心、矿用应急电源、矿卡等高端市场，配套量节节攀升，成为企业新的增长点，产品结构调整成效显著。动力总成差异化优势显著，核心竞争力不断凸显。新一代高热效率动力总成产品高可靠性和高传动效率优势明显，持续引领中国大马力重卡节能新时代。重磅发布WP7H挖掘机液压动力总成、WP15H挖掘机液压动力总成，动力强劲、可靠性高，成为广大用户的“掘”佳利器。WP17T发动机+林德液压动力总成首次批量配套80吨级挖掘机，性能可靠，油耗对比同吨位设备显著降低，成为新一代矿山王者。大马力智能CVT拖拉机批量投放市场，快速建立起高端农业装备的核心竞争优势，有力推动我国农业机械行业转型升级。\n\n。燃料电池取得全球领先性突破，引领行业多元能源技术发展。发布全球首款大功率金属支撑商业化固体氧化物燃料电池SOFC商业化产品，热电联产效率高达92.55%，打造全球最高纪录，为分布式能源和微电网提供绿色低碳解决方案。氢燃料电池业务持续引领行业发展，装配潍柴氢燃料电池发动机的公交车累计行驶里程超过3000万公里，产品寿命达3万小时。\n\n业务结构和盈利能力不断改善\n\n积极拓展海外市场及战略新兴业务：1）海外市场开拓加速，22Q1-3 公司发动机/重卡整车出口分别同比+40%/+77%，其中 Q3 出口分别同比+60%/+125%，出口对公司的贡献逐渐放大。2）大缸径发动机增长强劲，22Q1-3 实现收入同比+75%，销量超 5000 台，同比+40%，单价继续提升，其中 Q3 实现收入同比+84%。3）上半年雷沃农机实现销量 7.6万台，同比+28%。8 月 30 日发布公告，拟对潍柴雷沃分拆上市，有利于协同本部发展，做强做大高端农业装备业务\n\n1）受订单周期及欧美高通胀带来的供应链压力影响，凯傲 22Q3 出现亏损近 1 亿欧元，若剔除该影响，Q3 公司净利润同比增长超 10%，预计 Q4 起凯傲盈利能力将逐渐好转。中长期来看，到 2025年我国智能物流行业规模有望达万亿，5 年 CAGR 为 10.9%，前景广阔，凯傲+德马泰克的供应链整体解决方案有望助力公司持续增长。2）前瞻布局氢燃料电池产业链，持续积极推进新能源战略落地，有望在未来取得先发优势大缸径发动机应用领域广泛，\n包括发电设备、5G 大型数据中心备用电源等工业动力，远洋捕捞、公务用艇及内河航运等船舶动力，以及其他大型机械等领域。\n\n目前重卡行业运行态势 据中汽协及第一商用车网数据显示,1-10月份重卡行业累计销售78.8万辆,同比增长38%。 \n其中国内部分细分市场呈现恢复态势,海外市场需求饱满,出口销量继续增长。 \n长期来看,随着经济持续回升向好及公路运输效率不断提升,重卡行业将迎来良好发展机遇\n\n### 安琪酵母\n中式面点发酵之外，我国\n烘焙行业的扩容拉动酵母制品需求的增长。与发达国家相比，YE在我国食品鲜味剂中的\n渗透率还有较大提升空间。而酶制剂、酵母替代蛋白等精深加工产品打开高值化蓝海\n\n国内酵母业务需求刚性，竞争格局稳定，公司具备市场话语权，新一轮扩产扩大规\n模领先优势，出海路径逐步清晰；提价、水解糖替代多措并举对冲成本压力，今明\n年效果显现，叠加糖蜜价格稳中趋降，未来盈利能力更为稳健；立足酵母同心多元\n化发展，在生物发酵、新型包材、动植物营养领域培育新增长曲线。\n\n发酵蛋白：精深加工打开高值化蓝海\n\n酶制剂是酵母产业高附加值延伸的重要方向。酶制剂是微生物发酵产生的具有催\n化功能的蛋白质，具有催化效率高、专一性较高、作用条件温和、能耗较低、化学污\n染少等优点，其应用领域遍布饮料（啤酒、葡萄酒、白酒、果汁等）、食品（面包烘\n焙、制糖、乳品等）、纺织、饲料、洗涤剂、造纸、皮革、医药以及能源开发、环境\n保护等方面\n\n 在酵母衍生品领域，酵母提取物 YE 在食品鲜味剂中的渗透率还有较大\n YE 是天然的鲜味剂，顺应健康、营养、美味的消费需求，正在食品加工领\n域替代味精，具备发展潜力但 YE 在鲜味剂中的占比差别较大，速冻食品\n高达 80.2%，调味品则只有 22.5%左右。横向比较,日本和西欧调味品 YE 使用量在鲜\n味剂中占比分别为 83.2%和 45.9%。受益于国内消费升级和食品品质进化迭代，国内\nYE 市渗透率仍有较大的成长空间\n\n为拓展海外业务，公司同步优化组织架构。过去每个部门都涉及海外业务，现在\n所有海外业务都按区域划分到 6 个海外事业部。每个事业部负责所有产品在当地市场\n的业务。此外，公司在新加坡、墨西哥、美国、德国设立，加速融入本地市场。 \n\n树立大食物观，向酵母要蛋白，商业推广已有初步成果。微生物蛋白将成为人\n们补充蛋白的新选择，酵母蛋白的发展值得期待。酵母蛋白含有人体必需的 8 种氨基\n酸，属于全价蛋白，营养丰富。除此之外，酵母蛋白的消化利用率更高。植物蛋白的\n消化利用率是 80%，肉类蛋白为 90%，酵母蛋白则为 95%左右。公司已实现利用酵\n母蛋白替代纯植物蛋白制成的素肉中 50%的植物蛋白，使得素肉制品豆腥味减弱、\n肉味更浓郁，其质感及纹里更接近肉。公司酵母蛋白在市场上供不应求，预计今年产\n量将突破 1 万吨。\n\n### 中科三环\n\n受益下游新能源领域高景气，磁材产销量两旺拉动业绩高增。下游新能源车、变频家\n电、节能电梯、风力发电高景气拉动稀土永磁材料需求大幅增长，2021 年以来公司磁\n材产品订单大增，下属工厂接近满负荷运行，产能利用率与产销量大幅增长\n\n稀土磁材行业壁垒日益提升。伴随终端应用高效率、小型化场景需求提升，尤其高端\nEV/变频空调/消费电子等产品对磁材热稳定性、高磁能积提出更高要求，客户认证、工\n艺难度、投资强度等方面要求愈发苛刻，我们认为，稀土磁材行业具有较高的新进入者\n壁垒，主要存在四点：\n✓ 壁垒一：工艺流程长达 16 道环节，产品一致性、稳定性需要长期经验积累。\n✓ 壁垒二：客户深度绑定（认证期 2-3 年），客户不会轻易更换供应商。\n✓ 壁垒三：项目周期长达 2-3 年，时间壁垒高。\n✓ 壁垒四：投资强度大，万吨级投资 10 亿元+，高端产品 30-40 亿元。\n\n\n### 中国核电\n\n我国四代核技术世界领先，2021 年 5 月，世界首座钍基熔盐堆—\n—甘肃武威钍盐核反应堆主体工程基本完工；同年 12 月，世界首座高温气\n冷堆——石岛湾核电站 1 号反应堆首次并网成功\n\n### 今天国际\n\n国外自动化物流系统提供商在\n高端物流软硬件技术和行业经验方面具有优势，在一些高端自动化物流系统项目中占有一\n定优势。 国内企业在与国外先进的自动化物流系统提供商竞争中不断发展，推出具有自\n主知识产权自动化物流产品，凭借较好的本地化服务优势，在一些项目中具备了较强的竞\n争优势，并成功进入高端项目领域。\n\n上述 20 多家自动化物流系统提供商在各个应用领域各有优势。如，在烟草行业，今天国\n际具有较强的竞争优势；在医药行业，日本大福，美国德马泰克等国外企业具有较强的竞\n争优势，国内企业起院在这一行业也具有竞争力；在机场方面，西门子、范德兰德等国外\n物流系统集成商具有较强优势\n\n### 思摩尔国际\n分业务来看，虽然思摩尔国际的业务收入集中来自于新型烟草行业，但若把思\n摩尔国际就此定义为传统的电子烟制造商将有失偏颇，原因有三：（1）公司的核心\n雾化技术在特殊雾化设备，如医疗、美容甚至航空等领域有很强的可迁移性；（2）\n思摩尔近年以通过专利申请、研发投入等布局医疗、美容及大麻雾化领域并取得了\n一定进展；（3）据弗若斯特沙利文数据，全球特殊雾化市场增速亮眼，目前市场规\n模为 11 亿美元，预计 2022 年至 2026 年将以 46%的复合增速发展。长期来看，我们\n认为思摩尔国际发展更趋向为雾化技术平台型企业，大麻雾化、医疗雾化等特殊用\n途的电子雾化设备制造将支撑公司第二增长曲线加速打开。\n \n\n### 中炬高新\n\n中炬高新董事会和管理层完成更替，品类和区域扩展空间广阔，中期净利润率目标\n15%左右。目前火炬集团及一致行动人目前持股19.93%，公司控制权基本确认。10 月\n中市场化招聘公司总经理及其他高管到位，华润雪花背景余向阳为总经理。11 月初内\n外部全员竞聘中高层职务，美味鲜现有管理层稳定。高层落地后，首要工作是梳理内\n部工作流程和提升内部工作效率，强调优胜劣汰和提质增效。后续多重催化剂可期，\n1H24 股权激励有望落地，目标3 年内引入战投，房地产业务函待剥离，诉讼预计负债\n已经在 2022 至 1H23 报表中计提。\n\n目前中炬高新美味鲜在酱油和蚝油市占率仅 3%，\n体量提升空间较大；鸡精鸡粉竞争优势较强，份额进入前三；料酒和醋体量预期过\n亿，会持续发展支持。南部和东部五省是中炬高新美味鲜的主要销售区域，未来华东\n和北部区域的扩张将成为重点。受到原材料和产能利用率影响，公司利润率压力较\n大，新领导班子重视提升内部工作效率，费用率有望下行，公司中期净利率目标 15%\n左右。\n\n目前火锅底料是复合调味料最大的子行业，头部企业市占率仅 11%，能够容纳足够多\n的企业，是布局复合调味料的重要赛道之一。蚝油子行业海天味业的优势得天独厚，\n长期仍为行业龙头，中炬高新 2022 年蚝油收入近 3 个亿。鸡精鸡粉份额基本被外资\n品牌垄断，有机会做少量的国产替代。其他中式调味料均有布局的机会，如川式调味\n料中的酸菜鱼调料、小龙虾调料等\n\n厨邦酱油采用南派酿造工艺，用料更高级。①酿造工艺：高盐稀态发酵工\n\n艺生产周期长且成品品质优良，现为酱油行业主流酿造工艺；②原材料：\n\n厨邦酱油原材料为 100%大豆，竞品酱油原材料为大豆+豆粕的组合。油脂含量高，口感更醇厚，且价格比豆粕每斤高 20%以上；③曲种：厨邦\n\n主要采用高产量单菌种，发酵后可强化氨基酸态氮指标。综合对比，厨邦\n\n酱油使用的原材料更高级，酱油品质更高。\n\n厨邦酱油价格位于中等水平，性价比优势突出。厨邦酱油在保证口感美味\n\n品质上乘的同时，价格相对实惠。对比同类高鲜产品，厨邦酱油价格处于\n\n中位，厨邦味极鲜价格为 9.87 元/500ml，相比同等氨基酸态氮含量的李\n\n锦记味极鲜/加加味极鲜/欣和六月鲜特级酱油分别便宜 0.3%/6.9%/37.5%。\n\n对比零添加产品，高鲜酱油氨基酸态氮含量更高，价格更低。综合来看，\n\n厨邦酱油拥有明显的高性价比\n\n鸡精粉：目前鸡精粉行业属于成熟发展阶段，由外资品牌占据主要市场，\n\n厨邦位于行业第三。公司 2012 年推出鸡精粉，相比竞品，厨邦鸡精粉总\n\n氮含量更高，鲜味更足，同时鸡精污染物三氯丙醇（3-MCPD）含量更低，\n\n产品安全健康。鸡精粉主要在餐饮渠道销售，2021 年随着餐饮端需求逐渐\n\n恢复，公司鸡精粉营收同比提升 10.5%\n\n海天定位中低端餐饮，产品主要应用在热菜领域，海天通过高性价\n\n比实现餐饮渗透和高周转，目前海天餐饮渠道占比 60%，在中低端市场形成了\n\n无法撼动的规模优势\n\n对比第二梯队其他参与者：千禾味业餐饮占比约 5%，加加食品餐饮布局处于\n\n起步阶段，餐饮占比仅为 2%。对比之下，公司餐饮渠道占比 25%，叠加拥有完\n\n善的产品矩阵&高性价比优势，在第二梯队中具备突围餐饮渠道的基础\n\n\n差异化+常规化措施并行，有望实现餐饮渠道突围。公司重视餐饮渠道的开拓，目\n\n前主要合作品牌包括西贝莜面村和海底捞，年销售额在千万级别。对标龙头海天味业餐\n\n饮渠道占比约 60%的水平，长期看公司餐饮渠道占比仍有较大提升空间。\n\n差异化措施：以凉菜切入餐饮渠道+推进餐批旗舰店建设\n\n常规化措施：大包装产品&一站式采购+经销商扶持+厨师训练营\n\n2021 年公司较海天扣非归母净利率低 11.7%，核心\n\n差异在管理费用率，2012-2021 年平均管理费用率中炬约为海天的 2.4 倍，近年来中炬管理费用率呈现持续下降的趋势管理人员较多：如果将除生产、销售、技术以外的人员归为管理人员，\n2018 年中炬管理人员共 1584 人，海天管理人员共 508 人，主要是由于总部管理人员较多。2019 年公司转为民营体制，积极剥离相关人员，2021年管理人员数量降低到 637 人； \n管理层激励不充分，管理效率较低：2021 年海天 16 位高管合计薪酬 3255\n\n万元，12 位高管持股市值合计 655 亿元，中炬高新 22 位高管合计薪酬\n\n3423 万元，无持股，中炬管理层薪酬待遇和人均创收相比海天有较大差\n\n### 宋城演艺\n\n未来公司将更加坚定专注演艺主业,持续打造非同凡响的高品质演艺作品,不断营造新奇特的景区和度假体验。 \n 花房集团是公司参股35.35%的联营企业,公司对花房集团采用长期股权投资权益法核算,按相关规定每年对长期股权投资进行减值测试。 \n2023年,受宏观环境、行业环境和内部环境等方面因素影响,花房集团主动采取了更加谨慎的运营策略,于2023年5月份起进一步加强了风险管理和内控措施,整体\n运营规模收缩,经营业绩出现大幅下滑。 \n综合各方面因素分析,预计花房集团未来经营不及预期,公司对花房集团长期股权投资执行了减值测试为目的的评估,根据初步评估结果拟计提减值准备8.6-9亿\n元。 \n本次拟计提的金额为初步测算结果,最终金额将在最终评估和审计后确定。 \n\n西安有着厚重的历史文化和丰富的旅游资源,也是个网红城市,游客底量庞大。 \n西安有着多台品质较高的演艺节目,演艺市场竞争比较激烈。 \n西安千古情开业后,迅速在激烈的市场竞争中占得一席之地。 \n未来西安项目将进一步发挥演艺+景区的优势,发挥室内演出晴雨皆宜、全天候上演的优势,不断提升市场占有率。 \n目前西安千古情工作日基础场次已达4场,周末达到5场,未来经营看好。 \n上海宋城三楼和四楼的整改提升预计将于3月底完成,将增加餐饮区、互动体验区、商业等内容,进一步提升游览空间、产品品质和接待水平。 \n上海的城市人口基数大,商业发达,本地亲子家庭、年轻时尚群体、企业团建等各种专题市场需求旺盛,2024年将实现集中整改提升后的完整年度运营,经营前景看\n好\n\n受益于补偿性需求的释放,加上公司做了很多针对性非常强的主题活动,2023年整体的门票收入已经基本恢复到2019年。 \n 四季度本身是文旅消费的淡季,对全年业绩的影响较小。 \n公司各个项目根据当地市场特色做了针对性的营销活动,杭州宋城国庆期间受到当地重大活动的一些影响,但其后的学生秋游团和银发团表现较好,上海宋城的企业\n团建市场也在不断发力。 \n 元旦假期公司整体场次和人次较2019年同期均有较好增长,一方面受益于项目数量的增加,西安、上海等项目收客局面良好;另一方面杭州宋城等景区通过开展跨\n年活动充分挖掘周边散客市场实现较好增长。 \n目前公司各个项目已做好狂欢中国年新春主题活动的全面准备,将以饱满的热情迎接新年新气象\n\n占位优势：卡位一线旅游目的地，占据客流高地\n\n渠道优势：卡位旅行社渠道，拓宽新渠道 \n\n桂林项目卡位高客源景区，张家界项目科技含量高，均处于快速爬坡期\n\n珠海项目拟将100%股权转让给宋城集团，回收4.58 亿元，未来收取\n\n一揽子服务费及后续的管理服务费，我们预计成熟期业绩超0.5 亿元。\n\n￼ \n\n### 百龙创园\n\n益生元、膳食纤维系列产品目前贡献 90%的收入；毛利方面，\n\n益生元、膳食纤维贡献 80%的毛利；以阿洛酮糖为主的健康甜味剂产品是\n\n公司 2020 年新推出的产品系列，有望逐步成为公司新的利润增长点。\n\n公司产品聚葡萄糖和抗性糊精均为可溶性膳食纤维。可溶性膳食纤维由于\n\n具有良好的溶解性，无异味，受到广大食品加工企业追捧，作为增稠剂、\n\n乳化剂等运用于食品饮料中，既增加营养健康卖点，也可以丰富口感，也\n\n正是由于可溶性膳食纤维出色的生理性能成就了其更广泛的应用领域与下\n\n游市场\n\n抗性糊精可以帮助人体更好吸收微量元素如钙、铁、锌、硒，成就抗性糊\n\n精强大消费概念。根据泰莱公司（Tate&Lyle）实验数据，人们平时喝牛奶\n\n补充钙质大约只有 30%可以被人体吸收，其它的会全部流失掉，而将抗性\n\n糊精与牛奶结合可有效增加 20%的钙吸收量，也就是饮用含有抗性糊精的\n\n牛奶可以将钙吸收量从原来的 30%增长到现在的 36%。 \n\n益生元是指能够选择性地促进肠道内原有的一种或多种有益细菌（益生菌）\n\n生长繁殖和/或增加碳水化合物代谢的物质，主要包括各类功能性低聚糖。\n\n常见的益生元包括低聚果糖、低聚半乳糖、菊粉、低聚木糖和低聚异麦芽\n\n糖等，不同产品物化性能及生理功能有所差异\n\n### 金禾实业\n\n全球麦芽酚产能基本由我国垄断。生产甲、乙基麦芽酚需要用到一种重要原材料——糠醛，糠醛可以从玉米穗轴、麦麸、锯木屑中萃取得到\n\n规划山梨酸钾产业链，食品防腐剂业务未来可期。山梨酸钾是国际粮农组织和卫生组织推荐的高效安全的防腐保鲜剂，广泛应用于食品、饮料、烟草、农药、化妆品、宠物家禽饲料等行业中。其防腐效果是苯甲酸钠的 5-10 倍，而毒性仅为传统防腐剂苯甲酸钠的1/40，\n\n山梨酸及山梨酸钾是国际粮农组织和卫生组织推荐的高效安全的防腐保鲜剂，它的防腐效果明显高于苯甲酸类，是苯甲酸盐的 5~10；产品毒性低，是苯\n\n甲酸盐的 1/4,与食盐相当；不改变食品特性，参与人体的新陈，代谢，产生二氧化碳和水；\n\n使用范围广泛，在医药、烟草、造纸、化妆品、牙膏、饲料等行业均有很大应用\n\n### 澜起科技\n\n内存接口芯片行业高增长，5G、云计算、AI 发展如火如荼，海量数据对存\n\n储的需求持续推动内存接口芯片量价齐升和市场高速扩容\n\nDDR5 内存性能远超DDR4 的规格上限，配套内存接口芯片性能及技术难度随之提升，\n\n推高内存接口芯片ASP。DRR5 相较于DDR4 单颗DRAM 内存密度提升4 倍至64Gbit，\n\n最大数据传输速率提升一倍达到6.4Gbps，工作电压由1.2V 压低至1.1V 使对应功耗降\n\n低超过20％，故而DDR5 内存将对保证内存数据传输速率和稳定性的内存接口芯片提出\n\n更高要求，进而新一代内存接口芯片在满足更高性能要求的同时技术难度也相应提升，\n\n从而提高新一代内存接口芯片价值量\n\n自主掌握核心技术，牢控话语权。公司是全球可提供从DDR2 到DDR5 内存全缓冲/半缓\n\n冲完整解决方案的主要供应商之一，在内存接口芯片及津逮服务器平台领域核心技术均\n\n基于自主研发，突破了一系列关键技术壁垒，并均已实现量产。公司提出的DDR4“1+9”\n\n架构被采纳为JEDEC 标准，并将在DDR5 世代演化为“1+10”框架，继续作为LRDIMM\n\n的国际标准。公司还牵头制定了DDR5 第一子代、第二子代、第三子代内存接口芯片国\n\n际标准，体现出公司在该领域内享有重要话语权。\n\n科研系内存接口芯片行业主要动能，公司高研发转化率保障产品高速率迭代，毛利率有\n\n望进一步优化。公司在DDR4 时代长期处于业内领先地位，内存接口芯片毛利率常年维\n\n持较高水平。2021 年DDR4 进入产品生命周期后期，DDR5 新兴产品崭露头角，毛利率\n\n短期承压。进入DDR5 世代后，内存接口芯片价值量提升，相关芯片市场规模大幅增长，\n\n有望持续优化产品毛利率水平。2022H1 公司互联类芯片产品线营收 12.36 亿元，同比\n\n+80.04%，毛利率60.08%。 \n\n经过多年耕耘，公司已与三星、SK 海力士、美光等下游主要客户建立长期稳定、良好\n\n的合作关系。公司主业直接下游为DRAM 厂商，根据 IC Insights，2021 年三星市占率\n\n43.6%，SK 海力士市占率27.7%，美光22.8%，三巨头垄断了94%的市场份额。另外\n\n公司外延拓展服务器CPU 等业务，逐渐与全球主流的服务器厂商及软件系统提供商均建\n\n立了长期稳定的合作关系，优质的客户资源和产业生态为公司业务规模的扩大奠定坚实\n\n的基础。\n\n\n### 国瓷\n\nMLCC（Multi-layer Ceramic Capacitors）是片式多层陶瓷电容器，由印好\n电极（内电极）的陶瓷介质膜片以错位的方式叠合起来，经过一次性高温烧结形成\n陶瓷芯片，再在芯片的两端封上金属层（外电极），也叫独石电容器。\n\n国瓷材料是国内 MLCC 粉体材料龙头，国内市占率达 80%、全球市占率超过\n25%。\n\n新能源汽车的增长和汽车电子化率的提高，促进 MLCC 产品需求增长。一方\n面，汽车电子系统较多，包括定位系统、中央控制系统、无线电导航系统、车身稳\n定控制系统、驾驶辅助系统、汽车音响及娱乐系统、车载通信系统等，随着汽车电\n子化率提升，对集成电路中被动元器件 MLCC 的用量必然增多。\n\n 蜂窝陶瓷：尾气后处理的核心，寡头长期垄断市场\n\n 为了满足更高的排放标准，蜂窝陶瓷载体需提高处理尾气的效率，不断提高各\n项性能指标。\n\n外国寡头垄断格局打破，国产替代提速。蜂窝陶瓷载体全球市场长期由美国康\n宁公司和日本 NGK 公司垄断，截至 2020 年二者合共约占全球蜂窝陶瓷载体 90%\n以上市场份额，蜂窝陶瓷的核心技术和产品掌握在两家巨头手上。康宁和 NGK 享\n受了汽车产业高速发展的先发红利，而国内载体厂商则将充分受益于环保法规带\n来的渗透率提升，以奥福环保、宜兴化机为代表的国内蜂窝陶瓷载体厂商的技术突\n破和市场份额的提高，国内主机和整车厂商逐步开启了蜂窝陶瓷载体国产化替代\n进程\n\n国六阶段蜂窝陶瓷的市场增量主要来自汽油车和柴油车加装载体，单台车载\n体用量放大\n\n生物医疗板块：齿科材料需求高速增长，海内外双\n轮开拓市场 \n公司凭借自身在陶瓷材料领域领先的技术与市场优势，基于高纯氧化锆粉体\n业务，向下游口腔医学材料与器械积极拓展，2015 年战略入股深圳爱尔创，2018\n年全资收购深圳爱尔创，目前公司产品涵盖齿科氧化锆陶瓷从粉体到瓷块、玻璃陶\n瓷、树脂陶瓷等。受益于口腔医疗行业的快速发展与海外市场的积极开拓，加之高\n瓴与松柏的战略投资，公司口腔医疗材料业务持续快速增\n\n面对持续增长的口腔医疗市场规模，我国牙科材料需求持续提升，产品结构不\n断调整，新技术和新产品不断涌现，市场也随之扩大，牙科材料已经逐渐成为我国\n医疗器械制造业的重要组成部分。氧化锆陶瓷材料由于兼具优良的机械性能、生物\n相容性与美观性，在牙科材料具有广阔的应用前景。放眼全球市场，氧化锆牙科材\n料产量与收入呈现逐年提升态势，据 QYresearch 统计，2021 年全球氧化锆牙科\n材料收入 1.26 亿美元，预计 2026 年将达到 1.69 亿美元，CAGR 达到 6.0%。反\n观国内市场，由于欧美发达国家在相关领域起步早，技术先进，海外大品牌一直垄\n断全球市场，部分产品外资品牌占有率达到 90%，国产化程度仍有较大空间。公\n司作为国产牙科用纳米级复合氧化锆粉体材料及瓷块的主要供应商，面向国内外\n 广阔的市场，将有望借助自身成本和服务优势打破国外产品的垄断地位，迎来快速\n增长\n\n\n陶瓷墨水喷墨打印前景广阔。陶瓷墨水是釉面材料的一种，主要用于陶瓷表面\n的装饰层，通过喷墨打印技术，计算机控制将墨水直接打印到陶瓷表面进行表面装\n饰，实现产品个性化设计和制造，特别适合于设计复杂图案，进一步提高陶瓷装饰\n效果。\n\n氮化硅轴承球：攻克关键技术，打破国外垄断\n\n氮化硅陶瓷性能出色，轴承滚子替代首选。氮化硅是一种典型的强共价键化物，\n氮化硅陶瓷材料具有熔点高、硬度大、耐磨损、抗弯强度高、导热性能好等优越的\n物理化学性能，被广泛地应用到国防、能源、电子等关键领域。\n\n新能源\n时代的来临为汽车电机轴承提出了新的要求，金属材料导致电机产生交变电流进而造成电腐蚀成了关键缺陷，而性能的陶瓷材料则可以完全避免，较大地提高了电\n机的使用寿命。另一方面，海上风力发电导致传统的金属轴承易受高盐环境的侵蚀，\n而陶瓷材料轴承球具有优异的耐腐蚀能力，平均寿命比轴承钢高 4-25 倍。随着新\n能源汽车与风力发电的快速发展，陶瓷轴承球需求将被进一步拉动，有望成为未来\n公司利润新的增长点。\n\n1）电子材料板块：（1）MLCC 粉体：一方面 23 年消费电子景气度有望底部\n回升，带动销量逐步回升，公司规划 23-25 年产能逐步从 10000 吨/年爬升至\n15000 吨/年，另一方面由于行业格局稳定，假设 MLCC 介质材料销售均价和毛利\n率保持稳定；（2）氧化铝/勃姆石：未来下游新能源需求仍维持高速增长，公司氧\n化铝和勃姆石快速扩产带动销量增加，假设 23-25 年价格维持在 1.8 万/吨，毛利\n率为 20%； \n2）催化板块：船舶国二标准和非道路国 IV 标准 2022 年相继全面实施，尾气\n治理市场容量持续拓宽的同时，公司在商用车、乘用车、非道路机械和船机等应用\n领域快速突破，公司 23-24 年募投产能逐步释放带动销量增长，假设蜂窝陶瓷载\n体毛利率维持 50%，预计 23-25 年收入增速分别为 77%、48%和 46%； \n3）建筑材料板块：国内建筑陶瓷墨水经过多年发展目前渗透率较高叠加国内\n地产增速放缓，公司该板块收入增速放缓，主要业务增量来自于国内陶瓷企业出海\n的需求，假设 23-25 年增速为 15%、10%、10%，毛利率随上游原材料价格回落\n得到修复，假设 23-25 年毛利率维持稳定在 25%左右； \n4）生物医疗板块：爱尔创受益于口腔医疗市场持续增长和集采带动的齿科耗\n材需求提升，预计 23-25 年收入增速为 20%、15%和 15%，国瓷材料齿科材料占\n下游成本较小，且国内竞争对手较少，假设产品毛利率保持在 58%左右\n\n### 半导体\n\n周期角度看：2023年受半导体周期下行、美系设备出口管制等影响，下游头部晶圆厂扩产有所放缓，主要资本支出用于储备\n海外关键机台，国产设备招标有所延后。但从终端来看，2023Q3华为引领3C需求复苏，全球智能手机出货在经历连续8个季度同比下滑后，\n在2023Q3实现同比微增；晶圆端看，中芯国际产能利用率自2023Q2开始逐步回升，行业已进入周期上行通道。2）成长角度看：2022年中国\n大陆半导体设备整体国产化率水平约14.5%；2023年受出口管制影响，长存仍处于国产线攻关突破阶段，半导体设备国产替代仍需求迫切。\n因此，展望2024年，我们认为，周期复苏铺底，前道半导体设备叠加长存国产线突破、后道半导体设备叠加核心客户先进封装突破，半导\n体设备板块将迎来“周期”与“成长”共振。\n\n硅基OLED：主要指尺寸小于1英寸的显示器。OLED按照驱动方式可以分为被动式和主动式；按屏幕大小可以分为大尺寸、中尺寸和微型显示器；\n按照基板不同可以分为玻璃基板、硅基板、柔性基板等，由于PPI的差异，微型OLED一般选用硅基板，中大尺寸一般采用玻璃基板/柔性基板\n\n### 光伏\nN 型TOPCon 电池走量，相关设备耗材迎来技术升级迭代。预计2023\n年TOPCon 新建产能400GW，预计2024 年新增产能超过200GW，相\n关TOPCon 产线设备供应商在手订单充裕。2024 年TOPCon 电池出货\n量占比有望达到60%以上，伴随N 型TOPCon 电池放量，低氧型硅片\n需求增长，相关低氧单晶炉、磁场磁体、大抽速真空泵等相关设备迎\n来技术迭代。同时，TOPCon 和HJT 等N 型电池银浆消耗量增加，多\n主栅、无主栅、激光转印等降本技术有望加速应用\n\nTOPCon 的 N 型硅片氧含量要求更加严格。目前，TOPCon 电池和 PERC 电池的 PN 结\n都为同质结，由 N 型/P 型硅片表面进行硼扩/磷扩制成。由于硼元素的扩散难度大，因此\nTOPCon 的硼扩工艺温度（900-1100°C）相比PERC 电池由磷扩工艺温度（600-900°C）更高。\n高温下硅片中的氧元素移动，冷却后沉淀形成氧环（同心圆），降低电池效率。HJT 电池的\nPN 结为两种不同硅材料形成，采用气相沉积工艺实现掺杂制结，无需进行高温扩散，减少了\n此类问题。PERC 电池的磷扩工艺温度相对较低，也减少此类问题。基于以上原因，TOPCon\n使用硅片的氧含量指标（低于12ppma）要求比HJT 使用硅片（低于14ppma）、PERC 使用硅\n片（低于16ppma）更为严格，硅片少子寿命的要求（大于800μs）也高于PERC 硅片（大于\n70μs）。 \n  \n### 紫金\n\n我们对 2025 年铜价更为乐观且看好更有节奏的配置组合：1）2024 年看金。我们认为在\n2H24 年美国降息周期或启动以及市场降息预期提前的环境下，黄金价格或将在2024 年重\n回上涨趋势，此外全球央行大举购金也将作为支撑黄金价格更高中枢水平的结构性因素。\n我们预计 2024/2025 年黄金均价为 2,300/2,300 美元/盎司，而若美联储 2024 年降息的力\n度超过我们的预期，黄金价格将有更显著的上行风险。2）2025 年看铜，且较市场更为乐\n观。我们认为 2024 年铜的基本面受铜矿项目产量集中释放影响压力较大，或将出现 38.6\n万吨的供应盈余；而在2025 之后由于缺乏大型新项目，铜矿的供给增长将逐步放缓，在新\n能源用铜需求的拉动下或将出现供需缺口逐步放大。在基准供需判断之上，11 月第一量子\n的 Cobre  Panama 项目停产事件对 2024 年基本面有较大弹性的影响，如果长期停产将会\n较大程度削弱铜矿增量对基本面的冲击，且市场可能提前反映2025 年由于供应增长放缓且\n新能源用铜需求拉动共同作用下的供需收紧，这也是我们较市场而言对2025 年铜价更为乐\n观的因素之一。我们预计2024/2025 年铜价中枢为8,800/10,000 美元/吨\n\n2024 年看金，2025 年看铜，铜金组合攻守兼备 \n铜\n需求动能新旧更替，能源转型驱动用铜前景可期。虽然受全球经济，尤其是欧洲地区经济\n疲弱影响下铜传统的下游需求领域表现较为平淡，但从结构性角度来看铜的消费仍具有较\n大弹性。我们认为在新能源发展变革下，铜的应用场景会得到全面拓宽，其导电性、延展\n性和低反应性等在新能源领域有着广泛且必需的应用。尤其是电动汽车以及风电光伏的深\n化发展将成推动新周期铜需求增长的主要驱动力，待本轮新增产能释放平稳后，我们预计\n铜矿的供应增速将不及新能源用铜拉动的需求增速\n\n电动汽车用铜单耗是传统汽车的约4 倍，在传统燃油车的基础上,电动汽车的驱动电机、电\n池、高压线束等部件均需要使用大量的高导电性能的铜材料，以确保电机和电控系统的正\n常运行。根据铜业发展协会的数据，纯电动汽车单车用铜约83kg，而传统燃油车单车用铜\n约22kg。随着新能源汽车渗透率的不断提升，铜的需求也将受到显著的推动。根据IEA 的\n统计，基于各国的现有政策以及发展目标，2030 年全球电动汽车的市场占有率已从过去该\n机构预测的25%提升到35%，中国仍将继续保持最大市场的地位，占全球电动汽车总销量\n的40%。\n\n我们预计 2025 年全球光伏及风电用铜将达到 307 万吨。由于铜优良的导电特性，光伏和\n风电的发电系统中的电缆和线路需要用铜作为主要材料。光伏组件中的热量交换器、缆线\n和连接器需要使用大量的铜材料，此外光伏逆变器中也需要使用铜线圈和其他铜制品。根\n据铜业发展协会测算，每兆瓦光伏系统大约使用5.5 吨铜。根据我们测算，2025 年全球光\n伏新增装机用铜量将达到2436 万吨，其中65.3%来自中国市场，从中国出口到海外部分占\n全球总量 25%。同样，风电发电机中的缆线、涡轮机等部件也会使用到铜，尤其是海上风\n电的海底电缆用铜强度将较大。我们预计到 2025 年全球风电新增装机用铜量将达到 63.5\n万吨，其中中国和海外占比分别为53.3%和46.7%。2025 年全球光伏和风电总用铜量预计\n将达到307 万吨，23-25 年间年均复合增长率为16.3%。","slug":"yanbao","published":1,"updated":"2024-09-26T02:57:37.950Z","_id":"cl7zl5h780000crsl8a6g4932","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"协鑫\"><a href=\"#协鑫\" class=\"headerlink\" title=\"协鑫\"></a>协鑫</h2><p>掌握颗粒硅量产技术，迈入万吨级产能规模。公司未来规划徐州 10 万吨、<br>乐山 10 万吨以及包头 30 万吨颗粒硅产能。预计 21-22 年公司颗粒硅产<br>能可达 3&#x2F;26 万吨，实现大幅提升。颗粒硅产能规模的扩大助力公司具备<br>规模优势，生产成本有望进一步降低，盈利能力有望逐步提升</p>\n<p>目前生产 1 千克颗粒硅耗电<br>仅 18 度，相较于西门子法 60 度&#x2F;千克有显著下降；水耗氢耗方面，FBR<br>方法较西门子法降低 30%&#x2F;42%。投资方面，颗粒硅每万吨产能仅需要 7<br>亿初始投资，相较西门子法可降低 1.5-2 亿元，具备成本优势。   </p>\n<p>硅料N型时代全面到来，P型产能可能会在2024会全面出清，硅料市场上能稳定持续供应就3800，通威，大全三家，还有半家就是新特，基本上新玩家绝大部分要全军覆没了，所以硅料实际供应产能看老玩家就可以了，这个形势到今年下半年就会非常明朗；</p>\n<p>也许半年，也许一年，距离彻底颠覆棒状硅的时刻已经越来越近了。下个月，乐山二期就开始动工了，包头二期应该也不远了。念念不忘，必有回响</p>\n<h2 id=\"甜味剂\"><a href=\"#甜味剂\" class=\"headerlink\" title=\"甜味剂\"></a>甜味剂</h2><p>与其他糖醇类产品相比，赤藓糖醇不被人体代谢，因此几乎不产生热量，也不引起血糖变化，是正宗的“零热量”天然甜味剂；另外，赤藓糖醇物理属性优异，耐热性较好，性质稳定，易于添加存储，综合优势鲜明突出，获得市场青睐<br>唯独赤藓糖醇直接通过小肠进入肾脏被尿液排出人体，因此是各糖醇类中人体耐受度最高的低倍甜味剂，<br>赤藓糖醇生产是在葡萄糖的基础上，接入菌种、添加发酵培养基进行深层发酵，然后经过净化提纯所得。赤藓糖醇是天然零热量的甜味剂，木糖醇是有热量的</p>\n<p>抗性糊精由淀粉加工而成，是将焙烤糊精的难消化成分用工业技术提取处理并精炼而成的一种低热量葡聚糖，属于低分子水溶性膳食纤维。作为一种低热量可溶性食品原料，在食品工业中具有的广阔的发展前景。</p>\n<p>纯天然甜味剂代糖产品中,赤藓糖醇采用发酵生产, 它溶解于水中时具有吸热效果，溶解度较低、易结晶，所以入口具有清凉感，更适合清爽型的饮料当中。 而阿洛酮糖采用生物法制备,它可以抑制人体血糖的快速升高，调节血糖等有益人体健康的特殊功能，更适合烘培类产品、医药等领域。</p>\n<p>阿洛酮糖是一种新型甜味剂，具有降血糖、低热量等优异性能，</p>\n<p>化学合成糖目前最好的解决方案是三氯蔗糖，植物提取糖目前最好的解决方案是甜菊糖苷，在生物发酵糖里面目前在国内的解决方案是赤藓糖醇，在海外的解决方案是阿洛酮糖，</p>\n<p>木糖醇難以被口腔中的細菌分解產生酸性物質，因此不易引起蛀牙，木糖醇代謝時不需要胰島素就可直接進入細胞，並不會引起血糖飆高，糖尿病病人可做為蔗糖替代品，但仍會產生熱量，所以不可過量攝取。</p>\n<p>聚葡萄糖和抗性糊精均为可溶性膳食纤维<br>蛋白质、脂肪、碳水化合物、维生素、矿物质与水并列<br>可溶性膳食纤维由于具有良好的溶解性，无异味，受到广大食品加工企业追捧，作为增稠剂、乳化剂等运用于食品饮料中</p>\n<p>功能与加工性更出众的可溶膳食纤维。抗性糊精是低热量葡聚 糖的一种新型式，是一种重要低分子、非黏性水溶性膳食纤维。由于结构 中存在α-1,2，α-1,3，α-1,6 键，不能被体内的消化酶所分解，在消化道 内也不会被小肠吸收消化，可以直接进入大肠，被大肠内益生菌发酵，作 为膳食纤维发挥各种生理作用。</p>\n<p>益生元是指能够选择性地促进肠道内原有的一种或多种有益细菌（益生菌）生长繁殖和&#x2F;或增加碳水化合物代谢的物质，主要包括各类功能性低聚糖。常见的益生元包括低聚果糖、低聚半乳糖、菊粉、低聚木糖和低聚异麦芽糖等，不同产品物化性能及生理功能有所差异</p>\n<h2 id=\"光伏-TCL\"><a href=\"#光伏-TCL\" class=\"headerlink\" title=\"光伏 TCL\"></a>光伏 TCL</h2><p>目前市场没有认可中环通过使用低等级便宜硅料、提高生产效率来提升利润率的逻辑，对中环Q4业绩预期不高</p>\n<p>如果考虑硅片业务技术研发投入已经进入成熟期，而半导体硅片业务（12英寸、IOS硅片、碳化硅等新业务）、组件与电池业务（叠瓦，电池，XBC等）尚处于研发投入高速增长期。</p>\n<p>中环210P现有最新客户：晶科（已经上升到第一大客户）、协鑫、东方日升、天合、通威、晶澳等。<br>其一基于在硅料涨价背景下对供应安全的应对性需求；其二是出于“先抢地，再耕田”的战略性行为；其三是大尺寸硅片呈确定性趋势，硅片产能仍面临结构性供应不足。</p>\n<h3 id=\"光伏\"><a href=\"#光伏\" class=\"headerlink\" title=\"光伏\"></a>光伏</h3><p>大厂为消化产能、提高出货规模，现在亏损也卖，先把中小企业挤死再说。目前，一线组件厂商开工率还在70%—80%；但二三线厂商开工率只剩约40%，已有中型光伏制造企业单月就亏损上亿元。一线厂商“一体化”，就是为了在产能出清阶段，靠自身产业链不同板块调剂利润、保障现金流。当下，在整个光伏产业链中，上游硅料盈利，中游硅片微利、电池组件则全线亏损，终端产品组件的成本账已毫厘必争，即使‘一体化’，1元&#x2F;瓦能有微利，低于0.99元&#x2F;瓦基本就亏</p>\n<h2 id=\"碳纤维\"><a href=\"#碳纤维\" class=\"headerlink\" title=\"碳纤维\"></a>碳纤维</h2><p>ZT7、ZT8、ZT9 系列和高模型 M40J 级、M40X 级石墨纤维工程产业化 能力，其中 ZT7 系列产品已正式进入稳定的批量生产阶段，打破了国外对高性能碳 纤维的封锁和限制。公司现已成为国内航空航天领域 ZT7 系列碳纤维产品的批量稳 定供应商。未来，公司将通过自有核心技术改进 ZT9 系列高强度碳纤维产品性能， 攻关 M65J 级高模量石墨纤维等新一代国产碳纤维批量稳定制备技术，同时扩充高 性能碳纤维产能，</p>\n<h2 id=\"万科\"><a href=\"#万科\" class=\"headerlink\" title=\"万科\"></a>万科</h2><p>分业务类型看，本集团营业收入中，来自房地产开发及相关资产经营业务的营业收入 1,843.6 亿元，<br>占比 91.8%；来自物业服务的营业收入 140.4 亿元，占比 7.0%。</p>\n<p>、相关资产经营业务主要包括物流、公寓、商业、办公等业务收入。<br>“万纬物流”为本集团物流仓储服务及一体化供应链解决方案平台，目前综合实力位列行业第一梯队。<br>上半年物流业务（含非并表项目）实现经营收入 19.5亿元，同比增长 17.0%，其中高标库营业收入<br>11.4 亿元，同比增长 9.1%；冷链营业收入（不含供应链业务收入）8.1 亿元，同比增长 30.3%</p>\n<p>本集团旗下“泊寓”作为全国最大的集中式公寓提供商，致力于为新进入城市的青年提供综合租住服务。<br>上半年租赁住宅业务（含非并表项目）实现营业收入 16.4 亿元，同比增长 10.6%。</p>\n<p>报告期内本集团商业业务(含非并表项目)营业收入 43.0 亿元，同比增长 7.3%。其中，印力管理的商<br>业项目营业收入 27.4 亿元，整体出租率 94.7%，同比提高 2.0 个百分点。</p>\n<p>2021 年公司地产业务收入增速为 7.36%，物业业务 32.1%，物流仓储业务68.9%，商业开发运营业务 20.6%，长租公寓业务 13.9%，多元化布局已初现规模，将成为公司未来发展新的利润蓄水池和增长点</p>\n<p>住宅物业服务：作为公司住宅物业服务板块，公司主要以万科物业为品牌提供基础物业服务，主要包括向住宅物业业主或住户提供的清洁服务、秩序维护服务、园艺服务及维修及保养服务。</p>\n<p>房屋再装修及美居服务</p>\n<p>以 2021 年的业绩来看，万科地产业务收入<br>同比增长 7.36%，物业业务增速 32.1%，物流仓储业务增速 68.9%，商业开发运营<br>业务增速 20.6%，长租公寓业务增速 13.9%</p>\n<h3 id=\"奥瑞金\"><a href=\"#奥瑞金\" class=\"headerlink\" title=\"奥瑞金\"></a>奥瑞金</h3><p>覆膜铁材料由奥瑞金自主研发,拥有独立的知识产权,已经实现规模化生产,是预制菜金属包装的理想原材料。<br>覆膜铁材料具有高耐腐蚀性能,现在的预制菜基本都是含盐食品,覆膜铁包装能够地很好满足含盐高温杀菌食品对包装极为苛刻的要求,此外,覆膜铁材料在高耐加<br>工性能、食品卫生安全方面也有优势</p>\n<p>2023 年观察青岛啤酒灌装投产后的利润 以及大宗价格下降<br>23Q1-3 毛利率16.1%，同增3.1pct，净利率6.4%，同增1.4pct</p>\n<p>枣庄项目一期产能预计今年年底开始生产,主要客户是青啤。 — 智能体现在2024了<br>佛山项目预计2026年上半年完成两条产线20亿产能搬迁。<br>主要客户是百威、可口可乐、健力宝、天地壹号、青岛啤酒、屈臣氏等。 </p>\n<p>拟要约收购中粮包装，产业格局有望优化</p>\n<p>公司主要服务的快消品品牌有红牛、飞鹤、旺旺、露露、林家铺子、东鹏特饮、战马、健力宝、安利、百威啤酒、青岛啤酒、燕京啤酒、雪花啤酒、加多宝、可<br>口可乐、百事可乐、元气森林、天地壹号、大窑、林家铺子、麦富迪宠物食品等</p>\n<p>目前我们有澳洲的子公司Jamestrong,还有和中粮包装一起在欧洲投资制罐公司。<br>这些布局已经在公司内部形成了清晰的产品协同、制造协同和市场协同条件。<br> 公司高度重视海外市场增长机会,并适时加大投资布局</p>\n<p> 啤酒行业增长逻辑由“量”向“质”转变，产品结<br>构升级成为主流啤酒厂商核心策略（我国罐装啤酒换算价格为1.16 元&#x2F;100ml，高于瓶装<br>啤酒 0.71 元&#x2F;100ml）。 目前啤酒罐占二片罐需求近 58%，2016-2021 年啤酒罐化率由<br>23.2%提升至26.3%，但是与成熟啤酒市场英国64%、美国67%、韩国74%、以及日<br>本90%的罐化率相比，我国仍有较大提升空间。</p>\n<p>产能扩张落地，盈利结构优化。产能扩张方面，9 月份公司江门工厂建成投产，自动化制罐生产线已进入产能爬坡期，规划年产能为二片罐10 亿罐。公司对外延并购的波尔工厂持续进行产能整合与调整，<br>二片罐产能及产能利用率均有提升空间。随着二片罐业务的盈利增长，公司盈利端对单一客户的依赖程度有望不断下降，盈利结构将优化</p>\n<p>二片罐方面，啤酒罐化率迎来加速提升期，驱动二片罐下游需求增加。二片罐下游需求以啤酒为主，其次为碳酸饮料、茶饮料等，</p>\n<h3 id=\"万华化学\"><a href=\"#万华化学\" class=\"headerlink\" title=\"万华化学\"></a>万华化学</h3><p>精细化学品及新材料板块：精细化学品及新材料众多项目计划于 2023-25 年<br>投产放量，23 年公司尼龙 12、PC、柠檬醛、磷酸铁锂、NMP 等计划投产，24 年 TPU、<br>特种胺、柠檬醛、PC 等产品也会相继投产释放；25 年 PC 进一步扩产，润肤剂、香料<br>及营养品、SAP 水性树脂、抛光垫及抛光液、聚乳酸等产品计划相继投放，板块未来<br>几年有望呈现较高增速。毛利率上，受益宏观修复和高价值产品不断投产，以及公司<br>在精细化工领域的管理能力不断提升，板块毛利率有望稳步提升</p>\n<p>精细化学品及新材料业务多集中在眉山基地和烟台总部。目前烟台基地主要有<br>聚氨酯材料（TPU、ADI）、高性能塑料（尼龙 12、MMA、PMMA、PC）、半导体材料（抛<br>光垫、抛光液等）、香精香料（柠檬醛及衍生物、W 酯）、维生素（VE）等。<br><img src=\"/image-6.png\" alt=\"Alt text\"><br><img src=\"/image-7.png\" alt=\"Alt text\"><br>聚碳酸酯因其优良的介电强度、耐热老化性、绝缘性能、抗冲击性、透光性等优<br>点在电子电器、板材&#x2F;片材&#x2F;薄膜、汽车等行业领域应用广泛</p>\n<p>从万华规划产能投放节奏来看，精细化学品及新材料众多项目在 2023-2025 年<br>放量，公司有望突破 MDI 主业的增长空间，迎来新材料业务端的业绩成长。而其中<br>ADI、工程塑料、SAP 及其他半导体和新能源材料项目布局值得重点关注</p>\n<p>分领域来看，全球聚合 MDI 最大的应用领域是建筑和保温工程，2021 年其应用<br>占比约 49%，其次是家电、胶粘剂&#x2F;密封件&#x2F;涂料、汽车和冷藏集装箱，分别占比 21%、<br>17%、11%和 1%。全球纯 MDI 最大的应用领域为 TPU，占比 40%，氨纶、合成革、微孔<br>弹性体、胶粘剂&#x2F;涂料分别占比 15%、13%、12%和 4%。</p>\n<p>整体来看，MDI 的需求与地产景气度相关度较高。22 年以来国内家电、地产等领<br>域需求较弱，叠加 22 年下半年以来海外经济增速回落下出口需求亦走弱，MDI 价格<br>价差整体回落。当前 MDI 价差处于近十年相对低位，行业景气较低迷</p>\n<p>2023 年前三季度，伴随新装置产能释放，公司各主要业务板块销量同比增长，<br>但下游需求处于恢复阶段，产品价格有所下降，前三季度公司实现营业收入 1326 亿<br>元，同比增长 2%，实现归母净利润 127 亿元，同比下降 7%</p>\n<p>市场认为 MDI 主业与地产周期高度相关，地产萎靡将长期抑制 MDI 需求和公司主业<br>盈利能力。我们认为当下已处于地产行业低谷，验证了公司 MDI 仍有较好盈利水平，<br>且随着地产刺激政策陆续出台以及新能源车等领域的增量需求提振，MDI 需求长期向<br>好。再者，MDI 垄断格局有望进一步强化，公司 MDI 主业长期有着较好的盈利能力。<br>另外，公司有较强的化工生产技术和研发经验积累，布局的多种大品类、高附加值专<br>用化学品具有较大的市场空间，相关多元化布局的潜力未被市场充分认知。</p>\n<p>MDI 为聚氨酯的关键原料，生产流程长、工艺复杂、技术壁垒深厚、规模优<br>势显著，行业长期呈寡头垄断格局，CR3 约 68%。万华 MDI 工艺和产能全球<br>领先，单套产能达 110 万吨系全球最大，装置规模优势突出，投资和成本<br>最低。并且公司持续进行装置改进，宁波改扩建完成后单套产能可达 120<br>万吨，进一步拓宽 MDI 产业护城河。短期地产萎靡、宏观经济疲软致 MDI<br>产业需求低迷，但公司仍有较好的盈利和现金流，已呈修复和增长态势。<br>石化产业平台完善公司原料保障</p>\n<p>高端化、差异化是中国化工产业发展的痛点和明确的产业发展方向，也是<br>公司在精细化学品及新材料板块追求的方向。公司积极开发多种大品类、<br>高附加值专用化学品，在 ADI 聚氨酯材料、工程塑料、SAP 吸水树脂、半导<br>体和新能源材料等领域均有布局，打开了公司的成长上限</p>\n<p>据我们不完全统计，按照 2023 年平均价格计算，如果万华化学现有规划项目全<br>部如期投产，预计 2022-2023 年新项目将新增年营收 353 亿元，2022-2024 年<br>新项目将新增年营收累计 862 亿元，全部项目均投产后将新增年营收累计 1893<br>亿元</p>\n<p>按照 2022年平均价格计算，如果万华化学现有规划项目全部如期投产，预计 2022年将新增营收 208亿元，2022-2023年投产项目将新增年营收累计 542亿元，全部项目均投产后将新增营收 1808亿元。<br><img src=\"/image.png\" alt=\"Alt text\"></p>\n<p>公司依托自身强大的研发实力和产业链一体化优势，全面进入新能源、营养品、高端国产替代等领域，在抛光液和抛光垫等半导体材料、三元材料和磷酸铁锂等电池材料、PBAT 和PLA 等可降解材料POE 等高端聚烯烃材料、柠檬醛衍生物等材料均有规划布局，根据公司新材料投产进度，尼龙12 已经于近期投产，HDI、柠檬醛及衍生物、顺酐、新增PC、磷酸铁锂等预计2023 年相继投产，POE、PLA、NMP、新增PMMA、聚醚胺等预计2024 年相继投产。站在当前时间节点，新材料板块已经进入快速发展期。根据我们的预测，2022-2024 新材料板块主要项目建成投产后，新增年化营业收入贡献能够达到521.45 亿，未来3 年新材料营收保持60%<br>MDI有以下特点 1. 行业集中度高 2.未来2年只有万华扩产 3. 欧洲设备老化 检修影响价格<br><img src=\"/image-1.png\" alt=\"Alt text\"></p>\n<p>聚合MDI 下游应用中47%用于家电冰柜保温材料中，是聚合MDI 下游最大的应用领域，24%用于建筑相关领域，包括建筑板材，建筑涂料等；10%用于胶粘剂中，而胶粘剂下游主要也是用于基建施工，家用包装，建筑制品等领域，和建筑领域息息相关；6%用于汽车领域，受益于汽车轻量化的需求带动，聚氨酯材料在汽车结构配件中的应用愈加广泛</p>\n<p>下游主要用于生<br>产软质聚氨酯泡沫及聚氨酯弹性体、涂料、胶黏剂。TDI 下游 70%用于软泡领域，主要包括海绵类产品，用于坐垫，沙发等家居领域；20%以涂料固化剂的形式用于涂料中，用于建筑、汽车、电子电器等领域；其余 5%用于胶粘剂中，5%用于弹性体<br>中使用，TDI 行业景气度和下游家居、汽车、建筑等传统制造业景气度息息相关。</p>\n<h3 id=\"福耀玻璃\"><a href=\"#福耀玻璃\" class=\"headerlink\" title=\"福耀玻璃\"></a>福耀玻璃</h3><p>。由于 22Q3 和 23Q2 人民币贬值<br>公司分别产生汇兑收益 5.54 亿元、7.18 亿元，而 23Q3 产生汇兑损失 2.64 亿元，若同<br>步剔除汇兑，则 23Q3 公司利润总额同比+35.9%、环比+23.6%，盈利能力恢复较好。</p>\n<p>ASP、新业务、份额三箭齐发，从周期到成长再出发。我们持续看好 Hud+天幕渗透率加<br>速下公司汽车玻璃 Asp 的提升，格局进一步优化下公司海外市场份额的提升，以及铝<br>饰条业务有望迎来反转步入收获期</p>\n<p>铝饰条业务拐点已至即将开启放量周期：SAM OEM 订单投产在即，国内福清、长春工厂投产逐步爬坡</p>\n<p>福耀在全景天幕市场的占<br>有率达60%以上，主要配套车型包括路虎极光、吉利星瑞、东风岚图、蔚来EC6、福特<br>mustang-e、路虎 I-PACE等。</p>\n<p>着汽车智能化程度不断提升，预计科<br>技功能的渗透率从2021年的5%提升至2026年的30%以上，随着技术的进步，HUD和其<br>他科技的成本逐渐下降，而天幕处于发展初期，随着科技含量的提升，价格也将持续<br>增长。在多方因素的作用下，预计2026年汽车玻璃的市场规模将达421.1亿元，年复<br>合增长率为14.3%</p>\n<p>三季度公司天幕玻璃、HUD 玻璃等高附加<br>值产品占比由 5.7%提升至 43.8%。Q3 天然气价格仍处于高位，纯<br>碱、海运费等成本项目呈现企稳回落趋势，公司综合毛利率为<br>34.9%，环比增长2.3pct，修复明显。</p>\n<p>8 月 30 日公司公<br>告将对美国福耀增加投资 6.5 亿美元，其中 3 亿用于投资建设镀膜、<br>钢化夹层边窗生产线；3.5 亿用于建设一窑两线用于生产浮法玻璃、<br>以及 4 条太阳能背板玻璃加工线和配套厂房。同时，公司在郑州规划<br>500 亩左右用地，用于未来发展所需。公司新一轮扩产周期开启，以应对全球化的深入以及玻璃量价齐升的需求。</p>\n<p>海外业务：三季度SAM收入环比降低15%，亏损环比扩大<br>360万欧元，主要系欧洲汽车业受供应链扰动影响+天然气与电价格上涨。</p>\n<p>汽玻市场空间扩容，天幕玻璃、调光玻璃、HUD 显示玻璃等高附加值汽玻<br>增量加速兑现。根据测算，2020 年天幕玻璃在新能源车中渗透率约 16.4%，<br>2021 年增长至 23.5%，天幕玻璃渗透率快速提升</p>\n<p>铝饰条业务，德国 SAM 整合接近尾声，国内铝饰条产能布局稳步推进。<br>目前 SAM 已从原 11 个工厂整合到 2 个生产工厂+1 个备用工厂，硬件改<br>造到位，新 ERP 系统上线，虽然当前还处于亏损状态但在逐步向好。国<br>内产能方面，长春工厂两条铝饰条产线已完成建设，预计 2023 年陆续会<br>有产品交付；此外福清第二条铝饰条产线的扩建工作正在进行，苏州工<br>厂计划 2023 年开始建设，预计到 2023 年底或 2024 年初，国内会形成 6<br>条铝饰条生产线的产业布局，成为未来福耀营收的新增长极</p>\n<p>2021 年，福耀的全景<br>天幕玻璃、可调光玻璃、抬头显示玻璃、镀膜可加热玻璃等高附加值产品占比持续提升，同比提升 3.31 个百分点，价值得以体现。据测算，福耀 2021 年汽玻 ASP 为<br>181 元&#x2F;平米，较 2020 年提升 7 元&#x2F;平米。而 2022 年 H1，福耀汽玻 ASP 预期同比增<br>长 11.6%，单价达到 200 元&#x2F;平米左右</p>\n<p>性价比方面，全景天幕为不可开启式设计，摒弃了<br>滑动天窗所需的中控驱动、排水系统等复杂结构件，同时避免出现失控、漏水等现<br>象，较传统天窗有更高的性价比。</p>\n<p>幕玻璃的夹层特性，叠加福耀生产关的严格把控，并不会降低车辆安全性能。福<br>耀生产的全景天幕均采用夹层玻璃，其中夹层材料 PVB 膜具有高粘性特点，比钢化<br>玻璃具有更高的抗冲击强度。并且在受到外力冲击时，能有效防止玻璃碎片飞溅。<br>生产方面，福耀进行严格的质量测试，能够保证天幕玻璃在静止状态下可以承受<br>40MPa 的应力</p>\n<p><img src=\"/image-2.png\" alt=\"Alt text\"></p>\n<p>福耀成功将镀膜隔热、智能调光、LOW-E 隔热三大技术集成于超大玻璃天<br>幕上，推出“福耀智能全景天幕”，在实现超大视野享受与极佳采光效果的同时，还<br>能调节光线透过，防晒隔热，减少车辆空调使用能耗，并具备隐私保护的效果，为<br>智能座舱的发展做出了贡献。</p>\n<p>福耀通过特殊材料的印刷工艺，可以在天幕上个性化定制<br>图案，灯光在玻璃内传导后将图案反射至车内。另外，氛围灯还能与其他设备连接，<br>随着音乐节奏变换。在节能环保方面，福耀积极推进太阳能天幕的研发。全景天幕<br>面积大采光好，如果利用天幕将太阳能转化为电能，为车载电器提供电源，可以降<br>低油耗。福耀提出并设计了太阳能天幕的工作原理，通过在玻璃里加入太阳能电池<br>组实现能量转换，在未来值得关注。</p>\n<p>HUD 加速迭代，W-HUD 成为当前市场主流，AR-HUD 蓄势待发<br>汽车网联化是未来发展趋势，福耀布局智能玻璃天线</p>\n<p><code>持续关注铝条饰品的放量</code></p>\n<h3 id=\"安踏\"><a href=\"#安踏\" class=\"headerlink\" title=\"安踏\"></a>安踏</h3><p>2016 年，合资引入 DESCENTE，定位中国高端体育服装，涉及滑雪、综训、跑步等，DESCENTE<br>已经成为品牌矩阵中新的增长点；2017 年，收购 Kolon Sport 中国经营权，定位为专<br>业户外（登山）运动，2022H1 流水增速超过 50%；2018 年，与多方财团斥资 371<br>亿元收购了 Amer  Sports ，并坐拥旗下的顶级户外及运动品牌 ARC’TERYX 、<br>SALOMON、WILSON 等，覆盖网球、羽毛球、高尔夫、高山滑雪、越野滑雪、滑板、<br>自行车、越野跑装备、徒步装备及潜水等多种运动项目。</p>\n<h3 id=\"晨光生物\"><a href=\"#晨光生物\" class=\"headerlink\" title=\"晨光生物\"></a>晨光生物</h3><p>赞比亚原料基地将落地叶黄素生产线，明年有望销售叶黄素产品。由于国内万寿菊种植相较国外成本优势逐渐减弱，明年公司或将优先发展万寿菊种植面积。赞比亚土地和人工成本低廉，就地生产销售将有力拉高<br>叶黄素利润水平。</p>\n<p>甜菊糖：受益无糖、减糖产品发展，市场潜力巨大。公司上线新工艺，得率逐渐爬坡至设计水平，同时取得的副产物绿原酸能够摊薄成本。今年甜叶菊产量同比增长，目前采购工作正在进行，预计明年销量能够实现增长。</p>\n<p>，2019 年初晨光生物完成对邯郸金诺药业的收购，这标志着晨光生物开始进军中药行业。公司目前已有板蓝根颗粒、牛黄解毒片、桑菊感冒颗粒等等多个药品注册批准证书，并开展了胃灵颗粒、桑菊感冒颗粒、牛黄解毒片等多个中药产品质量标准提升研究项目。目前公司中药业务规模小，长期看中药集采政策的持续推进与优化，有利于公司发挥低成本工业化生产优势，扩大中药业务规模</p>\n<p> 同时在生产过程中可以充分去除植物原料中的农残等有害成分，相比香辛<br>植物原料，在食品安全、食品标准化、成本控制有着无可比拟的优势</p>\n<p>综合各细项来看：1）收入端：全年收入端其他植物提取物在低基数与环境转好背景下收入增速最快，其次为稳定增长的辣椒红、辣椒精，叶黄素受销售节奏影响下滑，整体全年植提业务将呈现稳定增长趋<br>势。预计 2024-2025 年叶黄素业务恢复正常增长轨道，同时公司不断充产品矩阵，收入增长或提速。2）利润端：全年来看，较高毛利水平的<br>饲料级叶黄素在收入中占比降低，业务结构变化导致整体毛利率降低。</p>\n<p>但境外各地的法律、税收、外汇管理、人文环境、中外政府关系等方面存在较大差异，如 2023 年 8 月美国国土安全部将<br>公司列入“维吾尔强迫劳动预防法”的实体清单中，</p>\n<p>保健食品业务过去的利润率呈现上升趋势,去年首次实现盈亏平衡,今年有望实现正向利润贡献,未来会随着规模效应提升、客户结构改善,盈利能力保持提升趋势</p>\n<p>三季度业绩增速较上半年有所回落,主要原因是:<br>饲料级叶黄素及棉籽类业务收入同比下降;棉籽类业务套期保值持有的期货合约公允价值变动影响了业务季度间波动。<br> 叶黄素主要应用于饲料添加剂领域,小部分用于大健康领域。<br>从需求端来看,饲料添加剂领域的客户需求稳定,大健康领域的需求增长较快。<br>现阶段叶黄素的价格受原材料供应量影响更大,需求侧对产品价格的影响较小。<br>7</p>\n<h3 id=\"伊利股份\"><a href=\"#伊利股份\" class=\"headerlink\" title=\"伊利股份\"></a>伊利股份</h3><p>毛利率稳中有升，费用率拖累盈利表现。受销售费用率拖累，公司 Q3 扣非归母净利率 5.6%,同比下滑 3.3pct。22Q3 毛利率为 30.8%（+0.6pct），主要系公司控制买赠促销力度维持价盘稳<br>定，此外生鲜乳价格 Q3 同比小幅下行。22Q3 销售费用率18.8%(+3.3pct)，主要系液奶事业部费用率提升以及部分综艺因疫情影响延期至三季度进行播放 </p>\n<p>持续夯实海外供应链，并以冰淇淋等品类摸索东南亚市场本土化打法。当前公司一<br>方面，收购 Westland 等企业强化奶源布局，另一方面，通过印尼建厂、收购泰国冰<br>淇淋公司等方式，以奶源依赖度相对较低、且适合东南亚当地消费发展阶段的品类，<br>进行海外市场的本土化摸索，预计在中长期有望逐步贡献增量</p>\n<h3 id=\"格力电器\"><a href=\"#格力电器\" class=\"headerlink\" title=\"格力电器\"></a>格力电器</h3><p>安为比亚迪新能源车热管理系统的稳定供应商，核心零部件已突破技术壁垒。盾安目<br>前已具备为各大新能源车企以及零部件厂商提供高质量产品的能力。目前盾安已与主流<br>新能源汽车主机厂（比亚迪、理想、蔚来、一汽等）、电池企业（宁德时代、微宏动力<br>等）、商用车企（宇通、中车等）建立良好合作关系，有望在新能源领域加速产业布局。<br>格力受让盾安股权之后，其控股子公司格力钛未来有望与盾安开展业务协同，拓展客户，<br>提升产能、充分发挥资金和产业的规模效应，扩大市场份额，提升格力在新能源领域的<br>市场优势，实现业务多元化。</p>\n<h3 id=\"乐普医疗\"><a href=\"#乐普医疗\" class=\"headerlink\" title=\"乐普医疗\"></a>乐普医疗</h3><p>城乡居民疾病死亡构成比中心血管疾病占首位，<br>2020 年农村、城市心血管病死亡率分别为每十万人 135.88、126.91 人，随着老龄化<br>加速以及精准诊治推及，行业需求处于上行趋势，存在大量未被满足的临床需求，<br>创新优效的药物和医疗器械潜在市场空间巨大。</p>\n<p>药品集采后公司加大器械创新投入，研发强度由此前的 6%左右提升至<br>2021 年 10%左右，其中 75%以上投入到器械中，以医疗器械收入作为分母则研发强度<br>超 15%。</p>\n<p>随着老龄化加剧、基层市场扩容、集采降价驱动等，对标发达国家的<br>人均 PCI 例数仍有 2 倍的增长空间，有望达到 300 万例 PCI&#x2F;年</p>\n<p>2023 年 Q1-Q3 公司研发<br>费用 6.7 亿元（+0.46%），研发费用率 10.78%（+2.13pct）。公司可降解 PFO 封<br>堵器、半自动 AED 已获批上市，脉冲声波球囊、射频房间隔穿刺系统处于上<br>市前发补阶段，甘精胰岛素预计较快获批，司美格鲁肽准备申报 IND。公司投<br>资的民为生物 GLP-1 三靶点候选药物 101 I 期临床入组基本结束，预计年底<br>前获正式报告，并于 2024 年 Q1 开始 II 期临床。此外，公司积极加速向消费<br>业务转型，目前已在皮肤科、眼科领域有多项产品布局，公司收入中医保来源<br>占比已低于 45%（剔除集采后&lt;25%）</p>\n<p>。分业务看，器械板块收入 28.6 亿元<br>（-34%），主要系去年应急业务高基数影响，其中心血管植介入创新产品组合营<br>收同比增长 6.1%，外科麻醉业务同比增长 6.9%，报告期内公司下属公司上海<br>形状记忆合金材料有限公司自主研发的 MemoSorb® 生物可降解卵圆孔未闭<br>封堵器正式获得国家药品监督管理局（NMPA）注册批准。药品板块 Q1-3同比<br>下降 6%，单 Q3季度收入基本持平，目前公司西格列汀片、恩格列净片、甲磺<br>酸多沙唑嗪缓释片、瑞舒伐他汀钙片已获批上市。医疗服务及健康管理板块收<br>入 9.8 亿元，公司基于乐普云平台，聚焦医疗级心脏监测、居家健康监 测及智<br>慧康复护理三大服务，为各级医院和个人消费者提供各类生命体征监测产品和<br>服务，其中心电检测类产品依托人工智能 AI-ECG Platform，可远程提供长程动<br>态心电监测服务。同时公司在消费医疗开展战略布局，在皮肤科、眼科、齿科<br>均已有产品面世，有望贡献新增长点。</p>\n<h3 id=\"制冷\"><a href=\"#制冷\" class=\"headerlink\" title=\"制冷\"></a>制冷</h3><p>，我国二代制冷剂作为非原料的产量和消费量已于2013年被冻结，2020年配额削减35%，2025年配额削减67.5%，2040<br>年以后将完全淘汰。而三代制冷剂2024 年冻结HFCs的消费和生产规模，自2029年才开始削减，因此未来较长一段时间，三代制冷剂将成为主</p>\n<p>电子氟化液在半导体领域主要用作清洗剂、脱水剂、光刻机控温液以及<br>芯片封装工序的检漏液等，目前大部分市场被海外企业垄断，其中，3M<br>电子氟化液产品占据了全球芯片干法蚀刻设备制冷剂90%的市场份额。<br>考虑到全球对 PFAS 物质的监管正在加速以及环保因素，3M 决定到<br>2025  年底前退出包括电子氟化液在内的PFAS 产品，电子级氟化液竞<br>争格局有望重塑。国内新宙邦、巨化股份等企业已经布局氟化液相关产<br>能，其中新宙邦 Boreaf 电子氟化液系列产品可用于半导体  Chiller  冷<br>却、精密清洗、气相焊接、电子检漏等领域。相关产品采用绿色清洁的<br>工艺路线，通过了海外客户的认证，生产产品符合当地的法规要求，已<br>供应全球半导体主流制造商，有望承接3M 氟化液市场。</p>\n<p>随着数据中心规模和单机功率的不断提升，浸没式液<br>冷数据中心占比有望快速提升。氟化液作为一种高效可靠的冷却液，需<br>求未来有望较快增长</p>\n<p>化液广泛应用于半导体加工环节。氟化液在芯片制程工艺中被广泛应用，炉管、<br>光刻、刻蚀及封装测试环节都需要使用氟化液作为清洗剂、脱水剂、光刻机控温液以及<br>芯片封装工序的检漏液等<br>氟化液可作为半导体湿法清洗的清洗剂</p>\n<p>氟化液在干法刻蚀环节用做控温液，可帮助提升芯片制程中的整体良率，缩短芯片<br>研发周期。</p>\n<p>全氟聚醚润滑脂广泛用于航空航天、核工业、化工、机械工业等领域。全氟聚醚润<br>滑脂常用于高温、高负载、化学腐蚀环境中的轴承以及要求终身润滑的部件，具有极佳<br>的化学惰性、耐久性和低挥发性，能够在极端高温条件下保持润滑性能，一般可耐受高<br>达300 摄氏度的温度。对酸、碱、溶剂等具有良好的抵抗，适用于恶劣化学环境下的润<br>滑需求。</p>\n<h3 id=\"巨化股份\"><a href=\"#巨化股份\" class=\"headerlink\" title=\"巨化股份\"></a>巨化股份</h3><p>由于市场需求疲弱、产品供<br>给能力增加影响，公司主要产品市场竞争加剧，产品均价同比出现较大幅度下降，<br>且三季度沿袭下降，但制冷剂、石化材料、基础化工产品均价环比企稳。前三季度<br>公司综合毛利率为12.87%，同比下降5.89 pct。</p>\n<p>三制冷剂价格稳步上涨是大概率事件，三代制冷剂行业将迎来10年景气周期，这是巨化第一增长曲线</p>\n<p> 有三代制冷剂利润后，巨化就会有更多的资源投入研发。高性能、高附加值氟化工高端产品将是巨化未来第二增长曲线</p>\n<p> 全球氟化工有限公司在阿联酋氟2万吨134a已经基本建成。巨化拥有三代制冷剂全球最大份额，全球化也许是巨化未来第三增长曲线</p>\n<p> 碳交易。2022年欧盟平均碳价预计为88欧元&#x2F;吨，折合人民币650元。目前国内碳交易一吨58元，未来有十年有10-20倍的上涨空间。三代制冷剂巨化配额换算为碳当量估计5亿吨，三美2.7亿。这是未来的一个想象空间</p>\n<p> 混改。8月份巨化股份控股母公司“巨化集团混改资产评估项目”中标公示，22年是混改的收官之年，以此推测，巨化集团混改正进行中</p>\n<p>氟化液：经济社会数字化转型背景下的节能减排最优解<br>冷却系统能耗占比为 43%，浸没式液冷技术成为必然选择</p>\n<p>相比于传统冷却方式，浸没式液体冷却的优势显著。（1）节能降耗，相对于传统风冷数据中心能耗降低 90%  ～  95%，降低  PUE  可大幅降低机房的运营成本。<br>（2）低噪无污染，无需使用风扇，最大限度减少噪声的污染，同时无需担心空气中的灰尘对高洁净度要求器件的干扰。（3）节约空间，利用浸没式液冷的数据中心冷却系统所占的空间体积可减小至风冷系统的  1  &#x2F;3。（ 4）换热能力强，能够满足超高热流密度器件的散热需</p>\n<p>“巨芯冷却液”实现国产高性能氟化液突破，迈入产业化阶段<br>目前公司间接控股 95%的浙江创氟高科新材料有限公司计划投资 5.1 亿元规划建设 5000t&#x2F;a<br>浸没式冷却液项目，产品适用于大数据中心换热所需的冷却介质及尖端产业、电子流体，计划三季度投运。其中一期 1000 吨&#x2F;年项目已于 2022 年上半年基本建成。<br>目前，数据中心浸没式冷却液总市场规模达到3 万吨，2025 年有望达到 10 万吨级，<br>看好公司未来氟化液业务成长</p>\n<p>综上，我们坚定看好三代制冷剂价格回暖带来的业绩增量以及巨化氟氯联动带<br>来的成本优势。同时公司布局含氟新材料，高附加值拉升公司毛利率中枢。预计公<br>司 2022-2024 年归母净利润分别为 19.25 、26.31 、32.44 亿元，同比增速为<br>+73.6%、+36.6%、+23.3%。</p>\n<p>年报看下应该会超出预期。</p>\n<p>配额制定进入尾声，制冷剂行业已进入拐点区间</p>\n<p>三代制冷剂配额争夺将于2 0 2 2 年末结束，2 0 2 4 - 2 0 2 9 年的生产配额将依据2 0 2 0 - 2 0 2 2 年间各公司三代制冷剂销售<br>情况进行分配。</p>\n<h3 id=\"半导体\"><a href=\"#半导体\" class=\"headerlink\" title=\"半导体\"></a>半导体</h3><p>湿法刻蚀是较为原始的刻蚀技术，利用溶液与薄膜的化学反应去除薄膜未被保护<br>掩模覆盖的部分，从而达到刻蚀的目的。其反应产物必须是气体或可溶于刻蚀剂<br>的物质，否则会出现反应物沉淀的问题，影响刻蚀的正常进行。通常，使用湿法<br>刻蚀处理的材料包括硅，铝和二氧化硅等。</p>\n<p>随着集成电路的发展，湿法刻蚀呈现出以下局限：不能运用 3 微米以下的图形；<br>湿法刻蚀为各向同性，容易导致刻蚀图形变形；液体化学品潜在的毒性和污染；<br>需要额外的冲洗和干燥步骤等</p>\n<p>干法刻蚀技术的出现解决了湿法刻蚀面临的难题。干法刻蚀使用气体作为主要刻<br>蚀材料，不需要液体化学品冲洗。干法刻蚀主要分为等离子刻蚀，离子溅射刻蚀，<br>反应离子刻蚀三种，运用在不同的工艺步骤中</p>\n<p> 等离子体刻蚀是将刻蚀气体电离，产生带电离子，分子，电子以及化学活性很<br>强的原子（分子）团，然后原子（分子）团会与待刻蚀材料反应，生成具有挥<br>发性的物质，并被真空设备抽气排出</p>\n<h3 id=\"潍柴动力\"><a href=\"#潍柴动力\" class=\"headerlink\" title=\"潍柴动力\"></a>潍柴动力</h3><p>发动机销售36.7万台，同比增长29%，其中500马力以上国内重卡发动机市场占有率达到31.7%，同比提高19.7个百分点，盈利能力大幅增强；出口销量3.9万台，同比增长52%；变速箱销售42.5万台，同比增长33%；出口销量2.2万台，同比增长93%；车桥销售36.1万根，同比增长31%。战略高端产品继续发力，大缸径发动机实现收入人民币17.1亿元，同比增长77%，高端液压实现国内收入人民币5.0亿元，同比增长46%。商用车业务上半年累计销售重型卡车6.1万辆，同比增长58%；出口销量2.6万辆，同比增长97%；其中天然气产品累计销量突破1万辆，同比增长241%，市场份额再提升2.8%。潍柴雷沃大马力智能拖拉机、大喂入量谷物收获机械、复式播种机继续走俏市场，销量保持全国领先。智能物流业务实现销售收入56亿欧元，同比增长2%。工业车辆和服务业务利润收入显著提高，经营业绩远超预期。</p>\n<p>科技创新驱动高质量发展，行业领先地位持续巩固。建立针对各细分市场的产品研发体系，提升全流程研发能力，更全面、更快速地满足客户需求。轻型动力产品动力性、可靠性及经济性全面提升，持续强化产品竞争力，赢得市场良好口碑。大马力高端产品不断发力，WP14H、WP14T、WP15H、WP15T、WP15NG等产品在干线物流、绿通冷链、快递快运、港口运输、危化品运输等市场树立了行业新标杆，成为客户首选动力。高端大缸径发动机在数据中心、矿用应急电源、矿卡等高端市场，配套量节节攀升，成为企业新的增长点，产品结构调整成效显著。动力总成差异化优势显著，核心竞争力不断凸显。新一代高热效率动力总成产品高可靠性和高传动效率优势明显，持续引领中国大马力重卡节能新时代。重磅发布WP7H挖掘机液压动力总成、WP15H挖掘机液压动力总成，动力强劲、可靠性高，成为广大用户的“掘”佳利器。WP17T发动机+林德液压动力总成首次批量配套80吨级挖掘机，性能可靠，油耗对比同吨位设备显著降低，成为新一代矿山王者。大马力智能CVT拖拉机批量投放市场，快速建立起高端农业装备的核心竞争优势，有力推动我国农业机械行业转型升级。</p>\n<p>。燃料电池取得全球领先性突破，引领行业多元能源技术发展。发布全球首款大功率金属支撑商业化固体氧化物燃料电池SOFC商业化产品，热电联产效率高达92.55%，打造全球最高纪录，为分布式能源和微电网提供绿色低碳解决方案。氢燃料电池业务持续引领行业发展，装配潍柴氢燃料电池发动机的公交车累计行驶里程超过3000万公里，产品寿命达3万小时。</p>\n<p>业务结构和盈利能力不断改善</p>\n<p>积极拓展海外市场及战略新兴业务：1）海外市场开拓加速，22Q1-3 公司发动机&#x2F;重卡整车出口分别同比+40%&#x2F;+77%，其中 Q3 出口分别同比+60%&#x2F;+125%，出口对公司的贡献逐渐放大。2）大缸径发动机增长强劲，22Q1-3 实现收入同比+75%，销量超 5000 台，同比+40%，单价继续提升，其中 Q3 实现收入同比+84%。3）上半年雷沃农机实现销量 7.6万台，同比+28%。8 月 30 日发布公告，拟对潍柴雷沃分拆上市，有利于协同本部发展，做强做大高端农业装备业务</p>\n<p>1）受订单周期及欧美高通胀带来的供应链压力影响，凯傲 22Q3 出现亏损近 1 亿欧元，若剔除该影响，Q3 公司净利润同比增长超 10%，预计 Q4 起凯傲盈利能力将逐渐好转。中长期来看，到 2025年我国智能物流行业规模有望达万亿，5 年 CAGR 为 10.9%，前景广阔，凯傲+德马泰克的供应链整体解决方案有望助力公司持续增长。2）前瞻布局氢燃料电池产业链，持续积极推进新能源战略落地，有望在未来取得先发优势大缸径发动机应用领域广泛，<br>包括发电设备、5G 大型数据中心备用电源等工业动力，远洋捕捞、公务用艇及内河航运等船舶动力，以及其他大型机械等领域。</p>\n<p>目前重卡行业运行态势 据中汽协及第一商用车网数据显示,1-10月份重卡行业累计销售78.8万辆,同比增长38%。<br>其中国内部分细分市场呈现恢复态势,海外市场需求饱满,出口销量继续增长。<br>长期来看,随着经济持续回升向好及公路运输效率不断提升,重卡行业将迎来良好发展机遇</p>\n<h3 id=\"安琪酵母\"><a href=\"#安琪酵母\" class=\"headerlink\" title=\"安琪酵母\"></a>安琪酵母</h3><p>中式面点发酵之外，我国<br>烘焙行业的扩容拉动酵母制品需求的增长。与发达国家相比，YE在我国食品鲜味剂中的<br>渗透率还有较大提升空间。而酶制剂、酵母替代蛋白等精深加工产品打开高值化蓝海</p>\n<p>国内酵母业务需求刚性，竞争格局稳定，公司具备市场话语权，新一轮扩产扩大规<br>模领先优势，出海路径逐步清晰；提价、水解糖替代多措并举对冲成本压力，今明<br>年效果显现，叠加糖蜜价格稳中趋降，未来盈利能力更为稳健；立足酵母同心多元<br>化发展，在生物发酵、新型包材、动植物营养领域培育新增长曲线。</p>\n<p>发酵蛋白：精深加工打开高值化蓝海</p>\n<p>酶制剂是酵母产业高附加值延伸的重要方向。酶制剂是微生物发酵产生的具有催<br>化功能的蛋白质，具有催化效率高、专一性较高、作用条件温和、能耗较低、化学污<br>染少等优点，其应用领域遍布饮料（啤酒、葡萄酒、白酒、果汁等）、食品（面包烘<br>焙、制糖、乳品等）、纺织、饲料、洗涤剂、造纸、皮革、医药以及能源开发、环境<br>保护等方面</p>\n<p> 在酵母衍生品领域，酵母提取物 YE 在食品鲜味剂中的渗透率还有较大<br> YE 是天然的鲜味剂，顺应健康、营养、美味的消费需求，正在食品加工领<br>域替代味精，具备发展潜力但 YE 在鲜味剂中的占比差别较大，速冻食品<br>高达 80.2%，调味品则只有 22.5%左右。横向比较,日本和西欧调味品 YE 使用量在鲜<br>味剂中占比分别为 83.2%和 45.9%。受益于国内消费升级和食品品质进化迭代，国内<br>YE 市渗透率仍有较大的成长空间</p>\n<p>为拓展海外业务，公司同步优化组织架构。过去每个部门都涉及海外业务，现在<br>所有海外业务都按区域划分到 6 个海外事业部。每个事业部负责所有产品在当地市场<br>的业务。此外，公司在新加坡、墨西哥、美国、德国设立，加速融入本地市场。 </p>\n<p>树立大食物观，向酵母要蛋白，商业推广已有初步成果。微生物蛋白将成为人<br>们补充蛋白的新选择，酵母蛋白的发展值得期待。酵母蛋白含有人体必需的 8 种氨基<br>酸，属于全价蛋白，营养丰富。除此之外，酵母蛋白的消化利用率更高。植物蛋白的<br>消化利用率是 80%，肉类蛋白为 90%，酵母蛋白则为 95%左右。公司已实现利用酵<br>母蛋白替代纯植物蛋白制成的素肉中 50%的植物蛋白，使得素肉制品豆腥味减弱、<br>肉味更浓郁，其质感及纹里更接近肉。公司酵母蛋白在市场上供不应求，预计今年产<br>量将突破 1 万吨。</p>\n<h3 id=\"中科三环\"><a href=\"#中科三环\" class=\"headerlink\" title=\"中科三环\"></a>中科三环</h3><p>受益下游新能源领域高景气，磁材产销量两旺拉动业绩高增。下游新能源车、变频家<br>电、节能电梯、风力发电高景气拉动稀土永磁材料需求大幅增长，2021 年以来公司磁<br>材产品订单大增，下属工厂接近满负荷运行，产能利用率与产销量大幅增长</p>\n<p>稀土磁材行业壁垒日益提升。伴随终端应用高效率、小型化场景需求提升，尤其高端<br>EV&#x2F;变频空调&#x2F;消费电子等产品对磁材热稳定性、高磁能积提出更高要求，客户认证、工<br>艺难度、投资强度等方面要求愈发苛刻，我们认为，稀土磁材行业具有较高的新进入者<br>壁垒，主要存在四点：<br>✓ 壁垒一：工艺流程长达 16 道环节，产品一致性、稳定性需要长期经验积累。<br>✓ 壁垒二：客户深度绑定（认证期 2-3 年），客户不会轻易更换供应商。<br>✓ 壁垒三：项目周期长达 2-3 年，时间壁垒高。<br>✓ 壁垒四：投资强度大，万吨级投资 10 亿元+，高端产品 30-40 亿元。</p>\n<h3 id=\"中国核电\"><a href=\"#中国核电\" class=\"headerlink\" title=\"中国核电\"></a>中国核电</h3><p>我国四代核技术世界领先，2021 年 5 月，世界首座钍基熔盐堆—<br>—甘肃武威钍盐核反应堆主体工程基本完工；同年 12 月，世界首座高温气<br>冷堆——石岛湾核电站 1 号反应堆首次并网成功</p>\n<h3 id=\"今天国际\"><a href=\"#今天国际\" class=\"headerlink\" title=\"今天国际\"></a>今天国际</h3><p>国外自动化物流系统提供商在<br>高端物流软硬件技术和行业经验方面具有优势，在一些高端自动化物流系统项目中占有一<br>定优势。 国内企业在与国外先进的自动化物流系统提供商竞争中不断发展，推出具有自<br>主知识产权自动化物流产品，凭借较好的本地化服务优势，在一些项目中具备了较强的竞<br>争优势，并成功进入高端项目领域。</p>\n<p>上述 20 多家自动化物流系统提供商在各个应用领域各有优势。如，在烟草行业，今天国<br>际具有较强的竞争优势；在医药行业，日本大福，美国德马泰克等国外企业具有较强的竞<br>争优势，国内企业起院在这一行业也具有竞争力；在机场方面，西门子、范德兰德等国外<br>物流系统集成商具有较强优势</p>\n<h3 id=\"思摩尔国际\"><a href=\"#思摩尔国际\" class=\"headerlink\" title=\"思摩尔国际\"></a>思摩尔国际</h3><p>分业务来看，虽然思摩尔国际的业务收入集中来自于新型烟草行业，但若把思<br>摩尔国际就此定义为传统的电子烟制造商将有失偏颇，原因有三：（1）公司的核心<br>雾化技术在特殊雾化设备，如医疗、美容甚至航空等领域有很强的可迁移性；（2）<br>思摩尔近年以通过专利申请、研发投入等布局医疗、美容及大麻雾化领域并取得了<br>一定进展；（3）据弗若斯特沙利文数据，全球特殊雾化市场增速亮眼，目前市场规<br>模为 11 亿美元，预计 2022 年至 2026 年将以 46%的复合增速发展。长期来看，我们<br>认为思摩尔国际发展更趋向为雾化技术平台型企业，大麻雾化、医疗雾化等特殊用<br>途的电子雾化设备制造将支撑公司第二增长曲线加速打开。</p>\n<h3 id=\"中炬高新\"><a href=\"#中炬高新\" class=\"headerlink\" title=\"中炬高新\"></a>中炬高新</h3><p>中炬高新董事会和管理层完成更替，品类和区域扩展空间广阔，中期净利润率目标<br>15%左右。目前火炬集团及一致行动人目前持股19.93%，公司控制权基本确认。10 月<br>中市场化招聘公司总经理及其他高管到位，华润雪花背景余向阳为总经理。11 月初内<br>外部全员竞聘中高层职务，美味鲜现有管理层稳定。高层落地后，首要工作是梳理内<br>部工作流程和提升内部工作效率，强调优胜劣汰和提质增效。后续多重催化剂可期，<br>1H24 股权激励有望落地，目标3 年内引入战投，房地产业务函待剥离，诉讼预计负债<br>已经在 2022 至 1H23 报表中计提。</p>\n<p>目前中炬高新美味鲜在酱油和蚝油市占率仅 3%，<br>体量提升空间较大；鸡精鸡粉竞争优势较强，份额进入前三；料酒和醋体量预期过<br>亿，会持续发展支持。南部和东部五省是中炬高新美味鲜的主要销售区域，未来华东<br>和北部区域的扩张将成为重点。受到原材料和产能利用率影响，公司利润率压力较<br>大，新领导班子重视提升内部工作效率，费用率有望下行，公司中期净利率目标 15%<br>左右。</p>\n<p>目前火锅底料是复合调味料最大的子行业，头部企业市占率仅 11%，能够容纳足够多<br>的企业，是布局复合调味料的重要赛道之一。蚝油子行业海天味业的优势得天独厚，<br>长期仍为行业龙头，中炬高新 2022 年蚝油收入近 3 个亿。鸡精鸡粉份额基本被外资<br>品牌垄断，有机会做少量的国产替代。其他中式调味料均有布局的机会，如川式调味<br>料中的酸菜鱼调料、小龙虾调料等</p>\n<p>厨邦酱油采用南派酿造工艺，用料更高级。①酿造工艺：高盐稀态发酵工</p>\n<p>艺生产周期长且成品品质优良，现为酱油行业主流酿造工艺；②原材料：</p>\n<p>厨邦酱油原材料为 100%大豆，竞品酱油原材料为大豆+豆粕的组合。油脂含量高，口感更醇厚，且价格比豆粕每斤高 20%以上；③曲种：厨邦</p>\n<p>主要采用高产量单菌种，发酵后可强化氨基酸态氮指标。综合对比，厨邦</p>\n<p>酱油使用的原材料更高级，酱油品质更高。</p>\n<p>厨邦酱油价格位于中等水平，性价比优势突出。厨邦酱油在保证口感美味</p>\n<p>品质上乘的同时，价格相对实惠。对比同类高鲜产品，厨邦酱油价格处于</p>\n<p>中位，厨邦味极鲜价格为 9.87 元&#x2F;500ml，相比同等氨基酸态氮含量的李</p>\n<p>锦记味极鲜&#x2F;加加味极鲜&#x2F;欣和六月鲜特级酱油分别便宜 0.3%&#x2F;6.9%&#x2F;37.5%。</p>\n<p>对比零添加产品，高鲜酱油氨基酸态氮含量更高，价格更低。综合来看，</p>\n<p>厨邦酱油拥有明显的高性价比</p>\n<p>鸡精粉：目前鸡精粉行业属于成熟发展阶段，由外资品牌占据主要市场，</p>\n<p>厨邦位于行业第三。公司 2012 年推出鸡精粉，相比竞品，厨邦鸡精粉总</p>\n<p>氮含量更高，鲜味更足，同时鸡精污染物三氯丙醇（3-MCPD）含量更低，</p>\n<p>产品安全健康。鸡精粉主要在餐饮渠道销售，2021 年随着餐饮端需求逐渐</p>\n<p>恢复，公司鸡精粉营收同比提升 10.5%</p>\n<p>海天定位中低端餐饮，产品主要应用在热菜领域，海天通过高性价</p>\n<p>比实现餐饮渗透和高周转，目前海天餐饮渠道占比 60%，在中低端市场形成了</p>\n<p>无法撼动的规模优势</p>\n<p>对比第二梯队其他参与者：千禾味业餐饮占比约 5%，加加食品餐饮布局处于</p>\n<p>起步阶段，餐饮占比仅为 2%。对比之下，公司餐饮渠道占比 25%，叠加拥有完</p>\n<p>善的产品矩阵&amp;高性价比优势，在第二梯队中具备突围餐饮渠道的基础</p>\n<p>差异化+常规化措施并行，有望实现餐饮渠道突围。公司重视餐饮渠道的开拓，目</p>\n<p>前主要合作品牌包括西贝莜面村和海底捞，年销售额在千万级别。对标龙头海天味业餐</p>\n<p>饮渠道占比约 60%的水平，长期看公司餐饮渠道占比仍有较大提升空间。</p>\n<p>差异化措施：以凉菜切入餐饮渠道+推进餐批旗舰店建设</p>\n<p>常规化措施：大包装产品&amp;一站式采购+经销商扶持+厨师训练营</p>\n<p>2021 年公司较海天扣非归母净利率低 11.7%，核心</p>\n<p>差异在管理费用率，2012-2021 年平均管理费用率中炬约为海天的 2.4 倍，近年来中炬管理费用率呈现持续下降的趋势管理人员较多：如果将除生产、销售、技术以外的人员归为管理人员，<br>2018 年中炬管理人员共 1584 人，海天管理人员共 508 人，主要是由于总部管理人员较多。2019 年公司转为民营体制，积极剥离相关人员，2021年管理人员数量降低到 637 人；<br>管理层激励不充分，管理效率较低：2021 年海天 16 位高管合计薪酬 3255</p>\n<p>万元，12 位高管持股市值合计 655 亿元，中炬高新 22 位高管合计薪酬</p>\n<p>3423 万元，无持股，中炬管理层薪酬待遇和人均创收相比海天有较大差</p>\n<h3 id=\"宋城演艺\"><a href=\"#宋城演艺\" class=\"headerlink\" title=\"宋城演艺\"></a>宋城演艺</h3><p>未来公司将更加坚定专注演艺主业,持续打造非同凡响的高品质演艺作品,不断营造新奇特的景区和度假体验。<br> 花房集团是公司参股35.35%的联营企业,公司对花房集团采用长期股权投资权益法核算,按相关规定每年对长期股权投资进行减值测试。<br>2023年,受宏观环境、行业环境和内部环境等方面因素影响,花房集团主动采取了更加谨慎的运营策略,于2023年5月份起进一步加强了风险管理和内控措施,整体<br>运营规模收缩,经营业绩出现大幅下滑。<br>综合各方面因素分析,预计花房集团未来经营不及预期,公司对花房集团长期股权投资执行了减值测试为目的的评估,根据初步评估结果拟计提减值准备8.6-9亿<br>元。<br>本次拟计提的金额为初步测算结果,最终金额将在最终评估和审计后确定。 </p>\n<p>西安有着厚重的历史文化和丰富的旅游资源,也是个网红城市,游客底量庞大。<br>西安有着多台品质较高的演艺节目,演艺市场竞争比较激烈。<br>西安千古情开业后,迅速在激烈的市场竞争中占得一席之地。<br>未来西安项目将进一步发挥演艺+景区的优势,发挥室内演出晴雨皆宜、全天候上演的优势,不断提升市场占有率。<br>目前西安千古情工作日基础场次已达4场,周末达到5场,未来经营看好。<br>上海宋城三楼和四楼的整改提升预计将于3月底完成,将增加餐饮区、互动体验区、商业等内容,进一步提升游览空间、产品品质和接待水平。<br>上海的城市人口基数大,商业发达,本地亲子家庭、年轻时尚群体、企业团建等各种专题市场需求旺盛,2024年将实现集中整改提升后的完整年度运营,经营前景看<br>好</p>\n<p>受益于补偿性需求的释放,加上公司做了很多针对性非常强的主题活动,2023年整体的门票收入已经基本恢复到2019年。<br> 四季度本身是文旅消费的淡季,对全年业绩的影响较小。<br>公司各个项目根据当地市场特色做了针对性的营销活动,杭州宋城国庆期间受到当地重大活动的一些影响,但其后的学生秋游团和银发团表现较好,上海宋城的企业<br>团建市场也在不断发力。<br> 元旦假期公司整体场次和人次较2019年同期均有较好增长,一方面受益于项目数量的增加,西安、上海等项目收客局面良好;另一方面杭州宋城等景区通过开展跨<br>年活动充分挖掘周边散客市场实现较好增长。<br>目前公司各个项目已做好狂欢中国年新春主题活动的全面准备,将以饱满的热情迎接新年新气象</p>\n<p>占位优势：卡位一线旅游目的地，占据客流高地</p>\n<p>渠道优势：卡位旅行社渠道，拓宽新渠道 </p>\n<p>桂林项目卡位高客源景区，张家界项目科技含量高，均处于快速爬坡期</p>\n<p>珠海项目拟将100%股权转让给宋城集团，回收4.58 亿元，未来收取</p>\n<p>一揽子服务费及后续的管理服务费，我们预计成熟期业绩超0.5 亿元。</p>\n<p>￼ </p>\n<h3 id=\"百龙创园\"><a href=\"#百龙创园\" class=\"headerlink\" title=\"百龙创园\"></a>百龙创园</h3><p>益生元、膳食纤维系列产品目前贡献 90%的收入；毛利方面，</p>\n<p>益生元、膳食纤维贡献 80%的毛利；以阿洛酮糖为主的健康甜味剂产品是</p>\n<p>公司 2020 年新推出的产品系列，有望逐步成为公司新的利润增长点。</p>\n<p>公司产品聚葡萄糖和抗性糊精均为可溶性膳食纤维。可溶性膳食纤维由于</p>\n<p>具有良好的溶解性，无异味，受到广大食品加工企业追捧，作为增稠剂、</p>\n<p>乳化剂等运用于食品饮料中，既增加营养健康卖点，也可以丰富口感，也</p>\n<p>正是由于可溶性膳食纤维出色的生理性能成就了其更广泛的应用领域与下</p>\n<p>游市场</p>\n<p>抗性糊精可以帮助人体更好吸收微量元素如钙、铁、锌、硒，成就抗性糊</p>\n<p>精强大消费概念。根据泰莱公司（Tate&amp;Lyle）实验数据，人们平时喝牛奶</p>\n<p>补充钙质大约只有 30%可以被人体吸收，其它的会全部流失掉，而将抗性</p>\n<p>糊精与牛奶结合可有效增加 20%的钙吸收量，也就是饮用含有抗性糊精的</p>\n<p>牛奶可以将钙吸收量从原来的 30%增长到现在的 36%。 </p>\n<p>益生元是指能够选择性地促进肠道内原有的一种或多种有益细菌（益生菌）</p>\n<p>生长繁殖和&#x2F;或增加碳水化合物代谢的物质，主要包括各类功能性低聚糖。</p>\n<p>常见的益生元包括低聚果糖、低聚半乳糖、菊粉、低聚木糖和低聚异麦芽</p>\n<p>糖等，不同产品物化性能及生理功能有所差异</p>\n<h3 id=\"金禾实业\"><a href=\"#金禾实业\" class=\"headerlink\" title=\"金禾实业\"></a>金禾实业</h3><p>全球麦芽酚产能基本由我国垄断。生产甲、乙基麦芽酚需要用到一种重要原材料——糠醛，糠醛可以从玉米穗轴、麦麸、锯木屑中萃取得到</p>\n<p>规划山梨酸钾产业链，食品防腐剂业务未来可期。山梨酸钾是国际粮农组织和卫生组织推荐的高效安全的防腐保鲜剂，广泛应用于食品、饮料、烟草、农药、化妆品、宠物家禽饲料等行业中。其防腐效果是苯甲酸钠的 5-10 倍，而毒性仅为传统防腐剂苯甲酸钠的1&#x2F;40，</p>\n<p>山梨酸及山梨酸钾是国际粮农组织和卫生组织推荐的高效安全的防腐保鲜剂，它的防腐效果明显高于苯甲酸类，是苯甲酸盐的 5~10；产品毒性低，是苯</p>\n<p>甲酸盐的 1&#x2F;4,与食盐相当；不改变食品特性，参与人体的新陈，代谢，产生二氧化碳和水；</p>\n<p>使用范围广泛，在医药、烟草、造纸、化妆品、牙膏、饲料等行业均有很大应用</p>\n<h3 id=\"澜起科技\"><a href=\"#澜起科技\" class=\"headerlink\" title=\"澜起科技\"></a>澜起科技</h3><p>内存接口芯片行业高增长，5G、云计算、AI 发展如火如荼，海量数据对存</p>\n<p>储的需求持续推动内存接口芯片量价齐升和市场高速扩容</p>\n<p>DDR5 内存性能远超DDR4 的规格上限，配套内存接口芯片性能及技术难度随之提升，</p>\n<p>推高内存接口芯片ASP。DRR5 相较于DDR4 单颗DRAM 内存密度提升4 倍至64Gbit，</p>\n<p>最大数据传输速率提升一倍达到6.4Gbps，工作电压由1.2V 压低至1.1V 使对应功耗降</p>\n<p>低超过20％，故而DDR5 内存将对保证内存数据传输速率和稳定性的内存接口芯片提出</p>\n<p>更高要求，进而新一代内存接口芯片在满足更高性能要求的同时技术难度也相应提升，</p>\n<p>从而提高新一代内存接口芯片价值量</p>\n<p>自主掌握核心技术，牢控话语权。公司是全球可提供从DDR2 到DDR5 内存全缓冲&#x2F;半缓</p>\n<p>冲完整解决方案的主要供应商之一，在内存接口芯片及津逮服务器平台领域核心技术均</p>\n<p>基于自主研发，突破了一系列关键技术壁垒，并均已实现量产。公司提出的DDR4“1+9”</p>\n<p>架构被采纳为JEDEC 标准，并将在DDR5 世代演化为“1+10”框架，继续作为LRDIMM</p>\n<p>的国际标准。公司还牵头制定了DDR5 第一子代、第二子代、第三子代内存接口芯片国</p>\n<p>际标准，体现出公司在该领域内享有重要话语权。</p>\n<p>科研系内存接口芯片行业主要动能，公司高研发转化率保障产品高速率迭代，毛利率有</p>\n<p>望进一步优化。公司在DDR4 时代长期处于业内领先地位，内存接口芯片毛利率常年维</p>\n<p>持较高水平。2021 年DDR4 进入产品生命周期后期，DDR5 新兴产品崭露头角，毛利率</p>\n<p>短期承压。进入DDR5 世代后，内存接口芯片价值量提升，相关芯片市场规模大幅增长，</p>\n<p>有望持续优化产品毛利率水平。2022H1 公司互联类芯片产品线营收 12.36 亿元，同比</p>\n<p>+80.04%，毛利率60.08%。 </p>\n<p>经过多年耕耘，公司已与三星、SK 海力士、美光等下游主要客户建立长期稳定、良好</p>\n<p>的合作关系。公司主业直接下游为DRAM 厂商，根据 IC Insights，2021 年三星市占率</p>\n<p>43.6%，SK 海力士市占率27.7%，美光22.8%，三巨头垄断了94%的市场份额。另外</p>\n<p>公司外延拓展服务器CPU 等业务，逐渐与全球主流的服务器厂商及软件系统提供商均建</p>\n<p>立了长期稳定的合作关系，优质的客户资源和产业生态为公司业务规模的扩大奠定坚实</p>\n<p>的基础。</p>\n<h3 id=\"国瓷\"><a href=\"#国瓷\" class=\"headerlink\" title=\"国瓷\"></a>国瓷</h3><p>MLCC（Multi-layer Ceramic Capacitors）是片式多层陶瓷电容器，由印好<br>电极（内电极）的陶瓷介质膜片以错位的方式叠合起来，经过一次性高温烧结形成<br>陶瓷芯片，再在芯片的两端封上金属层（外电极），也叫独石电容器。</p>\n<p>国瓷材料是国内 MLCC 粉体材料龙头，国内市占率达 80%、全球市占率超过<br>25%。</p>\n<p>新能源汽车的增长和汽车电子化率的提高，促进 MLCC 产品需求增长。一方<br>面，汽车电子系统较多，包括定位系统、中央控制系统、无线电导航系统、车身稳<br>定控制系统、驾驶辅助系统、汽车音响及娱乐系统、车载通信系统等，随着汽车电<br>子化率提升，对集成电路中被动元器件 MLCC 的用量必然增多。</p>\n<p> 蜂窝陶瓷：尾气后处理的核心，寡头长期垄断市场</p>\n<p> 为了满足更高的排放标准，蜂窝陶瓷载体需提高处理尾气的效率，不断提高各<br>项性能指标。</p>\n<p>外国寡头垄断格局打破，国产替代提速。蜂窝陶瓷载体全球市场长期由美国康<br>宁公司和日本 NGK 公司垄断，截至 2020 年二者合共约占全球蜂窝陶瓷载体 90%<br>以上市场份额，蜂窝陶瓷的核心技术和产品掌握在两家巨头手上。康宁和 NGK 享<br>受了汽车产业高速发展的先发红利，而国内载体厂商则将充分受益于环保法规带<br>来的渗透率提升，以奥福环保、宜兴化机为代表的国内蜂窝陶瓷载体厂商的技术突<br>破和市场份额的提高，国内主机和整车厂商逐步开启了蜂窝陶瓷载体国产化替代<br>进程</p>\n<p>国六阶段蜂窝陶瓷的市场增量主要来自汽油车和柴油车加装载体，单台车载<br>体用量放大</p>\n<p>生物医疗板块：齿科材料需求高速增长，海内外双<br>轮开拓市场<br>公司凭借自身在陶瓷材料领域领先的技术与市场优势，基于高纯氧化锆粉体<br>业务，向下游口腔医学材料与器械积极拓展，2015 年战略入股深圳爱尔创，2018<br>年全资收购深圳爱尔创，目前公司产品涵盖齿科氧化锆陶瓷从粉体到瓷块、玻璃陶<br>瓷、树脂陶瓷等。受益于口腔医疗行业的快速发展与海外市场的积极开拓，加之高<br>瓴与松柏的战略投资，公司口腔医疗材料业务持续快速增</p>\n<p>面对持续增长的口腔医疗市场规模，我国牙科材料需求持续提升，产品结构不<br>断调整，新技术和新产品不断涌现，市场也随之扩大，牙科材料已经逐渐成为我国<br>医疗器械制造业的重要组成部分。氧化锆陶瓷材料由于兼具优良的机械性能、生物<br>相容性与美观性，在牙科材料具有广阔的应用前景。放眼全球市场，氧化锆牙科材<br>料产量与收入呈现逐年提升态势，据 QYresearch 统计，2021 年全球氧化锆牙科<br>材料收入 1.26 亿美元，预计 2026 年将达到 1.69 亿美元，CAGR 达到 6.0%。反<br>观国内市场，由于欧美发达国家在相关领域起步早，技术先进，海外大品牌一直垄<br>断全球市场，部分产品外资品牌占有率达到 90%，国产化程度仍有较大空间。公<br>司作为国产牙科用纳米级复合氧化锆粉体材料及瓷块的主要供应商，面向国内外<br> 广阔的市场，将有望借助自身成本和服务优势打破国外产品的垄断地位，迎来快速<br>增长</p>\n<p>陶瓷墨水喷墨打印前景广阔。陶瓷墨水是釉面材料的一种，主要用于陶瓷表面<br>的装饰层，通过喷墨打印技术，计算机控制将墨水直接打印到陶瓷表面进行表面装<br>饰，实现产品个性化设计和制造，特别适合于设计复杂图案，进一步提高陶瓷装饰<br>效果。</p>\n<p>氮化硅轴承球：攻克关键技术，打破国外垄断</p>\n<p>氮化硅陶瓷性能出色，轴承滚子替代首选。氮化硅是一种典型的强共价键化物，<br>氮化硅陶瓷材料具有熔点高、硬度大、耐磨损、抗弯强度高、导热性能好等优越的<br>物理化学性能，被广泛地应用到国防、能源、电子等关键领域。</p>\n<p>新能源<br>时代的来临为汽车电机轴承提出了新的要求，金属材料导致电机产生交变电流进而造成电腐蚀成了关键缺陷，而性能的陶瓷材料则可以完全避免，较大地提高了电<br>机的使用寿命。另一方面，海上风力发电导致传统的金属轴承易受高盐环境的侵蚀，<br>而陶瓷材料轴承球具有优异的耐腐蚀能力，平均寿命比轴承钢高 4-25 倍。随着新<br>能源汽车与风力发电的快速发展，陶瓷轴承球需求将被进一步拉动，有望成为未来<br>公司利润新的增长点。</p>\n<p>1）电子材料板块：（1）MLCC 粉体：一方面 23 年消费电子景气度有望底部<br>回升，带动销量逐步回升，公司规划 23-25 年产能逐步从 10000 吨&#x2F;年爬升至<br>15000 吨&#x2F;年，另一方面由于行业格局稳定，假设 MLCC 介质材料销售均价和毛利<br>率保持稳定；（2）氧化铝&#x2F;勃姆石：未来下游新能源需求仍维持高速增长，公司氧<br>化铝和勃姆石快速扩产带动销量增加，假设 23-25 年价格维持在 1.8 万&#x2F;吨，毛利<br>率为 20%；<br>2）催化板块：船舶国二标准和非道路国 IV 标准 2022 年相继全面实施，尾气<br>治理市场容量持续拓宽的同时，公司在商用车、乘用车、非道路机械和船机等应用<br>领域快速突破，公司 23-24 年募投产能逐步释放带动销量增长，假设蜂窝陶瓷载<br>体毛利率维持 50%，预计 23-25 年收入增速分别为 77%、48%和 46%；<br>3）建筑材料板块：国内建筑陶瓷墨水经过多年发展目前渗透率较高叠加国内<br>地产增速放缓，公司该板块收入增速放缓，主要业务增量来自于国内陶瓷企业出海<br>的需求，假设 23-25 年增速为 15%、10%、10%，毛利率随上游原材料价格回落<br>得到修复，假设 23-25 年毛利率维持稳定在 25%左右；<br>4）生物医疗板块：爱尔创受益于口腔医疗市场持续增长和集采带动的齿科耗<br>材需求提升，预计 23-25 年收入增速为 20%、15%和 15%，国瓷材料齿科材料占<br>下游成本较小，且国内竞争对手较少，假设产品毛利率保持在 58%左右</p>\n<h3 id=\"半导体-1\"><a href=\"#半导体-1\" class=\"headerlink\" title=\"半导体\"></a>半导体</h3><p>周期角度看：2023年受半导体周期下行、美系设备出口管制等影响，下游头部晶圆厂扩产有所放缓，主要资本支出用于储备<br>海外关键机台，国产设备招标有所延后。但从终端来看，2023Q3华为引领3C需求复苏，全球智能手机出货在经历连续8个季度同比下滑后，<br>在2023Q3实现同比微增；晶圆端看，中芯国际产能利用率自2023Q2开始逐步回升，行业已进入周期上行通道。2）成长角度看：2022年中国<br>大陆半导体设备整体国产化率水平约14.5%；2023年受出口管制影响，长存仍处于国产线攻关突破阶段，半导体设备国产替代仍需求迫切。<br>因此，展望2024年，我们认为，周期复苏铺底，前道半导体设备叠加长存国产线突破、后道半导体设备叠加核心客户先进封装突破，半导<br>体设备板块将迎来“周期”与“成长”共振。</p>\n<p>硅基OLED：主要指尺寸小于1英寸的显示器。OLED按照驱动方式可以分为被动式和主动式；按屏幕大小可以分为大尺寸、中尺寸和微型显示器；<br>按照基板不同可以分为玻璃基板、硅基板、柔性基板等，由于PPI的差异，微型OLED一般选用硅基板，中大尺寸一般采用玻璃基板&#x2F;柔性基板</p>\n<h3 id=\"光伏-1\"><a href=\"#光伏-1\" class=\"headerlink\" title=\"光伏\"></a>光伏</h3><p>N 型TOPCon 电池走量，相关设备耗材迎来技术升级迭代。预计2023<br>年TOPCon 新建产能400GW，预计2024 年新增产能超过200GW，相<br>关TOPCon 产线设备供应商在手订单充裕。2024 年TOPCon 电池出货<br>量占比有望达到60%以上，伴随N 型TOPCon 电池放量，低氧型硅片<br>需求增长，相关低氧单晶炉、磁场磁体、大抽速真空泵等相关设备迎<br>来技术迭代。同时，TOPCon 和HJT 等N 型电池银浆消耗量增加，多<br>主栅、无主栅、激光转印等降本技术有望加速应用</p>\n<p>TOPCon 的 N 型硅片氧含量要求更加严格。目前，TOPCon 电池和 PERC 电池的 PN 结<br>都为同质结，由 N 型&#x2F;P 型硅片表面进行硼扩&#x2F;磷扩制成。由于硼元素的扩散难度大，因此<br>TOPCon 的硼扩工艺温度（900-1100°C）相比PERC 电池由磷扩工艺温度（600-900°C）更高。<br>高温下硅片中的氧元素移动，冷却后沉淀形成氧环（同心圆），降低电池效率。HJT 电池的<br>PN 结为两种不同硅材料形成，采用气相沉积工艺实现掺杂制结，无需进行高温扩散，减少了<br>此类问题。PERC 电池的磷扩工艺温度相对较低，也减少此类问题。基于以上原因，TOPCon<br>使用硅片的氧含量指标（低于12ppma）要求比HJT 使用硅片（低于14ppma）、PERC 使用硅<br>片（低于16ppma）更为严格，硅片少子寿命的要求（大于800μs）也高于PERC 硅片（大于<br>70μs）。 </p>\n<h3 id=\"紫金\"><a href=\"#紫金\" class=\"headerlink\" title=\"紫金\"></a>紫金</h3><p>我们对 2025 年铜价更为乐观且看好更有节奏的配置组合：1）2024 年看金。我们认为在<br>2H24 年美国降息周期或启动以及市场降息预期提前的环境下，黄金价格或将在2024 年重<br>回上涨趋势，此外全球央行大举购金也将作为支撑黄金价格更高中枢水平的结构性因素。<br>我们预计 2024&#x2F;2025 年黄金均价为 2,300&#x2F;2,300 美元&#x2F;盎司，而若美联储 2024 年降息的力<br>度超过我们的预期，黄金价格将有更显著的上行风险。2）2025 年看铜，且较市场更为乐<br>观。我们认为 2024 年铜的基本面受铜矿项目产量集中释放影响压力较大，或将出现 38.6<br>万吨的供应盈余；而在2025 之后由于缺乏大型新项目，铜矿的供给增长将逐步放缓，在新<br>能源用铜需求的拉动下或将出现供需缺口逐步放大。在基准供需判断之上，11 月第一量子<br>的 Cobre  Panama 项目停产事件对 2024 年基本面有较大弹性的影响，如果长期停产将会<br>较大程度削弱铜矿增量对基本面的冲击，且市场可能提前反映2025 年由于供应增长放缓且<br>新能源用铜需求拉动共同作用下的供需收紧，这也是我们较市场而言对2025 年铜价更为乐<br>观的因素之一。我们预计2024&#x2F;2025 年铜价中枢为8,800&#x2F;10,000 美元&#x2F;吨</p>\n<p>2024 年看金，2025 年看铜，铜金组合攻守兼备<br>铜<br>需求动能新旧更替，能源转型驱动用铜前景可期。虽然受全球经济，尤其是欧洲地区经济<br>疲弱影响下铜传统的下游需求领域表现较为平淡，但从结构性角度来看铜的消费仍具有较<br>大弹性。我们认为在新能源发展变革下，铜的应用场景会得到全面拓宽，其导电性、延展<br>性和低反应性等在新能源领域有着广泛且必需的应用。尤其是电动汽车以及风电光伏的深<br>化发展将成推动新周期铜需求增长的主要驱动力，待本轮新增产能释放平稳后，我们预计<br>铜矿的供应增速将不及新能源用铜拉动的需求增速</p>\n<p>电动汽车用铜单耗是传统汽车的约4 倍，在传统燃油车的基础上,电动汽车的驱动电机、电<br>池、高压线束等部件均需要使用大量的高导电性能的铜材料，以确保电机和电控系统的正<br>常运行。根据铜业发展协会的数据，纯电动汽车单车用铜约83kg，而传统燃油车单车用铜<br>约22kg。随着新能源汽车渗透率的不断提升，铜的需求也将受到显著的推动。根据IEA 的<br>统计，基于各国的现有政策以及发展目标，2030 年全球电动汽车的市场占有率已从过去该<br>机构预测的25%提升到35%，中国仍将继续保持最大市场的地位，占全球电动汽车总销量<br>的40%。</p>\n<p>我们预计 2025 年全球光伏及风电用铜将达到 307 万吨。由于铜优良的导电特性，光伏和<br>风电的发电系统中的电缆和线路需要用铜作为主要材料。光伏组件中的热量交换器、缆线<br>和连接器需要使用大量的铜材料，此外光伏逆变器中也需要使用铜线圈和其他铜制品。根<br>据铜业发展协会测算，每兆瓦光伏系统大约使用5.5 吨铜。根据我们测算，2025 年全球光<br>伏新增装机用铜量将达到2436 万吨，其中65.3%来自中国市场，从中国出口到海外部分占<br>全球总量 25%。同样，风电发电机中的缆线、涡轮机等部件也会使用到铜，尤其是海上风<br>电的海底电缆用铜强度将较大。我们预计到 2025 年全球风电新增装机用铜量将达到 63.5<br>万吨，其中中国和海外占比分别为53.3%和46.7%。2025 年全球光伏和风电总用铜量预计<br>将达到307 万吨，23-25 年间年均复合增长率为16.3%。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"协鑫\"><a href=\"#协鑫\" class=\"headerlink\" title=\"协鑫\"></a>协鑫</h2><p>掌握颗粒硅量产技术，迈入万吨级产能规模。公司未来规划徐州 10 万吨、<br>乐山 10 万吨以及包头 30 万吨颗粒硅产能。预计 21-22 年公司颗粒硅产<br>能可达 3&#x2F;26 万吨，实现大幅提升。颗粒硅产能规模的扩大助力公司具备<br>规模优势，生产成本有望进一步降低，盈利能力有望逐步提升</p>\n<p>目前生产 1 千克颗粒硅耗电<br>仅 18 度，相较于西门子法 60 度&#x2F;千克有显著下降；水耗氢耗方面，FBR<br>方法较西门子法降低 30%&#x2F;42%。投资方面，颗粒硅每万吨产能仅需要 7<br>亿初始投资，相较西门子法可降低 1.5-2 亿元，具备成本优势。   </p>\n<p>硅料N型时代全面到来，P型产能可能会在2024会全面出清，硅料市场上能稳定持续供应就3800，通威，大全三家，还有半家就是新特，基本上新玩家绝大部分要全军覆没了，所以硅料实际供应产能看老玩家就可以了，这个形势到今年下半年就会非常明朗；</p>\n<p>也许半年，也许一年，距离彻底颠覆棒状硅的时刻已经越来越近了。下个月，乐山二期就开始动工了，包头二期应该也不远了。念念不忘，必有回响</p>\n<h2 id=\"甜味剂\"><a href=\"#甜味剂\" class=\"headerlink\" title=\"甜味剂\"></a>甜味剂</h2><p>与其他糖醇类产品相比，赤藓糖醇不被人体代谢，因此几乎不产生热量，也不引起血糖变化，是正宗的“零热量”天然甜味剂；另外，赤藓糖醇物理属性优异，耐热性较好，性质稳定，易于添加存储，综合优势鲜明突出，获得市场青睐<br>唯独赤藓糖醇直接通过小肠进入肾脏被尿液排出人体，因此是各糖醇类中人体耐受度最高的低倍甜味剂，<br>赤藓糖醇生产是在葡萄糖的基础上，接入菌种、添加发酵培养基进行深层发酵，然后经过净化提纯所得。赤藓糖醇是天然零热量的甜味剂，木糖醇是有热量的</p>\n<p>抗性糊精由淀粉加工而成，是将焙烤糊精的难消化成分用工业技术提取处理并精炼而成的一种低热量葡聚糖，属于低分子水溶性膳食纤维。作为一种低热量可溶性食品原料，在食品工业中具有的广阔的发展前景。</p>\n<p>纯天然甜味剂代糖产品中,赤藓糖醇采用发酵生产, 它溶解于水中时具有吸热效果，溶解度较低、易结晶，所以入口具有清凉感，更适合清爽型的饮料当中。 而阿洛酮糖采用生物法制备,它可以抑制人体血糖的快速升高，调节血糖等有益人体健康的特殊功能，更适合烘培类产品、医药等领域。</p>\n<p>阿洛酮糖是一种新型甜味剂，具有降血糖、低热量等优异性能，</p>\n<p>化学合成糖目前最好的解决方案是三氯蔗糖，植物提取糖目前最好的解决方案是甜菊糖苷，在生物发酵糖里面目前在国内的解决方案是赤藓糖醇，在海外的解决方案是阿洛酮糖，</p>\n<p>木糖醇難以被口腔中的細菌分解產生酸性物質，因此不易引起蛀牙，木糖醇代謝時不需要胰島素就可直接進入細胞，並不會引起血糖飆高，糖尿病病人可做為蔗糖替代品，但仍會產生熱量，所以不可過量攝取。</p>\n<p>聚葡萄糖和抗性糊精均为可溶性膳食纤维<br>蛋白质、脂肪、碳水化合物、维生素、矿物质与水并列<br>可溶性膳食纤维由于具有良好的溶解性，无异味，受到广大食品加工企业追捧，作为增稠剂、乳化剂等运用于食品饮料中</p>\n<p>功能与加工性更出众的可溶膳食纤维。抗性糊精是低热量葡聚 糖的一种新型式，是一种重要低分子、非黏性水溶性膳食纤维。由于结构 中存在α-1,2，α-1,3，α-1,6 键，不能被体内的消化酶所分解，在消化道 内也不会被小肠吸收消化，可以直接进入大肠，被大肠内益生菌发酵，作 为膳食纤维发挥各种生理作用。</p>\n<p>益生元是指能够选择性地促进肠道内原有的一种或多种有益细菌（益生菌）生长繁殖和&#x2F;或增加碳水化合物代谢的物质，主要包括各类功能性低聚糖。常见的益生元包括低聚果糖、低聚半乳糖、菊粉、低聚木糖和低聚异麦芽糖等，不同产品物化性能及生理功能有所差异</p>\n<h2 id=\"光伏-TCL\"><a href=\"#光伏-TCL\" class=\"headerlink\" title=\"光伏 TCL\"></a>光伏 TCL</h2><p>目前市场没有认可中环通过使用低等级便宜硅料、提高生产效率来提升利润率的逻辑，对中环Q4业绩预期不高</p>\n<p>如果考虑硅片业务技术研发投入已经进入成熟期，而半导体硅片业务（12英寸、IOS硅片、碳化硅等新业务）、组件与电池业务（叠瓦，电池，XBC等）尚处于研发投入高速增长期。</p>\n<p>中环210P现有最新客户：晶科（已经上升到第一大客户）、协鑫、东方日升、天合、通威、晶澳等。<br>其一基于在硅料涨价背景下对供应安全的应对性需求；其二是出于“先抢地，再耕田”的战略性行为；其三是大尺寸硅片呈确定性趋势，硅片产能仍面临结构性供应不足。</p>\n<h3 id=\"光伏\"><a href=\"#光伏\" class=\"headerlink\" title=\"光伏\"></a>光伏</h3><p>大厂为消化产能、提高出货规模，现在亏损也卖，先把中小企业挤死再说。目前，一线组件厂商开工率还在70%—80%；但二三线厂商开工率只剩约40%，已有中型光伏制造企业单月就亏损上亿元。一线厂商“一体化”，就是为了在产能出清阶段，靠自身产业链不同板块调剂利润、保障现金流。当下，在整个光伏产业链中，上游硅料盈利，中游硅片微利、电池组件则全线亏损，终端产品组件的成本账已毫厘必争，即使‘一体化’，1元&#x2F;瓦能有微利，低于0.99元&#x2F;瓦基本就亏</p>\n<h2 id=\"碳纤维\"><a href=\"#碳纤维\" class=\"headerlink\" title=\"碳纤维\"></a>碳纤维</h2><p>ZT7、ZT8、ZT9 系列和高模型 M40J 级、M40X 级石墨纤维工程产业化 能力，其中 ZT7 系列产品已正式进入稳定的批量生产阶段，打破了国外对高性能碳 纤维的封锁和限制。公司现已成为国内航空航天领域 ZT7 系列碳纤维产品的批量稳 定供应商。未来，公司将通过自有核心技术改进 ZT9 系列高强度碳纤维产品性能， 攻关 M65J 级高模量石墨纤维等新一代国产碳纤维批量稳定制备技术，同时扩充高 性能碳纤维产能，</p>\n<h2 id=\"万科\"><a href=\"#万科\" class=\"headerlink\" title=\"万科\"></a>万科</h2><p>分业务类型看，本集团营业收入中，来自房地产开发及相关资产经营业务的营业收入 1,843.6 亿元，<br>占比 91.8%；来自物业服务的营业收入 140.4 亿元，占比 7.0%。</p>\n<p>、相关资产经营业务主要包括物流、公寓、商业、办公等业务收入。<br>“万纬物流”为本集团物流仓储服务及一体化供应链解决方案平台，目前综合实力位列行业第一梯队。<br>上半年物流业务（含非并表项目）实现经营收入 19.5亿元，同比增长 17.0%，其中高标库营业收入<br>11.4 亿元，同比增长 9.1%；冷链营业收入（不含供应链业务收入）8.1 亿元，同比增长 30.3%</p>\n<p>本集团旗下“泊寓”作为全国最大的集中式公寓提供商，致力于为新进入城市的青年提供综合租住服务。<br>上半年租赁住宅业务（含非并表项目）实现营业收入 16.4 亿元，同比增长 10.6%。</p>\n<p>报告期内本集团商业业务(含非并表项目)营业收入 43.0 亿元，同比增长 7.3%。其中，印力管理的商<br>业项目营业收入 27.4 亿元，整体出租率 94.7%，同比提高 2.0 个百分点。</p>\n<p>2021 年公司地产业务收入增速为 7.36%，物业业务 32.1%，物流仓储业务68.9%，商业开发运营业务 20.6%，长租公寓业务 13.9%，多元化布局已初现规模，将成为公司未来发展新的利润蓄水池和增长点</p>\n<p>住宅物业服务：作为公司住宅物业服务板块，公司主要以万科物业为品牌提供基础物业服务，主要包括向住宅物业业主或住户提供的清洁服务、秩序维护服务、园艺服务及维修及保养服务。</p>\n<p>房屋再装修及美居服务</p>\n<p>以 2021 年的业绩来看，万科地产业务收入<br>同比增长 7.36%，物业业务增速 32.1%，物流仓储业务增速 68.9%，商业开发运营<br>业务增速 20.6%，长租公寓业务增速 13.9%</p>\n<h3 id=\"奥瑞金\"><a href=\"#奥瑞金\" class=\"headerlink\" title=\"奥瑞金\"></a>奥瑞金</h3><p>覆膜铁材料由奥瑞金自主研发,拥有独立的知识产权,已经实现规模化生产,是预制菜金属包装的理想原材料。<br>覆膜铁材料具有高耐腐蚀性能,现在的预制菜基本都是含盐食品,覆膜铁包装能够地很好满足含盐高温杀菌食品对包装极为苛刻的要求,此外,覆膜铁材料在高耐加<br>工性能、食品卫生安全方面也有优势</p>\n<p>2023 年观察青岛啤酒灌装投产后的利润 以及大宗价格下降<br>23Q1-3 毛利率16.1%，同增3.1pct，净利率6.4%，同增1.4pct</p>\n<p>枣庄项目一期产能预计今年年底开始生产,主要客户是青啤。 — 智能体现在2024了<br>佛山项目预计2026年上半年完成两条产线20亿产能搬迁。<br>主要客户是百威、可口可乐、健力宝、天地壹号、青岛啤酒、屈臣氏等。 </p>\n<p>拟要约收购中粮包装，产业格局有望优化</p>\n<p>公司主要服务的快消品品牌有红牛、飞鹤、旺旺、露露、林家铺子、东鹏特饮、战马、健力宝、安利、百威啤酒、青岛啤酒、燕京啤酒、雪花啤酒、加多宝、可<br>口可乐、百事可乐、元气森林、天地壹号、大窑、林家铺子、麦富迪宠物食品等</p>\n<p>目前我们有澳洲的子公司Jamestrong,还有和中粮包装一起在欧洲投资制罐公司。<br>这些布局已经在公司内部形成了清晰的产品协同、制造协同和市场协同条件。<br> 公司高度重视海外市场增长机会,并适时加大投资布局</p>\n<p> 啤酒行业增长逻辑由“量”向“质”转变，产品结<br>构升级成为主流啤酒厂商核心策略（我国罐装啤酒换算价格为1.16 元&#x2F;100ml，高于瓶装<br>啤酒 0.71 元&#x2F;100ml）。 目前啤酒罐占二片罐需求近 58%，2016-2021 年啤酒罐化率由<br>23.2%提升至26.3%，但是与成熟啤酒市场英国64%、美国67%、韩国74%、以及日<br>本90%的罐化率相比，我国仍有较大提升空间。</p>\n<p>产能扩张落地，盈利结构优化。产能扩张方面，9 月份公司江门工厂建成投产，自动化制罐生产线已进入产能爬坡期，规划年产能为二片罐10 亿罐。公司对外延并购的波尔工厂持续进行产能整合与调整，<br>二片罐产能及产能利用率均有提升空间。随着二片罐业务的盈利增长，公司盈利端对单一客户的依赖程度有望不断下降，盈利结构将优化</p>\n<p>二片罐方面，啤酒罐化率迎来加速提升期，驱动二片罐下游需求增加。二片罐下游需求以啤酒为主，其次为碳酸饮料、茶饮料等，</p>\n<h3 id=\"万华化学\"><a href=\"#万华化学\" class=\"headerlink\" title=\"万华化学\"></a>万华化学</h3><p>精细化学品及新材料板块：精细化学品及新材料众多项目计划于 2023-25 年<br>投产放量，23 年公司尼龙 12、PC、柠檬醛、磷酸铁锂、NMP 等计划投产，24 年 TPU、<br>特种胺、柠檬醛、PC 等产品也会相继投产释放；25 年 PC 进一步扩产，润肤剂、香料<br>及营养品、SAP 水性树脂、抛光垫及抛光液、聚乳酸等产品计划相继投放，板块未来<br>几年有望呈现较高增速。毛利率上，受益宏观修复和高价值产品不断投产，以及公司<br>在精细化工领域的管理能力不断提升，板块毛利率有望稳步提升</p>\n<p>精细化学品及新材料业务多集中在眉山基地和烟台总部。目前烟台基地主要有<br>聚氨酯材料（TPU、ADI）、高性能塑料（尼龙 12、MMA、PMMA、PC）、半导体材料（抛<br>光垫、抛光液等）、香精香料（柠檬醛及衍生物、W 酯）、维生素（VE）等。<br><img src=\"/image-6.png\" alt=\"Alt text\"><br><img src=\"/image-7.png\" alt=\"Alt text\"><br>聚碳酸酯因其优良的介电强度、耐热老化性、绝缘性能、抗冲击性、透光性等优<br>点在电子电器、板材&#x2F;片材&#x2F;薄膜、汽车等行业领域应用广泛</p>\n<p>从万华规划产能投放节奏来看，精细化学品及新材料众多项目在 2023-2025 年<br>放量，公司有望突破 MDI 主业的增长空间，迎来新材料业务端的业绩成长。而其中<br>ADI、工程塑料、SAP 及其他半导体和新能源材料项目布局值得重点关注</p>\n<p>分领域来看，全球聚合 MDI 最大的应用领域是建筑和保温工程，2021 年其应用<br>占比约 49%，其次是家电、胶粘剂&#x2F;密封件&#x2F;涂料、汽车和冷藏集装箱，分别占比 21%、<br>17%、11%和 1%。全球纯 MDI 最大的应用领域为 TPU，占比 40%，氨纶、合成革、微孔<br>弹性体、胶粘剂&#x2F;涂料分别占比 15%、13%、12%和 4%。</p>\n<p>整体来看，MDI 的需求与地产景气度相关度较高。22 年以来国内家电、地产等领<br>域需求较弱，叠加 22 年下半年以来海外经济增速回落下出口需求亦走弱，MDI 价格<br>价差整体回落。当前 MDI 价差处于近十年相对低位，行业景气较低迷</p>\n<p>2023 年前三季度，伴随新装置产能释放，公司各主要业务板块销量同比增长，<br>但下游需求处于恢复阶段，产品价格有所下降，前三季度公司实现营业收入 1326 亿<br>元，同比增长 2%，实现归母净利润 127 亿元，同比下降 7%</p>\n<p>市场认为 MDI 主业与地产周期高度相关，地产萎靡将长期抑制 MDI 需求和公司主业<br>盈利能力。我们认为当下已处于地产行业低谷，验证了公司 MDI 仍有较好盈利水平，<br>且随着地产刺激政策陆续出台以及新能源车等领域的增量需求提振，MDI 需求长期向<br>好。再者，MDI 垄断格局有望进一步强化，公司 MDI 主业长期有着较好的盈利能力。<br>另外，公司有较强的化工生产技术和研发经验积累，布局的多种大品类、高附加值专<br>用化学品具有较大的市场空间，相关多元化布局的潜力未被市场充分认知。</p>\n<p>MDI 为聚氨酯的关键原料，生产流程长、工艺复杂、技术壁垒深厚、规模优<br>势显著，行业长期呈寡头垄断格局，CR3 约 68%。万华 MDI 工艺和产能全球<br>领先，单套产能达 110 万吨系全球最大，装置规模优势突出，投资和成本<br>最低。并且公司持续进行装置改进，宁波改扩建完成后单套产能可达 120<br>万吨，进一步拓宽 MDI 产业护城河。短期地产萎靡、宏观经济疲软致 MDI<br>产业需求低迷，但公司仍有较好的盈利和现金流，已呈修复和增长态势。<br>石化产业平台完善公司原料保障</p>\n<p>高端化、差异化是中国化工产业发展的痛点和明确的产业发展方向，也是<br>公司在精细化学品及新材料板块追求的方向。公司积极开发多种大品类、<br>高附加值专用化学品，在 ADI 聚氨酯材料、工程塑料、SAP 吸水树脂、半导<br>体和新能源材料等领域均有布局，打开了公司的成长上限</p>\n<p>据我们不完全统计，按照 2023 年平均价格计算，如果万华化学现有规划项目全<br>部如期投产，预计 2022-2023 年新项目将新增年营收 353 亿元，2022-2024 年<br>新项目将新增年营收累计 862 亿元，全部项目均投产后将新增年营收累计 1893<br>亿元</p>\n<p>按照 2022年平均价格计算，如果万华化学现有规划项目全部如期投产，预计 2022年将新增营收 208亿元，2022-2023年投产项目将新增年营收累计 542亿元，全部项目均投产后将新增营收 1808亿元。<br><img src=\"/image.png\" alt=\"Alt text\"></p>\n<p>公司依托自身强大的研发实力和产业链一体化优势，全面进入新能源、营养品、高端国产替代等领域，在抛光液和抛光垫等半导体材料、三元材料和磷酸铁锂等电池材料、PBAT 和PLA 等可降解材料POE 等高端聚烯烃材料、柠檬醛衍生物等材料均有规划布局，根据公司新材料投产进度，尼龙12 已经于近期投产，HDI、柠檬醛及衍生物、顺酐、新增PC、磷酸铁锂等预计2023 年相继投产，POE、PLA、NMP、新增PMMA、聚醚胺等预计2024 年相继投产。站在当前时间节点，新材料板块已经进入快速发展期。根据我们的预测，2022-2024 新材料板块主要项目建成投产后，新增年化营业收入贡献能够达到521.45 亿，未来3 年新材料营收保持60%<br>MDI有以下特点 1. 行业集中度高 2.未来2年只有万华扩产 3. 欧洲设备老化 检修影响价格<br><img src=\"/image-1.png\" alt=\"Alt text\"></p>\n<p>聚合MDI 下游应用中47%用于家电冰柜保温材料中，是聚合MDI 下游最大的应用领域，24%用于建筑相关领域，包括建筑板材，建筑涂料等；10%用于胶粘剂中，而胶粘剂下游主要也是用于基建施工，家用包装，建筑制品等领域，和建筑领域息息相关；6%用于汽车领域，受益于汽车轻量化的需求带动，聚氨酯材料在汽车结构配件中的应用愈加广泛</p>\n<p>下游主要用于生<br>产软质聚氨酯泡沫及聚氨酯弹性体、涂料、胶黏剂。TDI 下游 70%用于软泡领域，主要包括海绵类产品，用于坐垫，沙发等家居领域；20%以涂料固化剂的形式用于涂料中，用于建筑、汽车、电子电器等领域；其余 5%用于胶粘剂中，5%用于弹性体<br>中使用，TDI 行业景气度和下游家居、汽车、建筑等传统制造业景气度息息相关。</p>\n<h3 id=\"福耀玻璃\"><a href=\"#福耀玻璃\" class=\"headerlink\" title=\"福耀玻璃\"></a>福耀玻璃</h3><p>。由于 22Q3 和 23Q2 人民币贬值<br>公司分别产生汇兑收益 5.54 亿元、7.18 亿元，而 23Q3 产生汇兑损失 2.64 亿元，若同<br>步剔除汇兑，则 23Q3 公司利润总额同比+35.9%、环比+23.6%，盈利能力恢复较好。</p>\n<p>ASP、新业务、份额三箭齐发，从周期到成长再出发。我们持续看好 Hud+天幕渗透率加<br>速下公司汽车玻璃 Asp 的提升，格局进一步优化下公司海外市场份额的提升，以及铝<br>饰条业务有望迎来反转步入收获期</p>\n<p>铝饰条业务拐点已至即将开启放量周期：SAM OEM 订单投产在即，国内福清、长春工厂投产逐步爬坡</p>\n<p>福耀在全景天幕市场的占<br>有率达60%以上，主要配套车型包括路虎极光、吉利星瑞、东风岚图、蔚来EC6、福特<br>mustang-e、路虎 I-PACE等。</p>\n<p>着汽车智能化程度不断提升，预计科<br>技功能的渗透率从2021年的5%提升至2026年的30%以上，随着技术的进步，HUD和其<br>他科技的成本逐渐下降，而天幕处于发展初期，随着科技含量的提升，价格也将持续<br>增长。在多方因素的作用下，预计2026年汽车玻璃的市场规模将达421.1亿元，年复<br>合增长率为14.3%</p>\n<p>三季度公司天幕玻璃、HUD 玻璃等高附加<br>值产品占比由 5.7%提升至 43.8%。Q3 天然气价格仍处于高位，纯<br>碱、海运费等成本项目呈现企稳回落趋势，公司综合毛利率为<br>34.9%，环比增长2.3pct，修复明显。</p>\n<p>8 月 30 日公司公<br>告将对美国福耀增加投资 6.5 亿美元，其中 3 亿用于投资建设镀膜、<br>钢化夹层边窗生产线；3.5 亿用于建设一窑两线用于生产浮法玻璃、<br>以及 4 条太阳能背板玻璃加工线和配套厂房。同时，公司在郑州规划<br>500 亩左右用地，用于未来发展所需。公司新一轮扩产周期开启，以应对全球化的深入以及玻璃量价齐升的需求。</p>\n<p>海外业务：三季度SAM收入环比降低15%，亏损环比扩大<br>360万欧元，主要系欧洲汽车业受供应链扰动影响+天然气与电价格上涨。</p>\n<p>汽玻市场空间扩容，天幕玻璃、调光玻璃、HUD 显示玻璃等高附加值汽玻<br>增量加速兑现。根据测算，2020 年天幕玻璃在新能源车中渗透率约 16.4%，<br>2021 年增长至 23.5%，天幕玻璃渗透率快速提升</p>\n<p>铝饰条业务，德国 SAM 整合接近尾声，国内铝饰条产能布局稳步推进。<br>目前 SAM 已从原 11 个工厂整合到 2 个生产工厂+1 个备用工厂，硬件改<br>造到位，新 ERP 系统上线，虽然当前还处于亏损状态但在逐步向好。国<br>内产能方面，长春工厂两条铝饰条产线已完成建设，预计 2023 年陆续会<br>有产品交付；此外福清第二条铝饰条产线的扩建工作正在进行，苏州工<br>厂计划 2023 年开始建设，预计到 2023 年底或 2024 年初，国内会形成 6<br>条铝饰条生产线的产业布局，成为未来福耀营收的新增长极</p>\n<p>2021 年，福耀的全景<br>天幕玻璃、可调光玻璃、抬头显示玻璃、镀膜可加热玻璃等高附加值产品占比持续提升，同比提升 3.31 个百分点，价值得以体现。据测算，福耀 2021 年汽玻 ASP 为<br>181 元&#x2F;平米，较 2020 年提升 7 元&#x2F;平米。而 2022 年 H1，福耀汽玻 ASP 预期同比增<br>长 11.6%，单价达到 200 元&#x2F;平米左右</p>\n<p>性价比方面，全景天幕为不可开启式设计，摒弃了<br>滑动天窗所需的中控驱动、排水系统等复杂结构件，同时避免出现失控、漏水等现<br>象，较传统天窗有更高的性价比。</p>\n<p>幕玻璃的夹层特性，叠加福耀生产关的严格把控，并不会降低车辆安全性能。福<br>耀生产的全景天幕均采用夹层玻璃，其中夹层材料 PVB 膜具有高粘性特点，比钢化<br>玻璃具有更高的抗冲击强度。并且在受到外力冲击时，能有效防止玻璃碎片飞溅。<br>生产方面，福耀进行严格的质量测试，能够保证天幕玻璃在静止状态下可以承受<br>40MPa 的应力</p>\n<p><img src=\"/image-2.png\" alt=\"Alt text\"></p>\n<p>福耀成功将镀膜隔热、智能调光、LOW-E 隔热三大技术集成于超大玻璃天<br>幕上，推出“福耀智能全景天幕”，在实现超大视野享受与极佳采光效果的同时，还<br>能调节光线透过，防晒隔热，减少车辆空调使用能耗，并具备隐私保护的效果，为<br>智能座舱的发展做出了贡献。</p>\n<p>福耀通过特殊材料的印刷工艺，可以在天幕上个性化定制<br>图案，灯光在玻璃内传导后将图案反射至车内。另外，氛围灯还能与其他设备连接，<br>随着音乐节奏变换。在节能环保方面，福耀积极推进太阳能天幕的研发。全景天幕<br>面积大采光好，如果利用天幕将太阳能转化为电能，为车载电器提供电源，可以降<br>低油耗。福耀提出并设计了太阳能天幕的工作原理，通过在玻璃里加入太阳能电池<br>组实现能量转换，在未来值得关注。</p>\n<p>HUD 加速迭代，W-HUD 成为当前市场主流，AR-HUD 蓄势待发<br>汽车网联化是未来发展趋势，福耀布局智能玻璃天线</p>\n<p><code>持续关注铝条饰品的放量</code></p>\n<h3 id=\"安踏\"><a href=\"#安踏\" class=\"headerlink\" title=\"安踏\"></a>安踏</h3><p>2016 年，合资引入 DESCENTE，定位中国高端体育服装，涉及滑雪、综训、跑步等，DESCENTE<br>已经成为品牌矩阵中新的增长点；2017 年，收购 Kolon Sport 中国经营权，定位为专<br>业户外（登山）运动，2022H1 流水增速超过 50%；2018 年，与多方财团斥资 371<br>亿元收购了 Amer  Sports ，并坐拥旗下的顶级户外及运动品牌 ARC’TERYX 、<br>SALOMON、WILSON 等，覆盖网球、羽毛球、高尔夫、高山滑雪、越野滑雪、滑板、<br>自行车、越野跑装备、徒步装备及潜水等多种运动项目。</p>\n<h3 id=\"晨光生物\"><a href=\"#晨光生物\" class=\"headerlink\" title=\"晨光生物\"></a>晨光生物</h3><p>赞比亚原料基地将落地叶黄素生产线，明年有望销售叶黄素产品。由于国内万寿菊种植相较国外成本优势逐渐减弱，明年公司或将优先发展万寿菊种植面积。赞比亚土地和人工成本低廉，就地生产销售将有力拉高<br>叶黄素利润水平。</p>\n<p>甜菊糖：受益无糖、减糖产品发展，市场潜力巨大。公司上线新工艺，得率逐渐爬坡至设计水平，同时取得的副产物绿原酸能够摊薄成本。今年甜叶菊产量同比增长，目前采购工作正在进行，预计明年销量能够实现增长。</p>\n<p>，2019 年初晨光生物完成对邯郸金诺药业的收购，这标志着晨光生物开始进军中药行业。公司目前已有板蓝根颗粒、牛黄解毒片、桑菊感冒颗粒等等多个药品注册批准证书，并开展了胃灵颗粒、桑菊感冒颗粒、牛黄解毒片等多个中药产品质量标准提升研究项目。目前公司中药业务规模小，长期看中药集采政策的持续推进与优化，有利于公司发挥低成本工业化生产优势，扩大中药业务规模</p>\n<p> 同时在生产过程中可以充分去除植物原料中的农残等有害成分，相比香辛<br>植物原料，在食品安全、食品标准化、成本控制有着无可比拟的优势</p>\n<p>综合各细项来看：1）收入端：全年收入端其他植物提取物在低基数与环境转好背景下收入增速最快，其次为稳定增长的辣椒红、辣椒精，叶黄素受销售节奏影响下滑，整体全年植提业务将呈现稳定增长趋<br>势。预计 2024-2025 年叶黄素业务恢复正常增长轨道，同时公司不断充产品矩阵，收入增长或提速。2）利润端：全年来看，较高毛利水平的<br>饲料级叶黄素在收入中占比降低，业务结构变化导致整体毛利率降低。</p>\n<p>但境外各地的法律、税收、外汇管理、人文环境、中外政府关系等方面存在较大差异，如 2023 年 8 月美国国土安全部将<br>公司列入“维吾尔强迫劳动预防法”的实体清单中，</p>\n<p>保健食品业务过去的利润率呈现上升趋势,去年首次实现盈亏平衡,今年有望实现正向利润贡献,未来会随着规模效应提升、客户结构改善,盈利能力保持提升趋势</p>\n<p>三季度业绩增速较上半年有所回落,主要原因是:<br>饲料级叶黄素及棉籽类业务收入同比下降;棉籽类业务套期保值持有的期货合约公允价值变动影响了业务季度间波动。<br> 叶黄素主要应用于饲料添加剂领域,小部分用于大健康领域。<br>从需求端来看,饲料添加剂领域的客户需求稳定,大健康领域的需求增长较快。<br>现阶段叶黄素的价格受原材料供应量影响更大,需求侧对产品价格的影响较小。<br>7</p>\n<h3 id=\"伊利股份\"><a href=\"#伊利股份\" class=\"headerlink\" title=\"伊利股份\"></a>伊利股份</h3><p>毛利率稳中有升，费用率拖累盈利表现。受销售费用率拖累，公司 Q3 扣非归母净利率 5.6%,同比下滑 3.3pct。22Q3 毛利率为 30.8%（+0.6pct），主要系公司控制买赠促销力度维持价盘稳<br>定，此外生鲜乳价格 Q3 同比小幅下行。22Q3 销售费用率18.8%(+3.3pct)，主要系液奶事业部费用率提升以及部分综艺因疫情影响延期至三季度进行播放 </p>\n<p>持续夯实海外供应链，并以冰淇淋等品类摸索东南亚市场本土化打法。当前公司一<br>方面，收购 Westland 等企业强化奶源布局，另一方面，通过印尼建厂、收购泰国冰<br>淇淋公司等方式，以奶源依赖度相对较低、且适合东南亚当地消费发展阶段的品类，<br>进行海外市场的本土化摸索，预计在中长期有望逐步贡献增量</p>\n<h3 id=\"格力电器\"><a href=\"#格力电器\" class=\"headerlink\" title=\"格力电器\"></a>格力电器</h3><p>安为比亚迪新能源车热管理系统的稳定供应商，核心零部件已突破技术壁垒。盾安目<br>前已具备为各大新能源车企以及零部件厂商提供高质量产品的能力。目前盾安已与主流<br>新能源汽车主机厂（比亚迪、理想、蔚来、一汽等）、电池企业（宁德时代、微宏动力<br>等）、商用车企（宇通、中车等）建立良好合作关系，有望在新能源领域加速产业布局。<br>格力受让盾安股权之后，其控股子公司格力钛未来有望与盾安开展业务协同，拓展客户，<br>提升产能、充分发挥资金和产业的规模效应，扩大市场份额，提升格力在新能源领域的<br>市场优势，实现业务多元化。</p>\n<h3 id=\"乐普医疗\"><a href=\"#乐普医疗\" class=\"headerlink\" title=\"乐普医疗\"></a>乐普医疗</h3><p>城乡居民疾病死亡构成比中心血管疾病占首位，<br>2020 年农村、城市心血管病死亡率分别为每十万人 135.88、126.91 人，随着老龄化<br>加速以及精准诊治推及，行业需求处于上行趋势，存在大量未被满足的临床需求，<br>创新优效的药物和医疗器械潜在市场空间巨大。</p>\n<p>药品集采后公司加大器械创新投入，研发强度由此前的 6%左右提升至<br>2021 年 10%左右，其中 75%以上投入到器械中，以医疗器械收入作为分母则研发强度<br>超 15%。</p>\n<p>随着老龄化加剧、基层市场扩容、集采降价驱动等，对标发达国家的<br>人均 PCI 例数仍有 2 倍的增长空间，有望达到 300 万例 PCI&#x2F;年</p>\n<p>2023 年 Q1-Q3 公司研发<br>费用 6.7 亿元（+0.46%），研发费用率 10.78%（+2.13pct）。公司可降解 PFO 封<br>堵器、半自动 AED 已获批上市，脉冲声波球囊、射频房间隔穿刺系统处于上<br>市前发补阶段，甘精胰岛素预计较快获批，司美格鲁肽准备申报 IND。公司投<br>资的民为生物 GLP-1 三靶点候选药物 101 I 期临床入组基本结束，预计年底<br>前获正式报告，并于 2024 年 Q1 开始 II 期临床。此外，公司积极加速向消费<br>业务转型，目前已在皮肤科、眼科领域有多项产品布局，公司收入中医保来源<br>占比已低于 45%（剔除集采后&lt;25%）</p>\n<p>。分业务看，器械板块收入 28.6 亿元<br>（-34%），主要系去年应急业务高基数影响，其中心血管植介入创新产品组合营<br>收同比增长 6.1%，外科麻醉业务同比增长 6.9%，报告期内公司下属公司上海<br>形状记忆合金材料有限公司自主研发的 MemoSorb® 生物可降解卵圆孔未闭<br>封堵器正式获得国家药品监督管理局（NMPA）注册批准。药品板块 Q1-3同比<br>下降 6%，单 Q3季度收入基本持平，目前公司西格列汀片、恩格列净片、甲磺<br>酸多沙唑嗪缓释片、瑞舒伐他汀钙片已获批上市。医疗服务及健康管理板块收<br>入 9.8 亿元，公司基于乐普云平台，聚焦医疗级心脏监测、居家健康监 测及智<br>慧康复护理三大服务，为各级医院和个人消费者提供各类生命体征监测产品和<br>服务，其中心电检测类产品依托人工智能 AI-ECG Platform，可远程提供长程动<br>态心电监测服务。同时公司在消费医疗开展战略布局，在皮肤科、眼科、齿科<br>均已有产品面世，有望贡献新增长点。</p>\n<h3 id=\"制冷\"><a href=\"#制冷\" class=\"headerlink\" title=\"制冷\"></a>制冷</h3><p>，我国二代制冷剂作为非原料的产量和消费量已于2013年被冻结，2020年配额削减35%，2025年配额削减67.5%，2040<br>年以后将完全淘汰。而三代制冷剂2024 年冻结HFCs的消费和生产规模，自2029年才开始削减，因此未来较长一段时间，三代制冷剂将成为主</p>\n<p>电子氟化液在半导体领域主要用作清洗剂、脱水剂、光刻机控温液以及<br>芯片封装工序的检漏液等，目前大部分市场被海外企业垄断，其中，3M<br>电子氟化液产品占据了全球芯片干法蚀刻设备制冷剂90%的市场份额。<br>考虑到全球对 PFAS 物质的监管正在加速以及环保因素，3M 决定到<br>2025  年底前退出包括电子氟化液在内的PFAS 产品，电子级氟化液竞<br>争格局有望重塑。国内新宙邦、巨化股份等企业已经布局氟化液相关产<br>能，其中新宙邦 Boreaf 电子氟化液系列产品可用于半导体  Chiller  冷<br>却、精密清洗、气相焊接、电子检漏等领域。相关产品采用绿色清洁的<br>工艺路线，通过了海外客户的认证，生产产品符合当地的法规要求，已<br>供应全球半导体主流制造商，有望承接3M 氟化液市场。</p>\n<p>随着数据中心规模和单机功率的不断提升，浸没式液<br>冷数据中心占比有望快速提升。氟化液作为一种高效可靠的冷却液，需<br>求未来有望较快增长</p>\n<p>化液广泛应用于半导体加工环节。氟化液在芯片制程工艺中被广泛应用，炉管、<br>光刻、刻蚀及封装测试环节都需要使用氟化液作为清洗剂、脱水剂、光刻机控温液以及<br>芯片封装工序的检漏液等<br>氟化液可作为半导体湿法清洗的清洗剂</p>\n<p>氟化液在干法刻蚀环节用做控温液，可帮助提升芯片制程中的整体良率，缩短芯片<br>研发周期。</p>\n<p>全氟聚醚润滑脂广泛用于航空航天、核工业、化工、机械工业等领域。全氟聚醚润<br>滑脂常用于高温、高负载、化学腐蚀环境中的轴承以及要求终身润滑的部件，具有极佳<br>的化学惰性、耐久性和低挥发性，能够在极端高温条件下保持润滑性能，一般可耐受高<br>达300 摄氏度的温度。对酸、碱、溶剂等具有良好的抵抗，适用于恶劣化学环境下的润<br>滑需求。</p>\n<h3 id=\"巨化股份\"><a href=\"#巨化股份\" class=\"headerlink\" title=\"巨化股份\"></a>巨化股份</h3><p>由于市场需求疲弱、产品供<br>给能力增加影响，公司主要产品市场竞争加剧，产品均价同比出现较大幅度下降，<br>且三季度沿袭下降，但制冷剂、石化材料、基础化工产品均价环比企稳。前三季度<br>公司综合毛利率为12.87%，同比下降5.89 pct。</p>\n<p>三制冷剂价格稳步上涨是大概率事件，三代制冷剂行业将迎来10年景气周期，这是巨化第一增长曲线</p>\n<p> 有三代制冷剂利润后，巨化就会有更多的资源投入研发。高性能、高附加值氟化工高端产品将是巨化未来第二增长曲线</p>\n<p> 全球氟化工有限公司在阿联酋氟2万吨134a已经基本建成。巨化拥有三代制冷剂全球最大份额，全球化也许是巨化未来第三增长曲线</p>\n<p> 碳交易。2022年欧盟平均碳价预计为88欧元&#x2F;吨，折合人民币650元。目前国内碳交易一吨58元，未来有十年有10-20倍的上涨空间。三代制冷剂巨化配额换算为碳当量估计5亿吨，三美2.7亿。这是未来的一个想象空间</p>\n<p> 混改。8月份巨化股份控股母公司“巨化集团混改资产评估项目”中标公示，22年是混改的收官之年，以此推测，巨化集团混改正进行中</p>\n<p>氟化液：经济社会数字化转型背景下的节能减排最优解<br>冷却系统能耗占比为 43%，浸没式液冷技术成为必然选择</p>\n<p>相比于传统冷却方式，浸没式液体冷却的优势显著。（1）节能降耗，相对于传统风冷数据中心能耗降低 90%  ～  95%，降低  PUE  可大幅降低机房的运营成本。<br>（2）低噪无污染，无需使用风扇，最大限度减少噪声的污染，同时无需担心空气中的灰尘对高洁净度要求器件的干扰。（3）节约空间，利用浸没式液冷的数据中心冷却系统所占的空间体积可减小至风冷系统的  1  &#x2F;3。（ 4）换热能力强，能够满足超高热流密度器件的散热需</p>\n<p>“巨芯冷却液”实现国产高性能氟化液突破，迈入产业化阶段<br>目前公司间接控股 95%的浙江创氟高科新材料有限公司计划投资 5.1 亿元规划建设 5000t&#x2F;a<br>浸没式冷却液项目，产品适用于大数据中心换热所需的冷却介质及尖端产业、电子流体，计划三季度投运。其中一期 1000 吨&#x2F;年项目已于 2022 年上半年基本建成。<br>目前，数据中心浸没式冷却液总市场规模达到3 万吨，2025 年有望达到 10 万吨级，<br>看好公司未来氟化液业务成长</p>\n<p>综上，我们坚定看好三代制冷剂价格回暖带来的业绩增量以及巨化氟氯联动带<br>来的成本优势。同时公司布局含氟新材料，高附加值拉升公司毛利率中枢。预计公<br>司 2022-2024 年归母净利润分别为 19.25 、26.31 、32.44 亿元，同比增速为<br>+73.6%、+36.6%、+23.3%。</p>\n<p>年报看下应该会超出预期。</p>\n<p>配额制定进入尾声，制冷剂行业已进入拐点区间</p>\n<p>三代制冷剂配额争夺将于2 0 2 2 年末结束，2 0 2 4 - 2 0 2 9 年的生产配额将依据2 0 2 0 - 2 0 2 2 年间各公司三代制冷剂销售<br>情况进行分配。</p>\n<h3 id=\"半导体\"><a href=\"#半导体\" class=\"headerlink\" title=\"半导体\"></a>半导体</h3><p>湿法刻蚀是较为原始的刻蚀技术，利用溶液与薄膜的化学反应去除薄膜未被保护<br>掩模覆盖的部分，从而达到刻蚀的目的。其反应产物必须是气体或可溶于刻蚀剂<br>的物质，否则会出现反应物沉淀的问题，影响刻蚀的正常进行。通常，使用湿法<br>刻蚀处理的材料包括硅，铝和二氧化硅等。</p>\n<p>随着集成电路的发展，湿法刻蚀呈现出以下局限：不能运用 3 微米以下的图形；<br>湿法刻蚀为各向同性，容易导致刻蚀图形变形；液体化学品潜在的毒性和污染；<br>需要额外的冲洗和干燥步骤等</p>\n<p>干法刻蚀技术的出现解决了湿法刻蚀面临的难题。干法刻蚀使用气体作为主要刻<br>蚀材料，不需要液体化学品冲洗。干法刻蚀主要分为等离子刻蚀，离子溅射刻蚀，<br>反应离子刻蚀三种，运用在不同的工艺步骤中</p>\n<p> 等离子体刻蚀是将刻蚀气体电离，产生带电离子，分子，电子以及化学活性很<br>强的原子（分子）团，然后原子（分子）团会与待刻蚀材料反应，生成具有挥<br>发性的物质，并被真空设备抽气排出</p>\n<h3 id=\"潍柴动力\"><a href=\"#潍柴动力\" class=\"headerlink\" title=\"潍柴动力\"></a>潍柴动力</h3><p>发动机销售36.7万台，同比增长29%，其中500马力以上国内重卡发动机市场占有率达到31.7%，同比提高19.7个百分点，盈利能力大幅增强；出口销量3.9万台，同比增长52%；变速箱销售42.5万台，同比增长33%；出口销量2.2万台，同比增长93%；车桥销售36.1万根，同比增长31%。战略高端产品继续发力，大缸径发动机实现收入人民币17.1亿元，同比增长77%，高端液压实现国内收入人民币5.0亿元，同比增长46%。商用车业务上半年累计销售重型卡车6.1万辆，同比增长58%；出口销量2.6万辆，同比增长97%；其中天然气产品累计销量突破1万辆，同比增长241%，市场份额再提升2.8%。潍柴雷沃大马力智能拖拉机、大喂入量谷物收获机械、复式播种机继续走俏市场，销量保持全国领先。智能物流业务实现销售收入56亿欧元，同比增长2%。工业车辆和服务业务利润收入显著提高，经营业绩远超预期。</p>\n<p>科技创新驱动高质量发展，行业领先地位持续巩固。建立针对各细分市场的产品研发体系，提升全流程研发能力，更全面、更快速地满足客户需求。轻型动力产品动力性、可靠性及经济性全面提升，持续强化产品竞争力，赢得市场良好口碑。大马力高端产品不断发力，WP14H、WP14T、WP15H、WP15T、WP15NG等产品在干线物流、绿通冷链、快递快运、港口运输、危化品运输等市场树立了行业新标杆，成为客户首选动力。高端大缸径发动机在数据中心、矿用应急电源、矿卡等高端市场，配套量节节攀升，成为企业新的增长点，产品结构调整成效显著。动力总成差异化优势显著，核心竞争力不断凸显。新一代高热效率动力总成产品高可靠性和高传动效率优势明显，持续引领中国大马力重卡节能新时代。重磅发布WP7H挖掘机液压动力总成、WP15H挖掘机液压动力总成，动力强劲、可靠性高，成为广大用户的“掘”佳利器。WP17T发动机+林德液压动力总成首次批量配套80吨级挖掘机，性能可靠，油耗对比同吨位设备显著降低，成为新一代矿山王者。大马力智能CVT拖拉机批量投放市场，快速建立起高端农业装备的核心竞争优势，有力推动我国农业机械行业转型升级。</p>\n<p>。燃料电池取得全球领先性突破，引领行业多元能源技术发展。发布全球首款大功率金属支撑商业化固体氧化物燃料电池SOFC商业化产品，热电联产效率高达92.55%，打造全球最高纪录，为分布式能源和微电网提供绿色低碳解决方案。氢燃料电池业务持续引领行业发展，装配潍柴氢燃料电池发动机的公交车累计行驶里程超过3000万公里，产品寿命达3万小时。</p>\n<p>业务结构和盈利能力不断改善</p>\n<p>积极拓展海外市场及战略新兴业务：1）海外市场开拓加速，22Q1-3 公司发动机&#x2F;重卡整车出口分别同比+40%&#x2F;+77%，其中 Q3 出口分别同比+60%&#x2F;+125%，出口对公司的贡献逐渐放大。2）大缸径发动机增长强劲，22Q1-3 实现收入同比+75%，销量超 5000 台，同比+40%，单价继续提升，其中 Q3 实现收入同比+84%。3）上半年雷沃农机实现销量 7.6万台，同比+28%。8 月 30 日发布公告，拟对潍柴雷沃分拆上市，有利于协同本部发展，做强做大高端农业装备业务</p>\n<p>1）受订单周期及欧美高通胀带来的供应链压力影响，凯傲 22Q3 出现亏损近 1 亿欧元，若剔除该影响，Q3 公司净利润同比增长超 10%，预计 Q4 起凯傲盈利能力将逐渐好转。中长期来看，到 2025年我国智能物流行业规模有望达万亿，5 年 CAGR 为 10.9%，前景广阔，凯傲+德马泰克的供应链整体解决方案有望助力公司持续增长。2）前瞻布局氢燃料电池产业链，持续积极推进新能源战略落地，有望在未来取得先发优势大缸径发动机应用领域广泛，<br>包括发电设备、5G 大型数据中心备用电源等工业动力，远洋捕捞、公务用艇及内河航运等船舶动力，以及其他大型机械等领域。</p>\n<p>目前重卡行业运行态势 据中汽协及第一商用车网数据显示,1-10月份重卡行业累计销售78.8万辆,同比增长38%。<br>其中国内部分细分市场呈现恢复态势,海外市场需求饱满,出口销量继续增长。<br>长期来看,随着经济持续回升向好及公路运输效率不断提升,重卡行业将迎来良好发展机遇</p>\n<h3 id=\"安琪酵母\"><a href=\"#安琪酵母\" class=\"headerlink\" title=\"安琪酵母\"></a>安琪酵母</h3><p>中式面点发酵之外，我国<br>烘焙行业的扩容拉动酵母制品需求的增长。与发达国家相比，YE在我国食品鲜味剂中的<br>渗透率还有较大提升空间。而酶制剂、酵母替代蛋白等精深加工产品打开高值化蓝海</p>\n<p>国内酵母业务需求刚性，竞争格局稳定，公司具备市场话语权，新一轮扩产扩大规<br>模领先优势，出海路径逐步清晰；提价、水解糖替代多措并举对冲成本压力，今明<br>年效果显现，叠加糖蜜价格稳中趋降，未来盈利能力更为稳健；立足酵母同心多元<br>化发展，在生物发酵、新型包材、动植物营养领域培育新增长曲线。</p>\n<p>发酵蛋白：精深加工打开高值化蓝海</p>\n<p>酶制剂是酵母产业高附加值延伸的重要方向。酶制剂是微生物发酵产生的具有催<br>化功能的蛋白质，具有催化效率高、专一性较高、作用条件温和、能耗较低、化学污<br>染少等优点，其应用领域遍布饮料（啤酒、葡萄酒、白酒、果汁等）、食品（面包烘<br>焙、制糖、乳品等）、纺织、饲料、洗涤剂、造纸、皮革、医药以及能源开发、环境<br>保护等方面</p>\n<p> 在酵母衍生品领域，酵母提取物 YE 在食品鲜味剂中的渗透率还有较大<br> YE 是天然的鲜味剂，顺应健康、营养、美味的消费需求，正在食品加工领<br>域替代味精，具备发展潜力但 YE 在鲜味剂中的占比差别较大，速冻食品<br>高达 80.2%，调味品则只有 22.5%左右。横向比较,日本和西欧调味品 YE 使用量在鲜<br>味剂中占比分别为 83.2%和 45.9%。受益于国内消费升级和食品品质进化迭代，国内<br>YE 市渗透率仍有较大的成长空间</p>\n<p>为拓展海外业务，公司同步优化组织架构。过去每个部门都涉及海外业务，现在<br>所有海外业务都按区域划分到 6 个海外事业部。每个事业部负责所有产品在当地市场<br>的业务。此外，公司在新加坡、墨西哥、美国、德国设立，加速融入本地市场。 </p>\n<p>树立大食物观，向酵母要蛋白，商业推广已有初步成果。微生物蛋白将成为人<br>们补充蛋白的新选择，酵母蛋白的发展值得期待。酵母蛋白含有人体必需的 8 种氨基<br>酸，属于全价蛋白，营养丰富。除此之外，酵母蛋白的消化利用率更高。植物蛋白的<br>消化利用率是 80%，肉类蛋白为 90%，酵母蛋白则为 95%左右。公司已实现利用酵<br>母蛋白替代纯植物蛋白制成的素肉中 50%的植物蛋白，使得素肉制品豆腥味减弱、<br>肉味更浓郁，其质感及纹里更接近肉。公司酵母蛋白在市场上供不应求，预计今年产<br>量将突破 1 万吨。</p>\n<h3 id=\"中科三环\"><a href=\"#中科三环\" class=\"headerlink\" title=\"中科三环\"></a>中科三环</h3><p>受益下游新能源领域高景气，磁材产销量两旺拉动业绩高增。下游新能源车、变频家<br>电、节能电梯、风力发电高景气拉动稀土永磁材料需求大幅增长，2021 年以来公司磁<br>材产品订单大增，下属工厂接近满负荷运行，产能利用率与产销量大幅增长</p>\n<p>稀土磁材行业壁垒日益提升。伴随终端应用高效率、小型化场景需求提升，尤其高端<br>EV&#x2F;变频空调&#x2F;消费电子等产品对磁材热稳定性、高磁能积提出更高要求，客户认证、工<br>艺难度、投资强度等方面要求愈发苛刻，我们认为，稀土磁材行业具有较高的新进入者<br>壁垒，主要存在四点：<br>✓ 壁垒一：工艺流程长达 16 道环节，产品一致性、稳定性需要长期经验积累。<br>✓ 壁垒二：客户深度绑定（认证期 2-3 年），客户不会轻易更换供应商。<br>✓ 壁垒三：项目周期长达 2-3 年，时间壁垒高。<br>✓ 壁垒四：投资强度大，万吨级投资 10 亿元+，高端产品 30-40 亿元。</p>\n<h3 id=\"中国核电\"><a href=\"#中国核电\" class=\"headerlink\" title=\"中国核电\"></a>中国核电</h3><p>我国四代核技术世界领先，2021 年 5 月，世界首座钍基熔盐堆—<br>—甘肃武威钍盐核反应堆主体工程基本完工；同年 12 月，世界首座高温气<br>冷堆——石岛湾核电站 1 号反应堆首次并网成功</p>\n<h3 id=\"今天国际\"><a href=\"#今天国际\" class=\"headerlink\" title=\"今天国际\"></a>今天国际</h3><p>国外自动化物流系统提供商在<br>高端物流软硬件技术和行业经验方面具有优势，在一些高端自动化物流系统项目中占有一<br>定优势。 国内企业在与国外先进的自动化物流系统提供商竞争中不断发展，推出具有自<br>主知识产权自动化物流产品，凭借较好的本地化服务优势，在一些项目中具备了较强的竞<br>争优势，并成功进入高端项目领域。</p>\n<p>上述 20 多家自动化物流系统提供商在各个应用领域各有优势。如，在烟草行业，今天国<br>际具有较强的竞争优势；在医药行业，日本大福，美国德马泰克等国外企业具有较强的竞<br>争优势，国内企业起院在这一行业也具有竞争力；在机场方面，西门子、范德兰德等国外<br>物流系统集成商具有较强优势</p>\n<h3 id=\"思摩尔国际\"><a href=\"#思摩尔国际\" class=\"headerlink\" title=\"思摩尔国际\"></a>思摩尔国际</h3><p>分业务来看，虽然思摩尔国际的业务收入集中来自于新型烟草行业，但若把思<br>摩尔国际就此定义为传统的电子烟制造商将有失偏颇，原因有三：（1）公司的核心<br>雾化技术在特殊雾化设备，如医疗、美容甚至航空等领域有很强的可迁移性；（2）<br>思摩尔近年以通过专利申请、研发投入等布局医疗、美容及大麻雾化领域并取得了<br>一定进展；（3）据弗若斯特沙利文数据，全球特殊雾化市场增速亮眼，目前市场规<br>模为 11 亿美元，预计 2022 年至 2026 年将以 46%的复合增速发展。长期来看，我们<br>认为思摩尔国际发展更趋向为雾化技术平台型企业，大麻雾化、医疗雾化等特殊用<br>途的电子雾化设备制造将支撑公司第二增长曲线加速打开。</p>\n<h3 id=\"中炬高新\"><a href=\"#中炬高新\" class=\"headerlink\" title=\"中炬高新\"></a>中炬高新</h3><p>中炬高新董事会和管理层完成更替，品类和区域扩展空间广阔，中期净利润率目标<br>15%左右。目前火炬集团及一致行动人目前持股19.93%，公司控制权基本确认。10 月<br>中市场化招聘公司总经理及其他高管到位，华润雪花背景余向阳为总经理。11 月初内<br>外部全员竞聘中高层职务，美味鲜现有管理层稳定。高层落地后，首要工作是梳理内<br>部工作流程和提升内部工作效率，强调优胜劣汰和提质增效。后续多重催化剂可期，<br>1H24 股权激励有望落地，目标3 年内引入战投，房地产业务函待剥离，诉讼预计负债<br>已经在 2022 至 1H23 报表中计提。</p>\n<p>目前中炬高新美味鲜在酱油和蚝油市占率仅 3%，<br>体量提升空间较大；鸡精鸡粉竞争优势较强，份额进入前三；料酒和醋体量预期过<br>亿，会持续发展支持。南部和东部五省是中炬高新美味鲜的主要销售区域，未来华东<br>和北部区域的扩张将成为重点。受到原材料和产能利用率影响，公司利润率压力较<br>大，新领导班子重视提升内部工作效率，费用率有望下行，公司中期净利率目标 15%<br>左右。</p>\n<p>目前火锅底料是复合调味料最大的子行业，头部企业市占率仅 11%，能够容纳足够多<br>的企业，是布局复合调味料的重要赛道之一。蚝油子行业海天味业的优势得天独厚，<br>长期仍为行业龙头，中炬高新 2022 年蚝油收入近 3 个亿。鸡精鸡粉份额基本被外资<br>品牌垄断，有机会做少量的国产替代。其他中式调味料均有布局的机会，如川式调味<br>料中的酸菜鱼调料、小龙虾调料等</p>\n<p>厨邦酱油采用南派酿造工艺，用料更高级。①酿造工艺：高盐稀态发酵工</p>\n<p>艺生产周期长且成品品质优良，现为酱油行业主流酿造工艺；②原材料：</p>\n<p>厨邦酱油原材料为 100%大豆，竞品酱油原材料为大豆+豆粕的组合。油脂含量高，口感更醇厚，且价格比豆粕每斤高 20%以上；③曲种：厨邦</p>\n<p>主要采用高产量单菌种，发酵后可强化氨基酸态氮指标。综合对比，厨邦</p>\n<p>酱油使用的原材料更高级，酱油品质更高。</p>\n<p>厨邦酱油价格位于中等水平，性价比优势突出。厨邦酱油在保证口感美味</p>\n<p>品质上乘的同时，价格相对实惠。对比同类高鲜产品，厨邦酱油价格处于</p>\n<p>中位，厨邦味极鲜价格为 9.87 元&#x2F;500ml，相比同等氨基酸态氮含量的李</p>\n<p>锦记味极鲜&#x2F;加加味极鲜&#x2F;欣和六月鲜特级酱油分别便宜 0.3%&#x2F;6.9%&#x2F;37.5%。</p>\n<p>对比零添加产品，高鲜酱油氨基酸态氮含量更高，价格更低。综合来看，</p>\n<p>厨邦酱油拥有明显的高性价比</p>\n<p>鸡精粉：目前鸡精粉行业属于成熟发展阶段，由外资品牌占据主要市场，</p>\n<p>厨邦位于行业第三。公司 2012 年推出鸡精粉，相比竞品，厨邦鸡精粉总</p>\n<p>氮含量更高，鲜味更足，同时鸡精污染物三氯丙醇（3-MCPD）含量更低，</p>\n<p>产品安全健康。鸡精粉主要在餐饮渠道销售，2021 年随着餐饮端需求逐渐</p>\n<p>恢复，公司鸡精粉营收同比提升 10.5%</p>\n<p>海天定位中低端餐饮，产品主要应用在热菜领域，海天通过高性价</p>\n<p>比实现餐饮渗透和高周转，目前海天餐饮渠道占比 60%，在中低端市场形成了</p>\n<p>无法撼动的规模优势</p>\n<p>对比第二梯队其他参与者：千禾味业餐饮占比约 5%，加加食品餐饮布局处于</p>\n<p>起步阶段，餐饮占比仅为 2%。对比之下，公司餐饮渠道占比 25%，叠加拥有完</p>\n<p>善的产品矩阵&amp;高性价比优势，在第二梯队中具备突围餐饮渠道的基础</p>\n<p>差异化+常规化措施并行，有望实现餐饮渠道突围。公司重视餐饮渠道的开拓，目</p>\n<p>前主要合作品牌包括西贝莜面村和海底捞，年销售额在千万级别。对标龙头海天味业餐</p>\n<p>饮渠道占比约 60%的水平，长期看公司餐饮渠道占比仍有较大提升空间。</p>\n<p>差异化措施：以凉菜切入餐饮渠道+推进餐批旗舰店建设</p>\n<p>常规化措施：大包装产品&amp;一站式采购+经销商扶持+厨师训练营</p>\n<p>2021 年公司较海天扣非归母净利率低 11.7%，核心</p>\n<p>差异在管理费用率，2012-2021 年平均管理费用率中炬约为海天的 2.4 倍，近年来中炬管理费用率呈现持续下降的趋势管理人员较多：如果将除生产、销售、技术以外的人员归为管理人员，<br>2018 年中炬管理人员共 1584 人，海天管理人员共 508 人，主要是由于总部管理人员较多。2019 年公司转为民营体制，积极剥离相关人员，2021年管理人员数量降低到 637 人；<br>管理层激励不充分，管理效率较低：2021 年海天 16 位高管合计薪酬 3255</p>\n<p>万元，12 位高管持股市值合计 655 亿元，中炬高新 22 位高管合计薪酬</p>\n<p>3423 万元，无持股，中炬管理层薪酬待遇和人均创收相比海天有较大差</p>\n<h3 id=\"宋城演艺\"><a href=\"#宋城演艺\" class=\"headerlink\" title=\"宋城演艺\"></a>宋城演艺</h3><p>未来公司将更加坚定专注演艺主业,持续打造非同凡响的高品质演艺作品,不断营造新奇特的景区和度假体验。<br> 花房集团是公司参股35.35%的联营企业,公司对花房集团采用长期股权投资权益法核算,按相关规定每年对长期股权投资进行减值测试。<br>2023年,受宏观环境、行业环境和内部环境等方面因素影响,花房集团主动采取了更加谨慎的运营策略,于2023年5月份起进一步加强了风险管理和内控措施,整体<br>运营规模收缩,经营业绩出现大幅下滑。<br>综合各方面因素分析,预计花房集团未来经营不及预期,公司对花房集团长期股权投资执行了减值测试为目的的评估,根据初步评估结果拟计提减值准备8.6-9亿<br>元。<br>本次拟计提的金额为初步测算结果,最终金额将在最终评估和审计后确定。 </p>\n<p>西安有着厚重的历史文化和丰富的旅游资源,也是个网红城市,游客底量庞大。<br>西安有着多台品质较高的演艺节目,演艺市场竞争比较激烈。<br>西安千古情开业后,迅速在激烈的市场竞争中占得一席之地。<br>未来西安项目将进一步发挥演艺+景区的优势,发挥室内演出晴雨皆宜、全天候上演的优势,不断提升市场占有率。<br>目前西安千古情工作日基础场次已达4场,周末达到5场,未来经营看好。<br>上海宋城三楼和四楼的整改提升预计将于3月底完成,将增加餐饮区、互动体验区、商业等内容,进一步提升游览空间、产品品质和接待水平。<br>上海的城市人口基数大,商业发达,本地亲子家庭、年轻时尚群体、企业团建等各种专题市场需求旺盛,2024年将实现集中整改提升后的完整年度运营,经营前景看<br>好</p>\n<p>受益于补偿性需求的释放,加上公司做了很多针对性非常强的主题活动,2023年整体的门票收入已经基本恢复到2019年。<br> 四季度本身是文旅消费的淡季,对全年业绩的影响较小。<br>公司各个项目根据当地市场特色做了针对性的营销活动,杭州宋城国庆期间受到当地重大活动的一些影响,但其后的学生秋游团和银发团表现较好,上海宋城的企业<br>团建市场也在不断发力。<br> 元旦假期公司整体场次和人次较2019年同期均有较好增长,一方面受益于项目数量的增加,西安、上海等项目收客局面良好;另一方面杭州宋城等景区通过开展跨<br>年活动充分挖掘周边散客市场实现较好增长。<br>目前公司各个项目已做好狂欢中国年新春主题活动的全面准备,将以饱满的热情迎接新年新气象</p>\n<p>占位优势：卡位一线旅游目的地，占据客流高地</p>\n<p>渠道优势：卡位旅行社渠道，拓宽新渠道 </p>\n<p>桂林项目卡位高客源景区，张家界项目科技含量高，均处于快速爬坡期</p>\n<p>珠海项目拟将100%股权转让给宋城集团，回收4.58 亿元，未来收取</p>\n<p>一揽子服务费及后续的管理服务费，我们预计成熟期业绩超0.5 亿元。</p>\n<p>￼ </p>\n<h3 id=\"百龙创园\"><a href=\"#百龙创园\" class=\"headerlink\" title=\"百龙创园\"></a>百龙创园</h3><p>益生元、膳食纤维系列产品目前贡献 90%的收入；毛利方面，</p>\n<p>益生元、膳食纤维贡献 80%的毛利；以阿洛酮糖为主的健康甜味剂产品是</p>\n<p>公司 2020 年新推出的产品系列，有望逐步成为公司新的利润增长点。</p>\n<p>公司产品聚葡萄糖和抗性糊精均为可溶性膳食纤维。可溶性膳食纤维由于</p>\n<p>具有良好的溶解性，无异味，受到广大食品加工企业追捧，作为增稠剂、</p>\n<p>乳化剂等运用于食品饮料中，既增加营养健康卖点，也可以丰富口感，也</p>\n<p>正是由于可溶性膳食纤维出色的生理性能成就了其更广泛的应用领域与下</p>\n<p>游市场</p>\n<p>抗性糊精可以帮助人体更好吸收微量元素如钙、铁、锌、硒，成就抗性糊</p>\n<p>精强大消费概念。根据泰莱公司（Tate&amp;Lyle）实验数据，人们平时喝牛奶</p>\n<p>补充钙质大约只有 30%可以被人体吸收，其它的会全部流失掉，而将抗性</p>\n<p>糊精与牛奶结合可有效增加 20%的钙吸收量，也就是饮用含有抗性糊精的</p>\n<p>牛奶可以将钙吸收量从原来的 30%增长到现在的 36%。 </p>\n<p>益生元是指能够选择性地促进肠道内原有的一种或多种有益细菌（益生菌）</p>\n<p>生长繁殖和&#x2F;或增加碳水化合物代谢的物质，主要包括各类功能性低聚糖。</p>\n<p>常见的益生元包括低聚果糖、低聚半乳糖、菊粉、低聚木糖和低聚异麦芽</p>\n<p>糖等，不同产品物化性能及生理功能有所差异</p>\n<h3 id=\"金禾实业\"><a href=\"#金禾实业\" class=\"headerlink\" title=\"金禾实业\"></a>金禾实业</h3><p>全球麦芽酚产能基本由我国垄断。生产甲、乙基麦芽酚需要用到一种重要原材料——糠醛，糠醛可以从玉米穗轴、麦麸、锯木屑中萃取得到</p>\n<p>规划山梨酸钾产业链，食品防腐剂业务未来可期。山梨酸钾是国际粮农组织和卫生组织推荐的高效安全的防腐保鲜剂，广泛应用于食品、饮料、烟草、农药、化妆品、宠物家禽饲料等行业中。其防腐效果是苯甲酸钠的 5-10 倍，而毒性仅为传统防腐剂苯甲酸钠的1&#x2F;40，</p>\n<p>山梨酸及山梨酸钾是国际粮农组织和卫生组织推荐的高效安全的防腐保鲜剂，它的防腐效果明显高于苯甲酸类，是苯甲酸盐的 5~10；产品毒性低，是苯</p>\n<p>甲酸盐的 1&#x2F;4,与食盐相当；不改变食品特性，参与人体的新陈，代谢，产生二氧化碳和水；</p>\n<p>使用范围广泛，在医药、烟草、造纸、化妆品、牙膏、饲料等行业均有很大应用</p>\n<h3 id=\"澜起科技\"><a href=\"#澜起科技\" class=\"headerlink\" title=\"澜起科技\"></a>澜起科技</h3><p>内存接口芯片行业高增长，5G、云计算、AI 发展如火如荼，海量数据对存</p>\n<p>储的需求持续推动内存接口芯片量价齐升和市场高速扩容</p>\n<p>DDR5 内存性能远超DDR4 的规格上限，配套内存接口芯片性能及技术难度随之提升，</p>\n<p>推高内存接口芯片ASP。DRR5 相较于DDR4 单颗DRAM 内存密度提升4 倍至64Gbit，</p>\n<p>最大数据传输速率提升一倍达到6.4Gbps，工作电压由1.2V 压低至1.1V 使对应功耗降</p>\n<p>低超过20％，故而DDR5 内存将对保证内存数据传输速率和稳定性的内存接口芯片提出</p>\n<p>更高要求，进而新一代内存接口芯片在满足更高性能要求的同时技术难度也相应提升，</p>\n<p>从而提高新一代内存接口芯片价值量</p>\n<p>自主掌握核心技术，牢控话语权。公司是全球可提供从DDR2 到DDR5 内存全缓冲&#x2F;半缓</p>\n<p>冲完整解决方案的主要供应商之一，在内存接口芯片及津逮服务器平台领域核心技术均</p>\n<p>基于自主研发，突破了一系列关键技术壁垒，并均已实现量产。公司提出的DDR4“1+9”</p>\n<p>架构被采纳为JEDEC 标准，并将在DDR5 世代演化为“1+10”框架，继续作为LRDIMM</p>\n<p>的国际标准。公司还牵头制定了DDR5 第一子代、第二子代、第三子代内存接口芯片国</p>\n<p>际标准，体现出公司在该领域内享有重要话语权。</p>\n<p>科研系内存接口芯片行业主要动能，公司高研发转化率保障产品高速率迭代，毛利率有</p>\n<p>望进一步优化。公司在DDR4 时代长期处于业内领先地位，内存接口芯片毛利率常年维</p>\n<p>持较高水平。2021 年DDR4 进入产品生命周期后期，DDR5 新兴产品崭露头角，毛利率</p>\n<p>短期承压。进入DDR5 世代后，内存接口芯片价值量提升，相关芯片市场规模大幅增长，</p>\n<p>有望持续优化产品毛利率水平。2022H1 公司互联类芯片产品线营收 12.36 亿元，同比</p>\n<p>+80.04%，毛利率60.08%。 </p>\n<p>经过多年耕耘，公司已与三星、SK 海力士、美光等下游主要客户建立长期稳定、良好</p>\n<p>的合作关系。公司主业直接下游为DRAM 厂商，根据 IC Insights，2021 年三星市占率</p>\n<p>43.6%，SK 海力士市占率27.7%，美光22.8%，三巨头垄断了94%的市场份额。另外</p>\n<p>公司外延拓展服务器CPU 等业务，逐渐与全球主流的服务器厂商及软件系统提供商均建</p>\n<p>立了长期稳定的合作关系，优质的客户资源和产业生态为公司业务规模的扩大奠定坚实</p>\n<p>的基础。</p>\n<h3 id=\"国瓷\"><a href=\"#国瓷\" class=\"headerlink\" title=\"国瓷\"></a>国瓷</h3><p>MLCC（Multi-layer Ceramic Capacitors）是片式多层陶瓷电容器，由印好<br>电极（内电极）的陶瓷介质膜片以错位的方式叠合起来，经过一次性高温烧结形成<br>陶瓷芯片，再在芯片的两端封上金属层（外电极），也叫独石电容器。</p>\n<p>国瓷材料是国内 MLCC 粉体材料龙头，国内市占率达 80%、全球市占率超过<br>25%。</p>\n<p>新能源汽车的增长和汽车电子化率的提高，促进 MLCC 产品需求增长。一方<br>面，汽车电子系统较多，包括定位系统、中央控制系统、无线电导航系统、车身稳<br>定控制系统、驾驶辅助系统、汽车音响及娱乐系统、车载通信系统等，随着汽车电<br>子化率提升，对集成电路中被动元器件 MLCC 的用量必然增多。</p>\n<p> 蜂窝陶瓷：尾气后处理的核心，寡头长期垄断市场</p>\n<p> 为了满足更高的排放标准，蜂窝陶瓷载体需提高处理尾气的效率，不断提高各<br>项性能指标。</p>\n<p>外国寡头垄断格局打破，国产替代提速。蜂窝陶瓷载体全球市场长期由美国康<br>宁公司和日本 NGK 公司垄断，截至 2020 年二者合共约占全球蜂窝陶瓷载体 90%<br>以上市场份额，蜂窝陶瓷的核心技术和产品掌握在两家巨头手上。康宁和 NGK 享<br>受了汽车产业高速发展的先发红利，而国内载体厂商则将充分受益于环保法规带<br>来的渗透率提升，以奥福环保、宜兴化机为代表的国内蜂窝陶瓷载体厂商的技术突<br>破和市场份额的提高，国内主机和整车厂商逐步开启了蜂窝陶瓷载体国产化替代<br>进程</p>\n<p>国六阶段蜂窝陶瓷的市场增量主要来自汽油车和柴油车加装载体，单台车载<br>体用量放大</p>\n<p>生物医疗板块：齿科材料需求高速增长，海内外双<br>轮开拓市场<br>公司凭借自身在陶瓷材料领域领先的技术与市场优势，基于高纯氧化锆粉体<br>业务，向下游口腔医学材料与器械积极拓展，2015 年战略入股深圳爱尔创，2018<br>年全资收购深圳爱尔创，目前公司产品涵盖齿科氧化锆陶瓷从粉体到瓷块、玻璃陶<br>瓷、树脂陶瓷等。受益于口腔医疗行业的快速发展与海外市场的积极开拓，加之高<br>瓴与松柏的战略投资，公司口腔医疗材料业务持续快速增</p>\n<p>面对持续增长的口腔医疗市场规模，我国牙科材料需求持续提升，产品结构不<br>断调整，新技术和新产品不断涌现，市场也随之扩大，牙科材料已经逐渐成为我国<br>医疗器械制造业的重要组成部分。氧化锆陶瓷材料由于兼具优良的机械性能、生物<br>相容性与美观性，在牙科材料具有广阔的应用前景。放眼全球市场，氧化锆牙科材<br>料产量与收入呈现逐年提升态势，据 QYresearch 统计，2021 年全球氧化锆牙科<br>材料收入 1.26 亿美元，预计 2026 年将达到 1.69 亿美元，CAGR 达到 6.0%。反<br>观国内市场，由于欧美发达国家在相关领域起步早，技术先进，海外大品牌一直垄<br>断全球市场，部分产品外资品牌占有率达到 90%，国产化程度仍有较大空间。公<br>司作为国产牙科用纳米级复合氧化锆粉体材料及瓷块的主要供应商，面向国内外<br> 广阔的市场，将有望借助自身成本和服务优势打破国外产品的垄断地位，迎来快速<br>增长</p>\n<p>陶瓷墨水喷墨打印前景广阔。陶瓷墨水是釉面材料的一种，主要用于陶瓷表面<br>的装饰层，通过喷墨打印技术，计算机控制将墨水直接打印到陶瓷表面进行表面装<br>饰，实现产品个性化设计和制造，特别适合于设计复杂图案，进一步提高陶瓷装饰<br>效果。</p>\n<p>氮化硅轴承球：攻克关键技术，打破国外垄断</p>\n<p>氮化硅陶瓷性能出色，轴承滚子替代首选。氮化硅是一种典型的强共价键化物，<br>氮化硅陶瓷材料具有熔点高、硬度大、耐磨损、抗弯强度高、导热性能好等优越的<br>物理化学性能，被广泛地应用到国防、能源、电子等关键领域。</p>\n<p>新能源<br>时代的来临为汽车电机轴承提出了新的要求，金属材料导致电机产生交变电流进而造成电腐蚀成了关键缺陷，而性能的陶瓷材料则可以完全避免，较大地提高了电<br>机的使用寿命。另一方面，海上风力发电导致传统的金属轴承易受高盐环境的侵蚀，<br>而陶瓷材料轴承球具有优异的耐腐蚀能力，平均寿命比轴承钢高 4-25 倍。随着新<br>能源汽车与风力发电的快速发展，陶瓷轴承球需求将被进一步拉动，有望成为未来<br>公司利润新的增长点。</p>\n<p>1）电子材料板块：（1）MLCC 粉体：一方面 23 年消费电子景气度有望底部<br>回升，带动销量逐步回升，公司规划 23-25 年产能逐步从 10000 吨&#x2F;年爬升至<br>15000 吨&#x2F;年，另一方面由于行业格局稳定，假设 MLCC 介质材料销售均价和毛利<br>率保持稳定；（2）氧化铝&#x2F;勃姆石：未来下游新能源需求仍维持高速增长，公司氧<br>化铝和勃姆石快速扩产带动销量增加，假设 23-25 年价格维持在 1.8 万&#x2F;吨，毛利<br>率为 20%；<br>2）催化板块：船舶国二标准和非道路国 IV 标准 2022 年相继全面实施，尾气<br>治理市场容量持续拓宽的同时，公司在商用车、乘用车、非道路机械和船机等应用<br>领域快速突破，公司 23-24 年募投产能逐步释放带动销量增长，假设蜂窝陶瓷载<br>体毛利率维持 50%，预计 23-25 年收入增速分别为 77%、48%和 46%；<br>3）建筑材料板块：国内建筑陶瓷墨水经过多年发展目前渗透率较高叠加国内<br>地产增速放缓，公司该板块收入增速放缓，主要业务增量来自于国内陶瓷企业出海<br>的需求，假设 23-25 年增速为 15%、10%、10%，毛利率随上游原材料价格回落<br>得到修复，假设 23-25 年毛利率维持稳定在 25%左右；<br>4）生物医疗板块：爱尔创受益于口腔医疗市场持续增长和集采带动的齿科耗<br>材需求提升，预计 23-25 年收入增速为 20%、15%和 15%，国瓷材料齿科材料占<br>下游成本较小，且国内竞争对手较少，假设产品毛利率保持在 58%左右</p>\n<h3 id=\"半导体-1\"><a href=\"#半导体-1\" class=\"headerlink\" title=\"半导体\"></a>半导体</h3><p>周期角度看：2023年受半导体周期下行、美系设备出口管制等影响，下游头部晶圆厂扩产有所放缓，主要资本支出用于储备<br>海外关键机台，国产设备招标有所延后。但从终端来看，2023Q3华为引领3C需求复苏，全球智能手机出货在经历连续8个季度同比下滑后，<br>在2023Q3实现同比微增；晶圆端看，中芯国际产能利用率自2023Q2开始逐步回升，行业已进入周期上行通道。2）成长角度看：2022年中国<br>大陆半导体设备整体国产化率水平约14.5%；2023年受出口管制影响，长存仍处于国产线攻关突破阶段，半导体设备国产替代仍需求迫切。<br>因此，展望2024年，我们认为，周期复苏铺底，前道半导体设备叠加长存国产线突破、后道半导体设备叠加核心客户先进封装突破，半导<br>体设备板块将迎来“周期”与“成长”共振。</p>\n<p>硅基OLED：主要指尺寸小于1英寸的显示器。OLED按照驱动方式可以分为被动式和主动式；按屏幕大小可以分为大尺寸、中尺寸和微型显示器；<br>按照基板不同可以分为玻璃基板、硅基板、柔性基板等，由于PPI的差异，微型OLED一般选用硅基板，中大尺寸一般采用玻璃基板&#x2F;柔性基板</p>\n<h3 id=\"光伏-1\"><a href=\"#光伏-1\" class=\"headerlink\" title=\"光伏\"></a>光伏</h3><p>N 型TOPCon 电池走量，相关设备耗材迎来技术升级迭代。预计2023<br>年TOPCon 新建产能400GW，预计2024 年新增产能超过200GW，相<br>关TOPCon 产线设备供应商在手订单充裕。2024 年TOPCon 电池出货<br>量占比有望达到60%以上，伴随N 型TOPCon 电池放量，低氧型硅片<br>需求增长，相关低氧单晶炉、磁场磁体、大抽速真空泵等相关设备迎<br>来技术迭代。同时，TOPCon 和HJT 等N 型电池银浆消耗量增加，多<br>主栅、无主栅、激光转印等降本技术有望加速应用</p>\n<p>TOPCon 的 N 型硅片氧含量要求更加严格。目前，TOPCon 电池和 PERC 电池的 PN 结<br>都为同质结，由 N 型&#x2F;P 型硅片表面进行硼扩&#x2F;磷扩制成。由于硼元素的扩散难度大，因此<br>TOPCon 的硼扩工艺温度（900-1100°C）相比PERC 电池由磷扩工艺温度（600-900°C）更高。<br>高温下硅片中的氧元素移动，冷却后沉淀形成氧环（同心圆），降低电池效率。HJT 电池的<br>PN 结为两种不同硅材料形成，采用气相沉积工艺实现掺杂制结，无需进行高温扩散，减少了<br>此类问题。PERC 电池的磷扩工艺温度相对较低，也减少此类问题。基于以上原因，TOPCon<br>使用硅片的氧含量指标（低于12ppma）要求比HJT 使用硅片（低于14ppma）、PERC 使用硅<br>片（低于16ppma）更为严格，硅片少子寿命的要求（大于800μs）也高于PERC 硅片（大于<br>70μs）。 </p>\n<h3 id=\"紫金\"><a href=\"#紫金\" class=\"headerlink\" title=\"紫金\"></a>紫金</h3><p>我们对 2025 年铜价更为乐观且看好更有节奏的配置组合：1）2024 年看金。我们认为在<br>2H24 年美国降息周期或启动以及市场降息预期提前的环境下，黄金价格或将在2024 年重<br>回上涨趋势，此外全球央行大举购金也将作为支撑黄金价格更高中枢水平的结构性因素。<br>我们预计 2024&#x2F;2025 年黄金均价为 2,300&#x2F;2,300 美元&#x2F;盎司，而若美联储 2024 年降息的力<br>度超过我们的预期，黄金价格将有更显著的上行风险。2）2025 年看铜，且较市场更为乐<br>观。我们认为 2024 年铜的基本面受铜矿项目产量集中释放影响压力较大，或将出现 38.6<br>万吨的供应盈余；而在2025 之后由于缺乏大型新项目，铜矿的供给增长将逐步放缓，在新<br>能源用铜需求的拉动下或将出现供需缺口逐步放大。在基准供需判断之上，11 月第一量子<br>的 Cobre  Panama 项目停产事件对 2024 年基本面有较大弹性的影响，如果长期停产将会<br>较大程度削弱铜矿增量对基本面的冲击，且市场可能提前反映2025 年由于供应增长放缓且<br>新能源用铜需求拉动共同作用下的供需收紧，这也是我们较市场而言对2025 年铜价更为乐<br>观的因素之一。我们预计2024&#x2F;2025 年铜价中枢为8,800&#x2F;10,000 美元&#x2F;吨</p>\n<p>2024 年看金，2025 年看铜，铜金组合攻守兼备<br>铜<br>需求动能新旧更替，能源转型驱动用铜前景可期。虽然受全球经济，尤其是欧洲地区经济<br>疲弱影响下铜传统的下游需求领域表现较为平淡，但从结构性角度来看铜的消费仍具有较<br>大弹性。我们认为在新能源发展变革下，铜的应用场景会得到全面拓宽，其导电性、延展<br>性和低反应性等在新能源领域有着广泛且必需的应用。尤其是电动汽车以及风电光伏的深<br>化发展将成推动新周期铜需求增长的主要驱动力，待本轮新增产能释放平稳后，我们预计<br>铜矿的供应增速将不及新能源用铜拉动的需求增速</p>\n<p>电动汽车用铜单耗是传统汽车的约4 倍，在传统燃油车的基础上,电动汽车的驱动电机、电<br>池、高压线束等部件均需要使用大量的高导电性能的铜材料，以确保电机和电控系统的正<br>常运行。根据铜业发展协会的数据，纯电动汽车单车用铜约83kg，而传统燃油车单车用铜<br>约22kg。随着新能源汽车渗透率的不断提升，铜的需求也将受到显著的推动。根据IEA 的<br>统计，基于各国的现有政策以及发展目标，2030 年全球电动汽车的市场占有率已从过去该<br>机构预测的25%提升到35%，中国仍将继续保持最大市场的地位，占全球电动汽车总销量<br>的40%。</p>\n<p>我们预计 2025 年全球光伏及风电用铜将达到 307 万吨。由于铜优良的导电特性，光伏和<br>风电的发电系统中的电缆和线路需要用铜作为主要材料。光伏组件中的热量交换器、缆线<br>和连接器需要使用大量的铜材料，此外光伏逆变器中也需要使用铜线圈和其他铜制品。根<br>据铜业发展协会测算，每兆瓦光伏系统大约使用5.5 吨铜。根据我们测算，2025 年全球光<br>伏新增装机用铜量将达到2436 万吨，其中65.3%来自中国市场，从中国出口到海外部分占<br>全球总量 25%。同样，风电发电机中的缆线、涡轮机等部件也会使用到铜，尤其是海上风<br>电的海底电缆用铜强度将较大。我们预计到 2025 年全球风电新增装机用铜量将达到 63.5<br>万吨，其中中国和海外占比分别为53.3%和46.7%。2025 年全球光伏和风电总用铜量预计<br>将达到307 万吨，23-25 年间年均复合增长率为16.3%。</p>\n"},{"title":"yuyan","date":"2022-12-28T01:50:30.000Z","_content":"建议关注鼎龙股份，公司是国内唯一一家全面掌握 CMP 抛光垫全\n流程核心研发技术和生产工艺的 CMP 抛光垫供应商，在国内抛光\n垫市场中处于领先地位\n\n建议关注濮阳惠成，公司专注顺酐酸酐衍生物和功能中间体产品的\n研发和生产，受益于我国电子信息产业的快速发展、我国智能电网、\n\n重点推荐合盛硅业，公司在工业硅及有机硅产业链完整，具备规模\n优势、成本优势，上下游协同效应有望持续加强，随着在建项目的稳\n步推进，公司业绩有望持续向好。 v \n\n\n\n![Alt text](image-3.png)\n\n美现役战斗机均为较为领先的三代机和四代机，占比分别为 83%和 17%，而我国\n仍有近 50%的二代机亟需替代,四代机仅有 19 架，占比约为 2%，远低于美国。另外，当前美\n国战斗机仅有重型和中型，而我国战斗机中轻型战斗机占比仍然较高；我们认为当前航空装\n备需求迫切且确定性高，未来方向是数量升+结构优\n\n\n![Alt text](image-4.png)\n\n\n### 特步  股息\n\n盖世威将推出专业网球运动体育用品，\n以强调品牌的网球基因，而帕拉丁将推出反映年轻消费者喜好的产品\n截至2023H1，公司鞋履自产占比28%、外包占比72%；服装自产占比12%、\n外包占比 88%。\n\n特步主品牌同增高单位数，其中竞速系列销量同增 90%，抖音店播同增\n73%；索康尼同增 98%，系天猫运动鞋行业头部品牌增速第一；迈乐同增\n101%，徒步鞋品类销售同增 150%，MOAB3 登短途登山鞋热卖榜第一；\n盖世威同增 149%，京东平台同增 297%；帕拉丁同增 114%，其中服装同\n增1305%，抖音同增243%。\n\n时尚运动方面，盖世威和帕拉丁在中国内地进行全面品牌重塑，升级产品\n组合和店铺布局，成功增强品牌知名度及大幅提升店效；加快在中国内地\n高线城市的开店步伐。盖世威拟推出专业网球运动产品，强调品牌网球基\n因；帕拉丁增强对年轻消费者的吸引力，改善产品供应和零售网络。\n\n### 森马服饰 股息\n目前出海仍面临资金管制、文化壁垒、政策动荡等多重障碍，\n落地和执行尚需时日，但二次出海成功确定性明显增强，原因主要在于，第一，国内市场增\n长放缓，寻找海外增长空间成为共识，疫后全球经济逐步复苏；第二，公司是国内休闲服饰\n和儿童服饰的龙头，森马和巴拉巴拉品牌享有高知名度，对海外代理商有较强的吸引力；第\n三，公司前期积累的出海经验成为宝贵的无形资产，可以帮助规避“合作摩擦”，适应“国\n际本土化”；第四，路径上，公司选择将东南亚、中东作为重点开拓的区域市场，三处区域\n市场位于“一带一路”沿线，具备政策友好、消费活跃、品牌服饰萌芽等明显优势\n\n柔性供应链的价值在于提高售罄、减少库存、提升周转。供应链之于时尚品牌是底盘和\n生命线。得益于优质供应商的稳定合作、订货制改革以及数智化升级，公司的快反周期由\n2000 年初的 3 个月缩短至 2 周以内，逼近优衣库、H&M、ZARA 等国际快时尚企业快反水\n平，2018-2022 年公司的库存压力、存货减值保持在健康可控状态\n\n公司的资本性支出以投资和股利分配为主，2018 年收购Kidiliz 占用8.44\n亿元，分红常态化且分红比例领跑同行，近五年分红比例为 75%+。\n\n存量博弈、红海持续的新背景下，依托品牌势能、渠道壁垒以及柔供等全方面领\n先优势，公司有望在渠道变革和海外探索机遇上取得新突破，引领业绩量质齐升\n\n柔供是当下解决产销不对称的最好方式。服装行业产销不对称，天然会造成库存。柔供\n成于优衣库，被国内服装品牌竞相学习，极致于 Shein，凭借小单快反最大化抵消时间差，\n仍然是当下解决产销不对称的最好方式。柔供帮助公司渡过行业库存危机时期，同时将库存\n控制在可控范围内，当前库存问题主要是疫后的动销转弱所致规模是柔供的必要条件。长期稳定的产供合作关系可以提前锁定供应商产能和进行快速\n匹配，小单快反对供应商提出更大的成本挑战，需要通过采购规模来平衡。中小企业实现柔\n供的难度较大，公司的营收体量居于头部水平，优质供应商采购集中度持续提升\n\n电商主推线上线下同价，盈利提升。2022 年服装线上渗透率为 37%，近 3 年仅增长 3pp。\n公司一方面积极布局抖音等机会赛道；另一方面，主推线上线下同价，营收阶段性受损，但\n盈利明显提升，2023H1 线上毛利率为 41.68%，较 2019 年提升 10.93pp。线上线下同价是\n平衡电商和门店利益的稳态格局，越来越多企业达成共识，头部企业先行，中小企业跟随，\n业绩逐渐从“增收不增利”过渡到“营收滞后于盈利”，最终实现“量质齐升”\n\n公司作为休闲服饰和童装的双龙头，品牌、渠道壁垒和柔供能力突出。巴拉巴\n拉二三线购物中心加密、森马基本店+家庭店试水、出海进展成为重要成长机遇。预计\n2023/2024年公司归母净利润分别为11.1/15.5亿元，同比增速为74.67%/39.16%，对应\nEPS为0.41/0.57元/股，对应P/E为14/10倍。首次覆盖，给予“买入”评级\n\n分产品看，巴拉巴拉品牌是国内童装龙头，童装修复\n速度预计好于成人休闲装（23H1 童装/成人装收入增速分别同比-\n15.06%/+6.34%）。单季度来看，公司 23Q1/Q2/Q3 营业收入分别同比-\n9.3%/+9.7%/+1.1%，受基数、天气及消费弱复苏等因素影响，收入恢\n复节奏存在季度波动；归母净利润分别同增48.9%/295.8%/89.4%\n\n毛利率提升明显，存货规模同比改善。盈利能力：23Q1-Q3 公司毛利\n率同比+3.71pcts 至 44.13%，预计主因公司有效控制终端折扣，线上、\n线下同款同价比例提升且毛利率更高的直营渠道收入占比提升\n\n存货：截至23Q3，存\n货规模同比-21.78%至36.53 亿元，公司有望在Q4 销售旺季及促销节日\n加大存货清理力度，优化新老品结构，助力明年轻装上阵。\n\n### 地产\n\n今年1-11 月住宅竣工面积同比+18.5%，2024H1 竣工仍有望延续韧\n性，支撑明年家装需求稳健释放。\n\n2023 年 1-11 月，房屋新开工面积 8.75 亿平方米，同比-21.66%。\n2023 年 1-11 月，房屋累计施工面积 83.13 亿平方米，同比-7.20%\n\n根据中指重点监测的100城数据，2023年，一线城市新\n建商品住宅累计销售面积同比小幅增长约4%，市场整体\n稳定；二线、三四线代表城市同比分别下降4%、11%\n\n### 杂项\n酒就两个用途，一，上级驯服属下的测试工具。二，味觉退化或酒精上瘾的中老年男士。真是人间清醒，一针见血，振聋发聩。\n\n制造端汇聚中东，推动光伏产业发展。光照资源优势、制造成本低廉和电价补贴等政策计划向好带来光伏\n市场新机遇，吸引TCL中环、协鑫科技、天合光能等中国厂商纷纷加速布局中东。中东1-11月累积进口13\nGW中国组件，同增约71%，超越22年8.4GW拉货量，预计仍将保持高速增长，市场前景广阔\n\n产能释放供给过剩，各环节将加速下跌至成本线，预计价格持续低位。二三线加快出清，盈\n利或在24年中见底，龙头阿尔法逐渐体现\n\n硅料瓶颈解决， 24年硅片过剩进入激烈竞争阶段。据我们统计，24年底硅片产能合计1068GW，\n对应可供装机890GW，由于石英砂相对紧张，硅片盈利有支撑\n◆ 硅片两超多强，格局相对稳定。我们预计24年隆基/中环市占率27%/25%，CR2约为52%。\n\nBC结构由于正面无遮挡，天然具备效率\n优势。在单面市场，爱旭ABC组件功率610W+，高于同版型TOPCon30W，效率优势明显。\n在 双 面 市 场 ， 爱旭ABC 依靠背面银浆方案，双面率可达70% ，随24 年中/ 底成本打平\nTOPCon/PERC，竞争优势持续凸显\n\n与TOPCon在不同版型下对比，HJT均拥有更高组件效率及功\n率瓦数，标准版型领先约10W优势。。受益于效率及发电性能优势，同时当前HJT外销规模\n较小，报价1.28元/W，较TOPCon1.03元高0.25元/W，整体溢价明显。\n\n钙钛矿效率持续提升，稳定性逐步验证中。截至23年底，钙钛矿头部组件厂效率陆续突破\n18%：极电光能1.2*0.6m单节组件效率18.2%，并通过IEC61215/IEC61730测试；协鑫光电\n1m×2m量产效率破18%。GW级产线陆续启建，预计24年量产效率可达20%+。\n\n中期，2024 年春季来临，需求复苏，TOPCon 技术持续迭代过程\n中，出货量与利润分化将持续；c）中长期看，龙头扳手腕持续，优\n质企业将在低谷时期保持扩张节奏，市占率进一步提升\n\n### 晶盛\n\n公司前三季度实现营业收入134.62亿元,同比增长80.39%;归母净利润35.14亿元,同比增长74.94%。 \n未完成设备订单287.50亿元,其中半导体设备订单33.03亿元。\n\n石英坩埚、金刚线等硅材料业务快速放量，多领域材料实现突破\n\n凭借单晶炉较高市占率，公司拓展石英坩埚、金刚线等耗材业务。受石英砂\n紧缺及需求高增影响，21 年 9 月至今光伏石英坩埚价格增长约 900%，2024\n年高价有望维持。据我们测算，24-25 年国内石英坩埚年均市场市场有望超\n400 亿元，23-25 年 CAGR 为 29.3%。公司 22 年市占率约 19.6%，未来有\n望依托“超级坩埚”进一步巩固坩埚龙头地位。金刚线细线化成为趋势，钨\n丝金刚线有望成为主流。我们预计 25 年金刚线国内市场规模 123.9 亿元，\n23-25 年 CAGR 14.8%。公司自制钨丝母线并积极扩产，有望实现弯道超\n\n公司碳化硅衬底进入大规模量产倒计时，碳化硅外延设备市占率领先 \n据 Yole，全球 SiC器件市场规模 2027年有望达 63.0亿美元，21-27年 CAGR\n为 34%，其中碳化硅衬底占器件成本达 47%。公司依托泛半导体长晶技术，\n6 英寸衬底良率、性能等指标位于行业头部梯队，现已形成 5000 片/月产能，\n核心设备如长晶炉等均为自制，并拓展 8 英寸衬底。公司预计在 25 年实现\n25 万片 6 英寸及 5 万片 8 英寸衬底年产能。碳化硅外延片对外延设备要求\n较高，公司 6 英寸双片式碳化硅外延设备已实现批量销售，市占率位居国内\n前列，8 英寸单片式碳化硅外延设备处于客户验证中。衬底与外延设备有望\n在外延厂发挥协同作用，助力公司强化碳化硅布局。\n\n衬底片性能优越，与中芯集成等达成合作\n\n光伏设备是晶盛机电成长的第一曲线，第二曲线是光伏耗材\n和半导体耗材的放量，第三曲线是碳化硅设备+材料和半导体设备的放量。我们维\n持公司2023-2025 年归母净利润为47/58/70 亿元，对应PE 为11/9/8 倍，维持“买\n入”评级。\n\n低氧技术是单晶炉下一步迭代方向，超导磁场单晶炉降氧效果显著\n\n第五代超导单晶炉夯实公司单晶炉龙头地位，设备延伸至光伏全产业链布局\n\n半导体硅片生产设备中，单晶炉投资占比 25%，有望率先实现进口替代。从产业链来看，\n芯片的生产环节包括硅片制造、晶圆制造、封装测试，对应的设备包括硅片制造设备、前\n道工艺设备（晶圆制造）、后道工艺设备（封装测试）。根据集微咨询预计，20-22 年中国大\n陆硅片设备需求约 570-800 亿元，其中长晶设备约占设备总投资的 25%，则对应的单晶炉\n市场规模为 140-200 亿元。根据中商产业研究院，目前半导体用单晶炉国产化率不足 20%，\n随着国内企业在拉晶环节持续突破，有望率先实现进口替代\n\n蓝宝石是一种氧化铝单晶，由于具有强度大、硬度高、耐腐蚀等特点\n\n公司半导体石英坩埚的主要客户为中环领先、上海新昇、奕斯伟等公\n司，光伏石英坩埚的主要客户为 TCL 中环、晶科能源、弘元新材料等\n\n公司自制钨丝母线降低成本，积极扩产迎合行业扩容 \n\n碳化硅衬底良率是考核企业产品性能及经济性重要指标，大尺寸衬底是行业趋势。SiC 衬\n底制备重难点主要是晶体生长和切割研磨抛光环节，是整个衬底生产环节中的重点与难点，\n成为限制碳化硅良率与产能提升的瓶颈。加工的难点在于碳化硅材料硬度高、脆性大、化\n学性质稳定，因此传统硅基加工的方式不适用于碳化硅衬底.目前 4 英寸、6 英寸主要采用\n多线切割设备，将碳化硅晶体切割成厚度不超过 1mm 的薄片。\n\n公司导电型碳化硅衬底已形成 5000片/月产能，新增 30万片产能建设，核心设备均为自制。\n2017 年公司开始碳化硅晶体生长设备和工艺研发，公司坚定电阻法技术路线，在切片环节\n引入激光切割与多线切割设备并行，并在 2020 年开始建立长晶实验线和中试线，相继开发\n6 英寸、8 英寸碳化硅晶体和衬底。目前公司中试线形成月产 5000 片 6 英寸衬底产能。公\n司长晶和核心加工设备均为自制，设备国产化率达到 90%以上，实现了 6 英寸-8 英寸碳化\n硅晶体生长和加工技术的自主可控。据晶盛机电微信公众号显示，公司于 2023 年 11 月 4\n日举行签约仪式，预计新增产能 25 万片 6 英寸碳化硅衬底、5 万片 8 英寸碳化硅衬底。\n\n公司 6 英寸碳化硅衬底达到业内一流水平，8 英寸衬底 2024 年实现与 6 英寸品质同步。截\n至 2023 年 11 月公司碳化硅投产签约仪式，公司中试线产出的 6 英寸碳化硅衬底片在直径、\n微管密度、位错、电阻率、弯曲度、翘曲度等关键参数均达到或者优于业内技术水平。产\n品已获得下游领先企业的验证和认可，已签约并交付批量订单。从具体指标来看，量产改\n善方面，公司 6 英寸核心缺陷快速迭代改善下降，量产 TSD 稳定＜100，BPD＜400，达\n到业内一流水平，最新研发成果方面，位错持续改善，研发试产基本稳定实现 TSD＜10，\nBPD 小于 50。8 英寸方面，公司已实现 8 英寸产品小批量生产+下游验证，可供应高质量\n500um 和 350um8 英寸碳化硅衬底，全产线可实现 6-8 英寸碳化硅衬底。目前公司全产线\n可实现 6 英寸和 8 英寸产品兼容，公司预计 2024 年可实现 8 英寸产品与 6 英寸产品品质\n达到同步\n\n碳化硅设备：碳化硅外延设备国产替代空间广阔，公司外延设备国内市占率领先 \n\n外延片占碳化硅器件产业链成本 23%，仅次于碳化硅衬底。碳化硅晶体生长的过程中会不\n可避免地产生缺陷、引入杂质，导致质量和性能不足，而外延层的生长可以消除衬底中的\n某些缺陷，使晶格排列整齐。与传统硅器件不同，碳化硅器件不能直接制作在衬底上，需\n要在衬底上生长一层晶相同、质量更高的单晶薄膜(外延层)  ，再制作器件。外延可分为①\n同质外延：在导电型 SiC 衬底生长 SiC，常用于低功率器件/射频器件/光电器件；②异质外\n延：在半绝缘 Sic 衬底生长 GaN，常用于高功率器件。根据前文数据，2023 年外延片占碳\n化硅器件产业链成本约 23%，仅次于碳化硅衬底\n\n碳化硅外延工艺难度大，份额主要被国外厂家占据，天成、天域引领国产替代。碳化硅外\n延会复制衬底的晶体结构，因此外延层缺陷包括来自衬底的缺陷，以及生长过程的位错以\n及宏观缺陷。据 Yole 数据，2020 年 Wolfspeed  与昭和电工分别占据全球碳化硅导电型外\n延片市场 52%和 43%的市场份额，合计高达 95%。国内碳化硅外延厂商较少，瀚天天成和\n东莞天域引领国产替代。\n\n碳化硅外延设备国产替代加速，以晶盛机电、北方华创、中电科 48 所为代表。国内外延设\n备由国外厂商主导，国内主打外延设备以意大利的 LPE、德国的爱思强、日本的 Nuflare\n产品为主。国内厂商则以晶盛机电、北方华创、中电科 48 所为代表。1）晶盛机电：SiC\n外延设备为公司独立研发设计和生产制造，核心技术均拥有独立的知识产权，目前已实现\n批量销售。2）北方华创：具有 10 余年外延设备研发的技术积累，目前 4/6 吋 SiC 外延设\n备已签订单超百台，批量机台已在各大主流外延厂实现稳定量产。3）中电科 48 所：陆续\n开发出碳化硅外延设备、高温高能离子注入机、高温激活炉、高温氧化炉，并持续研发第\n二代、第三代机型，其碳化硅设备已在生产线应用/签订合同百余台套\n\n\n由于设备中标到设备商确认收入要经历生产、运输交付、客户验证等过程，我们认为由于\n近年来硅片扩产较快，公司订单生产交付及验收周期拉长，收入确认节奏慢于签单速度，\n造成公司在手订单持续增长。随着公司在手单晶炉订单逐步确认收入，以及公司半导体和\n碳化硅设备，光伏电池、组件设备陆续放量，丰富的在手订单有望支撑公司设备收入稳健\n增长，但通过上文测算，我们认为单晶炉整体市场可能在 24 及 25 年逐渐收缩，公司光伏\n设备在手订单有下降风险，但由于在手设备订单仍较多，公司收入预计仍将增长，但 24-25\n年收入增速将有所下降。 \n\n公司材料板块主要包含光伏石英坩埚、金刚线、蓝宝石，碳化硅衬底等，光伏石英\n坩埚为材料板块主要收入来源。坩埚用量随硅片产量提升而提升，且 N 型硅片占比提升有\n望提升坩埚用量。价格方面，根据 solarzoom 数据，36 英寸光伏石英坩埚最新价格为 42000\n元/只，根据美晶新材招股书，预计 2024 年石英砂仍短缺，24 年石英坩埚平均价格维持在\n高位，25 年随着原材料扩产，价格下降 20%。公司钨丝金刚线及碳化硅衬底随着产能释放，\n收入有望逐步增长，蓝宝石业务下游竞争较为充分，预计收入将保持稳定。\n\n公司新业务拓展不顺利：若钨丝金刚线得不到下游客户广泛认可，渗透率提升不及预期，\n新建产能可能造成产能闲置，不利于公司整体经营。此外，公司碳化硅衬底、半导体设备\n等业务技术壁垒较高，公司存在新业务拓展不顺利的风险。\n\n### 现金流\n\n1. 2.4-1.4=1+0.8=1.8 *6\n\n### 榨菜\n1.受大消费市场持续疲软影响,产品终端动销放缓;2.二季度公司对部分终端老日期产品进行了促销拉动,并放缓了部分经销商的调货; 3.同期部分销售大区受疫情\n影响,居民备货及居家消费频次增加,销售基数增加,报告期该因素消除销售量同比下降;4.餐饮行业恢复短期对家庭消费带来影响。\n\n### 牧原股份\n\n公司屠宰肉食板块 2023 年在渠道的开拓与客户的发掘上取得一定成效，全年\n屠宰生猪在 1,300 万头以上，同比增长 80%左右，但距离理想产能利用率仍有一定\n差距。由于东北厂区投产时间短，产能利用率较低，头均固定成本较高，当前屠宰\n肉食业务仍处于亏损状态，但整体头均亏损水平已较 2022 年明显下降。2024 年，\n公司屠宰肉食板块会加强销售能力建设，优化产品结构与客户结构，同时加强内部\n生产、运营、销售等板块的协同，以提升整体盈利能力。\n\n### 榨菜\n\n这次定增就是要扩大收储能力，平抑价格波动，同时深度绑定青菜头种植户，实现传统农业升级，提高当地农民种植收入，助力乡村振兴，实现共同富裕。公司的发展，更要关心的是新上任的管理层，定增项目能否顺利落地，未来的发展规划。公司的负债率极低，可以说是家庭作坊式的生产模式，未来可以锚定周转率的进一步提高，匹配中央厨房的发展趋势，适当提高负债率，协同提升roe水平。几块钱的消费升级的生意，长期看空间还是很大的\n\n\n从量方面，目前榨菜产能13-15万吨，基本满产满销，预计扩产20万吨，约1.5倍，预计回报5亿/年。不扩产净利润9亿；扩产带来的净利润空间6-14亿，其中滞销带来的资产投入计提净利润约6亿，满产满销约14亿\n\n 给15-20倍市盈率，按最低净利润估值，6×15=90亿，6×20=120亿，区间90-120亿。\n按满产满销净利润估值，14亿，14×15=210亿，14×20=280亿\n\n ### 制冷剂\n 制冷剂行业经历了连续三年的低迷状态，具有利润修复的诉求。在配额基准期内，制冷剂生产企业连续 3 年，通过低\n价、低利润甚至是负利润来抢占更多的市场份额，导致企业连续三年制冷剂业务承担了巨大的利润压力，很多小型企\n业难以长期坚持。度过配额锁定阶段后，国内配额形成了供给端限制，使得制冷剂具有涨价基础，行业的企业具有通\n过涨价获得利润修复的诉求，且由于具有配额限制，并不担心行业内形成新的进入者，行业利润有望获得较大程度的\n提升。\n\n四代制冷剂主要以海外巨头供应为主，国内受专利、设备、价格等因素影响，短时间内难\n以大规模推广。四代制冷剂（HFOs）在 ODP 值、GWP 值等环保指标方面优于三代制冷剂，\n且物理性质、制冷性能等方面能够做到与三代相近，在少数领域已经开始有所应用。以四\n代制冷剂目前的主流品种 HFO-1234yf 为例，HFO-1234yf 在热力特性和能效等方面已经与\nHFC-134a 接近，可以作为汽车空调使用的新一代制冷剂。\n\n海外巨头构筑了四代制冷剂专利壁垒，国内企业短期难以实现大范围国产化。不同于国内\n的追赶路线，以科慕、霍尼韦尔、大金为代表的海外巨头在制冷剂领域布局相对较早，在\n含氟制冷剂领域具有较好的积淀，因为相比之下，海外制冷剂基本算是领先国内一代产品。\n在国内实现了三代制冷剂的技术突破和工业生产阶段时，海外巨头企业就开始重点发力四\n代制冷剂，并着手构建四代制冷剂的生产和应用专利池。相对完整的生产专利和应用专利\n为海外企业构筑了长时间的竞争壁垒，国内企业在四代制冷剂领域发展相对受限，目前主\n要在产的生产线也以为海外企业代工为主，还未能形成稳定供应销售的产业链布局。\n\n。经过 2020-2022 年\n基准期的配额锁定，2024 年行业将进入配额管制阶段，产量较 2022 年下行，供给端受到\n政策限制；而从结构上看，新的配额政策不仅确定 2024 年的整体配额，更是针对内用配\n额进行了约定，国内整体三代制冷剂的内用配额占比不足一半，预估国内市场将呈现出明\n显供需改善的情况，具有价格和利润的改善空间。\n\n### 禾望电气\n\n公司风电变流器技术领先，有望受益风光装机容量高增\n\n驱动力一：新能源电控业务，把握新能源技术趋势，迎接风光储需求共振。 \n1） 风电：政策规划加持下，2023 年风电行业高景气度彰显，公司顺应变流器\n大容量化发展，与国内  10  多家整机厂商形成稳定的合作关系，品牌优势\n有助公司持续巩固行业地位，未来有望受益风光装机容量高增。 \n2） 光伏：光伏迈入平价成长未来几年有望保持高增速，公司组串式逆变器中\n标量领先，有望充分享受行业增速。同时公司战略布局半导体公司，聚焦\n碳化硅（SiC）核心技术，推广“单管并联”技术路线，正逐步受到下游客\n户认可。 \n3） 储能：公司重点布局储能系统解决方案，项目经验丰富，2021  年以来，\n公司储能产品不断出货，产品技术获业内认可，未来市占率有望实现突破。 \n驱动力二：电气传动业务：工程变频器国产替代中，公司1GCT 变频器性能更\n佳，目前市场上工业大传动产品国产化率提升空间广阔，未来公司有望凭借技\n术优势加速开拓市场。 \n驱动力三：氢能业务：电解槽是制氢的核心设备，公司制氢电源可广泛应用于\n电解水制氢系统，与深圳大学能源研究院在氢能领域建立合作，公司产品已实\n现实际应用市场，有望受益氢能行业实现快速增长。\n\n![Alt text](image-5.png)\n\nIGCT 芯片相比IGBT 更适用于工业大传动变频器领域。在过去较长时间中，IGBT 由于\n其高频特性，在轨道交通、工业变频、家用电器、新能源逆变器等中小容量应用领域广\n泛应用，但随着电力电子装备电压和容量等级的进一步提升，IGCT 器件的高压大容量优\n势在冶金轧钢、石油开采、油气输送、重型制造、海上风电、船舶推动、抽水蓄能等工\n业大传动领域优势凸显。IGCT 单芯片可以同时承受 4500V 高电压、8000A 大电流，所\n以应用在巨大功率的“电气大传动”上面；而 IGBT 中，高压 IGBT 芯片可以承受 4500V\n高电压但只能50A 低电流，低压IGBT 芯片可以承受200A 大电流但只能1700V 电压，\n所以适合应用在“小传动”，如用在“大传动”需要多芯片串并联使用，可靠性降低。\n\n（1）  新能源电控业务:该公司主要提供风电变流器，光伏逆变器和储能PCS 相关产品，\n受益于下游风电、光伏、储能三个行业未来几年的快速发展，公司该业务有望快\n速起量。预计公司该业务2023-2025 年营收约为33.98/46.16/59.98 亿元，毛利率\n分别为27.94%/28.10%/28.44%。 \n（2）  传动业务：传动变频器技术壁垒深厚，公司是国内第一家IGCT 变频器投入实际\n应用的产商。相比于海外工业传动变频器，公司产品不仅可以在性能和质量上有\n很高的保障，且在价格上具有较强的竞争优势，具备较大国产替代空间，预计公\n司该业务 2023-2025 年营收增速分别为 60%/50%/40% ，毛利率分别为\n42%/41%/40%\n\n强制配储带动国内储能高速增长，大储在国内储能装机中占据主导地位\n\n公司风电变流器起家，主营新能\n源和电气传动产品，业务遍布亚/欧/非/南美/北美洲。公司风光储业务优\n势显著，其中光伏逆变器/储能PCS 22 年国内出货量分别位居7/8 位，\n同时传动技术国际领先，变频器定位高端应用广泛。2018-2022 年营收/\n归母净利润CAGR 分别为24.18%/49.29%，业绩稳定增长。\n\n### 盾安环境\n\n目前车用热管理阀件已获国内外系统、主机厂充分认可，增长逻辑持续验证。\n\n此供应链重塑趋势为盾安汽车零部件业务带来了良好发展机遇。\n盾安目前电子膨胀阀产品已进入比亚迪、蔚小理、极氪等销量高增长车企供应链，在良好合\n作基础上盾安可持续拓展其热管理零部件产品，充分提高单车价值量。 （占比太低了 7% 三花60%）\n\n公司盈利能力呈显著回升趋势，预计后续仍有改善。2018-2020 年公司盈利能力因债务问题\n造成短期波动，2021 年后公司净利率呈显著回升态势，排除债务干扰后，2022 年扣非销售净\n利率为 4.54%，2023H1 扣非销售净利率为 7.57%，扣非净利率明显提高，目前处于行业中游\n水平。净利率提高的主要原因是产品结构优化，原材料成本下降，以及海运费、汇率带来的\n毛利率改善。我们认为随着公司家电业务产品结构的不断优化以及汽零业务的规模效应，公\n司盈利能力后续仍将有所改善。\n\n### 三花智控\n\n按照产品划分,制冷空调电器零部件业务营业收入为77.06亿元,同比上升10.70%;汽车零部件业务营业收入为48.23亿元,同比上升50.78%。\n\n\n### 复星医药\n\n2023 年前三季度，不含抗疫产品，本集团营\n业收入同比增长约 11%；不含抗疫产品，制药业务新品及次新品收入同比增长超过 30%。\n\n2023 年前三季度，本集团继续加大研发投入，研发投入共计 42.91 亿元，同比增长 13.67%；\n其中，研发费用为 31.55 亿元，同比增加 2.92 亿元、增长 10.22%。\n\n抗疫产品及印度子公司 Gland 收入下降，创新药快速增长，药品\n板块营收占比提至 74.7%；营收总体持平。（1）公司制药板块\n1H23 营收 159.95 亿元，同比增长 11.64%；分部利润 14.22 亿\n元，同比减少 9.6%。（2）收入增长，主要来自汉斯状（斯鲁利单\n抗注射液）、汉曲优（注射用曲妥珠单抗）及曲妥珠单抗原液、\n苏可欣（马来酸阿伐曲泊帕片）等新品和次新品的快速增长；其\n中，2022 年 3 月获批的汉斯状营收 5.56 亿元，汉曲优收入同\n比增长 57.1%、苏可欣收入同比增长 32.7%，但复必泰（mRNA 新\n冠疫苗）销量同比显著下降。（3）利润减少，主要源于①复必泰\n（mRNA 新冠疫苗）销量显著下降，但仍有相应的团队和医学、\n市场等费用发生；②控股子公司 Gland Pharma 因美国市场竞争\n加剧以及部分产线停产升级等因素导致的经营业绩同比下降；③\n汉斯状（斯鲁利单抗注射液）、倍稳（盐酸凯普拉生片）等上市\n新品的市场开发、团队加强等战略性投入以及汉斯状（斯鲁利单\n抗注射液）在海外市场的前期布局及团队投入；④1H23，药品端\n研发费用同比增加 3 亿元。\n\n创新陆续兑现，药品板块营收占比提至 74.7%；成长确定。（1）子\n公司复宏汉霖的 PD-1 产品汉斯状 11 项联合疗法在全球展开，中\n国覆盖医院近 1500 家，东南亚与 KGbio 合作，美国自己团队并与\nSyneos Health 合作。（2）合营公司复星凯特的 CAR-T 产品奕凯达\n新增获批二线治疗成人大 B 细胞淋巴瘤（r/rLBCL）,截至 2023 年\n6 月底，奕凯达已治疗超过 500 位患者，备案的治疗中心超过 140\n家及 25 个省市。（3）公司包括 DaxibotulinumtoxinA 型肉毒杆菌\n毒素、盐酸替纳帕诺片等在内的多款在研药品在中国境内的上市\n申请（NDA）获受理，注射用曲妥珠单抗在美国的上市申请（BLA）\n也已获受理。在 1H23 药品营收已升至近 75%的基础上，创新管线\n蓄力充足。 \n\n2023年前三季度,公司销售费用调整主要受到以下三个因素影响: \n(1)抗疫产品销售费用: 抗疫产品收入虽显著下降,但仍有团队和医学、市场等费用;(2)海外市场销售费用: \n斯鲁利单抗注射液美国市场上市前筹备投入;控股子公司Sisram直销业务费用增加,以及为提升品牌知名度而新聘品牌大使开支;(3)新品团队建设及加强和市场开发等投入\n\n\n### 威斯迈\n\n产品结构优化，车载电源集成产品为主力，800 V 产品初现规模。2022 年起，公司车载电\n源集成产品销售收入占销售总收入 85%以上，收入及占比均呈快速增长趋势，主要原因是\n车载电源集成产品的销量快速增长。\n\n2022 年前五大客户销售收入占比下降至 57.37%，上汽、理想在近\n两年内销售占比下降趋势明显，但仍为公司前二客户。公司践行“走出去”战略，近年\n来境外收入占比也逐渐攀升。公司一方面与小鹏汽车、理想汽车、合众新能源、零跑汽\n车等造车新势力以及上汽集团、吉利汽车、奇瑞汽车、长安汽车等众多国内知名车企建\n立长期战略关系；同时在海外市场，已向知名车企 Stellantis 集团量产销售车载电源\n集成产品，并与雷诺确定定点合作关系\n\n境外收入占比达新高，境外毛利率稳步提升。公司海外收入逐步提升，2023H1 海外收\n入占比 14.49%。毛利率方面，境外毛利率逐年提升，但整体毛利率仍然低于境内水\n平，未来随着整体规模的提升，境外业务毛利率有望进一步提升。\n\n 新能源动力系统可以分为电驱动系统和电源系统。电驱动系统包括驱动电机、电机控制器\n和减速器，电驱动系统是新能源的核心，新能源车通过电驱动系统实现动力的输入和控\n制；电源系统主要包括车载充电器 OBC、DC-DC 变换器和高压配电盒 PDU，其作用是实现电\n力转化和电池充放电功能。\n\n从成本上来看，电动汽车最大的成本占比为动力电池，占比约为 38%，电机成本占比 7%，电控\n占比约为 6%\n\n电驱动和电源行业参与者可分为整车厂自供体系和第三方电驱动供应商。整车厂自供体系代表\n公司有特斯拉、比亚迪旗下的弗迪动力、蔚来旗下的蔚然动力以及长安旗下的蜂巢能源等。第\n三方电驱动供应商可以分为海外零部件巨头和国内供应商，海外汽车零部件巨头如联合电子、\n日本电产、博世、大陆、博格华纳等，凭借深厚的技术、工艺等积淀拓展至新能源汽车领域，\n本身产品力强、产能规模大，且具备全球主流车企客户资源。国内第三方电驱动供应商在近年\n来快速崛起，根据业务侧重点可以分为以电控为主的英搏尔、汇川科技，以电机为主的方正电\n机、卧龙电驱,以电源为主的威迈斯等厂商。在集成化的趋势下，部分企业开始布局电机、电\n控、电源与“多合一”系统\n\n集成化方兴未艾，电源+电驱系统多合一大势所趋 \n目前行业主流产品已由分立式部件转为集成式部件，集成化成为未来行业发展趋势。近年\n来，随着新能源汽车行业的快速发展，新能源汽车动力系统核心零部件呈现集成化、轻量\n化、智能化的发展趋势，分立式零部件逐渐往总成类方向发展。相关厂商也从原先供应独\n立电机、电控、减速器等，逐渐专向提供多合一、深度系统集成化的产品\n\n国内外企业纷纷跟进 800V 架构，超级快充是大势所趋。相比较目前 400V 充电电压，800V\n高压系统能提升充电功率和驱动功率，显著提高整车性能，同时减少整车线束等零部件重\n量及成本。目前，国内外车企已开展布局，如保时捷、小鹏、比亚迪等车企均推出搭载\n800V 高压平台车型；下游超快充充电桩也在逐步铺设覆盖，小鹏、广汽、理想、华为等均\n发布超快充桩、计划投建超充站。佐思汽研结合各车厂规划预测，到 2027 年底，800V 高\n压平台车型保有量将达到 300 万辆，800V 超充站保有量达到 1.5-2 万座\n\n高压+高功率密度趋势下， SIC 渗透率或将提升。未来电机控制器技术发展趋势为高安全\n性,高功率密度化以及高压化。随着 800V 电压平台推出，在大功率，大电流条件下减少损\n耗、增大效率和减小器件尺寸成为需求点，电机控制器的主驱逆变器需要硅基 IGBT 替换为\nSiC 基 MOS 模块，存量替代市场空间较大。作为第三代半导体材料的代表，SiC 具有大禁带\n宽度、高击穿电场强度、高饱和漂移速度和高热导率等优良特性。SiC 的禁带宽度（2.3-\n3.3eV）约是 Si 的 3 倍，击穿电场强度（0.8×106V/cm-3×106V/cm）约是 Si 的 10 倍，热\n导率（490W/(m·K)）约是 Si 的 3.2 倍，可以满足高温、高功率、高压、高频等多种应用\n场景\n\n大功率充电下，液冷散热成为解决发热的重要手段之一。相较于风冷散热，全隔离防护技\n术下的液冷充电模块是通过压缩机制冷，依靠循环液带走热量，并使用冷凝器对循环液进\n行降温，具有高防护、低噪声\n\n\n#### 晨光\n短期来看，晨光生物没有多少亮点，持续下跌磨底，如利润持续下滑，则未来深不见底。\n\n1.中药配方颗粒集采入围但无量，原料药生产效益一般。\n\n2.饲料级叶黄素价格低迷，销量下滑非常多，辣椒红和辣椒精相对稳定。\n\n3.棉籽加工产能释放，但薄利销售，年利润约1个亿，潜力不大。\n\n4.工业大麻暂时看不到风口，赞比亚土地开发进展缓慢。\n\n5.保健品增速快但量太小才0.8亿，利润占比太小，其他提取不成气侯，三大主力产品后继无人，姜黄素、水飞蓟、花椒提取雷声大雨点小。\n\n6.管理机制不佳，招人不少，但创新缺乏重大成果\n\n\n2024 年，公司主导产品辣椒红色素要发挥产能优势，朝着市场占有率 3/4\n甚至 4/5 的目标继续努力；辣椒油树脂要发挥原料及市场优势，逐步扩大市场份\n额；叶黄素要通过发展云南、印度、赞比亚、缅甸原料基地，持续提升市场话语\n权。番茄红素、食品级叶黄素要加快高端应用市场开发进度，争取在销售上实现\n大的突破；甜菊糖产品要发挥生产成本优势，加大国内外市场开发力度，进一步\n扩大市场份额；水飞蓟素、姜黄素、迷迭香提取物等产品要通过工艺优化、产能\n扩大等措施，尽快建立竞争优势，形成新的经济增长点。\n\n在工艺、技术、装备等方面积累的丰富经验，已成为公司在激烈市场竞争中\n的核心优势。公司要保持对新工艺、新技术、新设备的敏感性，积极借鉴各行业\n先进的技术和装备，持续推进生产系统改进创新，不断提高生产效率，降低生产\n成本，实现高质量发展\n\n贯彻“吃干榨净”理念，多种类提取物综合利用。公司创新应用资源综合利\n用技术，从加工所得副产品中提取出新的有效成分，通过多种类综合提取有效降\n低产品成本。除首创复合溶剂同步提取辣椒红色素与辣椒精技术外，葡萄籽已实\n现提取原花青素和葡萄籽油的综合利用，万寿菊同步提取叶黄素和槲皮万寿菊素\n（QG）、甜叶菊同步提取甜菊糖和 CQA 技术均已经实现工业应用，2022 年槲皮\n万寿菊素被批准为新饲料添加剂，QG、di-CQA 的多应用场景功效验证为动保产\n品推广提供了理论支撑，在全球禁抗和动物产品消费升级的大背景下，天然植物\n提取物作为替抗饲料添加剂的市场需求将持续增长。公司不断通过资源综合利用\n开发新的品种，在基本不增加成本的情况下提高产品附加值，挖掘业绩增长点\n\n研发投入逐年增长，研发团队高质量发展。2022 年公司研发费用破亿元，较\n上市前刚破千万的研发费产生巨大突破，同时自 2020 年起研发费用率维持在 2%\n左右的水平，因公司棉籽业务更偏大宗品属性，剔除棉籽业务营收来看公司植提\n主业的研发费用率增速较快，2022 年达到 4.42%，多年持续研发投入，使得公司\n在新产品研发、提取工艺、装备制造、产品品质等方面积累了明显的优势，打造了\n坚实的技术壁垒。同时，公司不断引进高端技术人才，研发团队维持在百人左右\n的同时持续优化研发团队人员结构，2020-2022 年硕博学历人员占比由 61.2%提\n升至 69.2%，研发团队专业素养强。\n\n天然着色剂安全健康，多领域广泛应用。辣椒红色素是天然色素的主要品种\n之一，属于类胡萝卜素，联合国粮农组织（FAO）和世界卫生组织（WHO）将辣\n椒红色素列为 A 类色素，在使用中不加以限量。辣椒红色素不仅着色效果好、色\n泽均匀稳定，而且具有一定保健作用，产品广泛应用于食品、医药保健品、化妆\n品、饲料等行业着色（或调色），据智研咨询数据显示，2015-2022 年我国辣椒红\n色素市场规模从 1.72亿元增长至 4.67亿元，期间 CAGR 达到 15.34%，预计 2023\n年有望突破 5 亿元，发展前景广阔\n\n行业扩容和市占率提升共促量增，成本加成定价下毛利率长期稳定。量增：\n主要受益于辣椒红在工业化趋势下的渗透率提升、应用领域的持续拓展与公司以\n市占率为先的策略。2015 年至 2022 年，我国辣椒红色素的产量/需求量分别从\n3.2/1.2 千吨增长至 9.5/2.8 千吨，期间 CAGR 分别为 16.7%/13.6%，国内辣椒红\n素产品多用于出口，国内市场拓展后劲十足。2008 年公司辣椒红色素已超过印度\nSynthite 成为世界第一，2022 年国际市场份额实现从不到 2%到 80%以上的飞跃；\n2017-2022 年公司辣椒红色素产品销量始终保持增长态势，2022 年辣椒红色素销\n量超 8500 吨，较 2017 年销量实现翻倍增长；2023H1 实现销量约 5900 吨，同\n比增长 16%。利稳：受益于行业扩容的同时，公司在辣椒红色素领域的生产规模、\n工艺技术、产品质量、产品成本均处于领先水平，在成本领先优势的基础上通过\n与上下游共享技术进步的成果等方式推动产品渗透率提升，产品毛利率长期维持\n较稳定状态，市场份额不断拓展，在成本加成的定价方式下公司有望通过延伸上\n游种植、降低原料成本来拉升毛利空间。\n\n多举措丰富原材料布局，收入与利润贡献稳定。公司辣椒精产品的产销量已\n连续多年位居世界第一或前列，作为主力单品对公司业绩有较好贡献。公司辣椒\n精产品的原材料是印度高辣度辣椒，2020-2021 年采购季节受到印度新冠肺炎大\n面积爆发影响，行业总供应较为紧张；2022 年印度辣椒产区受到病虫害影响，导\n致辣椒产量下降，故公司 2020-2022 年辣椒精销量对比疫情前的 2019 年有较为\n明显的下降，但 2023H1 销量同比增长 25%达到 385 吨，且高于 2021 年同期销\n量（361 吨），展望长期预计仍有望逐步恢复至疫情前的情况。公司作为我国植物\n提取行业领跑者，具备应对突发情况的灵活处理能力，虽然 2020 年至今印度辣椒\n原材料成本居高不下，但公司在 2022 年抢抓时机收购高性价比的印度花皮辣椒，\n竞争优势显著提升；2023 年公司在印度辣椒的价格仍然较高的情况下及时调整采\n购计划，在国内采购部分高辣度辣椒，优化原材料结构，产品竞争优势得到提升，\n实现 2023Q1-3 辣椒精销量同比增长约  18%。同时，辣椒精供应较为紧张导致销\n售均价同比有一定幅度上涨，2021 年收入及利润均创历史新高，2022 年受销量\n影响收入端小幅下滑但价格仍维持在较高水平，预计 2023 全年在销量增长良好\n的情况下收入有望恢复正增长\n\n天然健康营养素，高附加值方向发展。叶黄素别名植物黄体素，是一种存在\n于人眼视网膜黄斑区的主要色素。叶黄素主要应用于饲料、食品加工、保健品等\n领域。在饲料和食品加工领域，叶黄素具有极好着色作用；在保健品领域，叶黄素\n对视网膜中的黄斑有重要保护作用，是帮助眼睛发育的关键营养元素。近些年民\n众健康生活观念不断增强，叶黄素需求呈现增长趋势，叶黄素原料市场规模从\n2015 年的 2.59 亿元增长至 2022 年的 4.75 亿元，期间 CAGR 达到 9.05%，行业\n不断扩容。同时，高附加值的叶黄素产品增长迅速，据魔镜数据显示，2021 年淘\n宝平台含叶黄素的保健食品销售额超 10 亿元，同比增速达 69%，但 从品牌来看，\n目前含叶黄素保健食品赛道中仍以海外品牌为主，国内品牌仍有较大替代空间\n\n代糖领域核心产品之一，综合优势较为突出。甜菊糖苷是由甜叶菊精提而得\n的天然植物提取甜味剂，相比化学合成甜味剂，甜菊糖苷具有纯天然、无副作用\n且安全性高的优势；相比其他天然植物提取甜味剂，甜菊糖苷具有甜度较高、热\n量更低的特点，甜度是蔗糖的 200-300 倍，热量仅有蔗糖的 1/300。价甜比总体\n介于化学合成甜味剂与糖醇类甜味剂之间，在高端应用市场中发展较好\n\n\n在做好植物提取物多个大单品的基础上，公司结\n合植物提取物的功效，积极布局第三步“做大做强保健品、中药提取等大健康产\n业，为人类健康做贡献”版图，为消费者提供天然、营养、健康的产品，目前保健\n品业务和中药业务仍处于起步阶段，公司低成本工业化生产优势为业务发展提供\n帮助，远期看业绩贡献空间大。\n\n辣椒精：辣椒精的原材料是\n印度高辣度辣椒，2020-2023 年原材料价格维持较高位置，销量受高价\n影响整体呈下滑趋势。2023H1 辣椒精售价维持高位，销量同比增长约 \n25%，公司及时调整采购计划，预计全年吨成本和售价均将有小幅下滑，\n销量或有回暖，整体收入端恢复正增长，但盈利水平或有下滑。（3）叶\n黄素：23H1 饲料级叶黄素销量同比下降约 70%，食品级叶黄素销量同\n比增长超 110%，但 叶黄素价格在 23Q2 触底企稳，预计下半年销量有良\n好恢复。从全年来看，受饲料级叶黄素体量较大影响，预计全年收入和\n利润均有所下滑，毛利率也有所下降。（4）其他植物提取物：今年上半\n年餐饮消费恢复带动花椒提取物销量快速增长，销量增长同比增长约\n50%，创同期历史新高，预计全年有较好恢复；23H1 甜菊糖销售近亿元，\n行业需求保持增长的态势下出现激烈价格战的可能性较小，预计全年稳\n健增长。综合各细项来看：1）收入端：全年收入端其他植物提取物在低\n基数与环境转好背景下收入增速最快，其次为稳定增长的辣椒红、辣椒\n精，叶黄素受销售节奏影响下滑，整体全年植提业务将呈现稳定增长趋\n势。预计 2024-2025 年叶黄素业务恢复正常增长轨道，同时公司不断扩\n充产品矩阵，收入增长或提速。2）利润端：全年来看，较高毛利水平的\n饲料级叶黄素在收入中占比降低，业务结构变化导致整体毛利率降低\n\n### 舍得 \n23Q3 公司毛利率/净利率分\n别同比变动-4.02/-1.03 个百分点至 74.63%/21.87%，其中毛利率下降或主\n因：①普通酒占比提升；②夜郎古并表有影响。环比看，受益于旺季品味\n舍得动销良好，23Q3 毛利率环比提升 2.75 个百分点。净利率下降或主因\n结构变动，费用端看：23Q3 销售费用率/ 管理费用率分别同比变动\n+2.83/-2.53pcts 至21.46%/10.86%，销售费用率提升或主因公司加大营销活\n动投放力度。23Q3 合同负债同比/环比分别变动-0.36/-1.83 亿元至3.26 亿\n元；经营性现金流同比-109.17%至-0.59 亿元\n\n### 国瓷材料\n\n1)电子材料: \nMLCC介质粉体产品销量环比略有下降,维持全年弱复苏态势;2)催化材料: \n淡季不淡销量持续提升,蜂窝陶瓷、铈锆固溶体等产品增长明显;3)生物医疗: \n持续推动全球化布局,努力提升产品多元化和品牌化;4)新能源材料: \n氧化铝、勃姆石销量快速提升,但销售价格下降,公司通过优化成本提升盈利能力;5)精密陶瓷: \n三季度开始,公司在800V高压快充新能源车领域已完成批量供应,目前正加紧扩产氮化硅粉体;6)陶瓷墨水: \n公司陶瓷墨水国内市场地位保持稳定,与科达制造的协同将开始逐步显现。\n\n精密陶瓷板块的增量主要是新能源汽车陶瓷球和陶瓷基板两个方向。 \n其中,新能源汽车陶瓷球业务的进展比较顺利,高压快充的新能源汽车开始引起市场关注,已经开始有部分车企推出相关产品。 \n今年下半年开始,公司新能源汽车陶瓷球的销售收入不断增长,速度在加快。 \n同时,公司正在加紧推动氮化硅粉体的产能建设。 \n 陶瓷基板方面,公司今年2月并表了铜陵赛创,完成了粉体、基板、金属化的布局,铜陵赛创进入到国瓷体系后,各项业务都在加速推进,LED大灯用陶瓷基板已经通\n过了国际头部客户的验证,激光雷达用陶瓷基板已经开始逐步放量。 \n另一个新产品是陶瓷金属管壳,这个产品主要是用在低轨卫星中的接收和发射模块,具有非常好的发展前景,公司将根据市场需求重点发展。 \n综合来看未来几年陶瓷球和基板业务都将实现快速增长。 \n\n### 芯片\nAI 科技革命趋势日益显著，先进制程加速追赶：随着先进制程工艺成\n本不断上升，当前只有台积电、三星、英特尔仍留在先进制程赛道\n上，公司是唯一的先进制程挑战者。中芯国际在 2019 年下半年正式开\n始量产 14nm  FinFET，成为继台积电、三星、格罗方德、联电后的第\n五家掌握该技术并能够量产的厂商。且后续 12 纳米、7 纳米等制程开\n发均可继续沿用 FinFET 结构成果。AI 科技革命趋势日益显著，作为\n当前的先进制程挑战者，公司有望在AI 趋势的发展中起到重要作用。 \n\n### 造船\n4 中国船舶：12月接单11艘，产能覆盖率为3.49年\n2.5 中国重工：12月接单13艘，产能覆盖率为4.14年\n2.6 中船防务：产能覆盖率为2.94年\n\nA公司已经进入新一轮船舶周期的业绩兑现期。目前，部分成本较高的老订单已交付，同时上游材料价格已出现较大回落，外汇端的压力也出现较大改善，预计公司未来盈利能力将会回升至较高水平。以PB估值看，估值越过中轴线，进入景气周期，有望业绩估值双击\n### 中国船舶\n\n碳中和趋势下，利好本轮造船行业替换需求上行。针对 IMO 提出的具体要求，船东应对\n方法主要包括：（1）降速航行带来的有效运力降低；（2）调整能效要求不足的运力安排\n和班期；（3）增加甲醇、LNG 等燃料船舶，降低整体碳排放等；（ 4）老船加装节能装置\n等。环保政策推动下，海运平均航速持续下降带来的运力损失和老旧船舶的更新替代有\n望成为造船市场需求来源之一，同时 LNG、LPG 等低碳船型产能有望持续扩张。根据\nClarksons 数据统计，截至 2022 年，全球安装脱硫设备船共 4385 艘，占全球总船数的\n4.27%。 \n整体来看，公司收入端，需求上行叠加新造船价格上升，民船造修有望实现量价齐升；成本端，造船板\n价格自 2H21 以来波动下行，公司成本压力减弱，盈利能力有望提升。此外，公司积极布\n局 LNG、大型邮轮等高价值量船型，有望持续推动公司产品结构升级，增强公司核心竞\n争力\n全球宏观经济不确定因素对新船订单量和新造船价格均会\n产生波动性影响。同时公司目前整体排产已至 2026 年，考虑到本轮周期造船厂扩产谨慎，\n同时造船业务属于充分竞争市场，公司后续新增订单增速存在不及预期可能性。\n\n公司作为全球船舶制造龙头，在各种高端船型领域均有突破。其中，公司设\n计的“MSC CHINA”号集装箱船具有较低的燃油消耗和温室气体排放，是\n公司在高端船舶领域的一大突破。我们维持盈利预测，预计公司23-25 年归\n母净利润为 34.0/75.6/110.5 亿元，同比+1876%/+123%/+46%\n\n公司股权结构清晰，实际控制人为国务院国资委。公司为中船集团旗下核心军民品主业\n上市公司平台\n公司为中船集团核心上市公司，主营船舶造修、海洋工程及机电\n设备等业务。公司控股江南造船、外高桥造船、广船国际、中船\n澄西四大船厂，全面覆盖军民船舶等各类领域。受益船舶市场回\n暖，公司 1-3Q22 实现营收 385.92 亿元，同比+0.96%；公司非经\n常性损益使得 1-3Q22 归母净利润 14.63 亿元，同比+256.35%。\n同时 2023 年新一轮国企改革有望为公司带来新催化\n \n 需求端：船舶行业大周期复苏，扩张需求+替换需求共振。船舶\n行业二十年一周期，2021 年海运景气度回升明显，全球新接船订\n单（按万载重吨统计）同比+97.2%，创 2013 年以来新高，2022\n年新接订单万载重吨口径同比-36.5%，但新接订单金额同比仍增\n长 8.2%，主要系目前各船厂排产饱满，造船已进入“量降价升”\n的挑单环节。替换需求方面，当前大型活跃船队平均船龄已接近\n21.7 年，老旧船替换周期临近。同时 IMO2023 年环保新规使得绿\n色船舶改造替换需求确认，有望进一步推动新造船周期上行\n\n公司在手货币资金较为充足，2020 年公司完成资产重组后，货币资金实力进一步增长，\n维持在 500 亿元以上。公司整体经营性现金流自 2017 年开始呈现净流入状态，2022 年\n前三季度公司经营性现金流-47.80 亿元，主要系子公司船舶产品收款同比减少，材料设\n备支出同比减幅小于收款减幅所致\n\n2016-2017 年受船市下行周期、海工产品大额减值及原材料价格上涨\n等原因影响，外高桥造船出现两年亏损。近两年公司业绩总体保持稳定，1H22 外高\n桥造船实现营收 57.47 亿元，净利润 0.26 亿元。\n\n经营层面上，广船国际积极承接双燃料汽车滚装船（PCTC）、 客滚船、极地凝析油船\n及极地科考船等双高技术船舶。\n![Alt text](image-8.png)\n\n中长期看，原油需求持续增长，油船市场景气度有望接力。2020 年受全球疫情影响、宏\n观经济下行以及新能源替换等因素，全球原油贸易下滑明显，伴随全球经济逐渐复苏及\n贸易量提升，交通运输及工业用石油需求开始复苏，目前原油处于去库存阶段，全球主\n要经济体原油库存处于低位，截至 2022 年底，经合组织国家商业原油库存下降至 39.68\n亿桶，已基本见底，补库存周期有望恢复，根据原油需求改善下对应船队运力增加，当\n前油运价格已出现复苏迹象，油船有望成为继集装箱船后又一支撑市场发展的主力船型\n\n新能源船替代传统燃料船大势所趋，未来低碳船型主要包括 LNG 船、LPG 船与锂、氨、\n氢能源动力船等。新能源燃料要综合考虑热值、密度、安全性、经济性等多方面因素，\n当前 LNG/LPG 船等技术成熟度已经相对较高，氨燃料优势在于实现大量碳排放降低，但\n目前技术相对还不成熟，成本相对较高。\n\n核心观点：长建设周期、扩产困难使得行业不断向龙头企业集中，本轮造船上行周期中\n国有望延续上一轮韩国情况，引领全球造船业发展。2022 年我国三大造船指标占据全球\n约 50%市场份额，中国船舶占我国市场份额约 20%，占全球份额约 10%。整体来看，公司\n收入端，需求上行叠加新造船价格上升，民船造修有望实现量价齐升；成本端，造船板\n价格自 2H21 以来波动下行，公司成本压力减弱，盈利能力有望提升。此外，公司积极布\n局 LNG、大型邮轮等高价值量船型，有望持续推动公司产品结构升级，增强公司核心竞\n争力\n\n2022 年我国新接订单量、在手订单量和造船完工量\n以万载重吨计分别占全球总量的 55.2%、47.3%和 49.0%。\n我国在大型 LNG 船领域持续突破，2022 年全年新接大型 LNG 船订单国际市场份额首次超\n过 30%。2022 年中国形成了以沪东中华、大船重工、江南造船、招商海门和江苏扬子江\n船业为主的多个大型 LNG 船建造企业集群\n\n船价在签订订单时已基本锁定，其成本波动主要在船舶建造周期中由造船厂自己承\n担。根据公司公告，船舶主要原材料以 6mm 和 20mm 船用钢板为主。2020 年底新造船\n价格逐渐升高，但同时造船钢材价格伴随上涨目前新造船价格上涨。造船板价格在\n5M21 达到峰值后开始回落，截至 2022 年底，上海 20mm 造船板价格为 4480 元/吨，\n同比下降 17.8%，相较 2021 年峰值下滑接近 35%。造船板价格下降有利于增加公司\n在手订单毛利，盈利能力有望持续修复\n\n公司船型结构也同时持续优化，2021 年公司散货船/集装箱船/油船交付\n量分别为 352/100/134 万载重吨，同比增长-27%/129%/0.5%，其中集装箱船占比增幅明\n显，高价值量船型结构占比提升\n\n公司针对高附加值船型持续突破。2018 年初，公司下属子公司江南造船获得法国达飞海\n运公司 23000TEU 超大型 LNG 双燃料集装箱船订单，该型船上配置了世界上第一批 MARK \nIII 薄膜型 LNG 燃料舱，2022 年 5 月第四艘已交付完成。2021 年江南造船与广东九丰能\n源签订 1 艘 79800 立方米 MARK III 薄膜型 LNG 运输船订单，正式进入薄膜型液化气船建\n造领域。根据公司公告，江南造船与阿布扎比国家石油公司（简称 ADNOC）旗下 ADNOC \nLogistics & Services 订了 2 艘 17.5 万立方米 LNG 运输船建造合同。同时公司进军大\n型邮轮领域，2018 年外高桥造船与中船嘉年华及中船邮轮签订“2+4”艘 13.55 万总吨\nVista 级大型邮轮新造船合同，其中实船 2 艘，选择船 4 艘，根据公司公告，国产首制\n大型邮轮有望年中出坞，年底交船。\n\n大型豪华邮轮、大型 LNG 船、航母并称为造船业“皇冠上的明珠”\n\n中美海军力量存在较大差距，中国航母、军辅船等存在较大市场空间。根据《The \nMilitary Balance2022》，中国同美国在航母、驱逐舰、护卫舰、潜水艇等主力舰艇方面\n存在较大的差距，随着国际形势的日益严峻与我国海军战略由“近海防御”向“远海防\n卫”的转变，我国在航母及军辅船等方面存在更多的需求。 \n\n2016 年美国军费支出由降转升，中国军费也将继续增长。从绝对量的角度来看，2021 年\n中国军费支出 2933.52 亿美元，美国军费支出 8006.72 亿美元，美国军费支出约是中国\n军费支出的 2.73 倍，中美之间军费支出存在较大差距；从军费支出占本国 GDP 的比重来\n看，2020 年中国军费支出占 GDP 比重为 1.75%，而同期发达国家军费支出一般在 2%以上，\n2020 年美国军费支出占 GDP 的比重为 3.74%。受全球局势动荡与中美关系恶化的影响，\n2016 年美国军费支出开始增加，占 GDP 的比重也开始呈上升趋势。同时近期两会政府工\n作报告中指出，我国要深入贯彻强军思想，全面加强练兵备战，创新军事战略指导，大\n抓实战化军事训练，统筹抓好各方向各领域军事斗争\n\n十四五”期间，\n我国海军战略由“近海防御”转向“远海防卫”，对海军装备需求随之增加。2022 年我\n国国防支出 1.45 万亿元，同比增长 7.02%，受益于国防开支的增加与装备的升级换代，\n海军装备采购需求有望不断增加。\n\n江南造船厂于 2015 年成为中国第一军工造船企业，目前能够满足海军各系列舰船的建造\n需要。江南造船是我国历史最悠久、军品结构最齐全、造船效率最高的军工造船企业，\n也是我国技术最先进、规模最大的军船生产基地。江南造船厂承担了我国 003 号航母\n“福建舰”、第一代至第四代导弹驱逐舰、万吨新型驱逐舰“南昌号”等的建设任务。目\n前，江南造船厂占地面积 517 万平方米，岸线总长 3561 米，共分三个生产区域，能够满\n足海军各系列舰船的建造需要。\n\n设备及钢材的用量随船的交付体\n量而增长，同时中性预期假设造船钢板水平将在 2022-25 年有所回落但总体有望维持在\n一定水平，预计公司整体 2023 年毛利率相较 2022 年有望增长 5.3pcts\n\n### 保险\n\n首先，近期社融持续改善，后续积极的财政政策有望带动总需求和经济恢复动能逐步增强，稳健的货币政策也会通过降准等多种方式予以协同配合，将共同稳固宽信用进程。长期利率下行空间有限，更可能随着经济形势的复苏，利率出现回升，并利好险资债权资产，同时利率增速的企稳也有望持续拉动债市的回弹。\n\n其次，股市在经历了惨淡的2023年已经整体处于较为低估的水平，2024年上行的概率加大。股市回暖将带动险企股基等权益资产投资业绩向好；而 IFRS9 金融准则实施后 FVTPL 资产占比明显上升，也将进一步放大投资波动，或对2024年利润增长提供较好支撑。此外，险企将持续加大包括高股息股票在内的权益资产配置，预计此类资产将普遍计入 OCI资产类别中，股息分红收入的增加将稳定并提振险企净投资收益率，从而带动总投资收益率改善。\n\n最后，保险公司持有的地产等投资开始出清，相关的资产风险逐步化解。险企资产质量持续改善\n\n\n 平安首个动工的超高端养老社区—深圳·臻颐年将于2024年完工。平安已在全国17城拥有健康检测中心，成为平安保险+医疗+养老的粘合剂。平安自有医生、外接医生以及自有健康管理中心，且线上、线下服务渠道最为均衡，相较于其他保险公司，平安能够提供闭环程度更高的省心、省时又省钱的服务。随着平安保险+生态服务陆续面世，新业务价值率弹性空间更大。\n \n\n ### 恒立液压\n\n 挖掘机预计 2024-2025 年完成筑底开启新周期\n 伴随房改政策出台提振信心，一万亿国债发行，基建\n发力带动复苏，用 8 年左右一个周期测算，行业预计在 2024-2025 年完成筑底开启新周期。\n\n 挖掘机销量主要由下游需求决定。国产品牌对国外品牌的国产替代已基本实现，销量被\n下游需求决定。需求端为两类新增需求和更新需求：国内的新增需求取决于地产、基建、矿\n山等固定资产投资；国外的新增需求取决于欧美市场占有率提升、“一带一路”等国家的基\n建项目和矿山开发等；更新需求主要包括设备老化更新需求，环保标准升级的换代需求和技\n术创新后的升级需求\n\n盾构机油缸技术领先，全球市占率超60%。从 2005年起恒立开始研发生产盾构机油缸，\n油缸配套至中交“长城号”等大型盾构机；在美国西雅图 Bertha 号盾构机中，全套高压油\n缸均来自公司，即使该在地下施工作业两年，也未出现腐蚀、密封件老化等问题。根据公司\n公众号，2019 年恒立盾构油缸全球市场占有率超过 60%，国内市场占有率超过 80%，技术\n世界领先。\n\n海外高空作业平台市场以存量更新为主。北美、欧洲等海外发达国家和地区经济发展水\n平高，安全生产法规严格，高空作业平台市场成熟，存量市场大，应用普及率高，产品结构\n完善，更新替换需求稳定。2021 年，美国租赁市场高空作业平台保有量为 72.21 万台，同\n比增长 10%。欧洲十国租赁市场保有量为 32.46 万台，同比增长 3%\n\n国内市场仍处于高速成长阶段。中国高空作业平台市场仍处于成长期，低成本、高效率、\n安全作业保障是促使高空作业平台在国内市场快速发展的三大驱动因素。据中国工程机械工\n业协会的数据显示，2022 年，我国高空作业平台销量达 19.6 万台，同比增长 22.40%。2022\n年中国高空作业平台保有量约为 43.85 万台，同比增长 33%，与美国 2021 年高机租赁保有\n量 72.21 万台相比摊平的人口总量上来看，仍存在较大增长空间。\n\n海外营收持续增长，毛利率领先国内同行。2022 年公司实现海外收入 17.53 亿元，同\n比增长 41.9%，自 2015 年以来实现复合增长率达 28.54%，实现海外业务高速发展。从海\n外收入占比来看，公司 2022 年海外收入占比达 21.4%，与 2021 年相比提升 8.1pct；其中，\n2015-2020 年海外营收占比下滑的原因是，国内工程机械进入上行周期，增速远超海外业务\n所致。从毛利率来看，公司海外业务毛利长期维持在 35%左右，领先同行艾迪精密 8-10pct\n左右，凸显公司经营管理、成本管控和品牌效益领先行业\n\n墨西哥项目投产在即，业绩提升 17.03 亿元增量。2021 年公司非公开发行募资 50 亿\n元，其中建设投资 14.12 亿元，该项目达产后将形成工程机械用油缸 200,440 根、延伸缸和\n其他特种油缸 62,650 根以及液压泵和马达 150,000 台的生产能力。墨西哥项目预计在 2024\n年上半年开始逐步投产，将有利于公司深度拓展美洲市场，避开贸易关税壁垒，提升交期和\n售后速度。项目达产后预计将为公司带来 17.03 亿元的业绩增量，占 2022 年总营收的 20.8%\n\n丝杠项目明年逐步投产，预计带来至少 62.96 亿元业绩增量。根据公司公众号报道，目\n前新工厂已建成，各项基础设施建设已经进入扫尾阶段。全部完成届时将形成年产标准滚珠\n丝杆 66 万米、精密滚珠丝杆 42.2 万米、行星滚珠丝杆 1 万米、直线导轨 100 万米、标准\n滚珠丝杠电动缸 10.4 万根、重载型滚珠丝杆电动缸 2.5 万根和行星滚柱丝杆电动缸 1750 根\n的生产能力。根据公司公告中的单价进行预测，整个丝杠项目可创造至少营收 62.96 亿元，\n占 2022 年营收 76.8%。预计 2024 年上半年开始逐步投产，开启第三增长曲线\n\n油缸业务：公司国内挖机油缸市占率可保持在 60%以上，未来海外市场渗透率有望提升\n带来增量；非标油缸由于海工装备、盾构机、高空作业平台和非挖工程机械的油缸保持增长，\n平滑挖机业务的波动，预计 2023-2025 年公司油缸收入增速保持稳增长为 5%，10%，14%，\n随着下游工程机械在 2024-2025 年的景气度恢复，预计油缸业务毛利率将回升，分别为\n39.90%、42.5%、44%。 \n泵阀业务：主要包含挖机泵阀马达和非标泵阀马达等；预计未来公司中大挖泵阀市占率\n稳中有升，挖机马达市占率上行，并且泵阀突破进入海外主机厂为业绩带来增长点。非标泵\n阀、马达业务受益于农机和高级泵阀产品放量，带动泵阀业务占比提升。预计 2023-2025 年\n公司泵阀收入增速为 12.5%、22.0%、32.0%。预计 2023-2025 年公司泵阀业务毛利率水平\n分别为  48.36%、49%、49%。 \n液压系统：此业务偏项目型，受制造业宏观形势影响，预计 2023-2025 年收入增速为-\n30%、29%、27%，毛利率水平保持稳定，按 44.90%、45.0%、45.0%计算。 \n\n\n### 猪\n生猪出栏量完成目标，能繁母猪存栏量稳步增加。公司2023全\n年出栏 6382 万头，同比+4%，此前公告出栏目标为 6250~6400\n万头，出栏量完成目标。伴随猪价持续低迷，预计公司单月养\n殖亏损环比加剧。4Q23末公司能繁母猪存栏313万头，较3Q23\n末增加4%、同比增加11%\n\n猪价旺季不旺，产能持续去化。根据调研，2023 年腌腊旺季猪\n肉消费量有较为明显的减少，生猪价格旺季不旺。结合目前生\n猪供给量大，以及2023年国庆及元旦前的猪价表现，我们预计\n年前的猪价反弹幅度有限、行业或将继续亏损。参考1H23能繁\n母猪存栏量降幅较小，且1-3Q23行业投苗量较高，我们预计未\n来 1-2 个季度生猪供给压力仍然较大。目前看来，能繁母猪产\n能去化趋势加深，根据行业数据，12 月规模场能繁母猪存栏量\n环比减少2.02%，同比减少5.45%，2023年12月较1月能繁减\n少5.30%。我们预计2Q24之后有望出现猪周期的底部拐点\n\n公司2023年12月的生猪养殖完全成本为15.3元/kg,相比前几个月有所上升,主要原因是冬季疫病造成的生产成绩波动以及防控疫病的投入有所增加。 \n目前疫病对猪群的影响已趋于平稳,公司会持续做好疫病防控,一是通过空气过滤猪舍、精准通风系统等硬件装备进行防控,二是做好人员、物资的消毒管理,三是\n保证一线人员对各项生物安全措施的有效执行\n\n 现金成本是影响公司现金流安全的关键因素之一,当前公司生猪养殖完全成本中,折旧摊销占比在10%左右,现金成本在13.5元/kg左右,公司现金成本安全垫较\n厚。 \n此外,公司与银行等金融机构保持稳定、良好的合作关系,授信储备充足, 中国农业银行、中国建设银行、中国银行等头部银行均将公司作为总行战略客户,目前头\n部银行授信占比超过70%,未用信额度超过300亿元,去年新增银行贷款成本基本在4%以下\n\n### 九毛九\n\n强中台成就多品牌，全球化延拓优势。1）怂火锅：火锅赛道机遇与挑战并存，怂品牌借力平\n台优势，模型跑通、加速开店、有效全国化，中期维度形成集团又一利润驱动。2）赖美丽：\n烤鱼行业广阔明朗，赖美丽定位烤鱼版太二，在标准化经营、高辨识品牌、强协同供应角度直\n接受益集团赋能，将适时开店以赛代练、持续打磨蓄势待发。3）太二国内：从渠道发展和人\n口覆盖角度测算，太二品牌在五年维度于国内门店空间可略超1000 家，目前高质量扩张、节\n奏稳健，品牌能量强劲向上。4）海外：海外中式餐饮市场潜力较大，川式正餐品类适应性\n强，而集团全球化布局清晰，延续集约、标准、效率的经营思路，第一阶段率先渗透东南亚、\n北美等华人聚集地，对标进驻海外较早的川式休闲餐品牌海底捞，中长期目标预计或可看约\n150 家；除华人市场外，川式正餐在海外本土市场也具备较大潜力，现有龙头在经营规模化、\n管理标准化、设计本土化的成功经验可为借鉴\n\n以火锅、酸菜\n鱼为代表的菜品由于具备易标准化的特质，龙头公司门店数量较高，连锁品牌扩张潜力更加充分；\n而粤菜、传统西餐等由于食材要求、制作工序相对复杂，对厨师依赖度高，因而难以形成统一稳\n定的标准化供应服务体系，相应其赛道中的龙头公司也更难形成规模化扩张。\n\n![Alt text](image-9.png)\n\n联营介入原料生产，食材质价深度把握。1）鲈鱼：早在2020 年7 月，集团便与上游食材供应商\n成立合营公司开展第一个合作养鱼项目，截至2020 年底，合营公司已拥有3000 余亩的加州鲈养\n殖基地，集加州鲈的育苗、养殖、加工、销售为一体。酸菜：太二与酸菜供\n应商在四川成立酸菜腌制基地，以独特的配方在传统中国陶罐中腌制定制的酸菜，并且公司与酸\n菜供应商通过达成长期且稳定的合作协议，获得提前付款的折扣，以此保障酸菜的供货质量与价\n格。3）火锅调料：22 年年底，公司斥资 9.96 亿元收购重庆市涪陵区 3.3 万平米土地使用权，部\n分用于建设火锅底料及复合调味料生产厂房，为怂重庆火锅品牌的核心原料供应奠定基础\n\n供应能力打造完备，并成为集团的基础设施资产，未来多品牌均将享受规模与效率红利。1）集\n团已有的鱼养殖基地、酸菜种植收采机制、调料自产厂房设备，从主料到辅料，全方位奠基成集\n团突出的供应能力，且将辐射多个新品牌，形成规模集采与生产效率红利，有望构筑优于同行的\n产品质价和盈利能力。如太二的鲈鱼养殖基地能够养殖赖美丽所需的江团鱼和牛蛙，底料工厂或\n可辅助生产烤鱼所需的麻辣风味底料，提高集团各品牌在供应链端的协同效应。2）全国化中央\n厨房及总部供应中心建成，将从食材仓储、加工、物运等角度提高品牌协同和整体经营效率，保\n证品质把控和口味统一，可为集团旗下未来有望全国化的多个品牌提供门店储配支持。 \n\nSKU 集约化，降低决策时间。太二 SKU 不超过 30 个（含\n配菜），而主品酸菜鱼只可更改分量（辣度、鱼品、基础配菜均固定），精简的单品设置不仅降\n低顾客决策时间，也减少后厨备菜成本，同时降低上游供应管理难度，提高采购物运的规模效益，\n为门店翻台提升和成本降低均提供充足空间。2）场景精简化，加快用餐速度。太二餐厅原则上\n不接待 4 人以上同时就餐，且不提供拼桌加位服务，将就餐场景限定为工作餐、快捷休闲餐等偏\n刚需的类目上，有利于充分吸纳核心受众、加快整体用餐速度，同时减轻宴请派对等环节的服务\n需求，降低不必要的人员成本。3）流程自助化，减少服务冗余。太二餐厅服务人员负责引导顾\n客入座、传菜及响应必要需求，其余点餐、茶水、结账等流程均通过小程序或顾客自助完成，进\n一步提高就餐效率，降低服务成本\n\n“爆品策略+品牌 IP”，战术化营销方式实现强势破圈。1）单品故事先行，差异化塑造品牌记忆点。\n太二主打一道老坛子酸菜鱼，以“酸菜比鱼好吃”体现差异化；怂火锅主营重庆锅底和鲜切黄牛肉，\n主打“灵魂是锅底，头牌是牛肉”带给顾客独特的消费体验；赖美丽延续集团精简 SKU 的路线，以\n青花椒烤鱼为主要特色且只卖自养江团鱼，建立了差异化的品牌壁垒，树立了独树一帜的消费卖\n点。2）打造品牌 IP，传递独特品牌文化。太二设计了沉默寡言的二老板及活泼幽默的小二哥形\n象，通过黑白漫画形式推送新品及活动，并以品牌形象与猫咪“何英俊”联名进行公益活动等，吸\n引年轻消费群体率先入场；怂火锅塑造了飒小妹、怂厂长两个 IP 形象，输出“你，开心就好”的品\n牌理念；后续孵化的赖美丽也打造出一个出身养鱼世家、爱笑爱吃烤鱼的个性女孩形象，增强趣\n味性，在与年轻顾客拉近距离的同时，输出品牌专注菜品高品质、创新独特有趣的品牌调性，不\n断提升品牌在受众客群中的影响力，迅速提高品牌知名度，也是未来新品牌可沿用的打法\n\n### 云南白药\n\n\n百年品牌，焕发新活力。2019 年“白药模式”混改落地，公司引入民营资\n本并实施股权激励和员工持股等政策，激发员工积极性。白药参与上海医药\n定增，双方未来有望在药品研发、医药商业等领域强强联合；全面要约收购\n万隆控股，完善工业大麻产业布局，搭建国际化贸易平台。\n\n持续探索外延，力求第二增长曲线，数字化平台焕新赋能。在做深做实现有\n业务板块的同时，云南白药立足“1+4+1”战略，积极探索“第二增长曲线”，\n着力布局医美、口腔护理、骨伤以及女性关怀产业链，推出“齿说”智能电\n动牙刷、冲牙器等多个产品，并集中优势资源，积极推进医美产业布局。\n\n四大事业部行稳致远，进而有为。1）药品事业部：云南白药作为百年名药，\n其配方享有国家最高保密级别，其中云南白药膏与云南白药气雾剂均为 10\n亿级别大单品，多款产品位居骨伤科前列；2）健康事业部：2022 年，健康\n事业部营业收入61.97 亿元，同比+5%，其中牙膏市占率稳居细分赛道第一；\n3）中药资源事业部：在 2013 年单独成立后，营业收入从 2013 年的 2.98\n亿，增长到2022 年的峰值14.47 亿元，在各事业部中增长最快，是公司四\n大业务部门中最有潜力的增长点，受益于产业布局，公司中药材板块在三七\n价格持续走低的背景下逆势上扬；4）医药商业板块主要依托云南省医药公\n司，发展医药流通和云南白药大药房两大业务，两票制后公司并购中小流通\n商，并获上海医药支持，区域龙头地位稳固，将长期受益于行业集中度提升\n\n战投上海医药。2022 年 4 月，云南白药发布公告，作为战略投资者，以现金方式认购上\n海医药665,626,796 股份。此次认购完成后，云南白药持有上海医药18.01%股份，成为\n上海医药第二大股东，上海市国资委仍为上海医药实际控制人。\n\n以白药系列为核心，培育医疗器械产品矩阵。药品事业部主要包含药品系列和医疗器械品\n牌，其中云南白药药品系列共有19 个剂型，300 余个品种，分为白药系列和普药。1）白\n药系列：云南白药系列在传统的云南白药散剂基础上，拓展出云南白药膏、云南白药气雾\n剂、云南白药创可贴等多种剂型，满足差异化消费需求；2）普药和特色药系列：以气血\n康口服液、宫血宁等大单品为基础，向感冒类、胃肠道类、抗感染类和清热类等产品延伸；\n3）医疗器械：2022 年，药品事业部以“稳药品·育器械”为核心战略，选择慢病疼痛、\n眼健康两大细分领域拓展发力，探索医疗器械家庭化使用场景，谋求新增长极。\n\n\n### 充电桩\n\n超充落地具备可行性，全生命周期充电度电成本大幅降低。液冷超充桩初始投资\n成本较高，通过微电网、共享储能可解决超充对电网稳定性的冲击但也大幅提升\n了初始投资成本。充电网作为重要的新型基础设施，应考虑未来技术迭代和标准\n升级，改变简单比较单瓦成本的思路，引入全生命周期的充电度电成本进行评估。\n以华为全液冷超充方案为例，度电成本要远低于传统方案，10 年整站度电成本\n0.34 元/kWh，分别较一体桩、风冷堆低 35%、26%，投资回收期仅为 6.7 年\n\n，超充桩建设成为800V 高压快充推广的制约因素。\n海内外车企成为超充桩建设主力，华为 600kW 液冷超充站引领技术趋势，超充\n桩成为充电桩投资侧重点。关注大功率直流桩占比高的整桩企业、超充桩带来的\n液冷模块、液冷枪线等技术升级方向。 \n推荐：威迈斯、鑫宏业；关注：永贵电器、通合科技、利和兴、绿能慧充。\n\n要实现高压快充主要从 4 个方面入手：（1）车端：提升整车平台电压，相应部\n件耐压性需升级；（2）电池端：提升电池快充倍率性能；（3）桩端：大功率\n直流超充升级，提升散热能力，例如液冷模块、线缆和充电枪液冷技术的应用；\n（4）电网端，需解决大功率充电对电网稳定性带来的冲击。\n\n（1）具有技术、客户等优势的液冷充电模块公司，推荐：威迈斯，建议关注：\n通合科技；（2）液冷枪和液冷线缆公司，推荐：鑫宏业，建议关注：永贵电器\n等；（3）大功率快充整桩和代工公司，建议关注：利和兴、绿能慧充等\n\n通过微电网、共享储能可解决超充对电网稳定性的冲击。微电网是指由分布式电\n源、储能装置、能量转换装置、负荷、监控和保护装置等组成的小型发配电系统，\n是解决分布式电源直接接入电网所引起一系列问题的有效手段。\n\n![Alt text](image-10.png)\n\n 超充有待规模化降本，应从度电成本视角衡量经济\n性\n\n大功率液冷充电\n枪是在充电线缆中放置液冷管道，让冷却液带走线缆的发热量，此种方式不仅可\n以减小线缆线芯截面积，而且充电电流更大，充电过程温升更低\n\n### 盛弘股份\n\n公司的电能质量产品主要解决用户在用电过程中遇到的工业配套电源问题,通过解决电网谐波、三相不平衡、电压暂降、突然断电等问题,提升用户用电质量及用\n电安全。 \n可以广泛应用于高端装备制造、石油矿采、轨道交通、IDC数据中心、通信、冶金化工、汽车制造工业、公共设施、银行、医院、剧院、广电、主题公园、电力\n系统等行业\n\n公司成立于 2007 年，2017 年深交所上市，是国家创新基金、深圳市科技\n研究开发计划入选企业。公司是专业的能源互联网核心电力设备及解决方案\n提供商，主要业务属于国家性战略新兴产业中的节能环保、新能源领域\n\n营收拆分：2022 全年营收同比增长47.16%，增速提高 14.75pct。主要系：\n（1）\"十四五\"纲要等政策刺激高端装备制造业快速发展，公司电能质量设备\n业务稳定增长，2022 年实现营收 5.12 亿元，同比增长 26.69%；（ 2）受新\n能源电动汽车市场风口推动，充电桩业务发展势头良好，产品出货持续增加，\n22 年实现营收4.26 亿元，同比增长116.96%；（ 3）锂电池厂商持续扩大锂\n电池的生产需求，带动公司电池化成与检测业务营收增长，22 年营收 2.58\n亿元，同比增长72.37%。\n\n迎接充电行业高景气度周期，大力推进快充技术和海外布局。公司深耕充电桩\n研发制造十余载，目前公司充电桩产品覆盖整桩和模块，拥有 50 多款不同充\n电规格的充电设备产品，实现 7kw-800kw 全功率段产品全覆盖。技术方面，\n公司已开发 200 多种独有的充电控制技术，并率先发力高压快充，已将碳化硅、\n液冷超充等前沿技术应用于产品。2023 年上半年公司充电桩业务实现收入\n3.84 亿元，2023 年前三季度收入预计超 6 亿元，总体实现高速增长。此外为\n顺应全球化浪潮，公司加速充电桩海外布局，成为首批进入英国石油中国供应\n商名单的充电桩厂家。考虑到截至 2023 年 9 月，全国新能源车保有量 1821\n万辆，充电基础设施保有量 764.2 万台，车桩比 2.38:1，离工信部“2025 年\n实现车桩比 2:1，2030 年 1：1”的目标仍有差距，国内充电桩增量空间依然\n广阔，叠加海外广阔需求，公司充电桩业务有望继续强劲增长。\n\n新能源电能变换设备业务成为公司重要营收来源。2018-2021 年，公司新能\n源电能变换设备业务营收占比分别为8.79%、15.59%、16.10%、23.51%，\n呈持续上升趋势。2022 年，电能变换设备营收贡献下降至17.02%，主要系\n充电桩业务营收增速提升，22 年充电桩业务营收贡献同比提升 9.11pct，达\n28.33%。未来，公司仍会依托这四个业务板块持续开拓新市场与新客户，并\n不断提高产业链的广度与深度\n\n充电桩产品主要包括直流桩和交流桩、一体式和分体式等多种产品类\n型；充电桩模块涵盖 15kW、20kW、30kW、40kW 等功率等级。公司拓\n展多元化客户，包括小桔充电、国家电网、南方电网等运营商，比亚\n迪、吉利等车企，中石油、中石化、BP、壳牌等能源企业，以及长沙\n城发、南宁交投等政企。公司丰富的产品品类、多元的客户分布以及\n强大的服务能力有望为公司充电桩业务带来高速增长。\n\n华为引领全液冷超充技术。当前液冷超充桩大多是在传统风冷充电桩基础上，采\n用液冷充电枪来实现大电流充电输出，大充电功率下噪声较大，可靠性较低，后\n期维护成本较高。华为发布的全液冷充电架构采用液冷充电模块、液冷充电枪，\n系统整体采用液冷散热设计，具有充电电流大、噪声小、可靠性高的特点\n\n公司是最早在国内推广发展电能质量设备的厂商之一、全国首家低压电能质量\n领域上市企业，形成了包括谐波和无功电流检测与控制等一系列直接应对谐波治理、\n无功补偿、三相不平衡治理、电压暂降等问题的核心技术，技术优势明显\n\n全面覆盖电流质量、电能质量治理的低\n压、中高压领域，产品被广泛应用于谐波治理、无功补偿、地铁储能、电\n压暂降、保障用电安全的工业UPS 等场景\n\n储能变流器（PCS）用于储能电池和电网之间的双向电能变换及传输，是\n储能系统中除电池外的第二大成本来源，直接决定储能系统效率与安全性，\n作为核心装置具有广阔应用前景2022 年公司在全球市场列于第五大供应\n商；2022 年公司在国内市场位列第七大供应商，市场份额位居前列。\n\n全产品三方认证，出海产品资质优势明显。\n积极捕捉海外市场发展机遇，绑定优质客户共同成长相较于国内储能市\n场，海外储能市场发展更为成熟，公司把握巨大市场发展机遇，根据海外\n不同市场需求提供多样解决方案。（1）针对欧美市场，公司为其需量电费\n管理与新能源消纳提供高效解决方案；（2）针对缅甸、印尼、泰国和非洲\n等无电、弱电及偏远地区，通过灵活的模块化储能方案，建设一体化储能\n系统，改善当地生活环境。\n\n新能源汽车充电桩产业链的上游为建设及运营充电桩所需要的元器件和设\n备生产商，中游为充电运营商，下游为各类电动汽车用户。其中设备生产\n商和充电运营商是充电桩产业链中最主要的环节。公司充电桩业务主要位\n于充电桩行业链中上游\n\n行业上游：充电设备供应商竞争较充分，IGBT 国产化趋势升温。充电模块\n是充电桩的核心设备和主要成本来源，占新能源汽车充电桩硬件成本的\n45%-55%，其主要功能为将交流电网中的交流电转换为可以为电池充电的\n直流电，公司自产充电模块性能优异，有效节省了充电桩生产成本。公司\n充电桩设备上游企业主要为变压器、电度表、功率器件等原材料供应商。\n其中IGBT 功率器件是充电模块的关键组成部分，国内如士兰微、斯达半导\n等都在积极布局IGBT\n\n行业中下游：国企、民营并驾齐驱，市场集中度较高。经过一系列的行业\n洗牌，部分玩家出局，充电桩市场向集中化迈进。目前，公司充电桩业务\n下游客户主要为各类运营商。国资企业是公共桩营运市场的先行者，典型\n代表是国家电网，依托电网广泛分布的基础设施，完成充电服务网络的建\n设。民营运营商包括专业电气厂商或其子公司和整车厂两类，前者典型代\n表是特锐德的子公司特来电，目前是国内最大的公共桩服务提供商；后者\n典型代表是比亚迪，依托自身庞大的新能源汽车业务线，开展充电桩服务。\n截至 2023 年 5 月，国内排名前十五位的公共充电桩运营商市占率共达\n94.1%，市场集中度较高。伴随着充电行业的逐渐成熟，充电桩的发展方向\n由最初的建设端向质量更高的运营端转移，在技术、市场、盈利模式上产\n生大的变革。\n\n其中，荷兰、挪威计划于2025 年开始禁售燃油车；德国、瑞典、\n比利时计划于2030 年开始禁售；英国、法国计划于2040 年开始禁售。\n这类强制性政策将显著助推新能源车渗透率上涨。\n\n产品性能优异，持续为客户提供定制化服务。公司充电桩业务主要从事一体\n式直流充电桩、直流充电模块、智能柔性充电堆以及交流充电桩四类产品\n的研发、销售与运维服务。其中，一体式直流充电桩为公司主打产品，主\n要特点为大功率快充，分为单枪与双枪式，单枪式功率为80kW，双枪式覆\n盖功率为 60~240kW，广泛适用于商场、写字楼、公园、住宅区、大型电\n动汽车充电站等各种场景。智能柔性充电堆也为直流快充产品，功率达\n360kW，可进行功率智能调配，满足各功率、各容量等级的电动汽车快速\n充电的需求。公司交流充电桩产品主要应用于小功率慢充，为住宅区、酒\n店等场景提供充电服务，可有效延长电池寿命\n\n### 化工\n\n气凝胶：凭借密度最小、绝热系数最高等多项吉尼斯记录，被自然杂志评价为改变\n世界的神奇材料。气凝胶作为绝佳的保温材料，迄今为止产业化发展不到三十年，\n且是少数国内外发展水平相近的新材料。近年随着全球碳中和、碳达峰的政策推动，\n相关市场应用逐渐受到重视。我们认为，基于气凝胶产业目前处在快速成长期，建\n议关注短期有技术优势和产业化能力、长期有成本下降空间的相关公司\n\n### 洛阳钼业 \n\n全球第一大钴生产商，24年有望跻身前十大铜生产商\n\n铜矿生产高扰动延续，供给约束下铜价有望保持高位运行\n\n### 石头科技\n\n023 年Q1-Q3 销售、管理、研发费用\n率分别为19.68%、3.01%、7.88%，同比分别提升1.73、0.72、0.03pcts，但\n公司费用控制明显优于科沃斯（科沃斯同期销售、管理、研发费用率分\n别为 32.43%、3.95%、5.74%）\n\n### 科沃斯\n\n报告期内，公司科沃斯\n品牌海外业务收入同比增长 26.5%，添可品牌海外业务收入同比增长 24.2%，占各自收入比重分别\n达到 34.3%和 30.9%,较上年同期分别增加 7.1 和 3.2 个百分点。未来公司将进一步加大对海外市\n场的投入，提升产品结构，优化渠道，扩大地域市场，推动海外营收规模的持续快速成长\n\n未来扫地机将从短中长期三个维度进行产品功能迭代。短期维度，考虑在自清\n洁上继续升级，如解决自动上下水等仍存在空间限制、集尘和除尘部件需手动清理\n等问题；中期维度，会针对扫地机目前存在的无法进入狭小空间、无法越障、无法\n清洁长毛地毯等问题，做出相应改进，并提升避障精准度，如通过去除顶部激光头\n或传感器融合的方法将扫地机机身做的更加轻薄、通过增加辅助轮或机械腿的方式\n辅助行走以解决扫地机本身无法完成的越障问题等，同时将针对避障性、脱困性以\n及 AI 识别功能进行算法上的持续迭代；长远来看，智能家居最终会走向集中控制，\n形成统一的生态系统。随着物联网和云计算等技术的成熟，扫地机会与其他智能家\n居一体化，通过智能语音、环境识别等方法，自主满足人们的需求\n\n科沃斯不断发掘其他赛道，横向拓展新兴品类，打造第三增长曲线。除洗地机\n外，科沃斯还将技术运用于不同领域，不断拓展新品类，2021-2022 年推出了商用\n清洁机器人、割草机、智能料理机、空气净化器等各种新品。其中，2022 年推出的\n新品食万 3.0 智能料理机迎合了当前预制菜的热潮，在功能上进一步简化了做饭步\n骤，此后又通过料理机、食万净菜和添可生活 APP 三大板块，搭建了智能化烹饪的\n全链路解决方案。此外，公司还在家用扫地机的基础上，延展了商用清洁赛道，持\n续投入商用清洁机器人的研发和布局，推出了 DEEBOT PRO K1产品。目前公司可\n为酒店、写字楼等商业 B 端场所提供清洁专用解决方案，并创新性采用租赁模式，\n以降低客户使用成本。通过不断横向拓展新兴品类，科沃斯有望打造第三成长曲线\n\n### 闻泰科技\n\n闻泰科技主要从事集研发设计和生产制造于一体的产品集成、基础半导体\n和光学业务，主要提供手机、平板、笔电、服务器、IoT、汽车电子等终端产品\n研发制造；半导体功率器件、模拟芯片的研发设计、晶圆制造和封装测试；光\n学模组的研发制造服\n\n2019 年闻泰科技通过收购安世半导体切入半导体业务领域\n\n2021 年闻泰科技收购得尔塔科技，进军光学模组业务领域，研发和生产应\n用于手机、汽车电子、笔电等领域的摄像头模组。得尔塔科技前身为索尼电子\n华南有限公司，2017 年被欧菲光收购。目前得尔塔科技在广州、珠海建有大型\n生产基地，在日本熊本设有设备研发中心\n\n移动终端 ODM 是公司主要收入来源，收入结构持续优化。公司主营业务包\n含移动终端 ODM、半导体 IDM、光学模组及其他三大板块，2022 年各板块收入占\n比分别约为 68.03%、27.55%、4.42%。移动终端 ODM 为公司传统业务，虽近年来\n占比有所下滑，但仍为主要业务收入来源；半导体 IDM 业务发展迅速，是主要\n的盈利来源，未来占比有望进一步提高；光学模组业务在战略上补足产业链一\n体化格局，为公司发展补全战略版图\n\n子公司半导体业务全球领先。闻泰科技旗下安世半导体以半导体 IDM 为主\n营业务，包含芯片设计、晶圆制造和封装测试等全产业链环节，业务涵盖汽车、\n通信、消费、工业等众多领域。安世半导体前身为恩智浦的标准产品事业部，\n具有超过 60 年的半导体行业经验，2017 年从恩智浦剥离，2019 年被闻泰科技\n收购。\n\n产品集成业务方面，手机 ODM 业务是公司的传统业务以及主要营收来源。\n闻泰科技自 2006 年起从事手机方案设计，2008 年随着嘉兴生产基地投产，闻\n泰通讯从 IDH 转型为集研发设计与生产制造为一体的 ODM，成为行业龙头。除\n手机 ODM 外，公司的集成业务还拓展到平板、笔电、AIoT、服务器、汽车电子\n等领域。在笔电业务上应用闻泰、安世联合推出的各类射频、通讯、 电路小型\n化 SiP 模块产品以推进产品创新，已通过多个全球笔记本电脑客户深刻认证，\n即将量产。通过与半导体业务联合，公司亦凭借 2U 双路机架服务器和 4U 双路\n存储服务器等产品成功开拓服务器市场，中标多个知名客户的服务器项目，服\n务器业务有望成为新的利润增长点。此外，公司还积极发展汽车电子业务，旨\n在成为汽车电子行业的智能汽车和智慧出行的前装车规级解决方案提供商，为\n客户提供从软件到硬件再到制造的一整套方案，包括但不限于智能座舱、智能\n网联和自动驾驶领域的创新产品研发\n\n闻泰科技致力于加强各板块间业务协同合作，以打造出全产业链的一体化\n格局，以公司提高核心竞争力。半导体业务和产品集成业务的协同有助于整合\n通讯和半导体业务的产品、客户、供应链资源。通过与半导体业务拉通，产品\n集成业务可以充分应用半导体业务 IDM 平台能力，引入更多功率、模拟芯片的\n产品协同能力，从而推动 SiP 等晶圆级封装、Mini/MicroLED、汽车电子等方\n向的半导体技术融合创新，并以半导体能力为牵引构筑产品集成业务护城河。\n笔电业务在高质量的模拟和逻辑芯片以及功率器件产品上也将得到更多的支持，\n闻泰安世联合推出的各类射频、通讯、电路小型化 SiP 模块产品也有望应用于\n笔电产品。此外，得尔塔科技具有行业领先的 Flip  Chip 晶圆级封装技术，发\n挥其低功耗、小型化的特色，可推动车载、笔电、AR/VR 应用落地，推动协同\n供货手机 ODM 业务并实现光学业务的多极化增长\n\n2017-2023H1，公司实现归母净利润分别为3.29/0.61/12.54/24.15/26.12/ \n14.60/12.58 亿元，2018 年主要受消费电子市场低迷、收购安世股权等影响，\n归母净利润有较大下滑，随后随着半导体业务的大幅增长，归母净利润逐年提\n升，2022 年归母净利润下降至 14.60 亿元，较上年同期下降 44.10%，主要是由\n业务发展所带来的销售费用和研发费用大幅增加，以及公司发行可转换公司债\n券使得非现金利息支出增加所导致的财务费用增加所导致。2023H1，公司实现\n归母净利润 12.58 亿元，同比增长 6.45%。\n\n半导体业务自被收购以来贡献了主要的净利润来源。分业务板块来看，\n2020-2022 年半导体业务净利润分别为 9.88/26.32/37.49 亿元。产品集成业务\n净利润下行后回暖，2020、2021 年净利润分别为 8.06/1.84 亿元，2022 年净亏\n损 15.69 亿元，主要原因在于全球手机和平板市场的需求低迷，但 2023 年上半\n年扭亏为盈，实现净利润 0.07 亿元。光学模组业务 2022 年度净亏损 3.35 亿\n元\n\n导体方面，2022 年公司半导体业务研发投入 11.91 亿元，较上年同期增\n长 42.29%，以 加速推动技术进步与迭代，覆盖功率分立器件(IGBT、SiC 和 GaN)\n和模块、12 英寸创新产品、模拟 IC 组合、功率管理 IC 和信号调 节 IC 等\n方面。在化合物半导体产品方面，硅基氮化镓功率器件(GaN  FET)已通过 AECQ\n认证测试并实现量产，在产业合作伙伴的协同下已完成 GaN  在电动车逆变器、\n电控、电源等方案的设计工作；碳化硅技术研发进展顺利，碳化硅二极管产品\n已经出样；IGBT 产品流片已经完成，正处测试验证阶段；新的模拟 IC 类产品\n也正处在加速研发推进中。目前闻泰在马来西亚槟城和中国上海均开设了新的\n全球研发中心，并扩大了位于中国香港、德国汉堡和英国曼彻斯特现有的研发\n中心。\n\n功率半导体在新能源汽车电池动力模块中发挥重要作用。由于电动车功率\n器件对工作电流和电压有更高要求，新增需求主要来自以下几个方面：逆变器\n中的 IGBT 模块、DC/DC 中的高压 MOSFET、辅助电器中的 IGBT 分立器件、OBC 中\n的超级结 MOSFET。总的来说，混合动力汽车的功率器件占比达 40%，纯电动汽\n车的功率器件占比达 55%。相比传统汽车，新能源车功率半导体需求提升近 9 倍，\n功率半导体在新能源汽车领域潜力巨大\n光伏行业是功率半导体的主要下游应用领域之一。功率半导体主要应用在\n逆变器中,功率半导体器件 IGBT 是光伏逆变器的核心零部件。逆变器是光伏系\n统并网的必要设备，光伏装机容量的不断增长带动逆变器行业增长，同时也为\n功率半导体行业的持续发展提供动力。\n\n目前光学摄像头模组行业三个最主要的终端市场为手机摄像头、视频监控\n摄像头和车载摄像头  目前车载摄像头市场处于无人驾驶与车联网市场的双风口，作为 ADAS 系统\n的主要视觉传感器，在自动驾驶时代，车载摄像头模组用量将跟随 ADAS 系统的\n增长而进一步增加。目前车载摄像头市场呈现持续扩张趋势，根据 TSR 咨询机\n构数据，2021年全球车载摄像头出货量达到 185.50 百万件，年增长率达到 10%\n\n全球功率半导体市场仍主要被起步较早的美日欧厂商所把控，美日欧厂商\n约占据全球 60%以上的市场份额。根据 Omdia 市场研究机构数据，2021 年全球\n十大功率半导体企业分别为英飞凌、安森美、意法半导体、三菱电机、富士电\n机、东芝、威仕、安世半导体、瑞萨、罗姆。前十企业共占据总市场份额的 57%\n\n![Alt text](image-11.png)\n\n\n\n半导体业务是公司营业收入的主要来源，公司充分发挥半导体业务在汽车\n和工业领域的产品和技术领先优势，通过扩大产能、持续研发、垂直整合等多\n项措施不断扩大业务规模，2022 年公司跃居全球功率分立器件半导体公司第 5\n位。2022 年公司来自汽车领域的半导体业务收入达到 48.6%，是主要的收入方\n向。2022 年汽车工业需求旺盛，2023 年汽车终端市场相对疲软，但在汽车行业\n电动化智能化趋势不改的背景下，2023 年预计市场需求有所修复，行业需求持\n续处于上行周期。工业领域半导体业务是其次的收入来源，2022 年工业领域需\n求 相 对 平 稳 。 综 合 预 计 2023/2024/2025 年 半 导 体 业 务 方 面 实 现 营 收\n155/180/210 亿元，同比增速达 1.35%/16.13%/16.67%。由于汽车需求旺盛、价\n格坚挺，半导体业务预计维持稳定毛利率水平,2023/2024/2025 年毛利率维持\n42.00%。\n\n我们预计公司 2023-2025 年营业收入分别为 650.83/764.16/899.83 亿元，\n同 比 增 长 率 分 别 为 12.06%/17.41%/17.75% ； 归 属 母 公 司 净 利 润 分 别 为\n26.86/33.63/48.34 亿元，对应增速分别为 84.01%/25.19%/43.74%。\n\n### 九号\n\n自2015 年系统研发机器人产品以来，公司已积累包括室内外定位导航、机器人\n运动控制、高精度伺服轮毂电机等机器人关键技术。（1）定位导航技术方面，公司\n已掌握UWB 室内定位、RTK-GPS 室外定位、激光雷达/毫米波雷达、双目视觉/IMU\n（视觉惯导）等核心技术。（2）避障技术方面，公司掌握激光+视觉融合、结构光摄\n像头、超声波传感器以及内置AI 的传感器避障（可检测识别物体）关键技术。除核\n心定位导航和避障技术外，公司亦掌握计算机视觉（识别人体数据）核心技术\n\nRMP 移动平台：2003 年 Segway 布局 RMP 业务，2015 年九号公司收购\nSegway，2020 年九号公司自研第一代产品RMP Lite，在支撑公司内部产品研发，实\n现对内赋能的同时，也支持二次开发或定制化服务，进而实现了外部商业落地。RMP\n移动平台采用了九号公司 AIOT 感知技术和决策技术能力，可实现限制路况下低速\n自动驾驶，同时采用了轮毂电机技术，可调教合适速度-扭矩曲线\n\n扫地机器人领域，应用场景为室内，石头科技和科沃斯为代表的企业避障和物\n体识别能力要优于其他企业。石头科技和科沃斯多采用结构光避障方式配合AI 识别\n技术，能够识别多种障碍物并根据障碍物种类做相应的避障策略，例如石头G20 采\n用结构光+AI 识别避障，能够识别 13 类 42 种障碍物。而云鲸和小米部分机型未采\n用AI 技术或仍采用单激光避障方式。\n\n九号两轮车较为优秀的处理运算和驾驶辅助能力主要系传统主业例如机器人、\n滑板车底层技术和研发团队赋能。从两轮车发展史来看，公司先后自研并引入了ABS、\nTCS 和RSC 等主动安全辅助系统。感应方面，公司进入两轮车领域伊始便引入了姿\n态感应系统，全车多处传感器提供多种姿态识别，随后通过机器学习+AI 算法提高\n车辆状态识别能力。控制方面，公司联合旗下公司零级创新推出了自研的鼹鼠控\nMoleDrive，配合传感器实现坡道驻车、助力推行等智能化功能\n\n外销有望受益新品驱动，叠加内销两轮车有望高增，看好2024 年业绩反转 \n此前拖累公司业绩的小米分销和ToB渠道以及非经常性负面因素影响逐步减弱。\n内销方面，高增两轮车品类净利率进入上升通道，2024 年扩渠道逻辑下收入和\n利润率有望持续提升。外销方面，本次CES 展新款割草机器人、全地形车、E-Bike\n将逐步于欧美市场销售，其中全地形车在新品驱动下北美经销商网点拓展顺利，\n我们看好强产品竞争力驱动2024 年各品类收入增长以及盈利提升\n\n### 联创光电\n公司是由江西省电子集团整合旗下部分优质军工资产\n设立，军工底蕴浓厚。\n\n联创光电：深耕光电领域20 余载，聚焦超导与激光实现转型升级 \n公司深耕光电领域二十载，是“国家火炬计划重点高新技术企业”、  “国\n家863 计划成果产业化基地”，近年来围绕“进而有为，退而有序”的经\n营方针，加速剥离背光源与电缆业务，重点打造激光和超导等新兴产业。\n\n高温超导具有显著成本优势，适合大范围商业化应用，应用场景包括超导\n感应加热、可控核聚变、高温超导单晶硅生长炉等。在超导感应加热方面，\n高温超导感应加热设备有着高穿透、高能效、高均匀性、高梯度性的优势，\n市场潜力巨大。在可控核聚变领域，高温超导能大幅降低托卡马克装置的\n建造周期、体积和造价，可加快可控核聚变商业化应用。\n\n深耕光电领域二十余载，积极布局“超导+激光”焕发生机。江西联创光电科技股份有限\n公司于1999 年6 月设立，2001 年3 月在上交所上市。公司是“国家火炬计划重点高新技\n术企业”、“国家技术创新示范企业”、“国家863 计划成果产业化基地”，致力于成为\n科技领先型企业。公司深耕光电领域二十余年，近年来公司围绕“进而有为，退而有序”\n的经营方针，重点打造激光和超导两个高科技新兴产业。在光电领域，公司积淀形成了良\n好的光电子产业基础和产业转化能力，产品布局包括智能控制部件、背光源及应用、电线\n电缆等产业板块；在激光领域，2019 年11 月公司设立江西中久激光技术有限公司，通过\n产研融合的方式实现激光反无人机领域全产业链布局；在超导领域，联创超导于 2019 年\n成功研制世界首台兆瓦级高温超导感应加热装置，为工业热处理行业提供了一种全新的、\n具有颠覆性变革的技术创新应用。同时，公司基于已掌握的高温超导磁体技术积极布局于\n可控核聚变、磁控单晶硅生长炉等领域，目前已组建团队开展相关研究。\n\n背光源与电缆业务：毛利率下降趋势明显，公司加速剥离背光源与电缆业务\n\n激光与超导：多年光电积淀，激光+超导两大新兴产业齐发力。激光方面，公司2019 年设\n立子公司中久激光，并于2020 年4 月成立中久光电产业研究院。目前公司已形成了从“泵\n浦源”器件产品到“激光器”集成产品，再到“光刃系列”整机产品的完整的产品体系。\n2023 年上半年，激光产品实现主营业务收入 1.20 亿元、净利润  0.32 亿元，较上年同期\n分别增长 14.49%和 33.9%；高温超导方面，目前由参股子公司联创超导开展超导业务，\n研发团队自 2013 年开始研发兆瓦级高温超导加热设备，交付予中铝东轻的首台设备投产\n标志着公司在高温超导领域取得重大进展，截至2022 年12 月31 日超导感应加热设备订\n单已超过60 台，公司预计超导产业园达成后，高温超导产品年产能有望达到500 台以上。\n\n我们认为，公司聚焦激光、超导两大未来主业优化产业结构已初见成效，激光产业产能快\n速释放，未来营业收入有望持续增长\n\n激光等高毛利业务放量叠加背光源与线缆等低毛利业务剥离，有望驱动公司盈利能力稳步\n提升。归母净利润方面，2022/2023H1 公司实现归母净利 2.67/2.15 亿元，同比增长\n15.41%/20.06。毛利率方面，2022/2023H1 年公司实现整体销售毛利率14.73%/18.08%，\n继续保持稳步提升趋势。分板块来看，2022 年公司智能控制/背光源/激光系列产品的毛利\n率分别为 16.75%/4.49%/35.83%。费率方面，公司期间费用整体控制有效，研发支出保\n持稳定。2022/2023H1 期间费用率为 15.76%/13.49%，整体呈下降趋势；2022/2023H1\n年研发费用分别为 1.66/0.71 亿元，研发投入保持稳定。我们认为，随着公司激光等高毛\n利业务放量叠加背光源与线缆等低毛利业务剥离，未来公司盈利能力有望持续提升。\n\n超导可以分为低温超导、高温超导与室温超导，高温超导具备成本优势。超导是指某些物\n质在环境温度降至某一临界温度以下时，电阻突然变为零的现象。\n\n低温超导材料一般都需在昂贵的液氦环境下工作，而高温超导材料临界温度较高，可以在液氮环境中工作，目前\n工业液氮制冷已较为成熟，一吨液氮的价格稳定在一千元以下，适用范围广且价格低廉；\n室温超导要在 1GPa（1 万倍左右的大气压）下才能够实现超导态，而实现高温超导的制\n冷成本低于加压到1GPa 的成本，整体来看，我们认为高温超导实现产业化应用的前景更\n为广阔\n\n超导材料具有三大独有特性：零电阻、完全抗磁性、量子隧穿效应\n\n目前高温超导产业化应用得到了实质性发展，高温超导感应加热、高温超导单晶硅生长炉、超导磁\n储能、可控核聚变等领域的市场空间也将逐步打开。 \n\n效率优势：高温超导感应加热能效转化率最高达 85%，相比传统加热炉提升一倍以\n上。传统的工频炉在加热时大量的热能消耗在产生磁场的铜线圈上，并没有注入工件\n体内，因此加热效率仅为40%左右。超导感应加热由于利用了超导材料零电阻的特性，\n产生强磁场过程中只有低温制冷损耗、机械传动损耗等，因此可以将加热能效大幅提\n升到最高85%\n\n加热质量优势：高温超导感应加热的透热深度与加热均匀度显著提高。感应炉的加热\n功率正比于磁场强度与加热频率的乘积，由于超导感应加热炉的磁场是传统工频炉的\n100 倍以上，使得超导炉可以实现5Hz 左右的极低频的加热，透热深度与加热均匀度\n显著提高。在透热深度上，高温超导感应加热将传统工频炉 10mm 的透热深度大幅\n提升至200mm 以上；在加热均匀度上，高温超导感应加热的感应电流可直接整体加\n热工件内部，可以对大尺寸金属工件进行表芯同步快速均匀加热\n\n节能优势：由于高温超导感应加热可以将加热能效大幅提升到 85%，这就意味着一\n台加热功率为1mw 的高温超导加热设备可以替代掉传统2.5mw 的工频炉，一年可节\n省超600 万度电，此外还能节省电力增容费和未来的碳排放指标等。\n\n经济性分析：高温超导感应加热综合运营成本低，投资成本回收快。高温超导感应加\n热设备的设备投资成本高于传统大功率感应加热设备，但其综合运营成本低。以运营\n成本中的外围设备电费为例，传统设备需配置大功率水冷机组，而超导直流感应加热\n器所用超导线圈基本无能耗，因此外围辅助设备电力成本远低于传统交流感应加热设\n备。得益于优越的能效表现和较低的营运成本，高温超导直流感应加热设备只需2-3\n年就可收回全部设备投资成本\n\n高温超导感应加热及相关磁体技术应用范围广，市场潜力大。高温超导感应加热设备可广\n泛用于铝、铜、镁、钛、特种钢材、高温合金等非磁金属加工热成型领域（包括挤压、锻\n造、轧制等）、金属熔炼及半导体熔融等领域，\n\n激光系统：高功率激光器市场规模稳步提升，激光反无人机装\n备需求旺盛\n\n刃整机：成本优势明显，未来产品矩阵有望持续丰富。公司光刃系列激光反制无人\n机系统主要包括“光刃-I”和“光刃-II”两大产品，具有明显的技术优势。同样的\n杀伤效果，公司产品重量更轻、体积更小，因此在合理利润空间下公司产品成本优势\n较为明显。目前，第一代新型激光反制无人机产品生产线现已配置，并已完成其改进\n设计、研制工作，且顺利通过专家组验收评审；第二代新型激光反制无人机产品顺利\n完成研制并通过验收。我们认为，公司基于已掌握的激光核心技术加速产品研发与迭\n代，未来光刃整机产品矩阵有望持续丰富\n\n公司在手订单充足，产能迅速扩张。激光业务是公司重点发展的高科技新兴产业，激光产\n业持续高速增长。中久激光订单充足，产能饱满，泵浦源、激光器、激光电源等项目产能\n已处于满负荷生产状态。根据业务发展规划，公司今明两年将加速增扩产能。我们认为，\n公司激光业务订单饱满，已进入高速增长阶段，随着产能持续扩张，未来激光业务有望持\n续发力。\n\n公司深耕光电领域二十载，在传统业务退而有序的同时，加速布局高温超导与激光系统两\n大“大国重器”，盈利能力有望持续提升，并打开公司长期成长空间。我们预计公司\n2023-2025 年营收分别为31.97、34.64、37.77 亿元，归母净利润分别为4.71、6.25、7.85\n亿元，对应EPS 分别为1.04、1.37、1.73 元\n\n### 寿仙谷\n 公司核心产\n品破壁灵芝孢子粉采用独创的“四低一高” 超音速低温气流破壁技术， 提\n高了破壁率， 也避免了重金属污染和物料氧化\n\n 随着我国人口老龄化加深， 灵芝孢子粉和铁皮石斛\n等药食同源中药因具有积极的免疫调节功效而具备市场潜力\n\n 灵芝所含功效活性成分十分丰\n富， 主要包括多糖类、 三萜类、 核苷酸、 甾醇、 生物碱、 脂肪酸等。 灵芝多糖和三萜类含量\n是灵芝类作为中药饮片或保健食品的主要功效评价指标， 灵芝孢子是灵芝子实体的有性生\n殖细胞， 主要有效成分含量高出灵芝 75 倍， 具有抑制肿瘤、 提升免疫力、 抗氧化、 保肝护\n肝和调节血糖等药理作用， 但其细胞壁主要由坚硬的几丁质构成， 人的消化系统不易分解，\n因此有必要对灵芝孢子粉进行破壁处理。 \n\n铁皮石斛常被用于身体保健及治疗临床复杂性、 慢性疾病， 具有消\n炎去热、 养阴生津、 补益脾胃、 润肺止咳等功效。 铁皮石斛化学成分复杂， 据研究表明， 铁\n皮石斛内含有多重有效活性成分， 包括多糖、 酚类、 生物碱， 还有木质素等， 具有增强免疫、\n降低血糖、 降脂、 抗炎、 抗氧化、 抗肿瘤等作用。 \n\n多糖被认为可以提高免疫力，这是因为多糖具有免疫调节作用。多糖可以刺激机体免疫系统的活性，增强免疫细胞的功能，促进免疫细胞的增殖和活化，从而增强机体的抵抗力，提高免疫功能。多糖还可以调节免疫系统的平衡，增强机体对病原体的识别和清除能力，有助于预防和治疗疾病。","source":"_posts/yuyan.md","raw":"---\ntitle: yuyan\ndate: 2022-12-28 09:50:30\ntags:\n---\n建议关注鼎龙股份，公司是国内唯一一家全面掌握 CMP 抛光垫全\n流程核心研发技术和生产工艺的 CMP 抛光垫供应商，在国内抛光\n垫市场中处于领先地位\n\n建议关注濮阳惠成，公司专注顺酐酸酐衍生物和功能中间体产品的\n研发和生产，受益于我国电子信息产业的快速发展、我国智能电网、\n\n重点推荐合盛硅业，公司在工业硅及有机硅产业链完整，具备规模\n优势、成本优势，上下游协同效应有望持续加强，随着在建项目的稳\n步推进，公司业绩有望持续向好。 v \n\n\n\n![Alt text](image-3.png)\n\n美现役战斗机均为较为领先的三代机和四代机，占比分别为 83%和 17%，而我国\n仍有近 50%的二代机亟需替代,四代机仅有 19 架，占比约为 2%，远低于美国。另外，当前美\n国战斗机仅有重型和中型，而我国战斗机中轻型战斗机占比仍然较高；我们认为当前航空装\n备需求迫切且确定性高，未来方向是数量升+结构优\n\n\n![Alt text](image-4.png)\n\n\n### 特步  股息\n\n盖世威将推出专业网球运动体育用品，\n以强调品牌的网球基因，而帕拉丁将推出反映年轻消费者喜好的产品\n截至2023H1，公司鞋履自产占比28%、外包占比72%；服装自产占比12%、\n外包占比 88%。\n\n特步主品牌同增高单位数，其中竞速系列销量同增 90%，抖音店播同增\n73%；索康尼同增 98%，系天猫运动鞋行业头部品牌增速第一；迈乐同增\n101%，徒步鞋品类销售同增 150%，MOAB3 登短途登山鞋热卖榜第一；\n盖世威同增 149%，京东平台同增 297%；帕拉丁同增 114%，其中服装同\n增1305%，抖音同增243%。\n\n时尚运动方面，盖世威和帕拉丁在中国内地进行全面品牌重塑，升级产品\n组合和店铺布局，成功增强品牌知名度及大幅提升店效；加快在中国内地\n高线城市的开店步伐。盖世威拟推出专业网球运动产品，强调品牌网球基\n因；帕拉丁增强对年轻消费者的吸引力，改善产品供应和零售网络。\n\n### 森马服饰 股息\n目前出海仍面临资金管制、文化壁垒、政策动荡等多重障碍，\n落地和执行尚需时日，但二次出海成功确定性明显增强，原因主要在于，第一，国内市场增\n长放缓，寻找海外增长空间成为共识，疫后全球经济逐步复苏；第二，公司是国内休闲服饰\n和儿童服饰的龙头，森马和巴拉巴拉品牌享有高知名度，对海外代理商有较强的吸引力；第\n三，公司前期积累的出海经验成为宝贵的无形资产，可以帮助规避“合作摩擦”，适应“国\n际本土化”；第四，路径上，公司选择将东南亚、中东作为重点开拓的区域市场，三处区域\n市场位于“一带一路”沿线，具备政策友好、消费活跃、品牌服饰萌芽等明显优势\n\n柔性供应链的价值在于提高售罄、减少库存、提升周转。供应链之于时尚品牌是底盘和\n生命线。得益于优质供应商的稳定合作、订货制改革以及数智化升级，公司的快反周期由\n2000 年初的 3 个月缩短至 2 周以内，逼近优衣库、H&M、ZARA 等国际快时尚企业快反水\n平，2018-2022 年公司的库存压力、存货减值保持在健康可控状态\n\n公司的资本性支出以投资和股利分配为主，2018 年收购Kidiliz 占用8.44\n亿元，分红常态化且分红比例领跑同行，近五年分红比例为 75%+。\n\n存量博弈、红海持续的新背景下，依托品牌势能、渠道壁垒以及柔供等全方面领\n先优势，公司有望在渠道变革和海外探索机遇上取得新突破，引领业绩量质齐升\n\n柔供是当下解决产销不对称的最好方式。服装行业产销不对称，天然会造成库存。柔供\n成于优衣库，被国内服装品牌竞相学习，极致于 Shein，凭借小单快反最大化抵消时间差，\n仍然是当下解决产销不对称的最好方式。柔供帮助公司渡过行业库存危机时期，同时将库存\n控制在可控范围内，当前库存问题主要是疫后的动销转弱所致规模是柔供的必要条件。长期稳定的产供合作关系可以提前锁定供应商产能和进行快速\n匹配，小单快反对供应商提出更大的成本挑战，需要通过采购规模来平衡。中小企业实现柔\n供的难度较大，公司的营收体量居于头部水平，优质供应商采购集中度持续提升\n\n电商主推线上线下同价，盈利提升。2022 年服装线上渗透率为 37%，近 3 年仅增长 3pp。\n公司一方面积极布局抖音等机会赛道；另一方面，主推线上线下同价，营收阶段性受损，但\n盈利明显提升，2023H1 线上毛利率为 41.68%，较 2019 年提升 10.93pp。线上线下同价是\n平衡电商和门店利益的稳态格局，越来越多企业达成共识，头部企业先行，中小企业跟随，\n业绩逐渐从“增收不增利”过渡到“营收滞后于盈利”，最终实现“量质齐升”\n\n公司作为休闲服饰和童装的双龙头，品牌、渠道壁垒和柔供能力突出。巴拉巴\n拉二三线购物中心加密、森马基本店+家庭店试水、出海进展成为重要成长机遇。预计\n2023/2024年公司归母净利润分别为11.1/15.5亿元，同比增速为74.67%/39.16%，对应\nEPS为0.41/0.57元/股，对应P/E为14/10倍。首次覆盖，给予“买入”评级\n\n分产品看，巴拉巴拉品牌是国内童装龙头，童装修复\n速度预计好于成人休闲装（23H1 童装/成人装收入增速分别同比-\n15.06%/+6.34%）。单季度来看，公司 23Q1/Q2/Q3 营业收入分别同比-\n9.3%/+9.7%/+1.1%，受基数、天气及消费弱复苏等因素影响，收入恢\n复节奏存在季度波动；归母净利润分别同增48.9%/295.8%/89.4%\n\n毛利率提升明显，存货规模同比改善。盈利能力：23Q1-Q3 公司毛利\n率同比+3.71pcts 至 44.13%，预计主因公司有效控制终端折扣，线上、\n线下同款同价比例提升且毛利率更高的直营渠道收入占比提升\n\n存货：截至23Q3，存\n货规模同比-21.78%至36.53 亿元，公司有望在Q4 销售旺季及促销节日\n加大存货清理力度，优化新老品结构，助力明年轻装上阵。\n\n### 地产\n\n今年1-11 月住宅竣工面积同比+18.5%，2024H1 竣工仍有望延续韧\n性，支撑明年家装需求稳健释放。\n\n2023 年 1-11 月，房屋新开工面积 8.75 亿平方米，同比-21.66%。\n2023 年 1-11 月，房屋累计施工面积 83.13 亿平方米，同比-7.20%\n\n根据中指重点监测的100城数据，2023年，一线城市新\n建商品住宅累计销售面积同比小幅增长约4%，市场整体\n稳定；二线、三四线代表城市同比分别下降4%、11%\n\n### 杂项\n酒就两个用途，一，上级驯服属下的测试工具。二，味觉退化或酒精上瘾的中老年男士。真是人间清醒，一针见血，振聋发聩。\n\n制造端汇聚中东，推动光伏产业发展。光照资源优势、制造成本低廉和电价补贴等政策计划向好带来光伏\n市场新机遇，吸引TCL中环、协鑫科技、天合光能等中国厂商纷纷加速布局中东。中东1-11月累积进口13\nGW中国组件，同增约71%，超越22年8.4GW拉货量，预计仍将保持高速增长，市场前景广阔\n\n产能释放供给过剩，各环节将加速下跌至成本线，预计价格持续低位。二三线加快出清，盈\n利或在24年中见底，龙头阿尔法逐渐体现\n\n硅料瓶颈解决， 24年硅片过剩进入激烈竞争阶段。据我们统计，24年底硅片产能合计1068GW，\n对应可供装机890GW，由于石英砂相对紧张，硅片盈利有支撑\n◆ 硅片两超多强，格局相对稳定。我们预计24年隆基/中环市占率27%/25%，CR2约为52%。\n\nBC结构由于正面无遮挡，天然具备效率\n优势。在单面市场，爱旭ABC组件功率610W+，高于同版型TOPCon30W，效率优势明显。\n在 双 面 市 场 ， 爱旭ABC 依靠背面银浆方案，双面率可达70% ，随24 年中/ 底成本打平\nTOPCon/PERC，竞争优势持续凸显\n\n与TOPCon在不同版型下对比，HJT均拥有更高组件效率及功\n率瓦数，标准版型领先约10W优势。。受益于效率及发电性能优势，同时当前HJT外销规模\n较小，报价1.28元/W，较TOPCon1.03元高0.25元/W，整体溢价明显。\n\n钙钛矿效率持续提升，稳定性逐步验证中。截至23年底，钙钛矿头部组件厂效率陆续突破\n18%：极电光能1.2*0.6m单节组件效率18.2%，并通过IEC61215/IEC61730测试；协鑫光电\n1m×2m量产效率破18%。GW级产线陆续启建，预计24年量产效率可达20%+。\n\n中期，2024 年春季来临，需求复苏，TOPCon 技术持续迭代过程\n中，出货量与利润分化将持续；c）中长期看，龙头扳手腕持续，优\n质企业将在低谷时期保持扩张节奏，市占率进一步提升\n\n### 晶盛\n\n公司前三季度实现营业收入134.62亿元,同比增长80.39%;归母净利润35.14亿元,同比增长74.94%。 \n未完成设备订单287.50亿元,其中半导体设备订单33.03亿元。\n\n石英坩埚、金刚线等硅材料业务快速放量，多领域材料实现突破\n\n凭借单晶炉较高市占率，公司拓展石英坩埚、金刚线等耗材业务。受石英砂\n紧缺及需求高增影响，21 年 9 月至今光伏石英坩埚价格增长约 900%，2024\n年高价有望维持。据我们测算，24-25 年国内石英坩埚年均市场市场有望超\n400 亿元，23-25 年 CAGR 为 29.3%。公司 22 年市占率约 19.6%，未来有\n望依托“超级坩埚”进一步巩固坩埚龙头地位。金刚线细线化成为趋势，钨\n丝金刚线有望成为主流。我们预计 25 年金刚线国内市场规模 123.9 亿元，\n23-25 年 CAGR 14.8%。公司自制钨丝母线并积极扩产，有望实现弯道超\n\n公司碳化硅衬底进入大规模量产倒计时，碳化硅外延设备市占率领先 \n据 Yole，全球 SiC器件市场规模 2027年有望达 63.0亿美元，21-27年 CAGR\n为 34%，其中碳化硅衬底占器件成本达 47%。公司依托泛半导体长晶技术，\n6 英寸衬底良率、性能等指标位于行业头部梯队，现已形成 5000 片/月产能，\n核心设备如长晶炉等均为自制，并拓展 8 英寸衬底。公司预计在 25 年实现\n25 万片 6 英寸及 5 万片 8 英寸衬底年产能。碳化硅外延片对外延设备要求\n较高，公司 6 英寸双片式碳化硅外延设备已实现批量销售，市占率位居国内\n前列，8 英寸单片式碳化硅外延设备处于客户验证中。衬底与外延设备有望\n在外延厂发挥协同作用，助力公司强化碳化硅布局。\n\n衬底片性能优越，与中芯集成等达成合作\n\n光伏设备是晶盛机电成长的第一曲线，第二曲线是光伏耗材\n和半导体耗材的放量，第三曲线是碳化硅设备+材料和半导体设备的放量。我们维\n持公司2023-2025 年归母净利润为47/58/70 亿元，对应PE 为11/9/8 倍，维持“买\n入”评级。\n\n低氧技术是单晶炉下一步迭代方向，超导磁场单晶炉降氧效果显著\n\n第五代超导单晶炉夯实公司单晶炉龙头地位，设备延伸至光伏全产业链布局\n\n半导体硅片生产设备中，单晶炉投资占比 25%，有望率先实现进口替代。从产业链来看，\n芯片的生产环节包括硅片制造、晶圆制造、封装测试，对应的设备包括硅片制造设备、前\n道工艺设备（晶圆制造）、后道工艺设备（封装测试）。根据集微咨询预计，20-22 年中国大\n陆硅片设备需求约 570-800 亿元，其中长晶设备约占设备总投资的 25%，则对应的单晶炉\n市场规模为 140-200 亿元。根据中商产业研究院，目前半导体用单晶炉国产化率不足 20%，\n随着国内企业在拉晶环节持续突破，有望率先实现进口替代\n\n蓝宝石是一种氧化铝单晶，由于具有强度大、硬度高、耐腐蚀等特点\n\n公司半导体石英坩埚的主要客户为中环领先、上海新昇、奕斯伟等公\n司，光伏石英坩埚的主要客户为 TCL 中环、晶科能源、弘元新材料等\n\n公司自制钨丝母线降低成本，积极扩产迎合行业扩容 \n\n碳化硅衬底良率是考核企业产品性能及经济性重要指标，大尺寸衬底是行业趋势。SiC 衬\n底制备重难点主要是晶体生长和切割研磨抛光环节，是整个衬底生产环节中的重点与难点，\n成为限制碳化硅良率与产能提升的瓶颈。加工的难点在于碳化硅材料硬度高、脆性大、化\n学性质稳定，因此传统硅基加工的方式不适用于碳化硅衬底.目前 4 英寸、6 英寸主要采用\n多线切割设备，将碳化硅晶体切割成厚度不超过 1mm 的薄片。\n\n公司导电型碳化硅衬底已形成 5000片/月产能，新增 30万片产能建设，核心设备均为自制。\n2017 年公司开始碳化硅晶体生长设备和工艺研发，公司坚定电阻法技术路线，在切片环节\n引入激光切割与多线切割设备并行，并在 2020 年开始建立长晶实验线和中试线，相继开发\n6 英寸、8 英寸碳化硅晶体和衬底。目前公司中试线形成月产 5000 片 6 英寸衬底产能。公\n司长晶和核心加工设备均为自制，设备国产化率达到 90%以上，实现了 6 英寸-8 英寸碳化\n硅晶体生长和加工技术的自主可控。据晶盛机电微信公众号显示，公司于 2023 年 11 月 4\n日举行签约仪式，预计新增产能 25 万片 6 英寸碳化硅衬底、5 万片 8 英寸碳化硅衬底。\n\n公司 6 英寸碳化硅衬底达到业内一流水平，8 英寸衬底 2024 年实现与 6 英寸品质同步。截\n至 2023 年 11 月公司碳化硅投产签约仪式，公司中试线产出的 6 英寸碳化硅衬底片在直径、\n微管密度、位错、电阻率、弯曲度、翘曲度等关键参数均达到或者优于业内技术水平。产\n品已获得下游领先企业的验证和认可，已签约并交付批量订单。从具体指标来看，量产改\n善方面，公司 6 英寸核心缺陷快速迭代改善下降，量产 TSD 稳定＜100，BPD＜400，达\n到业内一流水平，最新研发成果方面，位错持续改善，研发试产基本稳定实现 TSD＜10，\nBPD 小于 50。8 英寸方面，公司已实现 8 英寸产品小批量生产+下游验证，可供应高质量\n500um 和 350um8 英寸碳化硅衬底，全产线可实现 6-8 英寸碳化硅衬底。目前公司全产线\n可实现 6 英寸和 8 英寸产品兼容，公司预计 2024 年可实现 8 英寸产品与 6 英寸产品品质\n达到同步\n\n碳化硅设备：碳化硅外延设备国产替代空间广阔，公司外延设备国内市占率领先 \n\n外延片占碳化硅器件产业链成本 23%，仅次于碳化硅衬底。碳化硅晶体生长的过程中会不\n可避免地产生缺陷、引入杂质，导致质量和性能不足，而外延层的生长可以消除衬底中的\n某些缺陷，使晶格排列整齐。与传统硅器件不同，碳化硅器件不能直接制作在衬底上，需\n要在衬底上生长一层晶相同、质量更高的单晶薄膜(外延层)  ，再制作器件。外延可分为①\n同质外延：在导电型 SiC 衬底生长 SiC，常用于低功率器件/射频器件/光电器件；②异质外\n延：在半绝缘 Sic 衬底生长 GaN，常用于高功率器件。根据前文数据，2023 年外延片占碳\n化硅器件产业链成本约 23%，仅次于碳化硅衬底\n\n碳化硅外延工艺难度大，份额主要被国外厂家占据，天成、天域引领国产替代。碳化硅外\n延会复制衬底的晶体结构，因此外延层缺陷包括来自衬底的缺陷，以及生长过程的位错以\n及宏观缺陷。据 Yole 数据，2020 年 Wolfspeed  与昭和电工分别占据全球碳化硅导电型外\n延片市场 52%和 43%的市场份额，合计高达 95%。国内碳化硅外延厂商较少，瀚天天成和\n东莞天域引领国产替代。\n\n碳化硅外延设备国产替代加速，以晶盛机电、北方华创、中电科 48 所为代表。国内外延设\n备由国外厂商主导，国内主打外延设备以意大利的 LPE、德国的爱思强、日本的 Nuflare\n产品为主。国内厂商则以晶盛机电、北方华创、中电科 48 所为代表。1）晶盛机电：SiC\n外延设备为公司独立研发设计和生产制造，核心技术均拥有独立的知识产权，目前已实现\n批量销售。2）北方华创：具有 10 余年外延设备研发的技术积累，目前 4/6 吋 SiC 外延设\n备已签订单超百台，批量机台已在各大主流外延厂实现稳定量产。3）中电科 48 所：陆续\n开发出碳化硅外延设备、高温高能离子注入机、高温激活炉、高温氧化炉，并持续研发第\n二代、第三代机型，其碳化硅设备已在生产线应用/签订合同百余台套\n\n\n由于设备中标到设备商确认收入要经历生产、运输交付、客户验证等过程，我们认为由于\n近年来硅片扩产较快，公司订单生产交付及验收周期拉长，收入确认节奏慢于签单速度，\n造成公司在手订单持续增长。随着公司在手单晶炉订单逐步确认收入，以及公司半导体和\n碳化硅设备，光伏电池、组件设备陆续放量，丰富的在手订单有望支撑公司设备收入稳健\n增长，但通过上文测算，我们认为单晶炉整体市场可能在 24 及 25 年逐渐收缩，公司光伏\n设备在手订单有下降风险，但由于在手设备订单仍较多，公司收入预计仍将增长，但 24-25\n年收入增速将有所下降。 \n\n公司材料板块主要包含光伏石英坩埚、金刚线、蓝宝石，碳化硅衬底等，光伏石英\n坩埚为材料板块主要收入来源。坩埚用量随硅片产量提升而提升，且 N 型硅片占比提升有\n望提升坩埚用量。价格方面，根据 solarzoom 数据，36 英寸光伏石英坩埚最新价格为 42000\n元/只，根据美晶新材招股书，预计 2024 年石英砂仍短缺，24 年石英坩埚平均价格维持在\n高位，25 年随着原材料扩产，价格下降 20%。公司钨丝金刚线及碳化硅衬底随着产能释放，\n收入有望逐步增长，蓝宝石业务下游竞争较为充分，预计收入将保持稳定。\n\n公司新业务拓展不顺利：若钨丝金刚线得不到下游客户广泛认可，渗透率提升不及预期，\n新建产能可能造成产能闲置，不利于公司整体经营。此外，公司碳化硅衬底、半导体设备\n等业务技术壁垒较高，公司存在新业务拓展不顺利的风险。\n\n### 现金流\n\n1. 2.4-1.4=1+0.8=1.8 *6\n\n### 榨菜\n1.受大消费市场持续疲软影响,产品终端动销放缓;2.二季度公司对部分终端老日期产品进行了促销拉动,并放缓了部分经销商的调货; 3.同期部分销售大区受疫情\n影响,居民备货及居家消费频次增加,销售基数增加,报告期该因素消除销售量同比下降;4.餐饮行业恢复短期对家庭消费带来影响。\n\n### 牧原股份\n\n公司屠宰肉食板块 2023 年在渠道的开拓与客户的发掘上取得一定成效，全年\n屠宰生猪在 1,300 万头以上，同比增长 80%左右，但距离理想产能利用率仍有一定\n差距。由于东北厂区投产时间短，产能利用率较低，头均固定成本较高，当前屠宰\n肉食业务仍处于亏损状态，但整体头均亏损水平已较 2022 年明显下降。2024 年，\n公司屠宰肉食板块会加强销售能力建设，优化产品结构与客户结构，同时加强内部\n生产、运营、销售等板块的协同，以提升整体盈利能力。\n\n### 榨菜\n\n这次定增就是要扩大收储能力，平抑价格波动，同时深度绑定青菜头种植户，实现传统农业升级，提高当地农民种植收入，助力乡村振兴，实现共同富裕。公司的发展，更要关心的是新上任的管理层，定增项目能否顺利落地，未来的发展规划。公司的负债率极低，可以说是家庭作坊式的生产模式，未来可以锚定周转率的进一步提高，匹配中央厨房的发展趋势，适当提高负债率，协同提升roe水平。几块钱的消费升级的生意，长期看空间还是很大的\n\n\n从量方面，目前榨菜产能13-15万吨，基本满产满销，预计扩产20万吨，约1.5倍，预计回报5亿/年。不扩产净利润9亿；扩产带来的净利润空间6-14亿，其中滞销带来的资产投入计提净利润约6亿，满产满销约14亿\n\n 给15-20倍市盈率，按最低净利润估值，6×15=90亿，6×20=120亿，区间90-120亿。\n按满产满销净利润估值，14亿，14×15=210亿，14×20=280亿\n\n ### 制冷剂\n 制冷剂行业经历了连续三年的低迷状态，具有利润修复的诉求。在配额基准期内，制冷剂生产企业连续 3 年，通过低\n价、低利润甚至是负利润来抢占更多的市场份额，导致企业连续三年制冷剂业务承担了巨大的利润压力，很多小型企\n业难以长期坚持。度过配额锁定阶段后，国内配额形成了供给端限制，使得制冷剂具有涨价基础，行业的企业具有通\n过涨价获得利润修复的诉求，且由于具有配额限制，并不担心行业内形成新的进入者，行业利润有望获得较大程度的\n提升。\n\n四代制冷剂主要以海外巨头供应为主，国内受专利、设备、价格等因素影响，短时间内难\n以大规模推广。四代制冷剂（HFOs）在 ODP 值、GWP 值等环保指标方面优于三代制冷剂，\n且物理性质、制冷性能等方面能够做到与三代相近，在少数领域已经开始有所应用。以四\n代制冷剂目前的主流品种 HFO-1234yf 为例，HFO-1234yf 在热力特性和能效等方面已经与\nHFC-134a 接近，可以作为汽车空调使用的新一代制冷剂。\n\n海外巨头构筑了四代制冷剂专利壁垒，国内企业短期难以实现大范围国产化。不同于国内\n的追赶路线，以科慕、霍尼韦尔、大金为代表的海外巨头在制冷剂领域布局相对较早，在\n含氟制冷剂领域具有较好的积淀，因为相比之下，海外制冷剂基本算是领先国内一代产品。\n在国内实现了三代制冷剂的技术突破和工业生产阶段时，海外巨头企业就开始重点发力四\n代制冷剂，并着手构建四代制冷剂的生产和应用专利池。相对完整的生产专利和应用专利\n为海外企业构筑了长时间的竞争壁垒，国内企业在四代制冷剂领域发展相对受限，目前主\n要在产的生产线也以为海外企业代工为主，还未能形成稳定供应销售的产业链布局。\n\n。经过 2020-2022 年\n基准期的配额锁定，2024 年行业将进入配额管制阶段，产量较 2022 年下行，供给端受到\n政策限制；而从结构上看，新的配额政策不仅确定 2024 年的整体配额，更是针对内用配\n额进行了约定，国内整体三代制冷剂的内用配额占比不足一半，预估国内市场将呈现出明\n显供需改善的情况，具有价格和利润的改善空间。\n\n### 禾望电气\n\n公司风电变流器技术领先，有望受益风光装机容量高增\n\n驱动力一：新能源电控业务，把握新能源技术趋势，迎接风光储需求共振。 \n1） 风电：政策规划加持下，2023 年风电行业高景气度彰显，公司顺应变流器\n大容量化发展，与国内  10  多家整机厂商形成稳定的合作关系，品牌优势\n有助公司持续巩固行业地位，未来有望受益风光装机容量高增。 \n2） 光伏：光伏迈入平价成长未来几年有望保持高增速，公司组串式逆变器中\n标量领先，有望充分享受行业增速。同时公司战略布局半导体公司，聚焦\n碳化硅（SiC）核心技术，推广“单管并联”技术路线，正逐步受到下游客\n户认可。 \n3） 储能：公司重点布局储能系统解决方案，项目经验丰富，2021  年以来，\n公司储能产品不断出货，产品技术获业内认可，未来市占率有望实现突破。 \n驱动力二：电气传动业务：工程变频器国产替代中，公司1GCT 变频器性能更\n佳，目前市场上工业大传动产品国产化率提升空间广阔，未来公司有望凭借技\n术优势加速开拓市场。 \n驱动力三：氢能业务：电解槽是制氢的核心设备，公司制氢电源可广泛应用于\n电解水制氢系统，与深圳大学能源研究院在氢能领域建立合作，公司产品已实\n现实际应用市场，有望受益氢能行业实现快速增长。\n\n![Alt text](image-5.png)\n\nIGCT 芯片相比IGBT 更适用于工业大传动变频器领域。在过去较长时间中，IGBT 由于\n其高频特性，在轨道交通、工业变频、家用电器、新能源逆变器等中小容量应用领域广\n泛应用，但随着电力电子装备电压和容量等级的进一步提升，IGCT 器件的高压大容量优\n势在冶金轧钢、石油开采、油气输送、重型制造、海上风电、船舶推动、抽水蓄能等工\n业大传动领域优势凸显。IGCT 单芯片可以同时承受 4500V 高电压、8000A 大电流，所\n以应用在巨大功率的“电气大传动”上面；而 IGBT 中，高压 IGBT 芯片可以承受 4500V\n高电压但只能50A 低电流，低压IGBT 芯片可以承受200A 大电流但只能1700V 电压，\n所以适合应用在“小传动”，如用在“大传动”需要多芯片串并联使用，可靠性降低。\n\n（1）  新能源电控业务:该公司主要提供风电变流器，光伏逆变器和储能PCS 相关产品，\n受益于下游风电、光伏、储能三个行业未来几年的快速发展，公司该业务有望快\n速起量。预计公司该业务2023-2025 年营收约为33.98/46.16/59.98 亿元，毛利率\n分别为27.94%/28.10%/28.44%。 \n（2）  传动业务：传动变频器技术壁垒深厚，公司是国内第一家IGCT 变频器投入实际\n应用的产商。相比于海外工业传动变频器，公司产品不仅可以在性能和质量上有\n很高的保障，且在价格上具有较强的竞争优势，具备较大国产替代空间，预计公\n司该业务 2023-2025 年营收增速分别为 60%/50%/40% ，毛利率分别为\n42%/41%/40%\n\n强制配储带动国内储能高速增长，大储在国内储能装机中占据主导地位\n\n公司风电变流器起家，主营新能\n源和电气传动产品，业务遍布亚/欧/非/南美/北美洲。公司风光储业务优\n势显著，其中光伏逆变器/储能PCS 22 年国内出货量分别位居7/8 位，\n同时传动技术国际领先，变频器定位高端应用广泛。2018-2022 年营收/\n归母净利润CAGR 分别为24.18%/49.29%，业绩稳定增长。\n\n### 盾安环境\n\n目前车用热管理阀件已获国内外系统、主机厂充分认可，增长逻辑持续验证。\n\n此供应链重塑趋势为盾安汽车零部件业务带来了良好发展机遇。\n盾安目前电子膨胀阀产品已进入比亚迪、蔚小理、极氪等销量高增长车企供应链，在良好合\n作基础上盾安可持续拓展其热管理零部件产品，充分提高单车价值量。 （占比太低了 7% 三花60%）\n\n公司盈利能力呈显著回升趋势，预计后续仍有改善。2018-2020 年公司盈利能力因债务问题\n造成短期波动，2021 年后公司净利率呈显著回升态势，排除债务干扰后，2022 年扣非销售净\n利率为 4.54%，2023H1 扣非销售净利率为 7.57%，扣非净利率明显提高，目前处于行业中游\n水平。净利率提高的主要原因是产品结构优化，原材料成本下降，以及海运费、汇率带来的\n毛利率改善。我们认为随着公司家电业务产品结构的不断优化以及汽零业务的规模效应，公\n司盈利能力后续仍将有所改善。\n\n### 三花智控\n\n按照产品划分,制冷空调电器零部件业务营业收入为77.06亿元,同比上升10.70%;汽车零部件业务营业收入为48.23亿元,同比上升50.78%。\n\n\n### 复星医药\n\n2023 年前三季度，不含抗疫产品，本集团营\n业收入同比增长约 11%；不含抗疫产品，制药业务新品及次新品收入同比增长超过 30%。\n\n2023 年前三季度，本集团继续加大研发投入，研发投入共计 42.91 亿元，同比增长 13.67%；\n其中，研发费用为 31.55 亿元，同比增加 2.92 亿元、增长 10.22%。\n\n抗疫产品及印度子公司 Gland 收入下降，创新药快速增长，药品\n板块营收占比提至 74.7%；营收总体持平。（1）公司制药板块\n1H23 营收 159.95 亿元，同比增长 11.64%；分部利润 14.22 亿\n元，同比减少 9.6%。（2）收入增长，主要来自汉斯状（斯鲁利单\n抗注射液）、汉曲优（注射用曲妥珠单抗）及曲妥珠单抗原液、\n苏可欣（马来酸阿伐曲泊帕片）等新品和次新品的快速增长；其\n中，2022 年 3 月获批的汉斯状营收 5.56 亿元，汉曲优收入同\n比增长 57.1%、苏可欣收入同比增长 32.7%，但复必泰（mRNA 新\n冠疫苗）销量同比显著下降。（3）利润减少，主要源于①复必泰\n（mRNA 新冠疫苗）销量显著下降，但仍有相应的团队和医学、\n市场等费用发生；②控股子公司 Gland Pharma 因美国市场竞争\n加剧以及部分产线停产升级等因素导致的经营业绩同比下降；③\n汉斯状（斯鲁利单抗注射液）、倍稳（盐酸凯普拉生片）等上市\n新品的市场开发、团队加强等战略性投入以及汉斯状（斯鲁利单\n抗注射液）在海外市场的前期布局及团队投入；④1H23，药品端\n研发费用同比增加 3 亿元。\n\n创新陆续兑现，药品板块营收占比提至 74.7%；成长确定。（1）子\n公司复宏汉霖的 PD-1 产品汉斯状 11 项联合疗法在全球展开，中\n国覆盖医院近 1500 家，东南亚与 KGbio 合作，美国自己团队并与\nSyneos Health 合作。（2）合营公司复星凯特的 CAR-T 产品奕凯达\n新增获批二线治疗成人大 B 细胞淋巴瘤（r/rLBCL）,截至 2023 年\n6 月底，奕凯达已治疗超过 500 位患者，备案的治疗中心超过 140\n家及 25 个省市。（3）公司包括 DaxibotulinumtoxinA 型肉毒杆菌\n毒素、盐酸替纳帕诺片等在内的多款在研药品在中国境内的上市\n申请（NDA）获受理，注射用曲妥珠单抗在美国的上市申请（BLA）\n也已获受理。在 1H23 药品营收已升至近 75%的基础上，创新管线\n蓄力充足。 \n\n2023年前三季度,公司销售费用调整主要受到以下三个因素影响: \n(1)抗疫产品销售费用: 抗疫产品收入虽显著下降,但仍有团队和医学、市场等费用;(2)海外市场销售费用: \n斯鲁利单抗注射液美国市场上市前筹备投入;控股子公司Sisram直销业务费用增加,以及为提升品牌知名度而新聘品牌大使开支;(3)新品团队建设及加强和市场开发等投入\n\n\n### 威斯迈\n\n产品结构优化，车载电源集成产品为主力，800 V 产品初现规模。2022 年起，公司车载电\n源集成产品销售收入占销售总收入 85%以上，收入及占比均呈快速增长趋势，主要原因是\n车载电源集成产品的销量快速增长。\n\n2022 年前五大客户销售收入占比下降至 57.37%，上汽、理想在近\n两年内销售占比下降趋势明显，但仍为公司前二客户。公司践行“走出去”战略，近年\n来境外收入占比也逐渐攀升。公司一方面与小鹏汽车、理想汽车、合众新能源、零跑汽\n车等造车新势力以及上汽集团、吉利汽车、奇瑞汽车、长安汽车等众多国内知名车企建\n立长期战略关系；同时在海外市场，已向知名车企 Stellantis 集团量产销售车载电源\n集成产品，并与雷诺确定定点合作关系\n\n境外收入占比达新高，境外毛利率稳步提升。公司海外收入逐步提升，2023H1 海外收\n入占比 14.49%。毛利率方面，境外毛利率逐年提升，但整体毛利率仍然低于境内水\n平，未来随着整体规模的提升，境外业务毛利率有望进一步提升。\n\n 新能源动力系统可以分为电驱动系统和电源系统。电驱动系统包括驱动电机、电机控制器\n和减速器，电驱动系统是新能源的核心，新能源车通过电驱动系统实现动力的输入和控\n制；电源系统主要包括车载充电器 OBC、DC-DC 变换器和高压配电盒 PDU，其作用是实现电\n力转化和电池充放电功能。\n\n从成本上来看，电动汽车最大的成本占比为动力电池，占比约为 38%，电机成本占比 7%，电控\n占比约为 6%\n\n电驱动和电源行业参与者可分为整车厂自供体系和第三方电驱动供应商。整车厂自供体系代表\n公司有特斯拉、比亚迪旗下的弗迪动力、蔚来旗下的蔚然动力以及长安旗下的蜂巢能源等。第\n三方电驱动供应商可以分为海外零部件巨头和国内供应商，海外汽车零部件巨头如联合电子、\n日本电产、博世、大陆、博格华纳等，凭借深厚的技术、工艺等积淀拓展至新能源汽车领域，\n本身产品力强、产能规模大，且具备全球主流车企客户资源。国内第三方电驱动供应商在近年\n来快速崛起，根据业务侧重点可以分为以电控为主的英搏尔、汇川科技，以电机为主的方正电\n机、卧龙电驱,以电源为主的威迈斯等厂商。在集成化的趋势下，部分企业开始布局电机、电\n控、电源与“多合一”系统\n\n集成化方兴未艾，电源+电驱系统多合一大势所趋 \n目前行业主流产品已由分立式部件转为集成式部件，集成化成为未来行业发展趋势。近年\n来，随着新能源汽车行业的快速发展，新能源汽车动力系统核心零部件呈现集成化、轻量\n化、智能化的发展趋势，分立式零部件逐渐往总成类方向发展。相关厂商也从原先供应独\n立电机、电控、减速器等，逐渐专向提供多合一、深度系统集成化的产品\n\n国内外企业纷纷跟进 800V 架构，超级快充是大势所趋。相比较目前 400V 充电电压，800V\n高压系统能提升充电功率和驱动功率，显著提高整车性能，同时减少整车线束等零部件重\n量及成本。目前，国内外车企已开展布局，如保时捷、小鹏、比亚迪等车企均推出搭载\n800V 高压平台车型；下游超快充充电桩也在逐步铺设覆盖，小鹏、广汽、理想、华为等均\n发布超快充桩、计划投建超充站。佐思汽研结合各车厂规划预测，到 2027 年底，800V 高\n压平台车型保有量将达到 300 万辆，800V 超充站保有量达到 1.5-2 万座\n\n高压+高功率密度趋势下， SIC 渗透率或将提升。未来电机控制器技术发展趋势为高安全\n性,高功率密度化以及高压化。随着 800V 电压平台推出，在大功率，大电流条件下减少损\n耗、增大效率和减小器件尺寸成为需求点，电机控制器的主驱逆变器需要硅基 IGBT 替换为\nSiC 基 MOS 模块，存量替代市场空间较大。作为第三代半导体材料的代表，SiC 具有大禁带\n宽度、高击穿电场强度、高饱和漂移速度和高热导率等优良特性。SiC 的禁带宽度（2.3-\n3.3eV）约是 Si 的 3 倍，击穿电场强度（0.8×106V/cm-3×106V/cm）约是 Si 的 10 倍，热\n导率（490W/(m·K)）约是 Si 的 3.2 倍，可以满足高温、高功率、高压、高频等多种应用\n场景\n\n大功率充电下，液冷散热成为解决发热的重要手段之一。相较于风冷散热，全隔离防护技\n术下的液冷充电模块是通过压缩机制冷，依靠循环液带走热量，并使用冷凝器对循环液进\n行降温，具有高防护、低噪声\n\n\n#### 晨光\n短期来看，晨光生物没有多少亮点，持续下跌磨底，如利润持续下滑，则未来深不见底。\n\n1.中药配方颗粒集采入围但无量，原料药生产效益一般。\n\n2.饲料级叶黄素价格低迷，销量下滑非常多，辣椒红和辣椒精相对稳定。\n\n3.棉籽加工产能释放，但薄利销售，年利润约1个亿，潜力不大。\n\n4.工业大麻暂时看不到风口，赞比亚土地开发进展缓慢。\n\n5.保健品增速快但量太小才0.8亿，利润占比太小，其他提取不成气侯，三大主力产品后继无人，姜黄素、水飞蓟、花椒提取雷声大雨点小。\n\n6.管理机制不佳，招人不少，但创新缺乏重大成果\n\n\n2024 年，公司主导产品辣椒红色素要发挥产能优势，朝着市场占有率 3/4\n甚至 4/5 的目标继续努力；辣椒油树脂要发挥原料及市场优势，逐步扩大市场份\n额；叶黄素要通过发展云南、印度、赞比亚、缅甸原料基地，持续提升市场话语\n权。番茄红素、食品级叶黄素要加快高端应用市场开发进度，争取在销售上实现\n大的突破；甜菊糖产品要发挥生产成本优势，加大国内外市场开发力度，进一步\n扩大市场份额；水飞蓟素、姜黄素、迷迭香提取物等产品要通过工艺优化、产能\n扩大等措施，尽快建立竞争优势，形成新的经济增长点。\n\n在工艺、技术、装备等方面积累的丰富经验，已成为公司在激烈市场竞争中\n的核心优势。公司要保持对新工艺、新技术、新设备的敏感性，积极借鉴各行业\n先进的技术和装备，持续推进生产系统改进创新，不断提高生产效率，降低生产\n成本，实现高质量发展\n\n贯彻“吃干榨净”理念，多种类提取物综合利用。公司创新应用资源综合利\n用技术，从加工所得副产品中提取出新的有效成分，通过多种类综合提取有效降\n低产品成本。除首创复合溶剂同步提取辣椒红色素与辣椒精技术外，葡萄籽已实\n现提取原花青素和葡萄籽油的综合利用，万寿菊同步提取叶黄素和槲皮万寿菊素\n（QG）、甜叶菊同步提取甜菊糖和 CQA 技术均已经实现工业应用，2022 年槲皮\n万寿菊素被批准为新饲料添加剂，QG、di-CQA 的多应用场景功效验证为动保产\n品推广提供了理论支撑，在全球禁抗和动物产品消费升级的大背景下，天然植物\n提取物作为替抗饲料添加剂的市场需求将持续增长。公司不断通过资源综合利用\n开发新的品种，在基本不增加成本的情况下提高产品附加值，挖掘业绩增长点\n\n研发投入逐年增长，研发团队高质量发展。2022 年公司研发费用破亿元，较\n上市前刚破千万的研发费产生巨大突破，同时自 2020 年起研发费用率维持在 2%\n左右的水平，因公司棉籽业务更偏大宗品属性，剔除棉籽业务营收来看公司植提\n主业的研发费用率增速较快，2022 年达到 4.42%，多年持续研发投入，使得公司\n在新产品研发、提取工艺、装备制造、产品品质等方面积累了明显的优势，打造了\n坚实的技术壁垒。同时，公司不断引进高端技术人才，研发团队维持在百人左右\n的同时持续优化研发团队人员结构，2020-2022 年硕博学历人员占比由 61.2%提\n升至 69.2%，研发团队专业素养强。\n\n天然着色剂安全健康，多领域广泛应用。辣椒红色素是天然色素的主要品种\n之一，属于类胡萝卜素，联合国粮农组织（FAO）和世界卫生组织（WHO）将辣\n椒红色素列为 A 类色素，在使用中不加以限量。辣椒红色素不仅着色效果好、色\n泽均匀稳定，而且具有一定保健作用，产品广泛应用于食品、医药保健品、化妆\n品、饲料等行业着色（或调色），据智研咨询数据显示，2015-2022 年我国辣椒红\n色素市场规模从 1.72亿元增长至 4.67亿元，期间 CAGR 达到 15.34%，预计 2023\n年有望突破 5 亿元，发展前景广阔\n\n行业扩容和市占率提升共促量增，成本加成定价下毛利率长期稳定。量增：\n主要受益于辣椒红在工业化趋势下的渗透率提升、应用领域的持续拓展与公司以\n市占率为先的策略。2015 年至 2022 年，我国辣椒红色素的产量/需求量分别从\n3.2/1.2 千吨增长至 9.5/2.8 千吨，期间 CAGR 分别为 16.7%/13.6%，国内辣椒红\n素产品多用于出口，国内市场拓展后劲十足。2008 年公司辣椒红色素已超过印度\nSynthite 成为世界第一，2022 年国际市场份额实现从不到 2%到 80%以上的飞跃；\n2017-2022 年公司辣椒红色素产品销量始终保持增长态势，2022 年辣椒红色素销\n量超 8500 吨，较 2017 年销量实现翻倍增长；2023H1 实现销量约 5900 吨，同\n比增长 16%。利稳：受益于行业扩容的同时，公司在辣椒红色素领域的生产规模、\n工艺技术、产品质量、产品成本均处于领先水平，在成本领先优势的基础上通过\n与上下游共享技术进步的成果等方式推动产品渗透率提升，产品毛利率长期维持\n较稳定状态，市场份额不断拓展，在成本加成的定价方式下公司有望通过延伸上\n游种植、降低原料成本来拉升毛利空间。\n\n多举措丰富原材料布局，收入与利润贡献稳定。公司辣椒精产品的产销量已\n连续多年位居世界第一或前列，作为主力单品对公司业绩有较好贡献。公司辣椒\n精产品的原材料是印度高辣度辣椒，2020-2021 年采购季节受到印度新冠肺炎大\n面积爆发影响，行业总供应较为紧张；2022 年印度辣椒产区受到病虫害影响，导\n致辣椒产量下降，故公司 2020-2022 年辣椒精销量对比疫情前的 2019 年有较为\n明显的下降，但 2023H1 销量同比增长 25%达到 385 吨，且高于 2021 年同期销\n量（361 吨），展望长期预计仍有望逐步恢复至疫情前的情况。公司作为我国植物\n提取行业领跑者，具备应对突发情况的灵活处理能力，虽然 2020 年至今印度辣椒\n原材料成本居高不下，但公司在 2022 年抢抓时机收购高性价比的印度花皮辣椒，\n竞争优势显著提升；2023 年公司在印度辣椒的价格仍然较高的情况下及时调整采\n购计划，在国内采购部分高辣度辣椒，优化原材料结构，产品竞争优势得到提升，\n实现 2023Q1-3 辣椒精销量同比增长约  18%。同时，辣椒精供应较为紧张导致销\n售均价同比有一定幅度上涨，2021 年收入及利润均创历史新高，2022 年受销量\n影响收入端小幅下滑但价格仍维持在较高水平，预计 2023 全年在销量增长良好\n的情况下收入有望恢复正增长\n\n天然健康营养素，高附加值方向发展。叶黄素别名植物黄体素，是一种存在\n于人眼视网膜黄斑区的主要色素。叶黄素主要应用于饲料、食品加工、保健品等\n领域。在饲料和食品加工领域，叶黄素具有极好着色作用；在保健品领域，叶黄素\n对视网膜中的黄斑有重要保护作用，是帮助眼睛发育的关键营养元素。近些年民\n众健康生活观念不断增强，叶黄素需求呈现增长趋势，叶黄素原料市场规模从\n2015 年的 2.59 亿元增长至 2022 年的 4.75 亿元，期间 CAGR 达到 9.05%，行业\n不断扩容。同时，高附加值的叶黄素产品增长迅速，据魔镜数据显示，2021 年淘\n宝平台含叶黄素的保健食品销售额超 10 亿元，同比增速达 69%，但 从品牌来看，\n目前含叶黄素保健食品赛道中仍以海外品牌为主，国内品牌仍有较大替代空间\n\n代糖领域核心产品之一，综合优势较为突出。甜菊糖苷是由甜叶菊精提而得\n的天然植物提取甜味剂，相比化学合成甜味剂，甜菊糖苷具有纯天然、无副作用\n且安全性高的优势；相比其他天然植物提取甜味剂，甜菊糖苷具有甜度较高、热\n量更低的特点，甜度是蔗糖的 200-300 倍，热量仅有蔗糖的 1/300。价甜比总体\n介于化学合成甜味剂与糖醇类甜味剂之间，在高端应用市场中发展较好\n\n\n在做好植物提取物多个大单品的基础上，公司结\n合植物提取物的功效，积极布局第三步“做大做强保健品、中药提取等大健康产\n业，为人类健康做贡献”版图，为消费者提供天然、营养、健康的产品，目前保健\n品业务和中药业务仍处于起步阶段，公司低成本工业化生产优势为业务发展提供\n帮助，远期看业绩贡献空间大。\n\n辣椒精：辣椒精的原材料是\n印度高辣度辣椒，2020-2023 年原材料价格维持较高位置，销量受高价\n影响整体呈下滑趋势。2023H1 辣椒精售价维持高位，销量同比增长约 \n25%，公司及时调整采购计划，预计全年吨成本和售价均将有小幅下滑，\n销量或有回暖，整体收入端恢复正增长，但盈利水平或有下滑。（3）叶\n黄素：23H1 饲料级叶黄素销量同比下降约 70%，食品级叶黄素销量同\n比增长超 110%，但 叶黄素价格在 23Q2 触底企稳，预计下半年销量有良\n好恢复。从全年来看，受饲料级叶黄素体量较大影响，预计全年收入和\n利润均有所下滑，毛利率也有所下降。（4）其他植物提取物：今年上半\n年餐饮消费恢复带动花椒提取物销量快速增长，销量增长同比增长约\n50%，创同期历史新高，预计全年有较好恢复；23H1 甜菊糖销售近亿元，\n行业需求保持增长的态势下出现激烈价格战的可能性较小，预计全年稳\n健增长。综合各细项来看：1）收入端：全年收入端其他植物提取物在低\n基数与环境转好背景下收入增速最快，其次为稳定增长的辣椒红、辣椒\n精，叶黄素受销售节奏影响下滑，整体全年植提业务将呈现稳定增长趋\n势。预计 2024-2025 年叶黄素业务恢复正常增长轨道，同时公司不断扩\n充产品矩阵，收入增长或提速。2）利润端：全年来看，较高毛利水平的\n饲料级叶黄素在收入中占比降低，业务结构变化导致整体毛利率降低\n\n### 舍得 \n23Q3 公司毛利率/净利率分\n别同比变动-4.02/-1.03 个百分点至 74.63%/21.87%，其中毛利率下降或主\n因：①普通酒占比提升；②夜郎古并表有影响。环比看，受益于旺季品味\n舍得动销良好，23Q3 毛利率环比提升 2.75 个百分点。净利率下降或主因\n结构变动，费用端看：23Q3 销售费用率/ 管理费用率分别同比变动\n+2.83/-2.53pcts 至21.46%/10.86%，销售费用率提升或主因公司加大营销活\n动投放力度。23Q3 合同负债同比/环比分别变动-0.36/-1.83 亿元至3.26 亿\n元；经营性现金流同比-109.17%至-0.59 亿元\n\n### 国瓷材料\n\n1)电子材料: \nMLCC介质粉体产品销量环比略有下降,维持全年弱复苏态势;2)催化材料: \n淡季不淡销量持续提升,蜂窝陶瓷、铈锆固溶体等产品增长明显;3)生物医疗: \n持续推动全球化布局,努力提升产品多元化和品牌化;4)新能源材料: \n氧化铝、勃姆石销量快速提升,但销售价格下降,公司通过优化成本提升盈利能力;5)精密陶瓷: \n三季度开始,公司在800V高压快充新能源车领域已完成批量供应,目前正加紧扩产氮化硅粉体;6)陶瓷墨水: \n公司陶瓷墨水国内市场地位保持稳定,与科达制造的协同将开始逐步显现。\n\n精密陶瓷板块的增量主要是新能源汽车陶瓷球和陶瓷基板两个方向。 \n其中,新能源汽车陶瓷球业务的进展比较顺利,高压快充的新能源汽车开始引起市场关注,已经开始有部分车企推出相关产品。 \n今年下半年开始,公司新能源汽车陶瓷球的销售收入不断增长,速度在加快。 \n同时,公司正在加紧推动氮化硅粉体的产能建设。 \n 陶瓷基板方面,公司今年2月并表了铜陵赛创,完成了粉体、基板、金属化的布局,铜陵赛创进入到国瓷体系后,各项业务都在加速推进,LED大灯用陶瓷基板已经通\n过了国际头部客户的验证,激光雷达用陶瓷基板已经开始逐步放量。 \n另一个新产品是陶瓷金属管壳,这个产品主要是用在低轨卫星中的接收和发射模块,具有非常好的发展前景,公司将根据市场需求重点发展。 \n综合来看未来几年陶瓷球和基板业务都将实现快速增长。 \n\n### 芯片\nAI 科技革命趋势日益显著，先进制程加速追赶：随着先进制程工艺成\n本不断上升，当前只有台积电、三星、英特尔仍留在先进制程赛道\n上，公司是唯一的先进制程挑战者。中芯国际在 2019 年下半年正式开\n始量产 14nm  FinFET，成为继台积电、三星、格罗方德、联电后的第\n五家掌握该技术并能够量产的厂商。且后续 12 纳米、7 纳米等制程开\n发均可继续沿用 FinFET 结构成果。AI 科技革命趋势日益显著，作为\n当前的先进制程挑战者，公司有望在AI 趋势的发展中起到重要作用。 \n\n### 造船\n4 中国船舶：12月接单11艘，产能覆盖率为3.49年\n2.5 中国重工：12月接单13艘，产能覆盖率为4.14年\n2.6 中船防务：产能覆盖率为2.94年\n\nA公司已经进入新一轮船舶周期的业绩兑现期。目前，部分成本较高的老订单已交付，同时上游材料价格已出现较大回落，外汇端的压力也出现较大改善，预计公司未来盈利能力将会回升至较高水平。以PB估值看，估值越过中轴线，进入景气周期，有望业绩估值双击\n### 中国船舶\n\n碳中和趋势下，利好本轮造船行业替换需求上行。针对 IMO 提出的具体要求，船东应对\n方法主要包括：（1）降速航行带来的有效运力降低；（2）调整能效要求不足的运力安排\n和班期；（3）增加甲醇、LNG 等燃料船舶，降低整体碳排放等；（ 4）老船加装节能装置\n等。环保政策推动下，海运平均航速持续下降带来的运力损失和老旧船舶的更新替代有\n望成为造船市场需求来源之一，同时 LNG、LPG 等低碳船型产能有望持续扩张。根据\nClarksons 数据统计，截至 2022 年，全球安装脱硫设备船共 4385 艘，占全球总船数的\n4.27%。 \n整体来看，公司收入端，需求上行叠加新造船价格上升，民船造修有望实现量价齐升；成本端，造船板\n价格自 2H21 以来波动下行，公司成本压力减弱，盈利能力有望提升。此外，公司积极布\n局 LNG、大型邮轮等高价值量船型，有望持续推动公司产品结构升级，增强公司核心竞\n争力\n全球宏观经济不确定因素对新船订单量和新造船价格均会\n产生波动性影响。同时公司目前整体排产已至 2026 年，考虑到本轮周期造船厂扩产谨慎，\n同时造船业务属于充分竞争市场，公司后续新增订单增速存在不及预期可能性。\n\n公司作为全球船舶制造龙头，在各种高端船型领域均有突破。其中，公司设\n计的“MSC CHINA”号集装箱船具有较低的燃油消耗和温室气体排放，是\n公司在高端船舶领域的一大突破。我们维持盈利预测，预计公司23-25 年归\n母净利润为 34.0/75.6/110.5 亿元，同比+1876%/+123%/+46%\n\n公司股权结构清晰，实际控制人为国务院国资委。公司为中船集团旗下核心军民品主业\n上市公司平台\n公司为中船集团核心上市公司，主营船舶造修、海洋工程及机电\n设备等业务。公司控股江南造船、外高桥造船、广船国际、中船\n澄西四大船厂，全面覆盖军民船舶等各类领域。受益船舶市场回\n暖，公司 1-3Q22 实现营收 385.92 亿元，同比+0.96%；公司非经\n常性损益使得 1-3Q22 归母净利润 14.63 亿元，同比+256.35%。\n同时 2023 年新一轮国企改革有望为公司带来新催化\n \n 需求端：船舶行业大周期复苏，扩张需求+替换需求共振。船舶\n行业二十年一周期，2021 年海运景气度回升明显，全球新接船订\n单（按万载重吨统计）同比+97.2%，创 2013 年以来新高，2022\n年新接订单万载重吨口径同比-36.5%，但新接订单金额同比仍增\n长 8.2%，主要系目前各船厂排产饱满，造船已进入“量降价升”\n的挑单环节。替换需求方面，当前大型活跃船队平均船龄已接近\n21.7 年，老旧船替换周期临近。同时 IMO2023 年环保新规使得绿\n色船舶改造替换需求确认，有望进一步推动新造船周期上行\n\n公司在手货币资金较为充足，2020 年公司完成资产重组后，货币资金实力进一步增长，\n维持在 500 亿元以上。公司整体经营性现金流自 2017 年开始呈现净流入状态，2022 年\n前三季度公司经营性现金流-47.80 亿元，主要系子公司船舶产品收款同比减少，材料设\n备支出同比减幅小于收款减幅所致\n\n2016-2017 年受船市下行周期、海工产品大额减值及原材料价格上涨\n等原因影响，外高桥造船出现两年亏损。近两年公司业绩总体保持稳定，1H22 外高\n桥造船实现营收 57.47 亿元，净利润 0.26 亿元。\n\n经营层面上，广船国际积极承接双燃料汽车滚装船（PCTC）、 客滚船、极地凝析油船\n及极地科考船等双高技术船舶。\n![Alt text](image-8.png)\n\n中长期看，原油需求持续增长，油船市场景气度有望接力。2020 年受全球疫情影响、宏\n观经济下行以及新能源替换等因素，全球原油贸易下滑明显，伴随全球经济逐渐复苏及\n贸易量提升，交通运输及工业用石油需求开始复苏，目前原油处于去库存阶段，全球主\n要经济体原油库存处于低位，截至 2022 年底，经合组织国家商业原油库存下降至 39.68\n亿桶，已基本见底，补库存周期有望恢复，根据原油需求改善下对应船队运力增加，当\n前油运价格已出现复苏迹象，油船有望成为继集装箱船后又一支撑市场发展的主力船型\n\n新能源船替代传统燃料船大势所趋，未来低碳船型主要包括 LNG 船、LPG 船与锂、氨、\n氢能源动力船等。新能源燃料要综合考虑热值、密度、安全性、经济性等多方面因素，\n当前 LNG/LPG 船等技术成熟度已经相对较高，氨燃料优势在于实现大量碳排放降低，但\n目前技术相对还不成熟，成本相对较高。\n\n核心观点：长建设周期、扩产困难使得行业不断向龙头企业集中，本轮造船上行周期中\n国有望延续上一轮韩国情况，引领全球造船业发展。2022 年我国三大造船指标占据全球\n约 50%市场份额，中国船舶占我国市场份额约 20%，占全球份额约 10%。整体来看，公司\n收入端，需求上行叠加新造船价格上升，民船造修有望实现量价齐升；成本端，造船板\n价格自 2H21 以来波动下行，公司成本压力减弱，盈利能力有望提升。此外，公司积极布\n局 LNG、大型邮轮等高价值量船型，有望持续推动公司产品结构升级，增强公司核心竞\n争力\n\n2022 年我国新接订单量、在手订单量和造船完工量\n以万载重吨计分别占全球总量的 55.2%、47.3%和 49.0%。\n我国在大型 LNG 船领域持续突破，2022 年全年新接大型 LNG 船订单国际市场份额首次超\n过 30%。2022 年中国形成了以沪东中华、大船重工、江南造船、招商海门和江苏扬子江\n船业为主的多个大型 LNG 船建造企业集群\n\n船价在签订订单时已基本锁定，其成本波动主要在船舶建造周期中由造船厂自己承\n担。根据公司公告，船舶主要原材料以 6mm 和 20mm 船用钢板为主。2020 年底新造船\n价格逐渐升高，但同时造船钢材价格伴随上涨目前新造船价格上涨。造船板价格在\n5M21 达到峰值后开始回落，截至 2022 年底，上海 20mm 造船板价格为 4480 元/吨，\n同比下降 17.8%，相较 2021 年峰值下滑接近 35%。造船板价格下降有利于增加公司\n在手订单毛利，盈利能力有望持续修复\n\n公司船型结构也同时持续优化，2021 年公司散货船/集装箱船/油船交付\n量分别为 352/100/134 万载重吨，同比增长-27%/129%/0.5%，其中集装箱船占比增幅明\n显，高价值量船型结构占比提升\n\n公司针对高附加值船型持续突破。2018 年初，公司下属子公司江南造船获得法国达飞海\n运公司 23000TEU 超大型 LNG 双燃料集装箱船订单，该型船上配置了世界上第一批 MARK \nIII 薄膜型 LNG 燃料舱，2022 年 5 月第四艘已交付完成。2021 年江南造船与广东九丰能\n源签订 1 艘 79800 立方米 MARK III 薄膜型 LNG 运输船订单，正式进入薄膜型液化气船建\n造领域。根据公司公告，江南造船与阿布扎比国家石油公司（简称 ADNOC）旗下 ADNOC \nLogistics & Services 订了 2 艘 17.5 万立方米 LNG 运输船建造合同。同时公司进军大\n型邮轮领域，2018 年外高桥造船与中船嘉年华及中船邮轮签订“2+4”艘 13.55 万总吨\nVista 级大型邮轮新造船合同，其中实船 2 艘，选择船 4 艘，根据公司公告，国产首制\n大型邮轮有望年中出坞，年底交船。\n\n大型豪华邮轮、大型 LNG 船、航母并称为造船业“皇冠上的明珠”\n\n中美海军力量存在较大差距，中国航母、军辅船等存在较大市场空间。根据《The \nMilitary Balance2022》，中国同美国在航母、驱逐舰、护卫舰、潜水艇等主力舰艇方面\n存在较大的差距，随着国际形势的日益严峻与我国海军战略由“近海防御”向“远海防\n卫”的转变，我国在航母及军辅船等方面存在更多的需求。 \n\n2016 年美国军费支出由降转升，中国军费也将继续增长。从绝对量的角度来看，2021 年\n中国军费支出 2933.52 亿美元，美国军费支出 8006.72 亿美元，美国军费支出约是中国\n军费支出的 2.73 倍，中美之间军费支出存在较大差距；从军费支出占本国 GDP 的比重来\n看，2020 年中国军费支出占 GDP 比重为 1.75%，而同期发达国家军费支出一般在 2%以上，\n2020 年美国军费支出占 GDP 的比重为 3.74%。受全球局势动荡与中美关系恶化的影响，\n2016 年美国军费支出开始增加，占 GDP 的比重也开始呈上升趋势。同时近期两会政府工\n作报告中指出，我国要深入贯彻强军思想，全面加强练兵备战，创新军事战略指导，大\n抓实战化军事训练，统筹抓好各方向各领域军事斗争\n\n十四五”期间，\n我国海军战略由“近海防御”转向“远海防卫”，对海军装备需求随之增加。2022 年我\n国国防支出 1.45 万亿元，同比增长 7.02%，受益于国防开支的增加与装备的升级换代，\n海军装备采购需求有望不断增加。\n\n江南造船厂于 2015 年成为中国第一军工造船企业，目前能够满足海军各系列舰船的建造\n需要。江南造船是我国历史最悠久、军品结构最齐全、造船效率最高的军工造船企业，\n也是我国技术最先进、规模最大的军船生产基地。江南造船厂承担了我国 003 号航母\n“福建舰”、第一代至第四代导弹驱逐舰、万吨新型驱逐舰“南昌号”等的建设任务。目\n前，江南造船厂占地面积 517 万平方米，岸线总长 3561 米，共分三个生产区域，能够满\n足海军各系列舰船的建造需要。\n\n设备及钢材的用量随船的交付体\n量而增长，同时中性预期假设造船钢板水平将在 2022-25 年有所回落但总体有望维持在\n一定水平，预计公司整体 2023 年毛利率相较 2022 年有望增长 5.3pcts\n\n### 保险\n\n首先，近期社融持续改善，后续积极的财政政策有望带动总需求和经济恢复动能逐步增强，稳健的货币政策也会通过降准等多种方式予以协同配合，将共同稳固宽信用进程。长期利率下行空间有限，更可能随着经济形势的复苏，利率出现回升，并利好险资债权资产，同时利率增速的企稳也有望持续拉动债市的回弹。\n\n其次，股市在经历了惨淡的2023年已经整体处于较为低估的水平，2024年上行的概率加大。股市回暖将带动险企股基等权益资产投资业绩向好；而 IFRS9 金融准则实施后 FVTPL 资产占比明显上升，也将进一步放大投资波动，或对2024年利润增长提供较好支撑。此外，险企将持续加大包括高股息股票在内的权益资产配置，预计此类资产将普遍计入 OCI资产类别中，股息分红收入的增加将稳定并提振险企净投资收益率，从而带动总投资收益率改善。\n\n最后，保险公司持有的地产等投资开始出清，相关的资产风险逐步化解。险企资产质量持续改善\n\n\n 平安首个动工的超高端养老社区—深圳·臻颐年将于2024年完工。平安已在全国17城拥有健康检测中心，成为平安保险+医疗+养老的粘合剂。平安自有医生、外接医生以及自有健康管理中心，且线上、线下服务渠道最为均衡，相较于其他保险公司，平安能够提供闭环程度更高的省心、省时又省钱的服务。随着平安保险+生态服务陆续面世，新业务价值率弹性空间更大。\n \n\n ### 恒立液压\n\n 挖掘机预计 2024-2025 年完成筑底开启新周期\n 伴随房改政策出台提振信心，一万亿国债发行，基建\n发力带动复苏，用 8 年左右一个周期测算，行业预计在 2024-2025 年完成筑底开启新周期。\n\n 挖掘机销量主要由下游需求决定。国产品牌对国外品牌的国产替代已基本实现，销量被\n下游需求决定。需求端为两类新增需求和更新需求：国内的新增需求取决于地产、基建、矿\n山等固定资产投资；国外的新增需求取决于欧美市场占有率提升、“一带一路”等国家的基\n建项目和矿山开发等；更新需求主要包括设备老化更新需求，环保标准升级的换代需求和技\n术创新后的升级需求\n\n盾构机油缸技术领先，全球市占率超60%。从 2005年起恒立开始研发生产盾构机油缸，\n油缸配套至中交“长城号”等大型盾构机；在美国西雅图 Bertha 号盾构机中，全套高压油\n缸均来自公司，即使该在地下施工作业两年，也未出现腐蚀、密封件老化等问题。根据公司\n公众号，2019 年恒立盾构油缸全球市场占有率超过 60%，国内市场占有率超过 80%，技术\n世界领先。\n\n海外高空作业平台市场以存量更新为主。北美、欧洲等海外发达国家和地区经济发展水\n平高，安全生产法规严格，高空作业平台市场成熟，存量市场大，应用普及率高，产品结构\n完善，更新替换需求稳定。2021 年，美国租赁市场高空作业平台保有量为 72.21 万台，同\n比增长 10%。欧洲十国租赁市场保有量为 32.46 万台，同比增长 3%\n\n国内市场仍处于高速成长阶段。中国高空作业平台市场仍处于成长期，低成本、高效率、\n安全作业保障是促使高空作业平台在国内市场快速发展的三大驱动因素。据中国工程机械工\n业协会的数据显示，2022 年，我国高空作业平台销量达 19.6 万台，同比增长 22.40%。2022\n年中国高空作业平台保有量约为 43.85 万台，同比增长 33%，与美国 2021 年高机租赁保有\n量 72.21 万台相比摊平的人口总量上来看，仍存在较大增长空间。\n\n海外营收持续增长，毛利率领先国内同行。2022 年公司实现海外收入 17.53 亿元，同\n比增长 41.9%，自 2015 年以来实现复合增长率达 28.54%，实现海外业务高速发展。从海\n外收入占比来看，公司 2022 年海外收入占比达 21.4%，与 2021 年相比提升 8.1pct；其中，\n2015-2020 年海外营收占比下滑的原因是，国内工程机械进入上行周期，增速远超海外业务\n所致。从毛利率来看，公司海外业务毛利长期维持在 35%左右，领先同行艾迪精密 8-10pct\n左右，凸显公司经营管理、成本管控和品牌效益领先行业\n\n墨西哥项目投产在即，业绩提升 17.03 亿元增量。2021 年公司非公开发行募资 50 亿\n元，其中建设投资 14.12 亿元，该项目达产后将形成工程机械用油缸 200,440 根、延伸缸和\n其他特种油缸 62,650 根以及液压泵和马达 150,000 台的生产能力。墨西哥项目预计在 2024\n年上半年开始逐步投产，将有利于公司深度拓展美洲市场，避开贸易关税壁垒，提升交期和\n售后速度。项目达产后预计将为公司带来 17.03 亿元的业绩增量，占 2022 年总营收的 20.8%\n\n丝杠项目明年逐步投产，预计带来至少 62.96 亿元业绩增量。根据公司公众号报道，目\n前新工厂已建成，各项基础设施建设已经进入扫尾阶段。全部完成届时将形成年产标准滚珠\n丝杆 66 万米、精密滚珠丝杆 42.2 万米、行星滚珠丝杆 1 万米、直线导轨 100 万米、标准\n滚珠丝杠电动缸 10.4 万根、重载型滚珠丝杆电动缸 2.5 万根和行星滚柱丝杆电动缸 1750 根\n的生产能力。根据公司公告中的单价进行预测，整个丝杠项目可创造至少营收 62.96 亿元，\n占 2022 年营收 76.8%。预计 2024 年上半年开始逐步投产，开启第三增长曲线\n\n油缸业务：公司国内挖机油缸市占率可保持在 60%以上，未来海外市场渗透率有望提升\n带来增量；非标油缸由于海工装备、盾构机、高空作业平台和非挖工程机械的油缸保持增长，\n平滑挖机业务的波动，预计 2023-2025 年公司油缸收入增速保持稳增长为 5%，10%，14%，\n随着下游工程机械在 2024-2025 年的景气度恢复，预计油缸业务毛利率将回升，分别为\n39.90%、42.5%、44%。 \n泵阀业务：主要包含挖机泵阀马达和非标泵阀马达等；预计未来公司中大挖泵阀市占率\n稳中有升，挖机马达市占率上行，并且泵阀突破进入海外主机厂为业绩带来增长点。非标泵\n阀、马达业务受益于农机和高级泵阀产品放量，带动泵阀业务占比提升。预计 2023-2025 年\n公司泵阀收入增速为 12.5%、22.0%、32.0%。预计 2023-2025 年公司泵阀业务毛利率水平\n分别为  48.36%、49%、49%。 \n液压系统：此业务偏项目型，受制造业宏观形势影响，预计 2023-2025 年收入增速为-\n30%、29%、27%，毛利率水平保持稳定，按 44.90%、45.0%、45.0%计算。 \n\n\n### 猪\n生猪出栏量完成目标，能繁母猪存栏量稳步增加。公司2023全\n年出栏 6382 万头，同比+4%，此前公告出栏目标为 6250~6400\n万头，出栏量完成目标。伴随猪价持续低迷，预计公司单月养\n殖亏损环比加剧。4Q23末公司能繁母猪存栏313万头，较3Q23\n末增加4%、同比增加11%\n\n猪价旺季不旺，产能持续去化。根据调研，2023 年腌腊旺季猪\n肉消费量有较为明显的减少，生猪价格旺季不旺。结合目前生\n猪供给量大，以及2023年国庆及元旦前的猪价表现，我们预计\n年前的猪价反弹幅度有限、行业或将继续亏损。参考1H23能繁\n母猪存栏量降幅较小，且1-3Q23行业投苗量较高，我们预计未\n来 1-2 个季度生猪供给压力仍然较大。目前看来，能繁母猪产\n能去化趋势加深，根据行业数据，12 月规模场能繁母猪存栏量\n环比减少2.02%，同比减少5.45%，2023年12月较1月能繁减\n少5.30%。我们预计2Q24之后有望出现猪周期的底部拐点\n\n公司2023年12月的生猪养殖完全成本为15.3元/kg,相比前几个月有所上升,主要原因是冬季疫病造成的生产成绩波动以及防控疫病的投入有所增加。 \n目前疫病对猪群的影响已趋于平稳,公司会持续做好疫病防控,一是通过空气过滤猪舍、精准通风系统等硬件装备进行防控,二是做好人员、物资的消毒管理,三是\n保证一线人员对各项生物安全措施的有效执行\n\n 现金成本是影响公司现金流安全的关键因素之一,当前公司生猪养殖完全成本中,折旧摊销占比在10%左右,现金成本在13.5元/kg左右,公司现金成本安全垫较\n厚。 \n此外,公司与银行等金融机构保持稳定、良好的合作关系,授信储备充足, 中国农业银行、中国建设银行、中国银行等头部银行均将公司作为总行战略客户,目前头\n部银行授信占比超过70%,未用信额度超过300亿元,去年新增银行贷款成本基本在4%以下\n\n### 九毛九\n\n强中台成就多品牌，全球化延拓优势。1）怂火锅：火锅赛道机遇与挑战并存，怂品牌借力平\n台优势，模型跑通、加速开店、有效全国化，中期维度形成集团又一利润驱动。2）赖美丽：\n烤鱼行业广阔明朗，赖美丽定位烤鱼版太二，在标准化经营、高辨识品牌、强协同供应角度直\n接受益集团赋能，将适时开店以赛代练、持续打磨蓄势待发。3）太二国内：从渠道发展和人\n口覆盖角度测算，太二品牌在五年维度于国内门店空间可略超1000 家，目前高质量扩张、节\n奏稳健，品牌能量强劲向上。4）海外：海外中式餐饮市场潜力较大，川式正餐品类适应性\n强，而集团全球化布局清晰，延续集约、标准、效率的经营思路，第一阶段率先渗透东南亚、\n北美等华人聚集地，对标进驻海外较早的川式休闲餐品牌海底捞，中长期目标预计或可看约\n150 家；除华人市场外，川式正餐在海外本土市场也具备较大潜力，现有龙头在经营规模化、\n管理标准化、设计本土化的成功经验可为借鉴\n\n以火锅、酸菜\n鱼为代表的菜品由于具备易标准化的特质，龙头公司门店数量较高，连锁品牌扩张潜力更加充分；\n而粤菜、传统西餐等由于食材要求、制作工序相对复杂，对厨师依赖度高，因而难以形成统一稳\n定的标准化供应服务体系，相应其赛道中的龙头公司也更难形成规模化扩张。\n\n![Alt text](image-9.png)\n\n联营介入原料生产，食材质价深度把握。1）鲈鱼：早在2020 年7 月，集团便与上游食材供应商\n成立合营公司开展第一个合作养鱼项目，截至2020 年底，合营公司已拥有3000 余亩的加州鲈养\n殖基地，集加州鲈的育苗、养殖、加工、销售为一体。酸菜：太二与酸菜供\n应商在四川成立酸菜腌制基地，以独特的配方在传统中国陶罐中腌制定制的酸菜，并且公司与酸\n菜供应商通过达成长期且稳定的合作协议，获得提前付款的折扣，以此保障酸菜的供货质量与价\n格。3）火锅调料：22 年年底，公司斥资 9.96 亿元收购重庆市涪陵区 3.3 万平米土地使用权，部\n分用于建设火锅底料及复合调味料生产厂房，为怂重庆火锅品牌的核心原料供应奠定基础\n\n供应能力打造完备，并成为集团的基础设施资产，未来多品牌均将享受规模与效率红利。1）集\n团已有的鱼养殖基地、酸菜种植收采机制、调料自产厂房设备，从主料到辅料，全方位奠基成集\n团突出的供应能力，且将辐射多个新品牌，形成规模集采与生产效率红利，有望构筑优于同行的\n产品质价和盈利能力。如太二的鲈鱼养殖基地能够养殖赖美丽所需的江团鱼和牛蛙，底料工厂或\n可辅助生产烤鱼所需的麻辣风味底料，提高集团各品牌在供应链端的协同效应。2）全国化中央\n厨房及总部供应中心建成，将从食材仓储、加工、物运等角度提高品牌协同和整体经营效率，保\n证品质把控和口味统一，可为集团旗下未来有望全国化的多个品牌提供门店储配支持。 \n\nSKU 集约化，降低决策时间。太二 SKU 不超过 30 个（含\n配菜），而主品酸菜鱼只可更改分量（辣度、鱼品、基础配菜均固定），精简的单品设置不仅降\n低顾客决策时间，也减少后厨备菜成本，同时降低上游供应管理难度，提高采购物运的规模效益，\n为门店翻台提升和成本降低均提供充足空间。2）场景精简化，加快用餐速度。太二餐厅原则上\n不接待 4 人以上同时就餐，且不提供拼桌加位服务，将就餐场景限定为工作餐、快捷休闲餐等偏\n刚需的类目上，有利于充分吸纳核心受众、加快整体用餐速度，同时减轻宴请派对等环节的服务\n需求，降低不必要的人员成本。3）流程自助化，减少服务冗余。太二餐厅服务人员负责引导顾\n客入座、传菜及响应必要需求，其余点餐、茶水、结账等流程均通过小程序或顾客自助完成，进\n一步提高就餐效率，降低服务成本\n\n“爆品策略+品牌 IP”，战术化营销方式实现强势破圈。1）单品故事先行，差异化塑造品牌记忆点。\n太二主打一道老坛子酸菜鱼，以“酸菜比鱼好吃”体现差异化；怂火锅主营重庆锅底和鲜切黄牛肉，\n主打“灵魂是锅底，头牌是牛肉”带给顾客独特的消费体验；赖美丽延续集团精简 SKU 的路线，以\n青花椒烤鱼为主要特色且只卖自养江团鱼，建立了差异化的品牌壁垒，树立了独树一帜的消费卖\n点。2）打造品牌 IP，传递独特品牌文化。太二设计了沉默寡言的二老板及活泼幽默的小二哥形\n象，通过黑白漫画形式推送新品及活动，并以品牌形象与猫咪“何英俊”联名进行公益活动等，吸\n引年轻消费群体率先入场；怂火锅塑造了飒小妹、怂厂长两个 IP 形象，输出“你，开心就好”的品\n牌理念；后续孵化的赖美丽也打造出一个出身养鱼世家、爱笑爱吃烤鱼的个性女孩形象，增强趣\n味性，在与年轻顾客拉近距离的同时，输出品牌专注菜品高品质、创新独特有趣的品牌调性，不\n断提升品牌在受众客群中的影响力，迅速提高品牌知名度，也是未来新品牌可沿用的打法\n\n### 云南白药\n\n\n百年品牌，焕发新活力。2019 年“白药模式”混改落地，公司引入民营资\n本并实施股权激励和员工持股等政策，激发员工积极性。白药参与上海医药\n定增，双方未来有望在药品研发、医药商业等领域强强联合；全面要约收购\n万隆控股，完善工业大麻产业布局，搭建国际化贸易平台。\n\n持续探索外延，力求第二增长曲线，数字化平台焕新赋能。在做深做实现有\n业务板块的同时，云南白药立足“1+4+1”战略，积极探索“第二增长曲线”，\n着力布局医美、口腔护理、骨伤以及女性关怀产业链，推出“齿说”智能电\n动牙刷、冲牙器等多个产品，并集中优势资源，积极推进医美产业布局。\n\n四大事业部行稳致远，进而有为。1）药品事业部：云南白药作为百年名药，\n其配方享有国家最高保密级别，其中云南白药膏与云南白药气雾剂均为 10\n亿级别大单品，多款产品位居骨伤科前列；2）健康事业部：2022 年，健康\n事业部营业收入61.97 亿元，同比+5%，其中牙膏市占率稳居细分赛道第一；\n3）中药资源事业部：在 2013 年单独成立后，营业收入从 2013 年的 2.98\n亿，增长到2022 年的峰值14.47 亿元，在各事业部中增长最快，是公司四\n大业务部门中最有潜力的增长点，受益于产业布局，公司中药材板块在三七\n价格持续走低的背景下逆势上扬；4）医药商业板块主要依托云南省医药公\n司，发展医药流通和云南白药大药房两大业务，两票制后公司并购中小流通\n商，并获上海医药支持，区域龙头地位稳固，将长期受益于行业集中度提升\n\n战投上海医药。2022 年 4 月，云南白药发布公告，作为战略投资者，以现金方式认购上\n海医药665,626,796 股份。此次认购完成后，云南白药持有上海医药18.01%股份，成为\n上海医药第二大股东，上海市国资委仍为上海医药实际控制人。\n\n以白药系列为核心，培育医疗器械产品矩阵。药品事业部主要包含药品系列和医疗器械品\n牌，其中云南白药药品系列共有19 个剂型，300 余个品种，分为白药系列和普药。1）白\n药系列：云南白药系列在传统的云南白药散剂基础上，拓展出云南白药膏、云南白药气雾\n剂、云南白药创可贴等多种剂型，满足差异化消费需求；2）普药和特色药系列：以气血\n康口服液、宫血宁等大单品为基础，向感冒类、胃肠道类、抗感染类和清热类等产品延伸；\n3）医疗器械：2022 年，药品事业部以“稳药品·育器械”为核心战略，选择慢病疼痛、\n眼健康两大细分领域拓展发力，探索医疗器械家庭化使用场景，谋求新增长极。\n\n\n### 充电桩\n\n超充落地具备可行性，全生命周期充电度电成本大幅降低。液冷超充桩初始投资\n成本较高，通过微电网、共享储能可解决超充对电网稳定性的冲击但也大幅提升\n了初始投资成本。充电网作为重要的新型基础设施，应考虑未来技术迭代和标准\n升级，改变简单比较单瓦成本的思路，引入全生命周期的充电度电成本进行评估。\n以华为全液冷超充方案为例，度电成本要远低于传统方案，10 年整站度电成本\n0.34 元/kWh，分别较一体桩、风冷堆低 35%、26%，投资回收期仅为 6.7 年\n\n，超充桩建设成为800V 高压快充推广的制约因素。\n海内外车企成为超充桩建设主力，华为 600kW 液冷超充站引领技术趋势，超充\n桩成为充电桩投资侧重点。关注大功率直流桩占比高的整桩企业、超充桩带来的\n液冷模块、液冷枪线等技术升级方向。 \n推荐：威迈斯、鑫宏业；关注：永贵电器、通合科技、利和兴、绿能慧充。\n\n要实现高压快充主要从 4 个方面入手：（1）车端：提升整车平台电压，相应部\n件耐压性需升级；（2）电池端：提升电池快充倍率性能；（3）桩端：大功率\n直流超充升级，提升散热能力，例如液冷模块、线缆和充电枪液冷技术的应用；\n（4）电网端，需解决大功率充电对电网稳定性带来的冲击。\n\n（1）具有技术、客户等优势的液冷充电模块公司，推荐：威迈斯，建议关注：\n通合科技；（2）液冷枪和液冷线缆公司，推荐：鑫宏业，建议关注：永贵电器\n等；（3）大功率快充整桩和代工公司，建议关注：利和兴、绿能慧充等\n\n通过微电网、共享储能可解决超充对电网稳定性的冲击。微电网是指由分布式电\n源、储能装置、能量转换装置、负荷、监控和保护装置等组成的小型发配电系统，\n是解决分布式电源直接接入电网所引起一系列问题的有效手段。\n\n![Alt text](image-10.png)\n\n 超充有待规模化降本，应从度电成本视角衡量经济\n性\n\n大功率液冷充电\n枪是在充电线缆中放置液冷管道，让冷却液带走线缆的发热量，此种方式不仅可\n以减小线缆线芯截面积，而且充电电流更大，充电过程温升更低\n\n### 盛弘股份\n\n公司的电能质量产品主要解决用户在用电过程中遇到的工业配套电源问题,通过解决电网谐波、三相不平衡、电压暂降、突然断电等问题,提升用户用电质量及用\n电安全。 \n可以广泛应用于高端装备制造、石油矿采、轨道交通、IDC数据中心、通信、冶金化工、汽车制造工业、公共设施、银行、医院、剧院、广电、主题公园、电力\n系统等行业\n\n公司成立于 2007 年，2017 年深交所上市，是国家创新基金、深圳市科技\n研究开发计划入选企业。公司是专业的能源互联网核心电力设备及解决方案\n提供商，主要业务属于国家性战略新兴产业中的节能环保、新能源领域\n\n营收拆分：2022 全年营收同比增长47.16%，增速提高 14.75pct。主要系：\n（1）\"十四五\"纲要等政策刺激高端装备制造业快速发展，公司电能质量设备\n业务稳定增长，2022 年实现营收 5.12 亿元，同比增长 26.69%；（ 2）受新\n能源电动汽车市场风口推动，充电桩业务发展势头良好，产品出货持续增加，\n22 年实现营收4.26 亿元，同比增长116.96%；（ 3）锂电池厂商持续扩大锂\n电池的生产需求，带动公司电池化成与检测业务营收增长，22 年营收 2.58\n亿元，同比增长72.37%。\n\n迎接充电行业高景气度周期，大力推进快充技术和海外布局。公司深耕充电桩\n研发制造十余载，目前公司充电桩产品覆盖整桩和模块，拥有 50 多款不同充\n电规格的充电设备产品，实现 7kw-800kw 全功率段产品全覆盖。技术方面，\n公司已开发 200 多种独有的充电控制技术，并率先发力高压快充，已将碳化硅、\n液冷超充等前沿技术应用于产品。2023 年上半年公司充电桩业务实现收入\n3.84 亿元，2023 年前三季度收入预计超 6 亿元，总体实现高速增长。此外为\n顺应全球化浪潮，公司加速充电桩海外布局，成为首批进入英国石油中国供应\n商名单的充电桩厂家。考虑到截至 2023 年 9 月，全国新能源车保有量 1821\n万辆，充电基础设施保有量 764.2 万台，车桩比 2.38:1，离工信部“2025 年\n实现车桩比 2:1，2030 年 1：1”的目标仍有差距，国内充电桩增量空间依然\n广阔，叠加海外广阔需求，公司充电桩业务有望继续强劲增长。\n\n新能源电能变换设备业务成为公司重要营收来源。2018-2021 年，公司新能\n源电能变换设备业务营收占比分别为8.79%、15.59%、16.10%、23.51%，\n呈持续上升趋势。2022 年，电能变换设备营收贡献下降至17.02%，主要系\n充电桩业务营收增速提升，22 年充电桩业务营收贡献同比提升 9.11pct，达\n28.33%。未来，公司仍会依托这四个业务板块持续开拓新市场与新客户，并\n不断提高产业链的广度与深度\n\n充电桩产品主要包括直流桩和交流桩、一体式和分体式等多种产品类\n型；充电桩模块涵盖 15kW、20kW、30kW、40kW 等功率等级。公司拓\n展多元化客户，包括小桔充电、国家电网、南方电网等运营商，比亚\n迪、吉利等车企，中石油、中石化、BP、壳牌等能源企业，以及长沙\n城发、南宁交投等政企。公司丰富的产品品类、多元的客户分布以及\n强大的服务能力有望为公司充电桩业务带来高速增长。\n\n华为引领全液冷超充技术。当前液冷超充桩大多是在传统风冷充电桩基础上，采\n用液冷充电枪来实现大电流充电输出，大充电功率下噪声较大，可靠性较低，后\n期维护成本较高。华为发布的全液冷充电架构采用液冷充电模块、液冷充电枪，\n系统整体采用液冷散热设计，具有充电电流大、噪声小、可靠性高的特点\n\n公司是最早在国内推广发展电能质量设备的厂商之一、全国首家低压电能质量\n领域上市企业，形成了包括谐波和无功电流检测与控制等一系列直接应对谐波治理、\n无功补偿、三相不平衡治理、电压暂降等问题的核心技术，技术优势明显\n\n全面覆盖电流质量、电能质量治理的低\n压、中高压领域，产品被广泛应用于谐波治理、无功补偿、地铁储能、电\n压暂降、保障用电安全的工业UPS 等场景\n\n储能变流器（PCS）用于储能电池和电网之间的双向电能变换及传输，是\n储能系统中除电池外的第二大成本来源，直接决定储能系统效率与安全性，\n作为核心装置具有广阔应用前景2022 年公司在全球市场列于第五大供应\n商；2022 年公司在国内市场位列第七大供应商，市场份额位居前列。\n\n全产品三方认证，出海产品资质优势明显。\n积极捕捉海外市场发展机遇，绑定优质客户共同成长相较于国内储能市\n场，海外储能市场发展更为成熟，公司把握巨大市场发展机遇，根据海外\n不同市场需求提供多样解决方案。（1）针对欧美市场，公司为其需量电费\n管理与新能源消纳提供高效解决方案；（2）针对缅甸、印尼、泰国和非洲\n等无电、弱电及偏远地区，通过灵活的模块化储能方案，建设一体化储能\n系统，改善当地生活环境。\n\n新能源汽车充电桩产业链的上游为建设及运营充电桩所需要的元器件和设\n备生产商，中游为充电运营商，下游为各类电动汽车用户。其中设备生产\n商和充电运营商是充电桩产业链中最主要的环节。公司充电桩业务主要位\n于充电桩行业链中上游\n\n行业上游：充电设备供应商竞争较充分，IGBT 国产化趋势升温。充电模块\n是充电桩的核心设备和主要成本来源，占新能源汽车充电桩硬件成本的\n45%-55%，其主要功能为将交流电网中的交流电转换为可以为电池充电的\n直流电，公司自产充电模块性能优异，有效节省了充电桩生产成本。公司\n充电桩设备上游企业主要为变压器、电度表、功率器件等原材料供应商。\n其中IGBT 功率器件是充电模块的关键组成部分，国内如士兰微、斯达半导\n等都在积极布局IGBT\n\n行业中下游：国企、民营并驾齐驱，市场集中度较高。经过一系列的行业\n洗牌，部分玩家出局，充电桩市场向集中化迈进。目前，公司充电桩业务\n下游客户主要为各类运营商。国资企业是公共桩营运市场的先行者，典型\n代表是国家电网，依托电网广泛分布的基础设施，完成充电服务网络的建\n设。民营运营商包括专业电气厂商或其子公司和整车厂两类，前者典型代\n表是特锐德的子公司特来电，目前是国内最大的公共桩服务提供商；后者\n典型代表是比亚迪，依托自身庞大的新能源汽车业务线，开展充电桩服务。\n截至 2023 年 5 月，国内排名前十五位的公共充电桩运营商市占率共达\n94.1%，市场集中度较高。伴随着充电行业的逐渐成熟，充电桩的发展方向\n由最初的建设端向质量更高的运营端转移，在技术、市场、盈利模式上产\n生大的变革。\n\n其中，荷兰、挪威计划于2025 年开始禁售燃油车；德国、瑞典、\n比利时计划于2030 年开始禁售；英国、法国计划于2040 年开始禁售。\n这类强制性政策将显著助推新能源车渗透率上涨。\n\n产品性能优异，持续为客户提供定制化服务。公司充电桩业务主要从事一体\n式直流充电桩、直流充电模块、智能柔性充电堆以及交流充电桩四类产品\n的研发、销售与运维服务。其中，一体式直流充电桩为公司主打产品，主\n要特点为大功率快充，分为单枪与双枪式，单枪式功率为80kW，双枪式覆\n盖功率为 60~240kW，广泛适用于商场、写字楼、公园、住宅区、大型电\n动汽车充电站等各种场景。智能柔性充电堆也为直流快充产品，功率达\n360kW，可进行功率智能调配，满足各功率、各容量等级的电动汽车快速\n充电的需求。公司交流充电桩产品主要应用于小功率慢充，为住宅区、酒\n店等场景提供充电服务，可有效延长电池寿命\n\n### 化工\n\n气凝胶：凭借密度最小、绝热系数最高等多项吉尼斯记录，被自然杂志评价为改变\n世界的神奇材料。气凝胶作为绝佳的保温材料，迄今为止产业化发展不到三十年，\n且是少数国内外发展水平相近的新材料。近年随着全球碳中和、碳达峰的政策推动，\n相关市场应用逐渐受到重视。我们认为，基于气凝胶产业目前处在快速成长期，建\n议关注短期有技术优势和产业化能力、长期有成本下降空间的相关公司\n\n### 洛阳钼业 \n\n全球第一大钴生产商，24年有望跻身前十大铜生产商\n\n铜矿生产高扰动延续，供给约束下铜价有望保持高位运行\n\n### 石头科技\n\n023 年Q1-Q3 销售、管理、研发费用\n率分别为19.68%、3.01%、7.88%，同比分别提升1.73、0.72、0.03pcts，但\n公司费用控制明显优于科沃斯（科沃斯同期销售、管理、研发费用率分\n别为 32.43%、3.95%、5.74%）\n\n### 科沃斯\n\n报告期内，公司科沃斯\n品牌海外业务收入同比增长 26.5%，添可品牌海外业务收入同比增长 24.2%，占各自收入比重分别\n达到 34.3%和 30.9%,较上年同期分别增加 7.1 和 3.2 个百分点。未来公司将进一步加大对海外市\n场的投入，提升产品结构，优化渠道，扩大地域市场，推动海外营收规模的持续快速成长\n\n未来扫地机将从短中长期三个维度进行产品功能迭代。短期维度，考虑在自清\n洁上继续升级，如解决自动上下水等仍存在空间限制、集尘和除尘部件需手动清理\n等问题；中期维度，会针对扫地机目前存在的无法进入狭小空间、无法越障、无法\n清洁长毛地毯等问题，做出相应改进，并提升避障精准度，如通过去除顶部激光头\n或传感器融合的方法将扫地机机身做的更加轻薄、通过增加辅助轮或机械腿的方式\n辅助行走以解决扫地机本身无法完成的越障问题等，同时将针对避障性、脱困性以\n及 AI 识别功能进行算法上的持续迭代；长远来看，智能家居最终会走向集中控制，\n形成统一的生态系统。随着物联网和云计算等技术的成熟，扫地机会与其他智能家\n居一体化，通过智能语音、环境识别等方法，自主满足人们的需求\n\n科沃斯不断发掘其他赛道，横向拓展新兴品类，打造第三增长曲线。除洗地机\n外，科沃斯还将技术运用于不同领域，不断拓展新品类，2021-2022 年推出了商用\n清洁机器人、割草机、智能料理机、空气净化器等各种新品。其中，2022 年推出的\n新品食万 3.0 智能料理机迎合了当前预制菜的热潮，在功能上进一步简化了做饭步\n骤，此后又通过料理机、食万净菜和添可生活 APP 三大板块，搭建了智能化烹饪的\n全链路解决方案。此外，公司还在家用扫地机的基础上，延展了商用清洁赛道，持\n续投入商用清洁机器人的研发和布局，推出了 DEEBOT PRO K1产品。目前公司可\n为酒店、写字楼等商业 B 端场所提供清洁专用解决方案，并创新性采用租赁模式，\n以降低客户使用成本。通过不断横向拓展新兴品类，科沃斯有望打造第三成长曲线\n\n### 闻泰科技\n\n闻泰科技主要从事集研发设计和生产制造于一体的产品集成、基础半导体\n和光学业务，主要提供手机、平板、笔电、服务器、IoT、汽车电子等终端产品\n研发制造；半导体功率器件、模拟芯片的研发设计、晶圆制造和封装测试；光\n学模组的研发制造服\n\n2019 年闻泰科技通过收购安世半导体切入半导体业务领域\n\n2021 年闻泰科技收购得尔塔科技，进军光学模组业务领域，研发和生产应\n用于手机、汽车电子、笔电等领域的摄像头模组。得尔塔科技前身为索尼电子\n华南有限公司，2017 年被欧菲光收购。目前得尔塔科技在广州、珠海建有大型\n生产基地，在日本熊本设有设备研发中心\n\n移动终端 ODM 是公司主要收入来源，收入结构持续优化。公司主营业务包\n含移动终端 ODM、半导体 IDM、光学模组及其他三大板块，2022 年各板块收入占\n比分别约为 68.03%、27.55%、4.42%。移动终端 ODM 为公司传统业务，虽近年来\n占比有所下滑，但仍为主要业务收入来源；半导体 IDM 业务发展迅速，是主要\n的盈利来源，未来占比有望进一步提高；光学模组业务在战略上补足产业链一\n体化格局，为公司发展补全战略版图\n\n子公司半导体业务全球领先。闻泰科技旗下安世半导体以半导体 IDM 为主\n营业务，包含芯片设计、晶圆制造和封装测试等全产业链环节，业务涵盖汽车、\n通信、消费、工业等众多领域。安世半导体前身为恩智浦的标准产品事业部，\n具有超过 60 年的半导体行业经验，2017 年从恩智浦剥离，2019 年被闻泰科技\n收购。\n\n产品集成业务方面，手机 ODM 业务是公司的传统业务以及主要营收来源。\n闻泰科技自 2006 年起从事手机方案设计，2008 年随着嘉兴生产基地投产，闻\n泰通讯从 IDH 转型为集研发设计与生产制造为一体的 ODM，成为行业龙头。除\n手机 ODM 外，公司的集成业务还拓展到平板、笔电、AIoT、服务器、汽车电子\n等领域。在笔电业务上应用闻泰、安世联合推出的各类射频、通讯、 电路小型\n化 SiP 模块产品以推进产品创新，已通过多个全球笔记本电脑客户深刻认证，\n即将量产。通过与半导体业务联合，公司亦凭借 2U 双路机架服务器和 4U 双路\n存储服务器等产品成功开拓服务器市场，中标多个知名客户的服务器项目，服\n务器业务有望成为新的利润增长点。此外，公司还积极发展汽车电子业务，旨\n在成为汽车电子行业的智能汽车和智慧出行的前装车规级解决方案提供商，为\n客户提供从软件到硬件再到制造的一整套方案，包括但不限于智能座舱、智能\n网联和自动驾驶领域的创新产品研发\n\n闻泰科技致力于加强各板块间业务协同合作，以打造出全产业链的一体化\n格局，以公司提高核心竞争力。半导体业务和产品集成业务的协同有助于整合\n通讯和半导体业务的产品、客户、供应链资源。通过与半导体业务拉通，产品\n集成业务可以充分应用半导体业务 IDM 平台能力，引入更多功率、模拟芯片的\n产品协同能力，从而推动 SiP 等晶圆级封装、Mini/MicroLED、汽车电子等方\n向的半导体技术融合创新，并以半导体能力为牵引构筑产品集成业务护城河。\n笔电业务在高质量的模拟和逻辑芯片以及功率器件产品上也将得到更多的支持，\n闻泰安世联合推出的各类射频、通讯、电路小型化 SiP 模块产品也有望应用于\n笔电产品。此外，得尔塔科技具有行业领先的 Flip  Chip 晶圆级封装技术，发\n挥其低功耗、小型化的特色，可推动车载、笔电、AR/VR 应用落地，推动协同\n供货手机 ODM 业务并实现光学业务的多极化增长\n\n2017-2023H1，公司实现归母净利润分别为3.29/0.61/12.54/24.15/26.12/ \n14.60/12.58 亿元，2018 年主要受消费电子市场低迷、收购安世股权等影响，\n归母净利润有较大下滑，随后随着半导体业务的大幅增长，归母净利润逐年提\n升，2022 年归母净利润下降至 14.60 亿元，较上年同期下降 44.10%，主要是由\n业务发展所带来的销售费用和研发费用大幅增加，以及公司发行可转换公司债\n券使得非现金利息支出增加所导致的财务费用增加所导致。2023H1，公司实现\n归母净利润 12.58 亿元，同比增长 6.45%。\n\n半导体业务自被收购以来贡献了主要的净利润来源。分业务板块来看，\n2020-2022 年半导体业务净利润分别为 9.88/26.32/37.49 亿元。产品集成业务\n净利润下行后回暖，2020、2021 年净利润分别为 8.06/1.84 亿元，2022 年净亏\n损 15.69 亿元，主要原因在于全球手机和平板市场的需求低迷，但 2023 年上半\n年扭亏为盈，实现净利润 0.07 亿元。光学模组业务 2022 年度净亏损 3.35 亿\n元\n\n导体方面，2022 年公司半导体业务研发投入 11.91 亿元，较上年同期增\n长 42.29%，以 加速推动技术进步与迭代，覆盖功率分立器件(IGBT、SiC 和 GaN)\n和模块、12 英寸创新产品、模拟 IC 组合、功率管理 IC 和信号调 节 IC 等\n方面。在化合物半导体产品方面，硅基氮化镓功率器件(GaN  FET)已通过 AECQ\n认证测试并实现量产，在产业合作伙伴的协同下已完成 GaN  在电动车逆变器、\n电控、电源等方案的设计工作；碳化硅技术研发进展顺利，碳化硅二极管产品\n已经出样；IGBT 产品流片已经完成，正处测试验证阶段；新的模拟 IC 类产品\n也正处在加速研发推进中。目前闻泰在马来西亚槟城和中国上海均开设了新的\n全球研发中心，并扩大了位于中国香港、德国汉堡和英国曼彻斯特现有的研发\n中心。\n\n功率半导体在新能源汽车电池动力模块中发挥重要作用。由于电动车功率\n器件对工作电流和电压有更高要求，新增需求主要来自以下几个方面：逆变器\n中的 IGBT 模块、DC/DC 中的高压 MOSFET、辅助电器中的 IGBT 分立器件、OBC 中\n的超级结 MOSFET。总的来说，混合动力汽车的功率器件占比达 40%，纯电动汽\n车的功率器件占比达 55%。相比传统汽车，新能源车功率半导体需求提升近 9 倍，\n功率半导体在新能源汽车领域潜力巨大\n光伏行业是功率半导体的主要下游应用领域之一。功率半导体主要应用在\n逆变器中,功率半导体器件 IGBT 是光伏逆变器的核心零部件。逆变器是光伏系\n统并网的必要设备，光伏装机容量的不断增长带动逆变器行业增长，同时也为\n功率半导体行业的持续发展提供动力。\n\n目前光学摄像头模组行业三个最主要的终端市场为手机摄像头、视频监控\n摄像头和车载摄像头  目前车载摄像头市场处于无人驾驶与车联网市场的双风口，作为 ADAS 系统\n的主要视觉传感器，在自动驾驶时代，车载摄像头模组用量将跟随 ADAS 系统的\n增长而进一步增加。目前车载摄像头市场呈现持续扩张趋势，根据 TSR 咨询机\n构数据，2021年全球车载摄像头出货量达到 185.50 百万件，年增长率达到 10%\n\n全球功率半导体市场仍主要被起步较早的美日欧厂商所把控，美日欧厂商\n约占据全球 60%以上的市场份额。根据 Omdia 市场研究机构数据，2021 年全球\n十大功率半导体企业分别为英飞凌、安森美、意法半导体、三菱电机、富士电\n机、东芝、威仕、安世半导体、瑞萨、罗姆。前十企业共占据总市场份额的 57%\n\n![Alt text](image-11.png)\n\n\n\n半导体业务是公司营业收入的主要来源，公司充分发挥半导体业务在汽车\n和工业领域的产品和技术领先优势，通过扩大产能、持续研发、垂直整合等多\n项措施不断扩大业务规模，2022 年公司跃居全球功率分立器件半导体公司第 5\n位。2022 年公司来自汽车领域的半导体业务收入达到 48.6%，是主要的收入方\n向。2022 年汽车工业需求旺盛，2023 年汽车终端市场相对疲软，但在汽车行业\n电动化智能化趋势不改的背景下，2023 年预计市场需求有所修复，行业需求持\n续处于上行周期。工业领域半导体业务是其次的收入来源，2022 年工业领域需\n求 相 对 平 稳 。 综 合 预 计 2023/2024/2025 年 半 导 体 业 务 方 面 实 现 营 收\n155/180/210 亿元，同比增速达 1.35%/16.13%/16.67%。由于汽车需求旺盛、价\n格坚挺，半导体业务预计维持稳定毛利率水平,2023/2024/2025 年毛利率维持\n42.00%。\n\n我们预计公司 2023-2025 年营业收入分别为 650.83/764.16/899.83 亿元，\n同 比 增 长 率 分 别 为 12.06%/17.41%/17.75% ； 归 属 母 公 司 净 利 润 分 别 为\n26.86/33.63/48.34 亿元，对应增速分别为 84.01%/25.19%/43.74%。\n\n### 九号\n\n自2015 年系统研发机器人产品以来，公司已积累包括室内外定位导航、机器人\n运动控制、高精度伺服轮毂电机等机器人关键技术。（1）定位导航技术方面，公司\n已掌握UWB 室内定位、RTK-GPS 室外定位、激光雷达/毫米波雷达、双目视觉/IMU\n（视觉惯导）等核心技术。（2）避障技术方面，公司掌握激光+视觉融合、结构光摄\n像头、超声波传感器以及内置AI 的传感器避障（可检测识别物体）关键技术。除核\n心定位导航和避障技术外，公司亦掌握计算机视觉（识别人体数据）核心技术\n\nRMP 移动平台：2003 年 Segway 布局 RMP 业务，2015 年九号公司收购\nSegway，2020 年九号公司自研第一代产品RMP Lite，在支撑公司内部产品研发，实\n现对内赋能的同时，也支持二次开发或定制化服务，进而实现了外部商业落地。RMP\n移动平台采用了九号公司 AIOT 感知技术和决策技术能力，可实现限制路况下低速\n自动驾驶，同时采用了轮毂电机技术，可调教合适速度-扭矩曲线\n\n扫地机器人领域，应用场景为室内，石头科技和科沃斯为代表的企业避障和物\n体识别能力要优于其他企业。石头科技和科沃斯多采用结构光避障方式配合AI 识别\n技术，能够识别多种障碍物并根据障碍物种类做相应的避障策略，例如石头G20 采\n用结构光+AI 识别避障，能够识别 13 类 42 种障碍物。而云鲸和小米部分机型未采\n用AI 技术或仍采用单激光避障方式。\n\n九号两轮车较为优秀的处理运算和驾驶辅助能力主要系传统主业例如机器人、\n滑板车底层技术和研发团队赋能。从两轮车发展史来看，公司先后自研并引入了ABS、\nTCS 和RSC 等主动安全辅助系统。感应方面，公司进入两轮车领域伊始便引入了姿\n态感应系统，全车多处传感器提供多种姿态识别，随后通过机器学习+AI 算法提高\n车辆状态识别能力。控制方面，公司联合旗下公司零级创新推出了自研的鼹鼠控\nMoleDrive，配合传感器实现坡道驻车、助力推行等智能化功能\n\n外销有望受益新品驱动，叠加内销两轮车有望高增，看好2024 年业绩反转 \n此前拖累公司业绩的小米分销和ToB渠道以及非经常性负面因素影响逐步减弱。\n内销方面，高增两轮车品类净利率进入上升通道，2024 年扩渠道逻辑下收入和\n利润率有望持续提升。外销方面，本次CES 展新款割草机器人、全地形车、E-Bike\n将逐步于欧美市场销售，其中全地形车在新品驱动下北美经销商网点拓展顺利，\n我们看好强产品竞争力驱动2024 年各品类收入增长以及盈利提升\n\n### 联创光电\n公司是由江西省电子集团整合旗下部分优质军工资产\n设立，军工底蕴浓厚。\n\n联创光电：深耕光电领域20 余载，聚焦超导与激光实现转型升级 \n公司深耕光电领域二十载，是“国家火炬计划重点高新技术企业”、  “国\n家863 计划成果产业化基地”，近年来围绕“进而有为，退而有序”的经\n营方针，加速剥离背光源与电缆业务，重点打造激光和超导等新兴产业。\n\n高温超导具有显著成本优势，适合大范围商业化应用，应用场景包括超导\n感应加热、可控核聚变、高温超导单晶硅生长炉等。在超导感应加热方面，\n高温超导感应加热设备有着高穿透、高能效、高均匀性、高梯度性的优势，\n市场潜力巨大。在可控核聚变领域，高温超导能大幅降低托卡马克装置的\n建造周期、体积和造价，可加快可控核聚变商业化应用。\n\n深耕光电领域二十余载，积极布局“超导+激光”焕发生机。江西联创光电科技股份有限\n公司于1999 年6 月设立，2001 年3 月在上交所上市。公司是“国家火炬计划重点高新技\n术企业”、“国家技术创新示范企业”、“国家863 计划成果产业化基地”，致力于成为\n科技领先型企业。公司深耕光电领域二十余年，近年来公司围绕“进而有为，退而有序”\n的经营方针，重点打造激光和超导两个高科技新兴产业。在光电领域，公司积淀形成了良\n好的光电子产业基础和产业转化能力，产品布局包括智能控制部件、背光源及应用、电线\n电缆等产业板块；在激光领域，2019 年11 月公司设立江西中久激光技术有限公司，通过\n产研融合的方式实现激光反无人机领域全产业链布局；在超导领域，联创超导于 2019 年\n成功研制世界首台兆瓦级高温超导感应加热装置，为工业热处理行业提供了一种全新的、\n具有颠覆性变革的技术创新应用。同时，公司基于已掌握的高温超导磁体技术积极布局于\n可控核聚变、磁控单晶硅生长炉等领域，目前已组建团队开展相关研究。\n\n背光源与电缆业务：毛利率下降趋势明显，公司加速剥离背光源与电缆业务\n\n激光与超导：多年光电积淀，激光+超导两大新兴产业齐发力。激光方面，公司2019 年设\n立子公司中久激光，并于2020 年4 月成立中久光电产业研究院。目前公司已形成了从“泵\n浦源”器件产品到“激光器”集成产品，再到“光刃系列”整机产品的完整的产品体系。\n2023 年上半年，激光产品实现主营业务收入 1.20 亿元、净利润  0.32 亿元，较上年同期\n分别增长 14.49%和 33.9%；高温超导方面，目前由参股子公司联创超导开展超导业务，\n研发团队自 2013 年开始研发兆瓦级高温超导加热设备，交付予中铝东轻的首台设备投产\n标志着公司在高温超导领域取得重大进展，截至2022 年12 月31 日超导感应加热设备订\n单已超过60 台，公司预计超导产业园达成后，高温超导产品年产能有望达到500 台以上。\n\n我们认为，公司聚焦激光、超导两大未来主业优化产业结构已初见成效，激光产业产能快\n速释放，未来营业收入有望持续增长\n\n激光等高毛利业务放量叠加背光源与线缆等低毛利业务剥离，有望驱动公司盈利能力稳步\n提升。归母净利润方面，2022/2023H1 公司实现归母净利 2.67/2.15 亿元，同比增长\n15.41%/20.06。毛利率方面，2022/2023H1 年公司实现整体销售毛利率14.73%/18.08%，\n继续保持稳步提升趋势。分板块来看，2022 年公司智能控制/背光源/激光系列产品的毛利\n率分别为 16.75%/4.49%/35.83%。费率方面，公司期间费用整体控制有效，研发支出保\n持稳定。2022/2023H1 期间费用率为 15.76%/13.49%，整体呈下降趋势；2022/2023H1\n年研发费用分别为 1.66/0.71 亿元，研发投入保持稳定。我们认为，随着公司激光等高毛\n利业务放量叠加背光源与线缆等低毛利业务剥离，未来公司盈利能力有望持续提升。\n\n超导可以分为低温超导、高温超导与室温超导，高温超导具备成本优势。超导是指某些物\n质在环境温度降至某一临界温度以下时，电阻突然变为零的现象。\n\n低温超导材料一般都需在昂贵的液氦环境下工作，而高温超导材料临界温度较高，可以在液氮环境中工作，目前\n工业液氮制冷已较为成熟，一吨液氮的价格稳定在一千元以下，适用范围广且价格低廉；\n室温超导要在 1GPa（1 万倍左右的大气压）下才能够实现超导态，而实现高温超导的制\n冷成本低于加压到1GPa 的成本，整体来看，我们认为高温超导实现产业化应用的前景更\n为广阔\n\n超导材料具有三大独有特性：零电阻、完全抗磁性、量子隧穿效应\n\n目前高温超导产业化应用得到了实质性发展，高温超导感应加热、高温超导单晶硅生长炉、超导磁\n储能、可控核聚变等领域的市场空间也将逐步打开。 \n\n效率优势：高温超导感应加热能效转化率最高达 85%，相比传统加热炉提升一倍以\n上。传统的工频炉在加热时大量的热能消耗在产生磁场的铜线圈上，并没有注入工件\n体内，因此加热效率仅为40%左右。超导感应加热由于利用了超导材料零电阻的特性，\n产生强磁场过程中只有低温制冷损耗、机械传动损耗等，因此可以将加热能效大幅提\n升到最高85%\n\n加热质量优势：高温超导感应加热的透热深度与加热均匀度显著提高。感应炉的加热\n功率正比于磁场强度与加热频率的乘积，由于超导感应加热炉的磁场是传统工频炉的\n100 倍以上，使得超导炉可以实现5Hz 左右的极低频的加热，透热深度与加热均匀度\n显著提高。在透热深度上，高温超导感应加热将传统工频炉 10mm 的透热深度大幅\n提升至200mm 以上；在加热均匀度上，高温超导感应加热的感应电流可直接整体加\n热工件内部，可以对大尺寸金属工件进行表芯同步快速均匀加热\n\n节能优势：由于高温超导感应加热可以将加热能效大幅提升到 85%，这就意味着一\n台加热功率为1mw 的高温超导加热设备可以替代掉传统2.5mw 的工频炉，一年可节\n省超600 万度电，此外还能节省电力增容费和未来的碳排放指标等。\n\n经济性分析：高温超导感应加热综合运营成本低，投资成本回收快。高温超导感应加\n热设备的设备投资成本高于传统大功率感应加热设备，但其综合运营成本低。以运营\n成本中的外围设备电费为例，传统设备需配置大功率水冷机组，而超导直流感应加热\n器所用超导线圈基本无能耗，因此外围辅助设备电力成本远低于传统交流感应加热设\n备。得益于优越的能效表现和较低的营运成本，高温超导直流感应加热设备只需2-3\n年就可收回全部设备投资成本\n\n高温超导感应加热及相关磁体技术应用范围广，市场潜力大。高温超导感应加热设备可广\n泛用于铝、铜、镁、钛、特种钢材、高温合金等非磁金属加工热成型领域（包括挤压、锻\n造、轧制等）、金属熔炼及半导体熔融等领域，\n\n激光系统：高功率激光器市场规模稳步提升，激光反无人机装\n备需求旺盛\n\n刃整机：成本优势明显，未来产品矩阵有望持续丰富。公司光刃系列激光反制无人\n机系统主要包括“光刃-I”和“光刃-II”两大产品，具有明显的技术优势。同样的\n杀伤效果，公司产品重量更轻、体积更小，因此在合理利润空间下公司产品成本优势\n较为明显。目前，第一代新型激光反制无人机产品生产线现已配置，并已完成其改进\n设计、研制工作，且顺利通过专家组验收评审；第二代新型激光反制无人机产品顺利\n完成研制并通过验收。我们认为，公司基于已掌握的激光核心技术加速产品研发与迭\n代，未来光刃整机产品矩阵有望持续丰富\n\n公司在手订单充足，产能迅速扩张。激光业务是公司重点发展的高科技新兴产业，激光产\n业持续高速增长。中久激光订单充足，产能饱满，泵浦源、激光器、激光电源等项目产能\n已处于满负荷生产状态。根据业务发展规划，公司今明两年将加速增扩产能。我们认为，\n公司激光业务订单饱满，已进入高速增长阶段，随着产能持续扩张，未来激光业务有望持\n续发力。\n\n公司深耕光电领域二十载，在传统业务退而有序的同时，加速布局高温超导与激光系统两\n大“大国重器”，盈利能力有望持续提升，并打开公司长期成长空间。我们预计公司\n2023-2025 年营收分别为31.97、34.64、37.77 亿元，归母净利润分别为4.71、6.25、7.85\n亿元，对应EPS 分别为1.04、1.37、1.73 元\n\n### 寿仙谷\n 公司核心产\n品破壁灵芝孢子粉采用独创的“四低一高” 超音速低温气流破壁技术， 提\n高了破壁率， 也避免了重金属污染和物料氧化\n\n 随着我国人口老龄化加深， 灵芝孢子粉和铁皮石斛\n等药食同源中药因具有积极的免疫调节功效而具备市场潜力\n\n 灵芝所含功效活性成分十分丰\n富， 主要包括多糖类、 三萜类、 核苷酸、 甾醇、 生物碱、 脂肪酸等。 灵芝多糖和三萜类含量\n是灵芝类作为中药饮片或保健食品的主要功效评价指标， 灵芝孢子是灵芝子实体的有性生\n殖细胞， 主要有效成分含量高出灵芝 75 倍， 具有抑制肿瘤、 提升免疫力、 抗氧化、 保肝护\n肝和调节血糖等药理作用， 但其细胞壁主要由坚硬的几丁质构成， 人的消化系统不易分解，\n因此有必要对灵芝孢子粉进行破壁处理。 \n\n铁皮石斛常被用于身体保健及治疗临床复杂性、 慢性疾病， 具有消\n炎去热、 养阴生津、 补益脾胃、 润肺止咳等功效。 铁皮石斛化学成分复杂， 据研究表明， 铁\n皮石斛内含有多重有效活性成分， 包括多糖、 酚类、 生物碱， 还有木质素等， 具有增强免疫、\n降低血糖、 降脂、 抗炎、 抗氧化、 抗肿瘤等作用。 \n\n多糖被认为可以提高免疫力，这是因为多糖具有免疫调节作用。多糖可以刺激机体免疫系统的活性，增强免疫细胞的功能，促进免疫细胞的增殖和活化，从而增强机体的抵抗力，提高免疫功能。多糖还可以调节免疫系统的平衡，增强机体对病原体的识别和清除能力，有助于预防和治疗疾病。","slug":"yuyan","published":1,"updated":"2024-09-26T02:57:37.951Z","_id":"cldsl567k0000amsld45p0py1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>建议关注鼎龙股份，公司是国内唯一一家全面掌握 CMP 抛光垫全<br>流程核心研发技术和生产工艺的 CMP 抛光垫供应商，在国内抛光<br>垫市场中处于领先地位</p>\n<p>建议关注濮阳惠成，公司专注顺酐酸酐衍生物和功能中间体产品的<br>研发和生产，受益于我国电子信息产业的快速发展、我国智能电网、</p>\n<p>重点推荐合盛硅业，公司在工业硅及有机硅产业链完整，具备规模<br>优势、成本优势，上下游协同效应有望持续加强，随着在建项目的稳<br>步推进，公司业绩有望持续向好。 v </p>\n<p><img src=\"/image-3.png\" alt=\"Alt text\"></p>\n<p>美现役战斗机均为较为领先的三代机和四代机，占比分别为 83%和 17%，而我国<br>仍有近 50%的二代机亟需替代,四代机仅有 19 架，占比约为 2%，远低于美国。另外，当前美<br>国战斗机仅有重型和中型，而我国战斗机中轻型战斗机占比仍然较高；我们认为当前航空装<br>备需求迫切且确定性高，未来方向是数量升+结构优</p>\n<p><img src=\"/image-4.png\" alt=\"Alt text\"></p>\n<h3 id=\"特步-股息\"><a href=\"#特步-股息\" class=\"headerlink\" title=\"特步  股息\"></a>特步  股息</h3><p>盖世威将推出专业网球运动体育用品，<br>以强调品牌的网球基因，而帕拉丁将推出反映年轻消费者喜好的产品<br>截至2023H1，公司鞋履自产占比28%、外包占比72%；服装自产占比12%、<br>外包占比 88%。</p>\n<p>特步主品牌同增高单位数，其中竞速系列销量同增 90%，抖音店播同增<br>73%；索康尼同增 98%，系天猫运动鞋行业头部品牌增速第一；迈乐同增<br>101%，徒步鞋品类销售同增 150%，MOAB3 登短途登山鞋热卖榜第一；<br>盖世威同增 149%，京东平台同增 297%；帕拉丁同增 114%，其中服装同<br>增1305%，抖音同增243%。</p>\n<p>时尚运动方面，盖世威和帕拉丁在中国内地进行全面品牌重塑，升级产品<br>组合和店铺布局，成功增强品牌知名度及大幅提升店效；加快在中国内地<br>高线城市的开店步伐。盖世威拟推出专业网球运动产品，强调品牌网球基<br>因；帕拉丁增强对年轻消费者的吸引力，改善产品供应和零售网络。</p>\n<h3 id=\"森马服饰-股息\"><a href=\"#森马服饰-股息\" class=\"headerlink\" title=\"森马服饰 股息\"></a>森马服饰 股息</h3><p>目前出海仍面临资金管制、文化壁垒、政策动荡等多重障碍，<br>落地和执行尚需时日，但二次出海成功确定性明显增强，原因主要在于，第一，国内市场增<br>长放缓，寻找海外增长空间成为共识，疫后全球经济逐步复苏；第二，公司是国内休闲服饰<br>和儿童服饰的龙头，森马和巴拉巴拉品牌享有高知名度，对海外代理商有较强的吸引力；第<br>三，公司前期积累的出海经验成为宝贵的无形资产，可以帮助规避“合作摩擦”，适应“国<br>际本土化”；第四，路径上，公司选择将东南亚、中东作为重点开拓的区域市场，三处区域<br>市场位于“一带一路”沿线，具备政策友好、消费活跃、品牌服饰萌芽等明显优势</p>\n<p>柔性供应链的价值在于提高售罄、减少库存、提升周转。供应链之于时尚品牌是底盘和<br>生命线。得益于优质供应商的稳定合作、订货制改革以及数智化升级，公司的快反周期由<br>2000 年初的 3 个月缩短至 2 周以内，逼近优衣库、H&amp;M、ZARA 等国际快时尚企业快反水<br>平，2018-2022 年公司的库存压力、存货减值保持在健康可控状态</p>\n<p>公司的资本性支出以投资和股利分配为主，2018 年收购Kidiliz 占用8.44<br>亿元，分红常态化且分红比例领跑同行，近五年分红比例为 75%+。</p>\n<p>存量博弈、红海持续的新背景下，依托品牌势能、渠道壁垒以及柔供等全方面领<br>先优势，公司有望在渠道变革和海外探索机遇上取得新突破，引领业绩量质齐升</p>\n<p>柔供是当下解决产销不对称的最好方式。服装行业产销不对称，天然会造成库存。柔供<br>成于优衣库，被国内服装品牌竞相学习，极致于 Shein，凭借小单快反最大化抵消时间差，<br>仍然是当下解决产销不对称的最好方式。柔供帮助公司渡过行业库存危机时期，同时将库存<br>控制在可控范围内，当前库存问题主要是疫后的动销转弱所致规模是柔供的必要条件。长期稳定的产供合作关系可以提前锁定供应商产能和进行快速<br>匹配，小单快反对供应商提出更大的成本挑战，需要通过采购规模来平衡。中小企业实现柔<br>供的难度较大，公司的营收体量居于头部水平，优质供应商采购集中度持续提升</p>\n<p>电商主推线上线下同价，盈利提升。2022 年服装线上渗透率为 37%，近 3 年仅增长 3pp。<br>公司一方面积极布局抖音等机会赛道；另一方面，主推线上线下同价，营收阶段性受损，但<br>盈利明显提升，2023H1 线上毛利率为 41.68%，较 2019 年提升 10.93pp。线上线下同价是<br>平衡电商和门店利益的稳态格局，越来越多企业达成共识，头部企业先行，中小企业跟随，<br>业绩逐渐从“增收不增利”过渡到“营收滞后于盈利”，最终实现“量质齐升”</p>\n<p>公司作为休闲服饰和童装的双龙头，品牌、渠道壁垒和柔供能力突出。巴拉巴<br>拉二三线购物中心加密、森马基本店+家庭店试水、出海进展成为重要成长机遇。预计<br>2023&#x2F;2024年公司归母净利润分别为11.1&#x2F;15.5亿元，同比增速为74.67%&#x2F;39.16%，对应<br>EPS为0.41&#x2F;0.57元&#x2F;股，对应P&#x2F;E为14&#x2F;10倍。首次覆盖，给予“买入”评级</p>\n<p>分产品看，巴拉巴拉品牌是国内童装龙头，童装修复<br>速度预计好于成人休闲装（23H1 童装&#x2F;成人装收入增速分别同比-<br>15.06%&#x2F;+6.34%）。单季度来看，公司 23Q1&#x2F;Q2&#x2F;Q3 营业收入分别同比-<br>9.3%&#x2F;+9.7%&#x2F;+1.1%，受基数、天气及消费弱复苏等因素影响，收入恢<br>复节奏存在季度波动；归母净利润分别同增48.9%&#x2F;295.8%&#x2F;89.4%</p>\n<p>毛利率提升明显，存货规模同比改善。盈利能力：23Q1-Q3 公司毛利<br>率同比+3.71pcts 至 44.13%，预计主因公司有效控制终端折扣，线上、<br>线下同款同价比例提升且毛利率更高的直营渠道收入占比提升</p>\n<p>存货：截至23Q3，存<br>货规模同比-21.78%至36.53 亿元，公司有望在Q4 销售旺季及促销节日<br>加大存货清理力度，优化新老品结构，助力明年轻装上阵。</p>\n<h3 id=\"地产\"><a href=\"#地产\" class=\"headerlink\" title=\"地产\"></a>地产</h3><p>今年1-11 月住宅竣工面积同比+18.5%，2024H1 竣工仍有望延续韧<br>性，支撑明年家装需求稳健释放。</p>\n<p>2023 年 1-11 月，房屋新开工面积 8.75 亿平方米，同比-21.66%。<br>2023 年 1-11 月，房屋累计施工面积 83.13 亿平方米，同比-7.20%</p>\n<p>根据中指重点监测的100城数据，2023年，一线城市新<br>建商品住宅累计销售面积同比小幅增长约4%，市场整体<br>稳定；二线、三四线代表城市同比分别下降4%、11%</p>\n<h3 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h3><p>酒就两个用途，一，上级驯服属下的测试工具。二，味觉退化或酒精上瘾的中老年男士。真是人间清醒，一针见血，振聋发聩。</p>\n<p>制造端汇聚中东，推动光伏产业发展。光照资源优势、制造成本低廉和电价补贴等政策计划向好带来光伏<br>市场新机遇，吸引TCL中环、协鑫科技、天合光能等中国厂商纷纷加速布局中东。中东1-11月累积进口13<br>GW中国组件，同增约71%，超越22年8.4GW拉货量，预计仍将保持高速增长，市场前景广阔</p>\n<p>产能释放供给过剩，各环节将加速下跌至成本线，预计价格持续低位。二三线加快出清，盈<br>利或在24年中见底，龙头阿尔法逐渐体现</p>\n<p>硅料瓶颈解决， 24年硅片过剩进入激烈竞争阶段。据我们统计，24年底硅片产能合计1068GW，<br>对应可供装机890GW，由于石英砂相对紧张，硅片盈利有支撑<br>◆ 硅片两超多强，格局相对稳定。我们预计24年隆基&#x2F;中环市占率27%&#x2F;25%，CR2约为52%。</p>\n<p>BC结构由于正面无遮挡，天然具备效率<br>优势。在单面市场，爱旭ABC组件功率610W+，高于同版型TOPCon30W，效率优势明显。<br>在 双 面 市 场 ， 爱旭ABC 依靠背面银浆方案，双面率可达70% ，随24 年中&#x2F; 底成本打平<br>TOPCon&#x2F;PERC，竞争优势持续凸显</p>\n<p>与TOPCon在不同版型下对比，HJT均拥有更高组件效率及功<br>率瓦数，标准版型领先约10W优势。。受益于效率及发电性能优势，同时当前HJT外销规模<br>较小，报价1.28元&#x2F;W，较TOPCon1.03元高0.25元&#x2F;W，整体溢价明显。</p>\n<p>钙钛矿效率持续提升，稳定性逐步验证中。截至23年底，钙钛矿头部组件厂效率陆续突破<br>18%：极电光能1.2*0.6m单节组件效率18.2%，并通过IEC61215&#x2F;IEC61730测试；协鑫光电<br>1m×2m量产效率破18%。GW级产线陆续启建，预计24年量产效率可达20%+。</p>\n<p>中期，2024 年春季来临，需求复苏，TOPCon 技术持续迭代过程<br>中，出货量与利润分化将持续；c）中长期看，龙头扳手腕持续，优<br>质企业将在低谷时期保持扩张节奏，市占率进一步提升</p>\n<h3 id=\"晶盛\"><a href=\"#晶盛\" class=\"headerlink\" title=\"晶盛\"></a>晶盛</h3><p>公司前三季度实现营业收入134.62亿元,同比增长80.39%;归母净利润35.14亿元,同比增长74.94%。<br>未完成设备订单287.50亿元,其中半导体设备订单33.03亿元。</p>\n<p>石英坩埚、金刚线等硅材料业务快速放量，多领域材料实现突破</p>\n<p>凭借单晶炉较高市占率，公司拓展石英坩埚、金刚线等耗材业务。受石英砂<br>紧缺及需求高增影响，21 年 9 月至今光伏石英坩埚价格增长约 900%，2024<br>年高价有望维持。据我们测算，24-25 年国内石英坩埚年均市场市场有望超<br>400 亿元，23-25 年 CAGR 为 29.3%。公司 22 年市占率约 19.6%，未来有<br>望依托“超级坩埚”进一步巩固坩埚龙头地位。金刚线细线化成为趋势，钨<br>丝金刚线有望成为主流。我们预计 25 年金刚线国内市场规模 123.9 亿元，<br>23-25 年 CAGR 14.8%。公司自制钨丝母线并积极扩产，有望实现弯道超</p>\n<p>公司碳化硅衬底进入大规模量产倒计时，碳化硅外延设备市占率领先<br>据 Yole，全球 SiC器件市场规模 2027年有望达 63.0亿美元，21-27年 CAGR<br>为 34%，其中碳化硅衬底占器件成本达 47%。公司依托泛半导体长晶技术，<br>6 英寸衬底良率、性能等指标位于行业头部梯队，现已形成 5000 片&#x2F;月产能，<br>核心设备如长晶炉等均为自制，并拓展 8 英寸衬底。公司预计在 25 年实现<br>25 万片 6 英寸及 5 万片 8 英寸衬底年产能。碳化硅外延片对外延设备要求<br>较高，公司 6 英寸双片式碳化硅外延设备已实现批量销售，市占率位居国内<br>前列，8 英寸单片式碳化硅外延设备处于客户验证中。衬底与外延设备有望<br>在外延厂发挥协同作用，助力公司强化碳化硅布局。</p>\n<p>衬底片性能优越，与中芯集成等达成合作</p>\n<p>光伏设备是晶盛机电成长的第一曲线，第二曲线是光伏耗材<br>和半导体耗材的放量，第三曲线是碳化硅设备+材料和半导体设备的放量。我们维<br>持公司2023-2025 年归母净利润为47&#x2F;58&#x2F;70 亿元，对应PE 为11&#x2F;9&#x2F;8 倍，维持“买<br>入”评级。</p>\n<p>低氧技术是单晶炉下一步迭代方向，超导磁场单晶炉降氧效果显著</p>\n<p>第五代超导单晶炉夯实公司单晶炉龙头地位，设备延伸至光伏全产业链布局</p>\n<p>半导体硅片生产设备中，单晶炉投资占比 25%，有望率先实现进口替代。从产业链来看，<br>芯片的生产环节包括硅片制造、晶圆制造、封装测试，对应的设备包括硅片制造设备、前<br>道工艺设备（晶圆制造）、后道工艺设备（封装测试）。根据集微咨询预计，20-22 年中国大<br>陆硅片设备需求约 570-800 亿元，其中长晶设备约占设备总投资的 25%，则对应的单晶炉<br>市场规模为 140-200 亿元。根据中商产业研究院，目前半导体用单晶炉国产化率不足 20%，<br>随着国内企业在拉晶环节持续突破，有望率先实现进口替代</p>\n<p>蓝宝石是一种氧化铝单晶，由于具有强度大、硬度高、耐腐蚀等特点</p>\n<p>公司半导体石英坩埚的主要客户为中环领先、上海新昇、奕斯伟等公<br>司，光伏石英坩埚的主要客户为 TCL 中环、晶科能源、弘元新材料等</p>\n<p>公司自制钨丝母线降低成本，积极扩产迎合行业扩容 </p>\n<p>碳化硅衬底良率是考核企业产品性能及经济性重要指标，大尺寸衬底是行业趋势。SiC 衬<br>底制备重难点主要是晶体生长和切割研磨抛光环节，是整个衬底生产环节中的重点与难点，<br>成为限制碳化硅良率与产能提升的瓶颈。加工的难点在于碳化硅材料硬度高、脆性大、化<br>学性质稳定，因此传统硅基加工的方式不适用于碳化硅衬底.目前 4 英寸、6 英寸主要采用<br>多线切割设备，将碳化硅晶体切割成厚度不超过 1mm 的薄片。</p>\n<p>公司导电型碳化硅衬底已形成 5000片&#x2F;月产能，新增 30万片产能建设，核心设备均为自制。<br>2017 年公司开始碳化硅晶体生长设备和工艺研发，公司坚定电阻法技术路线，在切片环节<br>引入激光切割与多线切割设备并行，并在 2020 年开始建立长晶实验线和中试线，相继开发<br>6 英寸、8 英寸碳化硅晶体和衬底。目前公司中试线形成月产 5000 片 6 英寸衬底产能。公<br>司长晶和核心加工设备均为自制，设备国产化率达到 90%以上，实现了 6 英寸-8 英寸碳化<br>硅晶体生长和加工技术的自主可控。据晶盛机电微信公众号显示，公司于 2023 年 11 月 4<br>日举行签约仪式，预计新增产能 25 万片 6 英寸碳化硅衬底、5 万片 8 英寸碳化硅衬底。</p>\n<p>公司 6 英寸碳化硅衬底达到业内一流水平，8 英寸衬底 2024 年实现与 6 英寸品质同步。截<br>至 2023 年 11 月公司碳化硅投产签约仪式，公司中试线产出的 6 英寸碳化硅衬底片在直径、<br>微管密度、位错、电阻率、弯曲度、翘曲度等关键参数均达到或者优于业内技术水平。产<br>品已获得下游领先企业的验证和认可，已签约并交付批量订单。从具体指标来看，量产改<br>善方面，公司 6 英寸核心缺陷快速迭代改善下降，量产 TSD 稳定＜100，BPD＜400，达<br>到业内一流水平，最新研发成果方面，位错持续改善，研发试产基本稳定实现 TSD＜10，<br>BPD 小于 50。8 英寸方面，公司已实现 8 英寸产品小批量生产+下游验证，可供应高质量<br>500um 和 350um8 英寸碳化硅衬底，全产线可实现 6-8 英寸碳化硅衬底。目前公司全产线<br>可实现 6 英寸和 8 英寸产品兼容，公司预计 2024 年可实现 8 英寸产品与 6 英寸产品品质<br>达到同步</p>\n<p>碳化硅设备：碳化硅外延设备国产替代空间广阔，公司外延设备国内市占率领先 </p>\n<p>外延片占碳化硅器件产业链成本 23%，仅次于碳化硅衬底。碳化硅晶体生长的过程中会不<br>可避免地产生缺陷、引入杂质，导致质量和性能不足，而外延层的生长可以消除衬底中的<br>某些缺陷，使晶格排列整齐。与传统硅器件不同，碳化硅器件不能直接制作在衬底上，需<br>要在衬底上生长一层晶相同、质量更高的单晶薄膜(外延层)  ，再制作器件。外延可分为①<br>同质外延：在导电型 SiC 衬底生长 SiC，常用于低功率器件&#x2F;射频器件&#x2F;光电器件；②异质外<br>延：在半绝缘 Sic 衬底生长 GaN，常用于高功率器件。根据前文数据，2023 年外延片占碳<br>化硅器件产业链成本约 23%，仅次于碳化硅衬底</p>\n<p>碳化硅外延工艺难度大，份额主要被国外厂家占据，天成、天域引领国产替代。碳化硅外<br>延会复制衬底的晶体结构，因此外延层缺陷包括来自衬底的缺陷，以及生长过程的位错以<br>及宏观缺陷。据 Yole 数据，2020 年 Wolfspeed  与昭和电工分别占据全球碳化硅导电型外<br>延片市场 52%和 43%的市场份额，合计高达 95%。国内碳化硅外延厂商较少，瀚天天成和<br>东莞天域引领国产替代。</p>\n<p>碳化硅外延设备国产替代加速，以晶盛机电、北方华创、中电科 48 所为代表。国内外延设<br>备由国外厂商主导，国内主打外延设备以意大利的 LPE、德国的爱思强、日本的 Nuflare<br>产品为主。国内厂商则以晶盛机电、北方华创、中电科 48 所为代表。1）晶盛机电：SiC<br>外延设备为公司独立研发设计和生产制造，核心技术均拥有独立的知识产权，目前已实现<br>批量销售。2）北方华创：具有 10 余年外延设备研发的技术积累，目前 4&#x2F;6 吋 SiC 外延设<br>备已签订单超百台，批量机台已在各大主流外延厂实现稳定量产。3）中电科 48 所：陆续<br>开发出碳化硅外延设备、高温高能离子注入机、高温激活炉、高温氧化炉，并持续研发第<br>二代、第三代机型，其碳化硅设备已在生产线应用&#x2F;签订合同百余台套</p>\n<p>由于设备中标到设备商确认收入要经历生产、运输交付、客户验证等过程，我们认为由于<br>近年来硅片扩产较快，公司订单生产交付及验收周期拉长，收入确认节奏慢于签单速度，<br>造成公司在手订单持续增长。随着公司在手单晶炉订单逐步确认收入，以及公司半导体和<br>碳化硅设备，光伏电池、组件设备陆续放量，丰富的在手订单有望支撑公司设备收入稳健<br>增长，但通过上文测算，我们认为单晶炉整体市场可能在 24 及 25 年逐渐收缩，公司光伏<br>设备在手订单有下降风险，但由于在手设备订单仍较多，公司收入预计仍将增长，但 24-25<br>年收入增速将有所下降。 </p>\n<p>公司材料板块主要包含光伏石英坩埚、金刚线、蓝宝石，碳化硅衬底等，光伏石英<br>坩埚为材料板块主要收入来源。坩埚用量随硅片产量提升而提升，且 N 型硅片占比提升有<br>望提升坩埚用量。价格方面，根据 solarzoom 数据，36 英寸光伏石英坩埚最新价格为 42000<br>元&#x2F;只，根据美晶新材招股书，预计 2024 年石英砂仍短缺，24 年石英坩埚平均价格维持在<br>高位，25 年随着原材料扩产，价格下降 20%。公司钨丝金刚线及碳化硅衬底随着产能释放，<br>收入有望逐步增长，蓝宝石业务下游竞争较为充分，预计收入将保持稳定。</p>\n<p>公司新业务拓展不顺利：若钨丝金刚线得不到下游客户广泛认可，渗透率提升不及预期，<br>新建产能可能造成产能闲置，不利于公司整体经营。此外，公司碳化硅衬底、半导体设备<br>等业务技术壁垒较高，公司存在新业务拓展不顺利的风险。</p>\n<h3 id=\"现金流\"><a href=\"#现金流\" class=\"headerlink\" title=\"现金流\"></a>现金流</h3><ol>\n<li>2.4-1.4&#x3D;1+0.8&#x3D;1.8 *6</li>\n</ol>\n<h3 id=\"榨菜\"><a href=\"#榨菜\" class=\"headerlink\" title=\"榨菜\"></a>榨菜</h3><p>1.受大消费市场持续疲软影响,产品终端动销放缓;2.二季度公司对部分终端老日期产品进行了促销拉动,并放缓了部分经销商的调货; 3.同期部分销售大区受疫情<br>影响,居民备货及居家消费频次增加,销售基数增加,报告期该因素消除销售量同比下降;4.餐饮行业恢复短期对家庭消费带来影响。</p>\n<h3 id=\"牧原股份\"><a href=\"#牧原股份\" class=\"headerlink\" title=\"牧原股份\"></a>牧原股份</h3><p>公司屠宰肉食板块 2023 年在渠道的开拓与客户的发掘上取得一定成效，全年<br>屠宰生猪在 1,300 万头以上，同比增长 80%左右，但距离理想产能利用率仍有一定<br>差距。由于东北厂区投产时间短，产能利用率较低，头均固定成本较高，当前屠宰<br>肉食业务仍处于亏损状态，但整体头均亏损水平已较 2022 年明显下降。2024 年，<br>公司屠宰肉食板块会加强销售能力建设，优化产品结构与客户结构，同时加强内部<br>生产、运营、销售等板块的协同，以提升整体盈利能力。</p>\n<h3 id=\"榨菜-1\"><a href=\"#榨菜-1\" class=\"headerlink\" title=\"榨菜\"></a>榨菜</h3><p>这次定增就是要扩大收储能力，平抑价格波动，同时深度绑定青菜头种植户，实现传统农业升级，提高当地农民种植收入，助力乡村振兴，实现共同富裕。公司的发展，更要关心的是新上任的管理层，定增项目能否顺利落地，未来的发展规划。公司的负债率极低，可以说是家庭作坊式的生产模式，未来可以锚定周转率的进一步提高，匹配中央厨房的发展趋势，适当提高负债率，协同提升roe水平。几块钱的消费升级的生意，长期看空间还是很大的</p>\n<p>从量方面，目前榨菜产能13-15万吨，基本满产满销，预计扩产20万吨，约1.5倍，预计回报5亿&#x2F;年。不扩产净利润9亿；扩产带来的净利润空间6-14亿，其中滞销带来的资产投入计提净利润约6亿，满产满销约14亿</p>\n<p> 给15-20倍市盈率，按最低净利润估值，6×15&#x3D;90亿，6×20&#x3D;120亿，区间90-120亿。<br>按满产满销净利润估值，14亿，14×15&#x3D;210亿，14×20&#x3D;280亿</p>\n<h3 id=\"制冷剂\"><a href=\"#制冷剂\" class=\"headerlink\" title=\"制冷剂\"></a>制冷剂</h3><p> 制冷剂行业经历了连续三年的低迷状态，具有利润修复的诉求。在配额基准期内，制冷剂生产企业连续 3 年，通过低<br>价、低利润甚至是负利润来抢占更多的市场份额，导致企业连续三年制冷剂业务承担了巨大的利润压力，很多小型企<br>业难以长期坚持。度过配额锁定阶段后，国内配额形成了供给端限制，使得制冷剂具有涨价基础，行业的企业具有通<br>过涨价获得利润修复的诉求，且由于具有配额限制，并不担心行业内形成新的进入者，行业利润有望获得较大程度的<br>提升。</p>\n<p>四代制冷剂主要以海外巨头供应为主，国内受专利、设备、价格等因素影响，短时间内难<br>以大规模推广。四代制冷剂（HFOs）在 ODP 值、GWP 值等环保指标方面优于三代制冷剂，<br>且物理性质、制冷性能等方面能够做到与三代相近，在少数领域已经开始有所应用。以四<br>代制冷剂目前的主流品种 HFO-1234yf 为例，HFO-1234yf 在热力特性和能效等方面已经与<br>HFC-134a 接近，可以作为汽车空调使用的新一代制冷剂。</p>\n<p>海外巨头构筑了四代制冷剂专利壁垒，国内企业短期难以实现大范围国产化。不同于国内<br>的追赶路线，以科慕、霍尼韦尔、大金为代表的海外巨头在制冷剂领域布局相对较早，在<br>含氟制冷剂领域具有较好的积淀，因为相比之下，海外制冷剂基本算是领先国内一代产品。<br>在国内实现了三代制冷剂的技术突破和工业生产阶段时，海外巨头企业就开始重点发力四<br>代制冷剂，并着手构建四代制冷剂的生产和应用专利池。相对完整的生产专利和应用专利<br>为海外企业构筑了长时间的竞争壁垒，国内企业在四代制冷剂领域发展相对受限，目前主<br>要在产的生产线也以为海外企业代工为主，还未能形成稳定供应销售的产业链布局。</p>\n<p>。经过 2020-2022 年<br>基准期的配额锁定，2024 年行业将进入配额管制阶段，产量较 2022 年下行，供给端受到<br>政策限制；而从结构上看，新的配额政策不仅确定 2024 年的整体配额，更是针对内用配<br>额进行了约定，国内整体三代制冷剂的内用配额占比不足一半，预估国内市场将呈现出明<br>显供需改善的情况，具有价格和利润的改善空间。</p>\n<h3 id=\"禾望电气\"><a href=\"#禾望电气\" class=\"headerlink\" title=\"禾望电气\"></a>禾望电气</h3><p>公司风电变流器技术领先，有望受益风光装机容量高增</p>\n<p>驱动力一：新能源电控业务，把握新能源技术趋势，迎接风光储需求共振。<br>1） 风电：政策规划加持下，2023 年风电行业高景气度彰显，公司顺应变流器<br>大容量化发展，与国内  10  多家整机厂商形成稳定的合作关系，品牌优势<br>有助公司持续巩固行业地位，未来有望受益风光装机容量高增。<br>2） 光伏：光伏迈入平价成长未来几年有望保持高增速，公司组串式逆变器中<br>标量领先，有望充分享受行业增速。同时公司战略布局半导体公司，聚焦<br>碳化硅（SiC）核心技术，推广“单管并联”技术路线，正逐步受到下游客<br>户认可。<br>3） 储能：公司重点布局储能系统解决方案，项目经验丰富，2021  年以来，<br>公司储能产品不断出货，产品技术获业内认可，未来市占率有望实现突破。<br>驱动力二：电气传动业务：工程变频器国产替代中，公司1GCT 变频器性能更<br>佳，目前市场上工业大传动产品国产化率提升空间广阔，未来公司有望凭借技<br>术优势加速开拓市场。<br>驱动力三：氢能业务：电解槽是制氢的核心设备，公司制氢电源可广泛应用于<br>电解水制氢系统，与深圳大学能源研究院在氢能领域建立合作，公司产品已实<br>现实际应用市场，有望受益氢能行业实现快速增长。</p>\n<p><img src=\"/image-5.png\" alt=\"Alt text\"></p>\n<p>IGCT 芯片相比IGBT 更适用于工业大传动变频器领域。在过去较长时间中，IGBT 由于<br>其高频特性，在轨道交通、工业变频、家用电器、新能源逆变器等中小容量应用领域广<br>泛应用，但随着电力电子装备电压和容量等级的进一步提升，IGCT 器件的高压大容量优<br>势在冶金轧钢、石油开采、油气输送、重型制造、海上风电、船舶推动、抽水蓄能等工<br>业大传动领域优势凸显。IGCT 单芯片可以同时承受 4500V 高电压、8000A 大电流，所<br>以应用在巨大功率的“电气大传动”上面；而 IGBT 中，高压 IGBT 芯片可以承受 4500V<br>高电压但只能50A 低电流，低压IGBT 芯片可以承受200A 大电流但只能1700V 电压，<br>所以适合应用在“小传动”，如用在“大传动”需要多芯片串并联使用，可靠性降低。</p>\n<p>（1）  新能源电控业务:该公司主要提供风电变流器，光伏逆变器和储能PCS 相关产品，<br>受益于下游风电、光伏、储能三个行业未来几年的快速发展，公司该业务有望快<br>速起量。预计公司该业务2023-2025 年营收约为33.98&#x2F;46.16&#x2F;59.98 亿元，毛利率<br>分别为27.94%&#x2F;28.10%&#x2F;28.44%。<br>（2）  传动业务：传动变频器技术壁垒深厚，公司是国内第一家IGCT 变频器投入实际<br>应用的产商。相比于海外工业传动变频器，公司产品不仅可以在性能和质量上有<br>很高的保障，且在价格上具有较强的竞争优势，具备较大国产替代空间，预计公<br>司该业务 2023-2025 年营收增速分别为 60%&#x2F;50%&#x2F;40% ，毛利率分别为<br>42%&#x2F;41%&#x2F;40%</p>\n<p>强制配储带动国内储能高速增长，大储在国内储能装机中占据主导地位</p>\n<p>公司风电变流器起家，主营新能<br>源和电气传动产品，业务遍布亚&#x2F;欧&#x2F;非&#x2F;南美&#x2F;北美洲。公司风光储业务优<br>势显著，其中光伏逆变器&#x2F;储能PCS 22 年国内出货量分别位居7&#x2F;8 位，<br>同时传动技术国际领先，变频器定位高端应用广泛。2018-2022 年营收&#x2F;<br>归母净利润CAGR 分别为24.18%&#x2F;49.29%，业绩稳定增长。</p>\n<h3 id=\"盾安环境\"><a href=\"#盾安环境\" class=\"headerlink\" title=\"盾安环境\"></a>盾安环境</h3><p>目前车用热管理阀件已获国内外系统、主机厂充分认可，增长逻辑持续验证。</p>\n<p>此供应链重塑趋势为盾安汽车零部件业务带来了良好发展机遇。<br>盾安目前电子膨胀阀产品已进入比亚迪、蔚小理、极氪等销量高增长车企供应链，在良好合<br>作基础上盾安可持续拓展其热管理零部件产品，充分提高单车价值量。 （占比太低了 7% 三花60%）</p>\n<p>公司盈利能力呈显著回升趋势，预计后续仍有改善。2018-2020 年公司盈利能力因债务问题<br>造成短期波动，2021 年后公司净利率呈显著回升态势，排除债务干扰后，2022 年扣非销售净<br>利率为 4.54%，2023H1 扣非销售净利率为 7.57%，扣非净利率明显提高，目前处于行业中游<br>水平。净利率提高的主要原因是产品结构优化，原材料成本下降，以及海运费、汇率带来的<br>毛利率改善。我们认为随着公司家电业务产品结构的不断优化以及汽零业务的规模效应，公<br>司盈利能力后续仍将有所改善。</p>\n<h3 id=\"三花智控\"><a href=\"#三花智控\" class=\"headerlink\" title=\"三花智控\"></a>三花智控</h3><p>按照产品划分,制冷空调电器零部件业务营业收入为77.06亿元,同比上升10.70%;汽车零部件业务营业收入为48.23亿元,同比上升50.78%。</p>\n<h3 id=\"复星医药\"><a href=\"#复星医药\" class=\"headerlink\" title=\"复星医药\"></a>复星医药</h3><p>2023 年前三季度，不含抗疫产品，本集团营<br>业收入同比增长约 11%；不含抗疫产品，制药业务新品及次新品收入同比增长超过 30%。</p>\n<p>2023 年前三季度，本集团继续加大研发投入，研发投入共计 42.91 亿元，同比增长 13.67%；<br>其中，研发费用为 31.55 亿元，同比增加 2.92 亿元、增长 10.22%。</p>\n<p>抗疫产品及印度子公司 Gland 收入下降，创新药快速增长，药品<br>板块营收占比提至 74.7%；营收总体持平。（1）公司制药板块<br>1H23 营收 159.95 亿元，同比增长 11.64%；分部利润 14.22 亿<br>元，同比减少 9.6%。（2）收入增长，主要来自汉斯状（斯鲁利单<br>抗注射液）、汉曲优（注射用曲妥珠单抗）及曲妥珠单抗原液、<br>苏可欣（马来酸阿伐曲泊帕片）等新品和次新品的快速增长；其<br>中，2022 年 3 月获批的汉斯状营收 5.56 亿元，汉曲优收入同<br>比增长 57.1%、苏可欣收入同比增长 32.7%，但复必泰（mRNA 新<br>冠疫苗）销量同比显著下降。（3）利润减少，主要源于①复必泰<br>（mRNA 新冠疫苗）销量显著下降，但仍有相应的团队和医学、<br>市场等费用发生；②控股子公司 Gland Pharma 因美国市场竞争<br>加剧以及部分产线停产升级等因素导致的经营业绩同比下降；③<br>汉斯状（斯鲁利单抗注射液）、倍稳（盐酸凯普拉生片）等上市<br>新品的市场开发、团队加强等战略性投入以及汉斯状（斯鲁利单<br>抗注射液）在海外市场的前期布局及团队投入；④1H23，药品端<br>研发费用同比增加 3 亿元。</p>\n<p>创新陆续兑现，药品板块营收占比提至 74.7%；成长确定。（1）子<br>公司复宏汉霖的 PD-1 产品汉斯状 11 项联合疗法在全球展开，中<br>国覆盖医院近 1500 家，东南亚与 KGbio 合作，美国自己团队并与<br>Syneos Health 合作。（2）合营公司复星凯特的 CAR-T 产品奕凯达<br>新增获批二线治疗成人大 B 细胞淋巴瘤（r&#x2F;rLBCL）,截至 2023 年<br>6 月底，奕凯达已治疗超过 500 位患者，备案的治疗中心超过 140<br>家及 25 个省市。（3）公司包括 DaxibotulinumtoxinA 型肉毒杆菌<br>毒素、盐酸替纳帕诺片等在内的多款在研药品在中国境内的上市<br>申请（NDA）获受理，注射用曲妥珠单抗在美国的上市申请（BLA）<br>也已获受理。在 1H23 药品营收已升至近 75%的基础上，创新管线<br>蓄力充足。 </p>\n<p>2023年前三季度,公司销售费用调整主要受到以下三个因素影响:<br>(1)抗疫产品销售费用: 抗疫产品收入虽显著下降,但仍有团队和医学、市场等费用;(2)海外市场销售费用:<br>斯鲁利单抗注射液美国市场上市前筹备投入;控股子公司Sisram直销业务费用增加,以及为提升品牌知名度而新聘品牌大使开支;(3)新品团队建设及加强和市场开发等投入</p>\n<h3 id=\"威斯迈\"><a href=\"#威斯迈\" class=\"headerlink\" title=\"威斯迈\"></a>威斯迈</h3><p>产品结构优化，车载电源集成产品为主力，800 V 产品初现规模。2022 年起，公司车载电<br>源集成产品销售收入占销售总收入 85%以上，收入及占比均呈快速增长趋势，主要原因是<br>车载电源集成产品的销量快速增长。</p>\n<p>2022 年前五大客户销售收入占比下降至 57.37%，上汽、理想在近<br>两年内销售占比下降趋势明显，但仍为公司前二客户。公司践行“走出去”战略，近年<br>来境外收入占比也逐渐攀升。公司一方面与小鹏汽车、理想汽车、合众新能源、零跑汽<br>车等造车新势力以及上汽集团、吉利汽车、奇瑞汽车、长安汽车等众多国内知名车企建<br>立长期战略关系；同时在海外市场，已向知名车企 Stellantis 集团量产销售车载电源<br>集成产品，并与雷诺确定定点合作关系</p>\n<p>境外收入占比达新高，境外毛利率稳步提升。公司海外收入逐步提升，2023H1 海外收<br>入占比 14.49%。毛利率方面，境外毛利率逐年提升，但整体毛利率仍然低于境内水<br>平，未来随着整体规模的提升，境外业务毛利率有望进一步提升。</p>\n<p> 新能源动力系统可以分为电驱动系统和电源系统。电驱动系统包括驱动电机、电机控制器<br>和减速器，电驱动系统是新能源的核心，新能源车通过电驱动系统实现动力的输入和控<br>制；电源系统主要包括车载充电器 OBC、DC-DC 变换器和高压配电盒 PDU，其作用是实现电<br>力转化和电池充放电功能。</p>\n<p>从成本上来看，电动汽车最大的成本占比为动力电池，占比约为 38%，电机成本占比 7%，电控<br>占比约为 6%</p>\n<p>电驱动和电源行业参与者可分为整车厂自供体系和第三方电驱动供应商。整车厂自供体系代表<br>公司有特斯拉、比亚迪旗下的弗迪动力、蔚来旗下的蔚然动力以及长安旗下的蜂巢能源等。第<br>三方电驱动供应商可以分为海外零部件巨头和国内供应商，海外汽车零部件巨头如联合电子、<br>日本电产、博世、大陆、博格华纳等，凭借深厚的技术、工艺等积淀拓展至新能源汽车领域，<br>本身产品力强、产能规模大，且具备全球主流车企客户资源。国内第三方电驱动供应商在近年<br>来快速崛起，根据业务侧重点可以分为以电控为主的英搏尔、汇川科技，以电机为主的方正电<br>机、卧龙电驱,以电源为主的威迈斯等厂商。在集成化的趋势下，部分企业开始布局电机、电<br>控、电源与“多合一”系统</p>\n<p>集成化方兴未艾，电源+电驱系统多合一大势所趋<br>目前行业主流产品已由分立式部件转为集成式部件，集成化成为未来行业发展趋势。近年<br>来，随着新能源汽车行业的快速发展，新能源汽车动力系统核心零部件呈现集成化、轻量<br>化、智能化的发展趋势，分立式零部件逐渐往总成类方向发展。相关厂商也从原先供应独<br>立电机、电控、减速器等，逐渐专向提供多合一、深度系统集成化的产品</p>\n<p>国内外企业纷纷跟进 800V 架构，超级快充是大势所趋。相比较目前 400V 充电电压，800V<br>高压系统能提升充电功率和驱动功率，显著提高整车性能，同时减少整车线束等零部件重<br>量及成本。目前，国内外车企已开展布局，如保时捷、小鹏、比亚迪等车企均推出搭载<br>800V 高压平台车型；下游超快充充电桩也在逐步铺设覆盖，小鹏、广汽、理想、华为等均<br>发布超快充桩、计划投建超充站。佐思汽研结合各车厂规划预测，到 2027 年底，800V 高<br>压平台车型保有量将达到 300 万辆，800V 超充站保有量达到 1.5-2 万座</p>\n<p>高压+高功率密度趋势下， SIC 渗透率或将提升。未来电机控制器技术发展趋势为高安全<br>性,高功率密度化以及高压化。随着 800V 电压平台推出，在大功率，大电流条件下减少损<br>耗、增大效率和减小器件尺寸成为需求点，电机控制器的主驱逆变器需要硅基 IGBT 替换为<br>SiC 基 MOS 模块，存量替代市场空间较大。作为第三代半导体材料的代表，SiC 具有大禁带<br>宽度、高击穿电场强度、高饱和漂移速度和高热导率等优良特性。SiC 的禁带宽度（2.3-<br>3.3eV）约是 Si 的 3 倍，击穿电场强度（0.8×106V&#x2F;cm-3×106V&#x2F;cm）约是 Si 的 10 倍，热<br>导率（490W&#x2F;(m·K)）约是 Si 的 3.2 倍，可以满足高温、高功率、高压、高频等多种应用<br>场景</p>\n<p>大功率充电下，液冷散热成为解决发热的重要手段之一。相较于风冷散热，全隔离防护技<br>术下的液冷充电模块是通过压缩机制冷，依靠循环液带走热量，并使用冷凝器对循环液进<br>行降温，具有高防护、低噪声</p>\n<h4 id=\"晨光\"><a href=\"#晨光\" class=\"headerlink\" title=\"晨光\"></a>晨光</h4><p>短期来看，晨光生物没有多少亮点，持续下跌磨底，如利润持续下滑，则未来深不见底。</p>\n<p>1.中药配方颗粒集采入围但无量，原料药生产效益一般。</p>\n<p>2.饲料级叶黄素价格低迷，销量下滑非常多，辣椒红和辣椒精相对稳定。</p>\n<p>3.棉籽加工产能释放，但薄利销售，年利润约1个亿，潜力不大。</p>\n<p>4.工业大麻暂时看不到风口，赞比亚土地开发进展缓慢。</p>\n<p>5.保健品增速快但量太小才0.8亿，利润占比太小，其他提取不成气侯，三大主力产品后继无人，姜黄素、水飞蓟、花椒提取雷声大雨点小。</p>\n<p>6.管理机制不佳，招人不少，但创新缺乏重大成果</p>\n<p>2024 年，公司主导产品辣椒红色素要发挥产能优势，朝着市场占有率 3&#x2F;4<br>甚至 4&#x2F;5 的目标继续努力；辣椒油树脂要发挥原料及市场优势，逐步扩大市场份<br>额；叶黄素要通过发展云南、印度、赞比亚、缅甸原料基地，持续提升市场话语<br>权。番茄红素、食品级叶黄素要加快高端应用市场开发进度，争取在销售上实现<br>大的突破；甜菊糖产品要发挥生产成本优势，加大国内外市场开发力度，进一步<br>扩大市场份额；水飞蓟素、姜黄素、迷迭香提取物等产品要通过工艺优化、产能<br>扩大等措施，尽快建立竞争优势，形成新的经济增长点。</p>\n<p>在工艺、技术、装备等方面积累的丰富经验，已成为公司在激烈市场竞争中<br>的核心优势。公司要保持对新工艺、新技术、新设备的敏感性，积极借鉴各行业<br>先进的技术和装备，持续推进生产系统改进创新，不断提高生产效率，降低生产<br>成本，实现高质量发展</p>\n<p>贯彻“吃干榨净”理念，多种类提取物综合利用。公司创新应用资源综合利<br>用技术，从加工所得副产品中提取出新的有效成分，通过多种类综合提取有效降<br>低产品成本。除首创复合溶剂同步提取辣椒红色素与辣椒精技术外，葡萄籽已实<br>现提取原花青素和葡萄籽油的综合利用，万寿菊同步提取叶黄素和槲皮万寿菊素<br>（QG）、甜叶菊同步提取甜菊糖和 CQA 技术均已经实现工业应用，2022 年槲皮<br>万寿菊素被批准为新饲料添加剂，QG、di-CQA 的多应用场景功效验证为动保产<br>品推广提供了理论支撑，在全球禁抗和动物产品消费升级的大背景下，天然植物<br>提取物作为替抗饲料添加剂的市场需求将持续增长。公司不断通过资源综合利用<br>开发新的品种，在基本不增加成本的情况下提高产品附加值，挖掘业绩增长点</p>\n<p>研发投入逐年增长，研发团队高质量发展。2022 年公司研发费用破亿元，较<br>上市前刚破千万的研发费产生巨大突破，同时自 2020 年起研发费用率维持在 2%<br>左右的水平，因公司棉籽业务更偏大宗品属性，剔除棉籽业务营收来看公司植提<br>主业的研发费用率增速较快，2022 年达到 4.42%，多年持续研发投入，使得公司<br>在新产品研发、提取工艺、装备制造、产品品质等方面积累了明显的优势，打造了<br>坚实的技术壁垒。同时，公司不断引进高端技术人才，研发团队维持在百人左右<br>的同时持续优化研发团队人员结构，2020-2022 年硕博学历人员占比由 61.2%提<br>升至 69.2%，研发团队专业素养强。</p>\n<p>天然着色剂安全健康，多领域广泛应用。辣椒红色素是天然色素的主要品种<br>之一，属于类胡萝卜素，联合国粮农组织（FAO）和世界卫生组织（WHO）将辣<br>椒红色素列为 A 类色素，在使用中不加以限量。辣椒红色素不仅着色效果好、色<br>泽均匀稳定，而且具有一定保健作用，产品广泛应用于食品、医药保健品、化妆<br>品、饲料等行业着色（或调色），据智研咨询数据显示，2015-2022 年我国辣椒红<br>色素市场规模从 1.72亿元增长至 4.67亿元，期间 CAGR 达到 15.34%，预计 2023<br>年有望突破 5 亿元，发展前景广阔</p>\n<p>行业扩容和市占率提升共促量增，成本加成定价下毛利率长期稳定。量增：<br>主要受益于辣椒红在工业化趋势下的渗透率提升、应用领域的持续拓展与公司以<br>市占率为先的策略。2015 年至 2022 年，我国辣椒红色素的产量&#x2F;需求量分别从<br>3.2&#x2F;1.2 千吨增长至 9.5&#x2F;2.8 千吨，期间 CAGR 分别为 16.7%&#x2F;13.6%，国内辣椒红<br>素产品多用于出口，国内市场拓展后劲十足。2008 年公司辣椒红色素已超过印度<br>Synthite 成为世界第一，2022 年国际市场份额实现从不到 2%到 80%以上的飞跃；<br>2017-2022 年公司辣椒红色素产品销量始终保持增长态势，2022 年辣椒红色素销<br>量超 8500 吨，较 2017 年销量实现翻倍增长；2023H1 实现销量约 5900 吨，同<br>比增长 16%。利稳：受益于行业扩容的同时，公司在辣椒红色素领域的生产规模、<br>工艺技术、产品质量、产品成本均处于领先水平，在成本领先优势的基础上通过<br>与上下游共享技术进步的成果等方式推动产品渗透率提升，产品毛利率长期维持<br>较稳定状态，市场份额不断拓展，在成本加成的定价方式下公司有望通过延伸上<br>游种植、降低原料成本来拉升毛利空间。</p>\n<p>多举措丰富原材料布局，收入与利润贡献稳定。公司辣椒精产品的产销量已<br>连续多年位居世界第一或前列，作为主力单品对公司业绩有较好贡献。公司辣椒<br>精产品的原材料是印度高辣度辣椒，2020-2021 年采购季节受到印度新冠肺炎大<br>面积爆发影响，行业总供应较为紧张；2022 年印度辣椒产区受到病虫害影响，导<br>致辣椒产量下降，故公司 2020-2022 年辣椒精销量对比疫情前的 2019 年有较为<br>明显的下降，但 2023H1 销量同比增长 25%达到 385 吨，且高于 2021 年同期销<br>量（361 吨），展望长期预计仍有望逐步恢复至疫情前的情况。公司作为我国植物<br>提取行业领跑者，具备应对突发情况的灵活处理能力，虽然 2020 年至今印度辣椒<br>原材料成本居高不下，但公司在 2022 年抢抓时机收购高性价比的印度花皮辣椒，<br>竞争优势显著提升；2023 年公司在印度辣椒的价格仍然较高的情况下及时调整采<br>购计划，在国内采购部分高辣度辣椒，优化原材料结构，产品竞争优势得到提升，<br>实现 2023Q1-3 辣椒精销量同比增长约  18%。同时，辣椒精供应较为紧张导致销<br>售均价同比有一定幅度上涨，2021 年收入及利润均创历史新高，2022 年受销量<br>影响收入端小幅下滑但价格仍维持在较高水平，预计 2023 全年在销量增长良好<br>的情况下收入有望恢复正增长</p>\n<p>天然健康营养素，高附加值方向发展。叶黄素别名植物黄体素，是一种存在<br>于人眼视网膜黄斑区的主要色素。叶黄素主要应用于饲料、食品加工、保健品等<br>领域。在饲料和食品加工领域，叶黄素具有极好着色作用；在保健品领域，叶黄素<br>对视网膜中的黄斑有重要保护作用，是帮助眼睛发育的关键营养元素。近些年民<br>众健康生活观念不断增强，叶黄素需求呈现增长趋势，叶黄素原料市场规模从<br>2015 年的 2.59 亿元增长至 2022 年的 4.75 亿元，期间 CAGR 达到 9.05%，行业<br>不断扩容。同时，高附加值的叶黄素产品增长迅速，据魔镜数据显示，2021 年淘<br>宝平台含叶黄素的保健食品销售额超 10 亿元，同比增速达 69%，但 从品牌来看，<br>目前含叶黄素保健食品赛道中仍以海外品牌为主，国内品牌仍有较大替代空间</p>\n<p>代糖领域核心产品之一，综合优势较为突出。甜菊糖苷是由甜叶菊精提而得<br>的天然植物提取甜味剂，相比化学合成甜味剂，甜菊糖苷具有纯天然、无副作用<br>且安全性高的优势；相比其他天然植物提取甜味剂，甜菊糖苷具有甜度较高、热<br>量更低的特点，甜度是蔗糖的 200-300 倍，热量仅有蔗糖的 1&#x2F;300。价甜比总体<br>介于化学合成甜味剂与糖醇类甜味剂之间，在高端应用市场中发展较好</p>\n<p>在做好植物提取物多个大单品的基础上，公司结<br>合植物提取物的功效，积极布局第三步“做大做强保健品、中药提取等大健康产<br>业，为人类健康做贡献”版图，为消费者提供天然、营养、健康的产品，目前保健<br>品业务和中药业务仍处于起步阶段，公司低成本工业化生产优势为业务发展提供<br>帮助，远期看业绩贡献空间大。</p>\n<p>辣椒精：辣椒精的原材料是<br>印度高辣度辣椒，2020-2023 年原材料价格维持较高位置，销量受高价<br>影响整体呈下滑趋势。2023H1 辣椒精售价维持高位，销量同比增长约<br>25%，公司及时调整采购计划，预计全年吨成本和售价均将有小幅下滑，<br>销量或有回暖，整体收入端恢复正增长，但盈利水平或有下滑。（3）叶<br>黄素：23H1 饲料级叶黄素销量同比下降约 70%，食品级叶黄素销量同<br>比增长超 110%，但 叶黄素价格在 23Q2 触底企稳，预计下半年销量有良<br>好恢复。从全年来看，受饲料级叶黄素体量较大影响，预计全年收入和<br>利润均有所下滑，毛利率也有所下降。（4）其他植物提取物：今年上半<br>年餐饮消费恢复带动花椒提取物销量快速增长，销量增长同比增长约<br>50%，创同期历史新高，预计全年有较好恢复；23H1 甜菊糖销售近亿元，<br>行业需求保持增长的态势下出现激烈价格战的可能性较小，预计全年稳<br>健增长。综合各细项来看：1）收入端：全年收入端其他植物提取物在低<br>基数与环境转好背景下收入增速最快，其次为稳定增长的辣椒红、辣椒<br>精，叶黄素受销售节奏影响下滑，整体全年植提业务将呈现稳定增长趋<br>势。预计 2024-2025 年叶黄素业务恢复正常增长轨道，同时公司不断扩<br>充产品矩阵，收入增长或提速。2）利润端：全年来看，较高毛利水平的<br>饲料级叶黄素在收入中占比降低，业务结构变化导致整体毛利率降低</p>\n<h3 id=\"舍得\"><a href=\"#舍得\" class=\"headerlink\" title=\"舍得\"></a>舍得</h3><p>23Q3 公司毛利率&#x2F;净利率分<br>别同比变动-4.02&#x2F;-1.03 个百分点至 74.63%&#x2F;21.87%，其中毛利率下降或主<br>因：①普通酒占比提升；②夜郎古并表有影响。环比看，受益于旺季品味<br>舍得动销良好，23Q3 毛利率环比提升 2.75 个百分点。净利率下降或主因<br>结构变动，费用端看：23Q3 销售费用率&#x2F; 管理费用率分别同比变动<br>+2.83&#x2F;-2.53pcts 至21.46%&#x2F;10.86%，销售费用率提升或主因公司加大营销活<br>动投放力度。23Q3 合同负债同比&#x2F;环比分别变动-0.36&#x2F;-1.83 亿元至3.26 亿<br>元；经营性现金流同比-109.17%至-0.59 亿元</p>\n<h3 id=\"国瓷材料\"><a href=\"#国瓷材料\" class=\"headerlink\" title=\"国瓷材料\"></a>国瓷材料</h3><p>1)电子材料:<br>MLCC介质粉体产品销量环比略有下降,维持全年弱复苏态势;2)催化材料:<br>淡季不淡销量持续提升,蜂窝陶瓷、铈锆固溶体等产品增长明显;3)生物医疗:<br>持续推动全球化布局,努力提升产品多元化和品牌化;4)新能源材料:<br>氧化铝、勃姆石销量快速提升,但销售价格下降,公司通过优化成本提升盈利能力;5)精密陶瓷:<br>三季度开始,公司在800V高压快充新能源车领域已完成批量供应,目前正加紧扩产氮化硅粉体;6)陶瓷墨水:<br>公司陶瓷墨水国内市场地位保持稳定,与科达制造的协同将开始逐步显现。</p>\n<p>精密陶瓷板块的增量主要是新能源汽车陶瓷球和陶瓷基板两个方向。<br>其中,新能源汽车陶瓷球业务的进展比较顺利,高压快充的新能源汽车开始引起市场关注,已经开始有部分车企推出相关产品。<br>今年下半年开始,公司新能源汽车陶瓷球的销售收入不断增长,速度在加快。<br>同时,公司正在加紧推动氮化硅粉体的产能建设。<br> 陶瓷基板方面,公司今年2月并表了铜陵赛创,完成了粉体、基板、金属化的布局,铜陵赛创进入到国瓷体系后,各项业务都在加速推进,LED大灯用陶瓷基板已经通<br>过了国际头部客户的验证,激光雷达用陶瓷基板已经开始逐步放量。<br>另一个新产品是陶瓷金属管壳,这个产品主要是用在低轨卫星中的接收和发射模块,具有非常好的发展前景,公司将根据市场需求重点发展。<br>综合来看未来几年陶瓷球和基板业务都将实现快速增长。 </p>\n<h3 id=\"芯片\"><a href=\"#芯片\" class=\"headerlink\" title=\"芯片\"></a>芯片</h3><p>AI 科技革命趋势日益显著，先进制程加速追赶：随着先进制程工艺成<br>本不断上升，当前只有台积电、三星、英特尔仍留在先进制程赛道<br>上，公司是唯一的先进制程挑战者。中芯国际在 2019 年下半年正式开<br>始量产 14nm  FinFET，成为继台积电、三星、格罗方德、联电后的第<br>五家掌握该技术并能够量产的厂商。且后续 12 纳米、7 纳米等制程开<br>发均可继续沿用 FinFET 结构成果。AI 科技革命趋势日益显著，作为<br>当前的先进制程挑战者，公司有望在AI 趋势的发展中起到重要作用。 </p>\n<h3 id=\"造船\"><a href=\"#造船\" class=\"headerlink\" title=\"造船\"></a>造船</h3><p>4 中国船舶：12月接单11艘，产能覆盖率为3.49年<br>2.5 中国重工：12月接单13艘，产能覆盖率为4.14年<br>2.6 中船防务：产能覆盖率为2.94年</p>\n<p>A公司已经进入新一轮船舶周期的业绩兑现期。目前，部分成本较高的老订单已交付，同时上游材料价格已出现较大回落，外汇端的压力也出现较大改善，预计公司未来盈利能力将会回升至较高水平。以PB估值看，估值越过中轴线，进入景气周期，有望业绩估值双击</p>\n<h3 id=\"中国船舶\"><a href=\"#中国船舶\" class=\"headerlink\" title=\"中国船舶\"></a>中国船舶</h3><p>碳中和趋势下，利好本轮造船行业替换需求上行。针对 IMO 提出的具体要求，船东应对<br>方法主要包括：（1）降速航行带来的有效运力降低；（2）调整能效要求不足的运力安排<br>和班期；（3）增加甲醇、LNG 等燃料船舶，降低整体碳排放等；（ 4）老船加装节能装置<br>等。环保政策推动下，海运平均航速持续下降带来的运力损失和老旧船舶的更新替代有<br>望成为造船市场需求来源之一，同时 LNG、LPG 等低碳船型产能有望持续扩张。根据<br>Clarksons 数据统计，截至 2022 年，全球安装脱硫设备船共 4385 艘，占全球总船数的<br>4.27%。<br>整体来看，公司收入端，需求上行叠加新造船价格上升，民船造修有望实现量价齐升；成本端，造船板<br>价格自 2H21 以来波动下行，公司成本压力减弱，盈利能力有望提升。此外，公司积极布<br>局 LNG、大型邮轮等高价值量船型，有望持续推动公司产品结构升级，增强公司核心竞<br>争力<br>全球宏观经济不确定因素对新船订单量和新造船价格均会<br>产生波动性影响。同时公司目前整体排产已至 2026 年，考虑到本轮周期造船厂扩产谨慎，<br>同时造船业务属于充分竞争市场，公司后续新增订单增速存在不及预期可能性。</p>\n<p>公司作为全球船舶制造龙头，在各种高端船型领域均有突破。其中，公司设<br>计的“MSC CHINA”号集装箱船具有较低的燃油消耗和温室气体排放，是<br>公司在高端船舶领域的一大突破。我们维持盈利预测，预计公司23-25 年归<br>母净利润为 34.0&#x2F;75.6&#x2F;110.5 亿元，同比+1876%&#x2F;+123%&#x2F;+46%</p>\n<p>公司股权结构清晰，实际控制人为国务院国资委。公司为中船集团旗下核心军民品主业<br>上市公司平台<br>公司为中船集团核心上市公司，主营船舶造修、海洋工程及机电<br>设备等业务。公司控股江南造船、外高桥造船、广船国际、中船<br>澄西四大船厂，全面覆盖军民船舶等各类领域。受益船舶市场回<br>暖，公司 1-3Q22 实现营收 385.92 亿元，同比+0.96%；公司非经<br>常性损益使得 1-3Q22 归母净利润 14.63 亿元，同比+256.35%。<br>同时 2023 年新一轮国企改革有望为公司带来新催化</p>\n<p> 需求端：船舶行业大周期复苏，扩张需求+替换需求共振。船舶<br>行业二十年一周期，2021 年海运景气度回升明显，全球新接船订<br>单（按万载重吨统计）同比+97.2%，创 2013 年以来新高，2022<br>年新接订单万载重吨口径同比-36.5%，但新接订单金额同比仍增<br>长 8.2%，主要系目前各船厂排产饱满，造船已进入“量降价升”<br>的挑单环节。替换需求方面，当前大型活跃船队平均船龄已接近<br>21.7 年，老旧船替换周期临近。同时 IMO2023 年环保新规使得绿<br>色船舶改造替换需求确认，有望进一步推动新造船周期上行</p>\n<p>公司在手货币资金较为充足，2020 年公司完成资产重组后，货币资金实力进一步增长，<br>维持在 500 亿元以上。公司整体经营性现金流自 2017 年开始呈现净流入状态，2022 年<br>前三季度公司经营性现金流-47.80 亿元，主要系子公司船舶产品收款同比减少，材料设<br>备支出同比减幅小于收款减幅所致</p>\n<p>2016-2017 年受船市下行周期、海工产品大额减值及原材料价格上涨<br>等原因影响，外高桥造船出现两年亏损。近两年公司业绩总体保持稳定，1H22 外高<br>桥造船实现营收 57.47 亿元，净利润 0.26 亿元。</p>\n<p>经营层面上，广船国际积极承接双燃料汽车滚装船（PCTC）、 客滚船、极地凝析油船<br>及极地科考船等双高技术船舶。<br><img src=\"/image-8.png\" alt=\"Alt text\"></p>\n<p>中长期看，原油需求持续增长，油船市场景气度有望接力。2020 年受全球疫情影响、宏<br>观经济下行以及新能源替换等因素，全球原油贸易下滑明显，伴随全球经济逐渐复苏及<br>贸易量提升，交通运输及工业用石油需求开始复苏，目前原油处于去库存阶段，全球主<br>要经济体原油库存处于低位，截至 2022 年底，经合组织国家商业原油库存下降至 39.68<br>亿桶，已基本见底，补库存周期有望恢复，根据原油需求改善下对应船队运力增加，当<br>前油运价格已出现复苏迹象，油船有望成为继集装箱船后又一支撑市场发展的主力船型</p>\n<p>新能源船替代传统燃料船大势所趋，未来低碳船型主要包括 LNG 船、LPG 船与锂、氨、<br>氢能源动力船等。新能源燃料要综合考虑热值、密度、安全性、经济性等多方面因素，<br>当前 LNG&#x2F;LPG 船等技术成熟度已经相对较高，氨燃料优势在于实现大量碳排放降低，但<br>目前技术相对还不成熟，成本相对较高。</p>\n<p>核心观点：长建设周期、扩产困难使得行业不断向龙头企业集中，本轮造船上行周期中<br>国有望延续上一轮韩国情况，引领全球造船业发展。2022 年我国三大造船指标占据全球<br>约 50%市场份额，中国船舶占我国市场份额约 20%，占全球份额约 10%。整体来看，公司<br>收入端，需求上行叠加新造船价格上升，民船造修有望实现量价齐升；成本端，造船板<br>价格自 2H21 以来波动下行，公司成本压力减弱，盈利能力有望提升。此外，公司积极布<br>局 LNG、大型邮轮等高价值量船型，有望持续推动公司产品结构升级，增强公司核心竞<br>争力</p>\n<p>2022 年我国新接订单量、在手订单量和造船完工量<br>以万载重吨计分别占全球总量的 55.2%、47.3%和 49.0%。<br>我国在大型 LNG 船领域持续突破，2022 年全年新接大型 LNG 船订单国际市场份额首次超<br>过 30%。2022 年中国形成了以沪东中华、大船重工、江南造船、招商海门和江苏扬子江<br>船业为主的多个大型 LNG 船建造企业集群</p>\n<p>船价在签订订单时已基本锁定，其成本波动主要在船舶建造周期中由造船厂自己承<br>担。根据公司公告，船舶主要原材料以 6mm 和 20mm 船用钢板为主。2020 年底新造船<br>价格逐渐升高，但同时造船钢材价格伴随上涨目前新造船价格上涨。造船板价格在<br>5M21 达到峰值后开始回落，截至 2022 年底，上海 20mm 造船板价格为 4480 元&#x2F;吨，<br>同比下降 17.8%，相较 2021 年峰值下滑接近 35%。造船板价格下降有利于增加公司<br>在手订单毛利，盈利能力有望持续修复</p>\n<p>公司船型结构也同时持续优化，2021 年公司散货船&#x2F;集装箱船&#x2F;油船交付<br>量分别为 352&#x2F;100&#x2F;134 万载重吨，同比增长-27%&#x2F;129%&#x2F;0.5%，其中集装箱船占比增幅明<br>显，高价值量船型结构占比提升</p>\n<p>公司针对高附加值船型持续突破。2018 年初，公司下属子公司江南造船获得法国达飞海<br>运公司 23000TEU 超大型 LNG 双燃料集装箱船订单，该型船上配置了世界上第一批 MARK<br>III 薄膜型 LNG 燃料舱，2022 年 5 月第四艘已交付完成。2021 年江南造船与广东九丰能<br>源签订 1 艘 79800 立方米 MARK III 薄膜型 LNG 运输船订单，正式进入薄膜型液化气船建<br>造领域。根据公司公告，江南造船与阿布扎比国家石油公司（简称 ADNOC）旗下 ADNOC<br>Logistics &amp; Services 订了 2 艘 17.5 万立方米 LNG 运输船建造合同。同时公司进军大<br>型邮轮领域，2018 年外高桥造船与中船嘉年华及中船邮轮签订“2+4”艘 13.55 万总吨<br>Vista 级大型邮轮新造船合同，其中实船 2 艘，选择船 4 艘，根据公司公告，国产首制<br>大型邮轮有望年中出坞，年底交船。</p>\n<p>大型豪华邮轮、大型 LNG 船、航母并称为造船业“皇冠上的明珠”</p>\n<p>中美海军力量存在较大差距，中国航母、军辅船等存在较大市场空间。根据《The<br>Military Balance2022》，中国同美国在航母、驱逐舰、护卫舰、潜水艇等主力舰艇方面<br>存在较大的差距，随着国际形势的日益严峻与我国海军战略由“近海防御”向“远海防<br>卫”的转变，我国在航母及军辅船等方面存在更多的需求。 </p>\n<p>2016 年美国军费支出由降转升，中国军费也将继续增长。从绝对量的角度来看，2021 年<br>中国军费支出 2933.52 亿美元，美国军费支出 8006.72 亿美元，美国军费支出约是中国<br>军费支出的 2.73 倍，中美之间军费支出存在较大差距；从军费支出占本国 GDP 的比重来<br>看，2020 年中国军费支出占 GDP 比重为 1.75%，而同期发达国家军费支出一般在 2%以上，<br>2020 年美国军费支出占 GDP 的比重为 3.74%。受全球局势动荡与中美关系恶化的影响，<br>2016 年美国军费支出开始增加，占 GDP 的比重也开始呈上升趋势。同时近期两会政府工<br>作报告中指出，我国要深入贯彻强军思想，全面加强练兵备战，创新军事战略指导，大<br>抓实战化军事训练，统筹抓好各方向各领域军事斗争</p>\n<p>十四五”期间，<br>我国海军战略由“近海防御”转向“远海防卫”，对海军装备需求随之增加。2022 年我<br>国国防支出 1.45 万亿元，同比增长 7.02%，受益于国防开支的增加与装备的升级换代，<br>海军装备采购需求有望不断增加。</p>\n<p>江南造船厂于 2015 年成为中国第一军工造船企业，目前能够满足海军各系列舰船的建造<br>需要。江南造船是我国历史最悠久、军品结构最齐全、造船效率最高的军工造船企业，<br>也是我国技术最先进、规模最大的军船生产基地。江南造船厂承担了我国 003 号航母<br>“福建舰”、第一代至第四代导弹驱逐舰、万吨新型驱逐舰“南昌号”等的建设任务。目<br>前，江南造船厂占地面积 517 万平方米，岸线总长 3561 米，共分三个生产区域，能够满<br>足海军各系列舰船的建造需要。</p>\n<p>设备及钢材的用量随船的交付体<br>量而增长，同时中性预期假设造船钢板水平将在 2022-25 年有所回落但总体有望维持在<br>一定水平，预计公司整体 2023 年毛利率相较 2022 年有望增长 5.3pcts</p>\n<h3 id=\"保险\"><a href=\"#保险\" class=\"headerlink\" title=\"保险\"></a>保险</h3><p>首先，近期社融持续改善，后续积极的财政政策有望带动总需求和经济恢复动能逐步增强，稳健的货币政策也会通过降准等多种方式予以协同配合，将共同稳固宽信用进程。长期利率下行空间有限，更可能随着经济形势的复苏，利率出现回升，并利好险资债权资产，同时利率增速的企稳也有望持续拉动债市的回弹。</p>\n<p>其次，股市在经历了惨淡的2023年已经整体处于较为低估的水平，2024年上行的概率加大。股市回暖将带动险企股基等权益资产投资业绩向好；而 IFRS9 金融准则实施后 FVTPL 资产占比明显上升，也将进一步放大投资波动，或对2024年利润增长提供较好支撑。此外，险企将持续加大包括高股息股票在内的权益资产配置，预计此类资产将普遍计入 OCI资产类别中，股息分红收入的增加将稳定并提振险企净投资收益率，从而带动总投资收益率改善。</p>\n<p>最后，保险公司持有的地产等投资开始出清，相关的资产风险逐步化解。险企资产质量持续改善</p>\n<p> 平安首个动工的超高端养老社区—深圳·臻颐年将于2024年完工。平安已在全国17城拥有健康检测中心，成为平安保险+医疗+养老的粘合剂。平安自有医生、外接医生以及自有健康管理中心，且线上、线下服务渠道最为均衡，相较于其他保险公司，平安能够提供闭环程度更高的省心、省时又省钱的服务。随着平安保险+生态服务陆续面世，新业务价值率弹性空间更大。</p>\n<h3 id=\"恒立液压\"><a href=\"#恒立液压\" class=\"headerlink\" title=\"恒立液压\"></a>恒立液压</h3><p> 挖掘机预计 2024-2025 年完成筑底开启新周期<br> 伴随房改政策出台提振信心，一万亿国债发行，基建<br>发力带动复苏，用 8 年左右一个周期测算，行业预计在 2024-2025 年完成筑底开启新周期。</p>\n<p> 挖掘机销量主要由下游需求决定。国产品牌对国外品牌的国产替代已基本实现，销量被<br>下游需求决定。需求端为两类新增需求和更新需求：国内的新增需求取决于地产、基建、矿<br>山等固定资产投资；国外的新增需求取决于欧美市场占有率提升、“一带一路”等国家的基<br>建项目和矿山开发等；更新需求主要包括设备老化更新需求，环保标准升级的换代需求和技<br>术创新后的升级需求</p>\n<p>盾构机油缸技术领先，全球市占率超60%。从 2005年起恒立开始研发生产盾构机油缸，<br>油缸配套至中交“长城号”等大型盾构机；在美国西雅图 Bertha 号盾构机中，全套高压油<br>缸均来自公司，即使该在地下施工作业两年，也未出现腐蚀、密封件老化等问题。根据公司<br>公众号，2019 年恒立盾构油缸全球市场占有率超过 60%，国内市场占有率超过 80%，技术<br>世界领先。</p>\n<p>海外高空作业平台市场以存量更新为主。北美、欧洲等海外发达国家和地区经济发展水<br>平高，安全生产法规严格，高空作业平台市场成熟，存量市场大，应用普及率高，产品结构<br>完善，更新替换需求稳定。2021 年，美国租赁市场高空作业平台保有量为 72.21 万台，同<br>比增长 10%。欧洲十国租赁市场保有量为 32.46 万台，同比增长 3%</p>\n<p>国内市场仍处于高速成长阶段。中国高空作业平台市场仍处于成长期，低成本、高效率、<br>安全作业保障是促使高空作业平台在国内市场快速发展的三大驱动因素。据中国工程机械工<br>业协会的数据显示，2022 年，我国高空作业平台销量达 19.6 万台，同比增长 22.40%。2022<br>年中国高空作业平台保有量约为 43.85 万台，同比增长 33%，与美国 2021 年高机租赁保有<br>量 72.21 万台相比摊平的人口总量上来看，仍存在较大增长空间。</p>\n<p>海外营收持续增长，毛利率领先国内同行。2022 年公司实现海外收入 17.53 亿元，同<br>比增长 41.9%，自 2015 年以来实现复合增长率达 28.54%，实现海外业务高速发展。从海<br>外收入占比来看，公司 2022 年海外收入占比达 21.4%，与 2021 年相比提升 8.1pct；其中，<br>2015-2020 年海外营收占比下滑的原因是，国内工程机械进入上行周期，增速远超海外业务<br>所致。从毛利率来看，公司海外业务毛利长期维持在 35%左右，领先同行艾迪精密 8-10pct<br>左右，凸显公司经营管理、成本管控和品牌效益领先行业</p>\n<p>墨西哥项目投产在即，业绩提升 17.03 亿元增量。2021 年公司非公开发行募资 50 亿<br>元，其中建设投资 14.12 亿元，该项目达产后将形成工程机械用油缸 200,440 根、延伸缸和<br>其他特种油缸 62,650 根以及液压泵和马达 150,000 台的生产能力。墨西哥项目预计在 2024<br>年上半年开始逐步投产，将有利于公司深度拓展美洲市场，避开贸易关税壁垒，提升交期和<br>售后速度。项目达产后预计将为公司带来 17.03 亿元的业绩增量，占 2022 年总营收的 20.8%</p>\n<p>丝杠项目明年逐步投产，预计带来至少 62.96 亿元业绩增量。根据公司公众号报道，目<br>前新工厂已建成，各项基础设施建设已经进入扫尾阶段。全部完成届时将形成年产标准滚珠<br>丝杆 66 万米、精密滚珠丝杆 42.2 万米、行星滚珠丝杆 1 万米、直线导轨 100 万米、标准<br>滚珠丝杠电动缸 10.4 万根、重载型滚珠丝杆电动缸 2.5 万根和行星滚柱丝杆电动缸 1750 根<br>的生产能力。根据公司公告中的单价进行预测，整个丝杠项目可创造至少营收 62.96 亿元，<br>占 2022 年营收 76.8%。预计 2024 年上半年开始逐步投产，开启第三增长曲线</p>\n<p>油缸业务：公司国内挖机油缸市占率可保持在 60%以上，未来海外市场渗透率有望提升<br>带来增量；非标油缸由于海工装备、盾构机、高空作业平台和非挖工程机械的油缸保持增长，<br>平滑挖机业务的波动，预计 2023-2025 年公司油缸收入增速保持稳增长为 5%，10%，14%，<br>随着下游工程机械在 2024-2025 年的景气度恢复，预计油缸业务毛利率将回升，分别为<br>39.90%、42.5%、44%。<br>泵阀业务：主要包含挖机泵阀马达和非标泵阀马达等；预计未来公司中大挖泵阀市占率<br>稳中有升，挖机马达市占率上行，并且泵阀突破进入海外主机厂为业绩带来增长点。非标泵<br>阀、马达业务受益于农机和高级泵阀产品放量，带动泵阀业务占比提升。预计 2023-2025 年<br>公司泵阀收入增速为 12.5%、22.0%、32.0%。预计 2023-2025 年公司泵阀业务毛利率水平<br>分别为  48.36%、49%、49%。<br>液压系统：此业务偏项目型，受制造业宏观形势影响，预计 2023-2025 年收入增速为-<br>30%、29%、27%，毛利率水平保持稳定，按 44.90%、45.0%、45.0%计算。 </p>\n<h3 id=\"猪\"><a href=\"#猪\" class=\"headerlink\" title=\"猪\"></a>猪</h3><p>生猪出栏量完成目标，能繁母猪存栏量稳步增加。公司2023全<br>年出栏 6382 万头，同比+4%，此前公告出栏目标为 6250~6400<br>万头，出栏量完成目标。伴随猪价持续低迷，预计公司单月养<br>殖亏损环比加剧。4Q23末公司能繁母猪存栏313万头，较3Q23<br>末增加4%、同比增加11%</p>\n<p>猪价旺季不旺，产能持续去化。根据调研，2023 年腌腊旺季猪<br>肉消费量有较为明显的减少，生猪价格旺季不旺。结合目前生<br>猪供给量大，以及2023年国庆及元旦前的猪价表现，我们预计<br>年前的猪价反弹幅度有限、行业或将继续亏损。参考1H23能繁<br>母猪存栏量降幅较小，且1-3Q23行业投苗量较高，我们预计未<br>来 1-2 个季度生猪供给压力仍然较大。目前看来，能繁母猪产<br>能去化趋势加深，根据行业数据，12 月规模场能繁母猪存栏量<br>环比减少2.02%，同比减少5.45%，2023年12月较1月能繁减<br>少5.30%。我们预计2Q24之后有望出现猪周期的底部拐点</p>\n<p>公司2023年12月的生猪养殖完全成本为15.3元&#x2F;kg,相比前几个月有所上升,主要原因是冬季疫病造成的生产成绩波动以及防控疫病的投入有所增加。<br>目前疫病对猪群的影响已趋于平稳,公司会持续做好疫病防控,一是通过空气过滤猪舍、精准通风系统等硬件装备进行防控,二是做好人员、物资的消毒管理,三是<br>保证一线人员对各项生物安全措施的有效执行</p>\n<p> 现金成本是影响公司现金流安全的关键因素之一,当前公司生猪养殖完全成本中,折旧摊销占比在10%左右,现金成本在13.5元&#x2F;kg左右,公司现金成本安全垫较<br>厚。<br>此外,公司与银行等金融机构保持稳定、良好的合作关系,授信储备充足, 中国农业银行、中国建设银行、中国银行等头部银行均将公司作为总行战略客户,目前头<br>部银行授信占比超过70%,未用信额度超过300亿元,去年新增银行贷款成本基本在4%以下</p>\n<h3 id=\"九毛九\"><a href=\"#九毛九\" class=\"headerlink\" title=\"九毛九\"></a>九毛九</h3><p>强中台成就多品牌，全球化延拓优势。1）怂火锅：火锅赛道机遇与挑战并存，怂品牌借力平<br>台优势，模型跑通、加速开店、有效全国化，中期维度形成集团又一利润驱动。2）赖美丽：<br>烤鱼行业广阔明朗，赖美丽定位烤鱼版太二，在标准化经营、高辨识品牌、强协同供应角度直<br>接受益集团赋能，将适时开店以赛代练、持续打磨蓄势待发。3）太二国内：从渠道发展和人<br>口覆盖角度测算，太二品牌在五年维度于国内门店空间可略超1000 家，目前高质量扩张、节<br>奏稳健，品牌能量强劲向上。4）海外：海外中式餐饮市场潜力较大，川式正餐品类适应性<br>强，而集团全球化布局清晰，延续集约、标准、效率的经营思路，第一阶段率先渗透东南亚、<br>北美等华人聚集地，对标进驻海外较早的川式休闲餐品牌海底捞，中长期目标预计或可看约<br>150 家；除华人市场外，川式正餐在海外本土市场也具备较大潜力，现有龙头在经营规模化、<br>管理标准化、设计本土化的成功经验可为借鉴</p>\n<p>以火锅、酸菜<br>鱼为代表的菜品由于具备易标准化的特质，龙头公司门店数量较高，连锁品牌扩张潜力更加充分；<br>而粤菜、传统西餐等由于食材要求、制作工序相对复杂，对厨师依赖度高，因而难以形成统一稳<br>定的标准化供应服务体系，相应其赛道中的龙头公司也更难形成规模化扩张。</p>\n<p><img src=\"/image-9.png\" alt=\"Alt text\"></p>\n<p>联营介入原料生产，食材质价深度把握。1）鲈鱼：早在2020 年7 月，集团便与上游食材供应商<br>成立合营公司开展第一个合作养鱼项目，截至2020 年底，合营公司已拥有3000 余亩的加州鲈养<br>殖基地，集加州鲈的育苗、养殖、加工、销售为一体。酸菜：太二与酸菜供<br>应商在四川成立酸菜腌制基地，以独特的配方在传统中国陶罐中腌制定制的酸菜，并且公司与酸<br>菜供应商通过达成长期且稳定的合作协议，获得提前付款的折扣，以此保障酸菜的供货质量与价<br>格。3）火锅调料：22 年年底，公司斥资 9.96 亿元收购重庆市涪陵区 3.3 万平米土地使用权，部<br>分用于建设火锅底料及复合调味料生产厂房，为怂重庆火锅品牌的核心原料供应奠定基础</p>\n<p>供应能力打造完备，并成为集团的基础设施资产，未来多品牌均将享受规模与效率红利。1）集<br>团已有的鱼养殖基地、酸菜种植收采机制、调料自产厂房设备，从主料到辅料，全方位奠基成集<br>团突出的供应能力，且将辐射多个新品牌，形成规模集采与生产效率红利，有望构筑优于同行的<br>产品质价和盈利能力。如太二的鲈鱼养殖基地能够养殖赖美丽所需的江团鱼和牛蛙，底料工厂或<br>可辅助生产烤鱼所需的麻辣风味底料，提高集团各品牌在供应链端的协同效应。2）全国化中央<br>厨房及总部供应中心建成，将从食材仓储、加工、物运等角度提高品牌协同和整体经营效率，保<br>证品质把控和口味统一，可为集团旗下未来有望全国化的多个品牌提供门店储配支持。 </p>\n<p>SKU 集约化，降低决策时间。太二 SKU 不超过 30 个（含<br>配菜），而主品酸菜鱼只可更改分量（辣度、鱼品、基础配菜均固定），精简的单品设置不仅降<br>低顾客决策时间，也减少后厨备菜成本，同时降低上游供应管理难度，提高采购物运的规模效益，<br>为门店翻台提升和成本降低均提供充足空间。2）场景精简化，加快用餐速度。太二餐厅原则上<br>不接待 4 人以上同时就餐，且不提供拼桌加位服务，将就餐场景限定为工作餐、快捷休闲餐等偏<br>刚需的类目上，有利于充分吸纳核心受众、加快整体用餐速度，同时减轻宴请派对等环节的服务<br>需求，降低不必要的人员成本。3）流程自助化，减少服务冗余。太二餐厅服务人员负责引导顾<br>客入座、传菜及响应必要需求，其余点餐、茶水、结账等流程均通过小程序或顾客自助完成，进<br>一步提高就餐效率，降低服务成本</p>\n<p>“爆品策略+品牌 IP”，战术化营销方式实现强势破圈。1）单品故事先行，差异化塑造品牌记忆点。<br>太二主打一道老坛子酸菜鱼，以“酸菜比鱼好吃”体现差异化；怂火锅主营重庆锅底和鲜切黄牛肉，<br>主打“灵魂是锅底，头牌是牛肉”带给顾客独特的消费体验；赖美丽延续集团精简 SKU 的路线，以<br>青花椒烤鱼为主要特色且只卖自养江团鱼，建立了差异化的品牌壁垒，树立了独树一帜的消费卖<br>点。2）打造品牌 IP，传递独特品牌文化。太二设计了沉默寡言的二老板及活泼幽默的小二哥形<br>象，通过黑白漫画形式推送新品及活动，并以品牌形象与猫咪“何英俊”联名进行公益活动等，吸<br>引年轻消费群体率先入场；怂火锅塑造了飒小妹、怂厂长两个 IP 形象，输出“你，开心就好”的品<br>牌理念；后续孵化的赖美丽也打造出一个出身养鱼世家、爱笑爱吃烤鱼的个性女孩形象，增强趣<br>味性，在与年轻顾客拉近距离的同时，输出品牌专注菜品高品质、创新独特有趣的品牌调性，不<br>断提升品牌在受众客群中的影响力，迅速提高品牌知名度，也是未来新品牌可沿用的打法</p>\n<h3 id=\"云南白药\"><a href=\"#云南白药\" class=\"headerlink\" title=\"云南白药\"></a>云南白药</h3><p>百年品牌，焕发新活力。2019 年“白药模式”混改落地，公司引入民营资<br>本并实施股权激励和员工持股等政策，激发员工积极性。白药参与上海医药<br>定增，双方未来有望在药品研发、医药商业等领域强强联合；全面要约收购<br>万隆控股，完善工业大麻产业布局，搭建国际化贸易平台。</p>\n<p>持续探索外延，力求第二增长曲线，数字化平台焕新赋能。在做深做实现有<br>业务板块的同时，云南白药立足“1+4+1”战略，积极探索“第二增长曲线”，<br>着力布局医美、口腔护理、骨伤以及女性关怀产业链，推出“齿说”智能电<br>动牙刷、冲牙器等多个产品，并集中优势资源，积极推进医美产业布局。</p>\n<p>四大事业部行稳致远，进而有为。1）药品事业部：云南白药作为百年名药，<br>其配方享有国家最高保密级别，其中云南白药膏与云南白药气雾剂均为 10<br>亿级别大单品，多款产品位居骨伤科前列；2）健康事业部：2022 年，健康<br>事业部营业收入61.97 亿元，同比+5%，其中牙膏市占率稳居细分赛道第一；<br>3）中药资源事业部：在 2013 年单独成立后，营业收入从 2013 年的 2.98<br>亿，增长到2022 年的峰值14.47 亿元，在各事业部中增长最快，是公司四<br>大业务部门中最有潜力的增长点，受益于产业布局，公司中药材板块在三七<br>价格持续走低的背景下逆势上扬；4）医药商业板块主要依托云南省医药公<br>司，发展医药流通和云南白药大药房两大业务，两票制后公司并购中小流通<br>商，并获上海医药支持，区域龙头地位稳固，将长期受益于行业集中度提升</p>\n<p>战投上海医药。2022 年 4 月，云南白药发布公告，作为战略投资者，以现金方式认购上<br>海医药665,626,796 股份。此次认购完成后，云南白药持有上海医药18.01%股份，成为<br>上海医药第二大股东，上海市国资委仍为上海医药实际控制人。</p>\n<p>以白药系列为核心，培育医疗器械产品矩阵。药品事业部主要包含药品系列和医疗器械品<br>牌，其中云南白药药品系列共有19 个剂型，300 余个品种，分为白药系列和普药。1）白<br>药系列：云南白药系列在传统的云南白药散剂基础上，拓展出云南白药膏、云南白药气雾<br>剂、云南白药创可贴等多种剂型，满足差异化消费需求；2）普药和特色药系列：以气血<br>康口服液、宫血宁等大单品为基础，向感冒类、胃肠道类、抗感染类和清热类等产品延伸；<br>3）医疗器械：2022 年，药品事业部以“稳药品·育器械”为核心战略，选择慢病疼痛、<br>眼健康两大细分领域拓展发力，探索医疗器械家庭化使用场景，谋求新增长极。</p>\n<h3 id=\"充电桩\"><a href=\"#充电桩\" class=\"headerlink\" title=\"充电桩\"></a>充电桩</h3><p>超充落地具备可行性，全生命周期充电度电成本大幅降低。液冷超充桩初始投资<br>成本较高，通过微电网、共享储能可解决超充对电网稳定性的冲击但也大幅提升<br>了初始投资成本。充电网作为重要的新型基础设施，应考虑未来技术迭代和标准<br>升级，改变简单比较单瓦成本的思路，引入全生命周期的充电度电成本进行评估。<br>以华为全液冷超充方案为例，度电成本要远低于传统方案，10 年整站度电成本<br>0.34 元&#x2F;kWh，分别较一体桩、风冷堆低 35%、26%，投资回收期仅为 6.7 年</p>\n<p>，超充桩建设成为800V 高压快充推广的制约因素。<br>海内外车企成为超充桩建设主力，华为 600kW 液冷超充站引领技术趋势，超充<br>桩成为充电桩投资侧重点。关注大功率直流桩占比高的整桩企业、超充桩带来的<br>液冷模块、液冷枪线等技术升级方向。<br>推荐：威迈斯、鑫宏业；关注：永贵电器、通合科技、利和兴、绿能慧充。</p>\n<p>要实现高压快充主要从 4 个方面入手：（1）车端：提升整车平台电压，相应部<br>件耐压性需升级；（2）电池端：提升电池快充倍率性能；（3）桩端：大功率<br>直流超充升级，提升散热能力，例如液冷模块、线缆和充电枪液冷技术的应用；<br>（4）电网端，需解决大功率充电对电网稳定性带来的冲击。</p>\n<p>（1）具有技术、客户等优势的液冷充电模块公司，推荐：威迈斯，建议关注：<br>通合科技；（2）液冷枪和液冷线缆公司，推荐：鑫宏业，建议关注：永贵电器<br>等；（3）大功率快充整桩和代工公司，建议关注：利和兴、绿能慧充等</p>\n<p>通过微电网、共享储能可解决超充对电网稳定性的冲击。微电网是指由分布式电<br>源、储能装置、能量转换装置、负荷、监控和保护装置等组成的小型发配电系统，<br>是解决分布式电源直接接入电网所引起一系列问题的有效手段。</p>\n<p><img src=\"/image-10.png\" alt=\"Alt text\"></p>\n<p> 超充有待规模化降本，应从度电成本视角衡量经济<br>性</p>\n<p>大功率液冷充电<br>枪是在充电线缆中放置液冷管道，让冷却液带走线缆的发热量，此种方式不仅可<br>以减小线缆线芯截面积，而且充电电流更大，充电过程温升更低</p>\n<h3 id=\"盛弘股份\"><a href=\"#盛弘股份\" class=\"headerlink\" title=\"盛弘股份\"></a>盛弘股份</h3><p>公司的电能质量产品主要解决用户在用电过程中遇到的工业配套电源问题,通过解决电网谐波、三相不平衡、电压暂降、突然断电等问题,提升用户用电质量及用<br>电安全。<br>可以广泛应用于高端装备制造、石油矿采、轨道交通、IDC数据中心、通信、冶金化工、汽车制造工业、公共设施、银行、医院、剧院、广电、主题公园、电力<br>系统等行业</p>\n<p>公司成立于 2007 年，2017 年深交所上市，是国家创新基金、深圳市科技<br>研究开发计划入选企业。公司是专业的能源互联网核心电力设备及解决方案<br>提供商，主要业务属于国家性战略新兴产业中的节能环保、新能源领域</p>\n<p>营收拆分：2022 全年营收同比增长47.16%，增速提高 14.75pct。主要系：<br>（1）”十四五”纲要等政策刺激高端装备制造业快速发展，公司电能质量设备<br>业务稳定增长，2022 年实现营收 5.12 亿元，同比增长 26.69%；（ 2）受新<br>能源电动汽车市场风口推动，充电桩业务发展势头良好，产品出货持续增加，<br>22 年实现营收4.26 亿元，同比增长116.96%；（ 3）锂电池厂商持续扩大锂<br>电池的生产需求，带动公司电池化成与检测业务营收增长，22 年营收 2.58<br>亿元，同比增长72.37%。</p>\n<p>迎接充电行业高景气度周期，大力推进快充技术和海外布局。公司深耕充电桩<br>研发制造十余载，目前公司充电桩产品覆盖整桩和模块，拥有 50 多款不同充<br>电规格的充电设备产品，实现 7kw-800kw 全功率段产品全覆盖。技术方面，<br>公司已开发 200 多种独有的充电控制技术，并率先发力高压快充，已将碳化硅、<br>液冷超充等前沿技术应用于产品。2023 年上半年公司充电桩业务实现收入<br>3.84 亿元，2023 年前三季度收入预计超 6 亿元，总体实现高速增长。此外为<br>顺应全球化浪潮，公司加速充电桩海外布局，成为首批进入英国石油中国供应<br>商名单的充电桩厂家。考虑到截至 2023 年 9 月，全国新能源车保有量 1821<br>万辆，充电基础设施保有量 764.2 万台，车桩比 2.38:1，离工信部“2025 年<br>实现车桩比 2:1，2030 年 1：1”的目标仍有差距，国内充电桩增量空间依然<br>广阔，叠加海外广阔需求，公司充电桩业务有望继续强劲增长。</p>\n<p>新能源电能变换设备业务成为公司重要营收来源。2018-2021 年，公司新能<br>源电能变换设备业务营收占比分别为8.79%、15.59%、16.10%、23.51%，<br>呈持续上升趋势。2022 年，电能变换设备营收贡献下降至17.02%，主要系<br>充电桩业务营收增速提升，22 年充电桩业务营收贡献同比提升 9.11pct，达<br>28.33%。未来，公司仍会依托这四个业务板块持续开拓新市场与新客户，并<br>不断提高产业链的广度与深度</p>\n<p>充电桩产品主要包括直流桩和交流桩、一体式和分体式等多种产品类<br>型；充电桩模块涵盖 15kW、20kW、30kW、40kW 等功率等级。公司拓<br>展多元化客户，包括小桔充电、国家电网、南方电网等运营商，比亚<br>迪、吉利等车企，中石油、中石化、BP、壳牌等能源企业，以及长沙<br>城发、南宁交投等政企。公司丰富的产品品类、多元的客户分布以及<br>强大的服务能力有望为公司充电桩业务带来高速增长。</p>\n<p>华为引领全液冷超充技术。当前液冷超充桩大多是在传统风冷充电桩基础上，采<br>用液冷充电枪来实现大电流充电输出，大充电功率下噪声较大，可靠性较低，后<br>期维护成本较高。华为发布的全液冷充电架构采用液冷充电模块、液冷充电枪，<br>系统整体采用液冷散热设计，具有充电电流大、噪声小、可靠性高的特点</p>\n<p>公司是最早在国内推广发展电能质量设备的厂商之一、全国首家低压电能质量<br>领域上市企业，形成了包括谐波和无功电流检测与控制等一系列直接应对谐波治理、<br>无功补偿、三相不平衡治理、电压暂降等问题的核心技术，技术优势明显</p>\n<p>全面覆盖电流质量、电能质量治理的低<br>压、中高压领域，产品被广泛应用于谐波治理、无功补偿、地铁储能、电<br>压暂降、保障用电安全的工业UPS 等场景</p>\n<p>储能变流器（PCS）用于储能电池和电网之间的双向电能变换及传输，是<br>储能系统中除电池外的第二大成本来源，直接决定储能系统效率与安全性，<br>作为核心装置具有广阔应用前景2022 年公司在全球市场列于第五大供应<br>商；2022 年公司在国内市场位列第七大供应商，市场份额位居前列。</p>\n<p>全产品三方认证，出海产品资质优势明显。<br>积极捕捉海外市场发展机遇，绑定优质客户共同成长相较于国内储能市<br>场，海外储能市场发展更为成熟，公司把握巨大市场发展机遇，根据海外<br>不同市场需求提供多样解决方案。（1）针对欧美市场，公司为其需量电费<br>管理与新能源消纳提供高效解决方案；（2）针对缅甸、印尼、泰国和非洲<br>等无电、弱电及偏远地区，通过灵活的模块化储能方案，建设一体化储能<br>系统，改善当地生活环境。</p>\n<p>新能源汽车充电桩产业链的上游为建设及运营充电桩所需要的元器件和设<br>备生产商，中游为充电运营商，下游为各类电动汽车用户。其中设备生产<br>商和充电运营商是充电桩产业链中最主要的环节。公司充电桩业务主要位<br>于充电桩行业链中上游</p>\n<p>行业上游：充电设备供应商竞争较充分，IGBT 国产化趋势升温。充电模块<br>是充电桩的核心设备和主要成本来源，占新能源汽车充电桩硬件成本的<br>45%-55%，其主要功能为将交流电网中的交流电转换为可以为电池充电的<br>直流电，公司自产充电模块性能优异，有效节省了充电桩生产成本。公司<br>充电桩设备上游企业主要为变压器、电度表、功率器件等原材料供应商。<br>其中IGBT 功率器件是充电模块的关键组成部分，国内如士兰微、斯达半导<br>等都在积极布局IGBT</p>\n<p>行业中下游：国企、民营并驾齐驱，市场集中度较高。经过一系列的行业<br>洗牌，部分玩家出局，充电桩市场向集中化迈进。目前，公司充电桩业务<br>下游客户主要为各类运营商。国资企业是公共桩营运市场的先行者，典型<br>代表是国家电网，依托电网广泛分布的基础设施，完成充电服务网络的建<br>设。民营运营商包括专业电气厂商或其子公司和整车厂两类，前者典型代<br>表是特锐德的子公司特来电，目前是国内最大的公共桩服务提供商；后者<br>典型代表是比亚迪，依托自身庞大的新能源汽车业务线，开展充电桩服务。<br>截至 2023 年 5 月，国内排名前十五位的公共充电桩运营商市占率共达<br>94.1%，市场集中度较高。伴随着充电行业的逐渐成熟，充电桩的发展方向<br>由最初的建设端向质量更高的运营端转移，在技术、市场、盈利模式上产<br>生大的变革。</p>\n<p>其中，荷兰、挪威计划于2025 年开始禁售燃油车；德国、瑞典、<br>比利时计划于2030 年开始禁售；英国、法国计划于2040 年开始禁售。<br>这类强制性政策将显著助推新能源车渗透率上涨。</p>\n<p>产品性能优异，持续为客户提供定制化服务。公司充电桩业务主要从事一体<br>式直流充电桩、直流充电模块、智能柔性充电堆以及交流充电桩四类产品<br>的研发、销售与运维服务。其中，一体式直流充电桩为公司主打产品，主<br>要特点为大功率快充，分为单枪与双枪式，单枪式功率为80kW，双枪式覆<br>盖功率为 60~240kW，广泛适用于商场、写字楼、公园、住宅区、大型电<br>动汽车充电站等各种场景。智能柔性充电堆也为直流快充产品，功率达<br>360kW，可进行功率智能调配，满足各功率、各容量等级的电动汽车快速<br>充电的需求。公司交流充电桩产品主要应用于小功率慢充，为住宅区、酒<br>店等场景提供充电服务，可有效延长电池寿命</p>\n<h3 id=\"化工\"><a href=\"#化工\" class=\"headerlink\" title=\"化工\"></a>化工</h3><p>气凝胶：凭借密度最小、绝热系数最高等多项吉尼斯记录，被自然杂志评价为改变<br>世界的神奇材料。气凝胶作为绝佳的保温材料，迄今为止产业化发展不到三十年，<br>且是少数国内外发展水平相近的新材料。近年随着全球碳中和、碳达峰的政策推动，<br>相关市场应用逐渐受到重视。我们认为，基于气凝胶产业目前处在快速成长期，建<br>议关注短期有技术优势和产业化能力、长期有成本下降空间的相关公司</p>\n<h3 id=\"洛阳钼业\"><a href=\"#洛阳钼业\" class=\"headerlink\" title=\"洛阳钼业\"></a>洛阳钼业</h3><p>全球第一大钴生产商，24年有望跻身前十大铜生产商</p>\n<p>铜矿生产高扰动延续，供给约束下铜价有望保持高位运行</p>\n<h3 id=\"石头科技\"><a href=\"#石头科技\" class=\"headerlink\" title=\"石头科技\"></a>石头科技</h3><p>023 年Q1-Q3 销售、管理、研发费用<br>率分别为19.68%、3.01%、7.88%，同比分别提升1.73、0.72、0.03pcts，但<br>公司费用控制明显优于科沃斯（科沃斯同期销售、管理、研发费用率分<br>别为 32.43%、3.95%、5.74%）</p>\n<h3 id=\"科沃斯\"><a href=\"#科沃斯\" class=\"headerlink\" title=\"科沃斯\"></a>科沃斯</h3><p>报告期内，公司科沃斯<br>品牌海外业务收入同比增长 26.5%，添可品牌海外业务收入同比增长 24.2%，占各自收入比重分别<br>达到 34.3%和 30.9%,较上年同期分别增加 7.1 和 3.2 个百分点。未来公司将进一步加大对海外市<br>场的投入，提升产品结构，优化渠道，扩大地域市场，推动海外营收规模的持续快速成长</p>\n<p>未来扫地机将从短中长期三个维度进行产品功能迭代。短期维度，考虑在自清<br>洁上继续升级，如解决自动上下水等仍存在空间限制、集尘和除尘部件需手动清理<br>等问题；中期维度，会针对扫地机目前存在的无法进入狭小空间、无法越障、无法<br>清洁长毛地毯等问题，做出相应改进，并提升避障精准度，如通过去除顶部激光头<br>或传感器融合的方法将扫地机机身做的更加轻薄、通过增加辅助轮或机械腿的方式<br>辅助行走以解决扫地机本身无法完成的越障问题等，同时将针对避障性、脱困性以<br>及 AI 识别功能进行算法上的持续迭代；长远来看，智能家居最终会走向集中控制，<br>形成统一的生态系统。随着物联网和云计算等技术的成熟，扫地机会与其他智能家<br>居一体化，通过智能语音、环境识别等方法，自主满足人们的需求</p>\n<p>科沃斯不断发掘其他赛道，横向拓展新兴品类，打造第三增长曲线。除洗地机<br>外，科沃斯还将技术运用于不同领域，不断拓展新品类，2021-2022 年推出了商用<br>清洁机器人、割草机、智能料理机、空气净化器等各种新品。其中，2022 年推出的<br>新品食万 3.0 智能料理机迎合了当前预制菜的热潮，在功能上进一步简化了做饭步<br>骤，此后又通过料理机、食万净菜和添可生活 APP 三大板块，搭建了智能化烹饪的<br>全链路解决方案。此外，公司还在家用扫地机的基础上，延展了商用清洁赛道，持<br>续投入商用清洁机器人的研发和布局，推出了 DEEBOT PRO K1产品。目前公司可<br>为酒店、写字楼等商业 B 端场所提供清洁专用解决方案，并创新性采用租赁模式，<br>以降低客户使用成本。通过不断横向拓展新兴品类，科沃斯有望打造第三成长曲线</p>\n<h3 id=\"闻泰科技\"><a href=\"#闻泰科技\" class=\"headerlink\" title=\"闻泰科技\"></a>闻泰科技</h3><p>闻泰科技主要从事集研发设计和生产制造于一体的产品集成、基础半导体<br>和光学业务，主要提供手机、平板、笔电、服务器、IoT、汽车电子等终端产品<br>研发制造；半导体功率器件、模拟芯片的研发设计、晶圆制造和封装测试；光<br>学模组的研发制造服</p>\n<p>2019 年闻泰科技通过收购安世半导体切入半导体业务领域</p>\n<p>2021 年闻泰科技收购得尔塔科技，进军光学模组业务领域，研发和生产应<br>用于手机、汽车电子、笔电等领域的摄像头模组。得尔塔科技前身为索尼电子<br>华南有限公司，2017 年被欧菲光收购。目前得尔塔科技在广州、珠海建有大型<br>生产基地，在日本熊本设有设备研发中心</p>\n<p>移动终端 ODM 是公司主要收入来源，收入结构持续优化。公司主营业务包<br>含移动终端 ODM、半导体 IDM、光学模组及其他三大板块，2022 年各板块收入占<br>比分别约为 68.03%、27.55%、4.42%。移动终端 ODM 为公司传统业务，虽近年来<br>占比有所下滑，但仍为主要业务收入来源；半导体 IDM 业务发展迅速，是主要<br>的盈利来源，未来占比有望进一步提高；光学模组业务在战略上补足产业链一<br>体化格局，为公司发展补全战略版图</p>\n<p>子公司半导体业务全球领先。闻泰科技旗下安世半导体以半导体 IDM 为主<br>营业务，包含芯片设计、晶圆制造和封装测试等全产业链环节，业务涵盖汽车、<br>通信、消费、工业等众多领域。安世半导体前身为恩智浦的标准产品事业部，<br>具有超过 60 年的半导体行业经验，2017 年从恩智浦剥离，2019 年被闻泰科技<br>收购。</p>\n<p>产品集成业务方面，手机 ODM 业务是公司的传统业务以及主要营收来源。<br>闻泰科技自 2006 年起从事手机方案设计，2008 年随着嘉兴生产基地投产，闻<br>泰通讯从 IDH 转型为集研发设计与生产制造为一体的 ODM，成为行业龙头。除<br>手机 ODM 外，公司的集成业务还拓展到平板、笔电、AIoT、服务器、汽车电子<br>等领域。在笔电业务上应用闻泰、安世联合推出的各类射频、通讯、 电路小型<br>化 SiP 模块产品以推进产品创新，已通过多个全球笔记本电脑客户深刻认证，<br>即将量产。通过与半导体业务联合，公司亦凭借 2U 双路机架服务器和 4U 双路<br>存储服务器等产品成功开拓服务器市场，中标多个知名客户的服务器项目，服<br>务器业务有望成为新的利润增长点。此外，公司还积极发展汽车电子业务，旨<br>在成为汽车电子行业的智能汽车和智慧出行的前装车规级解决方案提供商，为<br>客户提供从软件到硬件再到制造的一整套方案，包括但不限于智能座舱、智能<br>网联和自动驾驶领域的创新产品研发</p>\n<p>闻泰科技致力于加强各板块间业务协同合作，以打造出全产业链的一体化<br>格局，以公司提高核心竞争力。半导体业务和产品集成业务的协同有助于整合<br>通讯和半导体业务的产品、客户、供应链资源。通过与半导体业务拉通，产品<br>集成业务可以充分应用半导体业务 IDM 平台能力，引入更多功率、模拟芯片的<br>产品协同能力，从而推动 SiP 等晶圆级封装、Mini&#x2F;MicroLED、汽车电子等方<br>向的半导体技术融合创新，并以半导体能力为牵引构筑产品集成业务护城河。<br>笔电业务在高质量的模拟和逻辑芯片以及功率器件产品上也将得到更多的支持，<br>闻泰安世联合推出的各类射频、通讯、电路小型化 SiP 模块产品也有望应用于<br>笔电产品。此外，得尔塔科技具有行业领先的 Flip  Chip 晶圆级封装技术，发<br>挥其低功耗、小型化的特色，可推动车载、笔电、AR&#x2F;VR 应用落地，推动协同<br>供货手机 ODM 业务并实现光学业务的多极化增长</p>\n<p>2017-2023H1，公司实现归母净利润分别为3.29&#x2F;0.61&#x2F;12.54&#x2F;24.15&#x2F;26.12&#x2F;<br>14.60&#x2F;12.58 亿元，2018 年主要受消费电子市场低迷、收购安世股权等影响，<br>归母净利润有较大下滑，随后随着半导体业务的大幅增长，归母净利润逐年提<br>升，2022 年归母净利润下降至 14.60 亿元，较上年同期下降 44.10%，主要是由<br>业务发展所带来的销售费用和研发费用大幅增加，以及公司发行可转换公司债<br>券使得非现金利息支出增加所导致的财务费用增加所导致。2023H1，公司实现<br>归母净利润 12.58 亿元，同比增长 6.45%。</p>\n<p>半导体业务自被收购以来贡献了主要的净利润来源。分业务板块来看，<br>2020-2022 年半导体业务净利润分别为 9.88&#x2F;26.32&#x2F;37.49 亿元。产品集成业务<br>净利润下行后回暖，2020、2021 年净利润分别为 8.06&#x2F;1.84 亿元，2022 年净亏<br>损 15.69 亿元，主要原因在于全球手机和平板市场的需求低迷，但 2023 年上半<br>年扭亏为盈，实现净利润 0.07 亿元。光学模组业务 2022 年度净亏损 3.35 亿<br>元</p>\n<p>导体方面，2022 年公司半导体业务研发投入 11.91 亿元，较上年同期增<br>长 42.29%，以 加速推动技术进步与迭代，覆盖功率分立器件(IGBT、SiC 和 GaN)<br>和模块、12 英寸创新产品、模拟 IC 组合、功率管理 IC 和信号调 节 IC 等<br>方面。在化合物半导体产品方面，硅基氮化镓功率器件(GaN  FET)已通过 AECQ<br>认证测试并实现量产，在产业合作伙伴的协同下已完成 GaN  在电动车逆变器、<br>电控、电源等方案的设计工作；碳化硅技术研发进展顺利，碳化硅二极管产品<br>已经出样；IGBT 产品流片已经完成，正处测试验证阶段；新的模拟 IC 类产品<br>也正处在加速研发推进中。目前闻泰在马来西亚槟城和中国上海均开设了新的<br>全球研发中心，并扩大了位于中国香港、德国汉堡和英国曼彻斯特现有的研发<br>中心。</p>\n<p>功率半导体在新能源汽车电池动力模块中发挥重要作用。由于电动车功率<br>器件对工作电流和电压有更高要求，新增需求主要来自以下几个方面：逆变器<br>中的 IGBT 模块、DC&#x2F;DC 中的高压 MOSFET、辅助电器中的 IGBT 分立器件、OBC 中<br>的超级结 MOSFET。总的来说，混合动力汽车的功率器件占比达 40%，纯电动汽<br>车的功率器件占比达 55%。相比传统汽车，新能源车功率半导体需求提升近 9 倍，<br>功率半导体在新能源汽车领域潜力巨大<br>光伏行业是功率半导体的主要下游应用领域之一。功率半导体主要应用在<br>逆变器中,功率半导体器件 IGBT 是光伏逆变器的核心零部件。逆变器是光伏系<br>统并网的必要设备，光伏装机容量的不断增长带动逆变器行业增长，同时也为<br>功率半导体行业的持续发展提供动力。</p>\n<p>目前光学摄像头模组行业三个最主要的终端市场为手机摄像头、视频监控<br>摄像头和车载摄像头  目前车载摄像头市场处于无人驾驶与车联网市场的双风口，作为 ADAS 系统<br>的主要视觉传感器，在自动驾驶时代，车载摄像头模组用量将跟随 ADAS 系统的<br>增长而进一步增加。目前车载摄像头市场呈现持续扩张趋势，根据 TSR 咨询机<br>构数据，2021年全球车载摄像头出货量达到 185.50 百万件，年增长率达到 10%</p>\n<p>全球功率半导体市场仍主要被起步较早的美日欧厂商所把控，美日欧厂商<br>约占据全球 60%以上的市场份额。根据 Omdia 市场研究机构数据，2021 年全球<br>十大功率半导体企业分别为英飞凌、安森美、意法半导体、三菱电机、富士电<br>机、东芝、威仕、安世半导体、瑞萨、罗姆。前十企业共占据总市场份额的 57%</p>\n<p><img src=\"/image-11.png\" alt=\"Alt text\"></p>\n<p>半导体业务是公司营业收入的主要来源，公司充分发挥半导体业务在汽车<br>和工业领域的产品和技术领先优势，通过扩大产能、持续研发、垂直整合等多<br>项措施不断扩大业务规模，2022 年公司跃居全球功率分立器件半导体公司第 5<br>位。2022 年公司来自汽车领域的半导体业务收入达到 48.6%，是主要的收入方<br>向。2022 年汽车工业需求旺盛，2023 年汽车终端市场相对疲软，但在汽车行业<br>电动化智能化趋势不改的背景下，2023 年预计市场需求有所修复，行业需求持<br>续处于上行周期。工业领域半导体业务是其次的收入来源，2022 年工业领域需<br>求 相 对 平 稳 。 综 合 预 计 2023&#x2F;2024&#x2F;2025 年 半 导 体 业 务 方 面 实 现 营 收<br>155&#x2F;180&#x2F;210 亿元，同比增速达 1.35%&#x2F;16.13%&#x2F;16.67%。由于汽车需求旺盛、价<br>格坚挺，半导体业务预计维持稳定毛利率水平,2023&#x2F;2024&#x2F;2025 年毛利率维持<br>42.00%。</p>\n<p>我们预计公司 2023-2025 年营业收入分别为 650.83&#x2F;764.16&#x2F;899.83 亿元，<br>同 比 增 长 率 分 别 为 12.06%&#x2F;17.41%&#x2F;17.75% ； 归 属 母 公 司 净 利 润 分 别 为<br>26.86&#x2F;33.63&#x2F;48.34 亿元，对应增速分别为 84.01%&#x2F;25.19%&#x2F;43.74%。</p>\n<h3 id=\"九号\"><a href=\"#九号\" class=\"headerlink\" title=\"九号\"></a>九号</h3><p>自2015 年系统研发机器人产品以来，公司已积累包括室内外定位导航、机器人<br>运动控制、高精度伺服轮毂电机等机器人关键技术。（1）定位导航技术方面，公司<br>已掌握UWB 室内定位、RTK-GPS 室外定位、激光雷达&#x2F;毫米波雷达、双目视觉&#x2F;IMU<br>（视觉惯导）等核心技术。（2）避障技术方面，公司掌握激光+视觉融合、结构光摄<br>像头、超声波传感器以及内置AI 的传感器避障（可检测识别物体）关键技术。除核<br>心定位导航和避障技术外，公司亦掌握计算机视觉（识别人体数据）核心技术</p>\n<p>RMP 移动平台：2003 年 Segway 布局 RMP 业务，2015 年九号公司收购<br>Segway，2020 年九号公司自研第一代产品RMP Lite，在支撑公司内部产品研发，实<br>现对内赋能的同时，也支持二次开发或定制化服务，进而实现了外部商业落地。RMP<br>移动平台采用了九号公司 AIOT 感知技术和决策技术能力，可实现限制路况下低速<br>自动驾驶，同时采用了轮毂电机技术，可调教合适速度-扭矩曲线</p>\n<p>扫地机器人领域，应用场景为室内，石头科技和科沃斯为代表的企业避障和物<br>体识别能力要优于其他企业。石头科技和科沃斯多采用结构光避障方式配合AI 识别<br>技术，能够识别多种障碍物并根据障碍物种类做相应的避障策略，例如石头G20 采<br>用结构光+AI 识别避障，能够识别 13 类 42 种障碍物。而云鲸和小米部分机型未采<br>用AI 技术或仍采用单激光避障方式。</p>\n<p>九号两轮车较为优秀的处理运算和驾驶辅助能力主要系传统主业例如机器人、<br>滑板车底层技术和研发团队赋能。从两轮车发展史来看，公司先后自研并引入了ABS、<br>TCS 和RSC 等主动安全辅助系统。感应方面，公司进入两轮车领域伊始便引入了姿<br>态感应系统，全车多处传感器提供多种姿态识别，随后通过机器学习+AI 算法提高<br>车辆状态识别能力。控制方面，公司联合旗下公司零级创新推出了自研的鼹鼠控<br>MoleDrive，配合传感器实现坡道驻车、助力推行等智能化功能</p>\n<p>外销有望受益新品驱动，叠加内销两轮车有望高增，看好2024 年业绩反转<br>此前拖累公司业绩的小米分销和ToB渠道以及非经常性负面因素影响逐步减弱。<br>内销方面，高增两轮车品类净利率进入上升通道，2024 年扩渠道逻辑下收入和<br>利润率有望持续提升。外销方面，本次CES 展新款割草机器人、全地形车、E-Bike<br>将逐步于欧美市场销售，其中全地形车在新品驱动下北美经销商网点拓展顺利，<br>我们看好强产品竞争力驱动2024 年各品类收入增长以及盈利提升</p>\n<h3 id=\"联创光电\"><a href=\"#联创光电\" class=\"headerlink\" title=\"联创光电\"></a>联创光电</h3><p>公司是由江西省电子集团整合旗下部分优质军工资产<br>设立，军工底蕴浓厚。</p>\n<p>联创光电：深耕光电领域20 余载，聚焦超导与激光实现转型升级<br>公司深耕光电领域二十载，是“国家火炬计划重点高新技术企业”、  “国<br>家863 计划成果产业化基地”，近年来围绕“进而有为，退而有序”的经<br>营方针，加速剥离背光源与电缆业务，重点打造激光和超导等新兴产业。</p>\n<p>高温超导具有显著成本优势，适合大范围商业化应用，应用场景包括超导<br>感应加热、可控核聚变、高温超导单晶硅生长炉等。在超导感应加热方面，<br>高温超导感应加热设备有着高穿透、高能效、高均匀性、高梯度性的优势，<br>市场潜力巨大。在可控核聚变领域，高温超导能大幅降低托卡马克装置的<br>建造周期、体积和造价，可加快可控核聚变商业化应用。</p>\n<p>深耕光电领域二十余载，积极布局“超导+激光”焕发生机。江西联创光电科技股份有限<br>公司于1999 年6 月设立，2001 年3 月在上交所上市。公司是“国家火炬计划重点高新技<br>术企业”、“国家技术创新示范企业”、“国家863 计划成果产业化基地”，致力于成为<br>科技领先型企业。公司深耕光电领域二十余年，近年来公司围绕“进而有为，退而有序”<br>的经营方针，重点打造激光和超导两个高科技新兴产业。在光电领域，公司积淀形成了良<br>好的光电子产业基础和产业转化能力，产品布局包括智能控制部件、背光源及应用、电线<br>电缆等产业板块；在激光领域，2019 年11 月公司设立江西中久激光技术有限公司，通过<br>产研融合的方式实现激光反无人机领域全产业链布局；在超导领域，联创超导于 2019 年<br>成功研制世界首台兆瓦级高温超导感应加热装置，为工业热处理行业提供了一种全新的、<br>具有颠覆性变革的技术创新应用。同时，公司基于已掌握的高温超导磁体技术积极布局于<br>可控核聚变、磁控单晶硅生长炉等领域，目前已组建团队开展相关研究。</p>\n<p>背光源与电缆业务：毛利率下降趋势明显，公司加速剥离背光源与电缆业务</p>\n<p>激光与超导：多年光电积淀，激光+超导两大新兴产业齐发力。激光方面，公司2019 年设<br>立子公司中久激光，并于2020 年4 月成立中久光电产业研究院。目前公司已形成了从“泵<br>浦源”器件产品到“激光器”集成产品，再到“光刃系列”整机产品的完整的产品体系。<br>2023 年上半年，激光产品实现主营业务收入 1.20 亿元、净利润  0.32 亿元，较上年同期<br>分别增长 14.49%和 33.9%；高温超导方面，目前由参股子公司联创超导开展超导业务，<br>研发团队自 2013 年开始研发兆瓦级高温超导加热设备，交付予中铝东轻的首台设备投产<br>标志着公司在高温超导领域取得重大进展，截至2022 年12 月31 日超导感应加热设备订<br>单已超过60 台，公司预计超导产业园达成后，高温超导产品年产能有望达到500 台以上。</p>\n<p>我们认为，公司聚焦激光、超导两大未来主业优化产业结构已初见成效，激光产业产能快<br>速释放，未来营业收入有望持续增长</p>\n<p>激光等高毛利业务放量叠加背光源与线缆等低毛利业务剥离，有望驱动公司盈利能力稳步<br>提升。归母净利润方面，2022&#x2F;2023H1 公司实现归母净利 2.67&#x2F;2.15 亿元，同比增长<br>15.41%&#x2F;20.06。毛利率方面，2022&#x2F;2023H1 年公司实现整体销售毛利率14.73%&#x2F;18.08%，<br>继续保持稳步提升趋势。分板块来看，2022 年公司智能控制&#x2F;背光源&#x2F;激光系列产品的毛利<br>率分别为 16.75%&#x2F;4.49%&#x2F;35.83%。费率方面，公司期间费用整体控制有效，研发支出保<br>持稳定。2022&#x2F;2023H1 期间费用率为 15.76%&#x2F;13.49%，整体呈下降趋势；2022&#x2F;2023H1<br>年研发费用分别为 1.66&#x2F;0.71 亿元，研发投入保持稳定。我们认为，随着公司激光等高毛<br>利业务放量叠加背光源与线缆等低毛利业务剥离，未来公司盈利能力有望持续提升。</p>\n<p>超导可以分为低温超导、高温超导与室温超导，高温超导具备成本优势。超导是指某些物<br>质在环境温度降至某一临界温度以下时，电阻突然变为零的现象。</p>\n<p>低温超导材料一般都需在昂贵的液氦环境下工作，而高温超导材料临界温度较高，可以在液氮环境中工作，目前<br>工业液氮制冷已较为成熟，一吨液氮的价格稳定在一千元以下，适用范围广且价格低廉；<br>室温超导要在 1GPa（1 万倍左右的大气压）下才能够实现超导态，而实现高温超导的制<br>冷成本低于加压到1GPa 的成本，整体来看，我们认为高温超导实现产业化应用的前景更<br>为广阔</p>\n<p>超导材料具有三大独有特性：零电阻、完全抗磁性、量子隧穿效应</p>\n<p>目前高温超导产业化应用得到了实质性发展，高温超导感应加热、高温超导单晶硅生长炉、超导磁<br>储能、可控核聚变等领域的市场空间也将逐步打开。 </p>\n<p>效率优势：高温超导感应加热能效转化率最高达 85%，相比传统加热炉提升一倍以<br>上。传统的工频炉在加热时大量的热能消耗在产生磁场的铜线圈上，并没有注入工件<br>体内，因此加热效率仅为40%左右。超导感应加热由于利用了超导材料零电阻的特性，<br>产生强磁场过程中只有低温制冷损耗、机械传动损耗等，因此可以将加热能效大幅提<br>升到最高85%</p>\n<p>加热质量优势：高温超导感应加热的透热深度与加热均匀度显著提高。感应炉的加热<br>功率正比于磁场强度与加热频率的乘积，由于超导感应加热炉的磁场是传统工频炉的<br>100 倍以上，使得超导炉可以实现5Hz 左右的极低频的加热，透热深度与加热均匀度<br>显著提高。在透热深度上，高温超导感应加热将传统工频炉 10mm 的透热深度大幅<br>提升至200mm 以上；在加热均匀度上，高温超导感应加热的感应电流可直接整体加<br>热工件内部，可以对大尺寸金属工件进行表芯同步快速均匀加热</p>\n<p>节能优势：由于高温超导感应加热可以将加热能效大幅提升到 85%，这就意味着一<br>台加热功率为1mw 的高温超导加热设备可以替代掉传统2.5mw 的工频炉，一年可节<br>省超600 万度电，此外还能节省电力增容费和未来的碳排放指标等。</p>\n<p>经济性分析：高温超导感应加热综合运营成本低，投资成本回收快。高温超导感应加<br>热设备的设备投资成本高于传统大功率感应加热设备，但其综合运营成本低。以运营<br>成本中的外围设备电费为例，传统设备需配置大功率水冷机组，而超导直流感应加热<br>器所用超导线圈基本无能耗，因此外围辅助设备电力成本远低于传统交流感应加热设<br>备。得益于优越的能效表现和较低的营运成本，高温超导直流感应加热设备只需2-3<br>年就可收回全部设备投资成本</p>\n<p>高温超导感应加热及相关磁体技术应用范围广，市场潜力大。高温超导感应加热设备可广<br>泛用于铝、铜、镁、钛、特种钢材、高温合金等非磁金属加工热成型领域（包括挤压、锻<br>造、轧制等）、金属熔炼及半导体熔融等领域，</p>\n<p>激光系统：高功率激光器市场规模稳步提升，激光反无人机装<br>备需求旺盛</p>\n<p>刃整机：成本优势明显，未来产品矩阵有望持续丰富。公司光刃系列激光反制无人<br>机系统主要包括“光刃-I”和“光刃-II”两大产品，具有明显的技术优势。同样的<br>杀伤效果，公司产品重量更轻、体积更小，因此在合理利润空间下公司产品成本优势<br>较为明显。目前，第一代新型激光反制无人机产品生产线现已配置，并已完成其改进<br>设计、研制工作，且顺利通过专家组验收评审；第二代新型激光反制无人机产品顺利<br>完成研制并通过验收。我们认为，公司基于已掌握的激光核心技术加速产品研发与迭<br>代，未来光刃整机产品矩阵有望持续丰富</p>\n<p>公司在手订单充足，产能迅速扩张。激光业务是公司重点发展的高科技新兴产业，激光产<br>业持续高速增长。中久激光订单充足，产能饱满，泵浦源、激光器、激光电源等项目产能<br>已处于满负荷生产状态。根据业务发展规划，公司今明两年将加速增扩产能。我们认为，<br>公司激光业务订单饱满，已进入高速增长阶段，随着产能持续扩张，未来激光业务有望持<br>续发力。</p>\n<p>公司深耕光电领域二十载，在传统业务退而有序的同时，加速布局高温超导与激光系统两<br>大“大国重器”，盈利能力有望持续提升，并打开公司长期成长空间。我们预计公司<br>2023-2025 年营收分别为31.97、34.64、37.77 亿元，归母净利润分别为4.71、6.25、7.85<br>亿元，对应EPS 分别为1.04、1.37、1.73 元</p>\n<h3 id=\"寿仙谷\"><a href=\"#寿仙谷\" class=\"headerlink\" title=\"寿仙谷\"></a>寿仙谷</h3><p> 公司核心产<br>品破壁灵芝孢子粉采用独创的“四低一高” 超音速低温气流破壁技术， 提<br>高了破壁率， 也避免了重金属污染和物料氧化</p>\n<p> 随着我国人口老龄化加深， 灵芝孢子粉和铁皮石斛<br>等药食同源中药因具有积极的免疫调节功效而具备市场潜力</p>\n<p> 灵芝所含功效活性成分十分丰<br>富， 主要包括多糖类、 三萜类、 核苷酸、 甾醇、 生物碱、 脂肪酸等。 灵芝多糖和三萜类含量<br>是灵芝类作为中药饮片或保健食品的主要功效评价指标， 灵芝孢子是灵芝子实体的有性生<br>殖细胞， 主要有效成分含量高出灵芝 75 倍， 具有抑制肿瘤、 提升免疫力、 抗氧化、 保肝护<br>肝和调节血糖等药理作用， 但其细胞壁主要由坚硬的几丁质构成， 人的消化系统不易分解，<br>因此有必要对灵芝孢子粉进行破壁处理。 </p>\n<p>铁皮石斛常被用于身体保健及治疗临床复杂性、 慢性疾病， 具有消<br>炎去热、 养阴生津、 补益脾胃、 润肺止咳等功效。 铁皮石斛化学成分复杂， 据研究表明， 铁<br>皮石斛内含有多重有效活性成分， 包括多糖、 酚类、 生物碱， 还有木质素等， 具有增强免疫、<br>降低血糖、 降脂、 抗炎、 抗氧化、 抗肿瘤等作用。 </p>\n<p>多糖被认为可以提高免疫力，这是因为多糖具有免疫调节作用。多糖可以刺激机体免疫系统的活性，增强免疫细胞的功能，促进免疫细胞的增殖和活化，从而增强机体的抵抗力，提高免疫功能。多糖还可以调节免疫系统的平衡，增强机体对病原体的识别和清除能力，有助于预防和治疗疾病。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>建议关注鼎龙股份，公司是国内唯一一家全面掌握 CMP 抛光垫全<br>流程核心研发技术和生产工艺的 CMP 抛光垫供应商，在国内抛光<br>垫市场中处于领先地位</p>\n<p>建议关注濮阳惠成，公司专注顺酐酸酐衍生物和功能中间体产品的<br>研发和生产，受益于我国电子信息产业的快速发展、我国智能电网、</p>\n<p>重点推荐合盛硅业，公司在工业硅及有机硅产业链完整，具备规模<br>优势、成本优势，上下游协同效应有望持续加强，随着在建项目的稳<br>步推进，公司业绩有望持续向好。 v </p>\n<p><img src=\"/image-3.png\" alt=\"Alt text\"></p>\n<p>美现役战斗机均为较为领先的三代机和四代机，占比分别为 83%和 17%，而我国<br>仍有近 50%的二代机亟需替代,四代机仅有 19 架，占比约为 2%，远低于美国。另外，当前美<br>国战斗机仅有重型和中型，而我国战斗机中轻型战斗机占比仍然较高；我们认为当前航空装<br>备需求迫切且确定性高，未来方向是数量升+结构优</p>\n<p><img src=\"/image-4.png\" alt=\"Alt text\"></p>\n<h3 id=\"特步-股息\"><a href=\"#特步-股息\" class=\"headerlink\" title=\"特步  股息\"></a>特步  股息</h3><p>盖世威将推出专业网球运动体育用品，<br>以强调品牌的网球基因，而帕拉丁将推出反映年轻消费者喜好的产品<br>截至2023H1，公司鞋履自产占比28%、外包占比72%；服装自产占比12%、<br>外包占比 88%。</p>\n<p>特步主品牌同增高单位数，其中竞速系列销量同增 90%，抖音店播同增<br>73%；索康尼同增 98%，系天猫运动鞋行业头部品牌增速第一；迈乐同增<br>101%，徒步鞋品类销售同增 150%，MOAB3 登短途登山鞋热卖榜第一；<br>盖世威同增 149%，京东平台同增 297%；帕拉丁同增 114%，其中服装同<br>增1305%，抖音同增243%。</p>\n<p>时尚运动方面，盖世威和帕拉丁在中国内地进行全面品牌重塑，升级产品<br>组合和店铺布局，成功增强品牌知名度及大幅提升店效；加快在中国内地<br>高线城市的开店步伐。盖世威拟推出专业网球运动产品，强调品牌网球基<br>因；帕拉丁增强对年轻消费者的吸引力，改善产品供应和零售网络。</p>\n<h3 id=\"森马服饰-股息\"><a href=\"#森马服饰-股息\" class=\"headerlink\" title=\"森马服饰 股息\"></a>森马服饰 股息</h3><p>目前出海仍面临资金管制、文化壁垒、政策动荡等多重障碍，<br>落地和执行尚需时日，但二次出海成功确定性明显增强，原因主要在于，第一，国内市场增<br>长放缓，寻找海外增长空间成为共识，疫后全球经济逐步复苏；第二，公司是国内休闲服饰<br>和儿童服饰的龙头，森马和巴拉巴拉品牌享有高知名度，对海外代理商有较强的吸引力；第<br>三，公司前期积累的出海经验成为宝贵的无形资产，可以帮助规避“合作摩擦”，适应“国<br>际本土化”；第四，路径上，公司选择将东南亚、中东作为重点开拓的区域市场，三处区域<br>市场位于“一带一路”沿线，具备政策友好、消费活跃、品牌服饰萌芽等明显优势</p>\n<p>柔性供应链的价值在于提高售罄、减少库存、提升周转。供应链之于时尚品牌是底盘和<br>生命线。得益于优质供应商的稳定合作、订货制改革以及数智化升级，公司的快反周期由<br>2000 年初的 3 个月缩短至 2 周以内，逼近优衣库、H&amp;M、ZARA 等国际快时尚企业快反水<br>平，2018-2022 年公司的库存压力、存货减值保持在健康可控状态</p>\n<p>公司的资本性支出以投资和股利分配为主，2018 年收购Kidiliz 占用8.44<br>亿元，分红常态化且分红比例领跑同行，近五年分红比例为 75%+。</p>\n<p>存量博弈、红海持续的新背景下，依托品牌势能、渠道壁垒以及柔供等全方面领<br>先优势，公司有望在渠道变革和海外探索机遇上取得新突破，引领业绩量质齐升</p>\n<p>柔供是当下解决产销不对称的最好方式。服装行业产销不对称，天然会造成库存。柔供<br>成于优衣库，被国内服装品牌竞相学习，极致于 Shein，凭借小单快反最大化抵消时间差，<br>仍然是当下解决产销不对称的最好方式。柔供帮助公司渡过行业库存危机时期，同时将库存<br>控制在可控范围内，当前库存问题主要是疫后的动销转弱所致规模是柔供的必要条件。长期稳定的产供合作关系可以提前锁定供应商产能和进行快速<br>匹配，小单快反对供应商提出更大的成本挑战，需要通过采购规模来平衡。中小企业实现柔<br>供的难度较大，公司的营收体量居于头部水平，优质供应商采购集中度持续提升</p>\n<p>电商主推线上线下同价，盈利提升。2022 年服装线上渗透率为 37%，近 3 年仅增长 3pp。<br>公司一方面积极布局抖音等机会赛道；另一方面，主推线上线下同价，营收阶段性受损，但<br>盈利明显提升，2023H1 线上毛利率为 41.68%，较 2019 年提升 10.93pp。线上线下同价是<br>平衡电商和门店利益的稳态格局，越来越多企业达成共识，头部企业先行，中小企业跟随，<br>业绩逐渐从“增收不增利”过渡到“营收滞后于盈利”，最终实现“量质齐升”</p>\n<p>公司作为休闲服饰和童装的双龙头，品牌、渠道壁垒和柔供能力突出。巴拉巴<br>拉二三线购物中心加密、森马基本店+家庭店试水、出海进展成为重要成长机遇。预计<br>2023&#x2F;2024年公司归母净利润分别为11.1&#x2F;15.5亿元，同比增速为74.67%&#x2F;39.16%，对应<br>EPS为0.41&#x2F;0.57元&#x2F;股，对应P&#x2F;E为14&#x2F;10倍。首次覆盖，给予“买入”评级</p>\n<p>分产品看，巴拉巴拉品牌是国内童装龙头，童装修复<br>速度预计好于成人休闲装（23H1 童装&#x2F;成人装收入增速分别同比-<br>15.06%&#x2F;+6.34%）。单季度来看，公司 23Q1&#x2F;Q2&#x2F;Q3 营业收入分别同比-<br>9.3%&#x2F;+9.7%&#x2F;+1.1%，受基数、天气及消费弱复苏等因素影响，收入恢<br>复节奏存在季度波动；归母净利润分别同增48.9%&#x2F;295.8%&#x2F;89.4%</p>\n<p>毛利率提升明显，存货规模同比改善。盈利能力：23Q1-Q3 公司毛利<br>率同比+3.71pcts 至 44.13%，预计主因公司有效控制终端折扣，线上、<br>线下同款同价比例提升且毛利率更高的直营渠道收入占比提升</p>\n<p>存货：截至23Q3，存<br>货规模同比-21.78%至36.53 亿元，公司有望在Q4 销售旺季及促销节日<br>加大存货清理力度，优化新老品结构，助力明年轻装上阵。</p>\n<h3 id=\"地产\"><a href=\"#地产\" class=\"headerlink\" title=\"地产\"></a>地产</h3><p>今年1-11 月住宅竣工面积同比+18.5%，2024H1 竣工仍有望延续韧<br>性，支撑明年家装需求稳健释放。</p>\n<p>2023 年 1-11 月，房屋新开工面积 8.75 亿平方米，同比-21.66%。<br>2023 年 1-11 月，房屋累计施工面积 83.13 亿平方米，同比-7.20%</p>\n<p>根据中指重点监测的100城数据，2023年，一线城市新<br>建商品住宅累计销售面积同比小幅增长约4%，市场整体<br>稳定；二线、三四线代表城市同比分别下降4%、11%</p>\n<h3 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h3><p>酒就两个用途，一，上级驯服属下的测试工具。二，味觉退化或酒精上瘾的中老年男士。真是人间清醒，一针见血，振聋发聩。</p>\n<p>制造端汇聚中东，推动光伏产业发展。光照资源优势、制造成本低廉和电价补贴等政策计划向好带来光伏<br>市场新机遇，吸引TCL中环、协鑫科技、天合光能等中国厂商纷纷加速布局中东。中东1-11月累积进口13<br>GW中国组件，同增约71%，超越22年8.4GW拉货量，预计仍将保持高速增长，市场前景广阔</p>\n<p>产能释放供给过剩，各环节将加速下跌至成本线，预计价格持续低位。二三线加快出清，盈<br>利或在24年中见底，龙头阿尔法逐渐体现</p>\n<p>硅料瓶颈解决， 24年硅片过剩进入激烈竞争阶段。据我们统计，24年底硅片产能合计1068GW，<br>对应可供装机890GW，由于石英砂相对紧张，硅片盈利有支撑<br>◆ 硅片两超多强，格局相对稳定。我们预计24年隆基&#x2F;中环市占率27%&#x2F;25%，CR2约为52%。</p>\n<p>BC结构由于正面无遮挡，天然具备效率<br>优势。在单面市场，爱旭ABC组件功率610W+，高于同版型TOPCon30W，效率优势明显。<br>在 双 面 市 场 ， 爱旭ABC 依靠背面银浆方案，双面率可达70% ，随24 年中&#x2F; 底成本打平<br>TOPCon&#x2F;PERC，竞争优势持续凸显</p>\n<p>与TOPCon在不同版型下对比，HJT均拥有更高组件效率及功<br>率瓦数，标准版型领先约10W优势。。受益于效率及发电性能优势，同时当前HJT外销规模<br>较小，报价1.28元&#x2F;W，较TOPCon1.03元高0.25元&#x2F;W，整体溢价明显。</p>\n<p>钙钛矿效率持续提升，稳定性逐步验证中。截至23年底，钙钛矿头部组件厂效率陆续突破<br>18%：极电光能1.2*0.6m单节组件效率18.2%，并通过IEC61215&#x2F;IEC61730测试；协鑫光电<br>1m×2m量产效率破18%。GW级产线陆续启建，预计24年量产效率可达20%+。</p>\n<p>中期，2024 年春季来临，需求复苏，TOPCon 技术持续迭代过程<br>中，出货量与利润分化将持续；c）中长期看，龙头扳手腕持续，优<br>质企业将在低谷时期保持扩张节奏，市占率进一步提升</p>\n<h3 id=\"晶盛\"><a href=\"#晶盛\" class=\"headerlink\" title=\"晶盛\"></a>晶盛</h3><p>公司前三季度实现营业收入134.62亿元,同比增长80.39%;归母净利润35.14亿元,同比增长74.94%。<br>未完成设备订单287.50亿元,其中半导体设备订单33.03亿元。</p>\n<p>石英坩埚、金刚线等硅材料业务快速放量，多领域材料实现突破</p>\n<p>凭借单晶炉较高市占率，公司拓展石英坩埚、金刚线等耗材业务。受石英砂<br>紧缺及需求高增影响，21 年 9 月至今光伏石英坩埚价格增长约 900%，2024<br>年高价有望维持。据我们测算，24-25 年国内石英坩埚年均市场市场有望超<br>400 亿元，23-25 年 CAGR 为 29.3%。公司 22 年市占率约 19.6%，未来有<br>望依托“超级坩埚”进一步巩固坩埚龙头地位。金刚线细线化成为趋势，钨<br>丝金刚线有望成为主流。我们预计 25 年金刚线国内市场规模 123.9 亿元，<br>23-25 年 CAGR 14.8%。公司自制钨丝母线并积极扩产，有望实现弯道超</p>\n<p>公司碳化硅衬底进入大规模量产倒计时，碳化硅外延设备市占率领先<br>据 Yole，全球 SiC器件市场规模 2027年有望达 63.0亿美元，21-27年 CAGR<br>为 34%，其中碳化硅衬底占器件成本达 47%。公司依托泛半导体长晶技术，<br>6 英寸衬底良率、性能等指标位于行业头部梯队，现已形成 5000 片&#x2F;月产能，<br>核心设备如长晶炉等均为自制，并拓展 8 英寸衬底。公司预计在 25 年实现<br>25 万片 6 英寸及 5 万片 8 英寸衬底年产能。碳化硅外延片对外延设备要求<br>较高，公司 6 英寸双片式碳化硅外延设备已实现批量销售，市占率位居国内<br>前列，8 英寸单片式碳化硅外延设备处于客户验证中。衬底与外延设备有望<br>在外延厂发挥协同作用，助力公司强化碳化硅布局。</p>\n<p>衬底片性能优越，与中芯集成等达成合作</p>\n<p>光伏设备是晶盛机电成长的第一曲线，第二曲线是光伏耗材<br>和半导体耗材的放量，第三曲线是碳化硅设备+材料和半导体设备的放量。我们维<br>持公司2023-2025 年归母净利润为47&#x2F;58&#x2F;70 亿元，对应PE 为11&#x2F;9&#x2F;8 倍，维持“买<br>入”评级。</p>\n<p>低氧技术是单晶炉下一步迭代方向，超导磁场单晶炉降氧效果显著</p>\n<p>第五代超导单晶炉夯实公司单晶炉龙头地位，设备延伸至光伏全产业链布局</p>\n<p>半导体硅片生产设备中，单晶炉投资占比 25%，有望率先实现进口替代。从产业链来看，<br>芯片的生产环节包括硅片制造、晶圆制造、封装测试，对应的设备包括硅片制造设备、前<br>道工艺设备（晶圆制造）、后道工艺设备（封装测试）。根据集微咨询预计，20-22 年中国大<br>陆硅片设备需求约 570-800 亿元，其中长晶设备约占设备总投资的 25%，则对应的单晶炉<br>市场规模为 140-200 亿元。根据中商产业研究院，目前半导体用单晶炉国产化率不足 20%，<br>随着国内企业在拉晶环节持续突破，有望率先实现进口替代</p>\n<p>蓝宝石是一种氧化铝单晶，由于具有强度大、硬度高、耐腐蚀等特点</p>\n<p>公司半导体石英坩埚的主要客户为中环领先、上海新昇、奕斯伟等公<br>司，光伏石英坩埚的主要客户为 TCL 中环、晶科能源、弘元新材料等</p>\n<p>公司自制钨丝母线降低成本，积极扩产迎合行业扩容 </p>\n<p>碳化硅衬底良率是考核企业产品性能及经济性重要指标，大尺寸衬底是行业趋势。SiC 衬<br>底制备重难点主要是晶体生长和切割研磨抛光环节，是整个衬底生产环节中的重点与难点，<br>成为限制碳化硅良率与产能提升的瓶颈。加工的难点在于碳化硅材料硬度高、脆性大、化<br>学性质稳定，因此传统硅基加工的方式不适用于碳化硅衬底.目前 4 英寸、6 英寸主要采用<br>多线切割设备，将碳化硅晶体切割成厚度不超过 1mm 的薄片。</p>\n<p>公司导电型碳化硅衬底已形成 5000片&#x2F;月产能，新增 30万片产能建设，核心设备均为自制。<br>2017 年公司开始碳化硅晶体生长设备和工艺研发，公司坚定电阻法技术路线，在切片环节<br>引入激光切割与多线切割设备并行，并在 2020 年开始建立长晶实验线和中试线，相继开发<br>6 英寸、8 英寸碳化硅晶体和衬底。目前公司中试线形成月产 5000 片 6 英寸衬底产能。公<br>司长晶和核心加工设备均为自制，设备国产化率达到 90%以上，实现了 6 英寸-8 英寸碳化<br>硅晶体生长和加工技术的自主可控。据晶盛机电微信公众号显示，公司于 2023 年 11 月 4<br>日举行签约仪式，预计新增产能 25 万片 6 英寸碳化硅衬底、5 万片 8 英寸碳化硅衬底。</p>\n<p>公司 6 英寸碳化硅衬底达到业内一流水平，8 英寸衬底 2024 年实现与 6 英寸品质同步。截<br>至 2023 年 11 月公司碳化硅投产签约仪式，公司中试线产出的 6 英寸碳化硅衬底片在直径、<br>微管密度、位错、电阻率、弯曲度、翘曲度等关键参数均达到或者优于业内技术水平。产<br>品已获得下游领先企业的验证和认可，已签约并交付批量订单。从具体指标来看，量产改<br>善方面，公司 6 英寸核心缺陷快速迭代改善下降，量产 TSD 稳定＜100，BPD＜400，达<br>到业内一流水平，最新研发成果方面，位错持续改善，研发试产基本稳定实现 TSD＜10，<br>BPD 小于 50。8 英寸方面，公司已实现 8 英寸产品小批量生产+下游验证，可供应高质量<br>500um 和 350um8 英寸碳化硅衬底，全产线可实现 6-8 英寸碳化硅衬底。目前公司全产线<br>可实现 6 英寸和 8 英寸产品兼容，公司预计 2024 年可实现 8 英寸产品与 6 英寸产品品质<br>达到同步</p>\n<p>碳化硅设备：碳化硅外延设备国产替代空间广阔，公司外延设备国内市占率领先 </p>\n<p>外延片占碳化硅器件产业链成本 23%，仅次于碳化硅衬底。碳化硅晶体生长的过程中会不<br>可避免地产生缺陷、引入杂质，导致质量和性能不足，而外延层的生长可以消除衬底中的<br>某些缺陷，使晶格排列整齐。与传统硅器件不同，碳化硅器件不能直接制作在衬底上，需<br>要在衬底上生长一层晶相同、质量更高的单晶薄膜(外延层)  ，再制作器件。外延可分为①<br>同质外延：在导电型 SiC 衬底生长 SiC，常用于低功率器件&#x2F;射频器件&#x2F;光电器件；②异质外<br>延：在半绝缘 Sic 衬底生长 GaN，常用于高功率器件。根据前文数据，2023 年外延片占碳<br>化硅器件产业链成本约 23%，仅次于碳化硅衬底</p>\n<p>碳化硅外延工艺难度大，份额主要被国外厂家占据，天成、天域引领国产替代。碳化硅外<br>延会复制衬底的晶体结构，因此外延层缺陷包括来自衬底的缺陷，以及生长过程的位错以<br>及宏观缺陷。据 Yole 数据，2020 年 Wolfspeed  与昭和电工分别占据全球碳化硅导电型外<br>延片市场 52%和 43%的市场份额，合计高达 95%。国内碳化硅外延厂商较少，瀚天天成和<br>东莞天域引领国产替代。</p>\n<p>碳化硅外延设备国产替代加速，以晶盛机电、北方华创、中电科 48 所为代表。国内外延设<br>备由国外厂商主导，国内主打外延设备以意大利的 LPE、德国的爱思强、日本的 Nuflare<br>产品为主。国内厂商则以晶盛机电、北方华创、中电科 48 所为代表。1）晶盛机电：SiC<br>外延设备为公司独立研发设计和生产制造，核心技术均拥有独立的知识产权，目前已实现<br>批量销售。2）北方华创：具有 10 余年外延设备研发的技术积累，目前 4&#x2F;6 吋 SiC 外延设<br>备已签订单超百台，批量机台已在各大主流外延厂实现稳定量产。3）中电科 48 所：陆续<br>开发出碳化硅外延设备、高温高能离子注入机、高温激活炉、高温氧化炉，并持续研发第<br>二代、第三代机型，其碳化硅设备已在生产线应用&#x2F;签订合同百余台套</p>\n<p>由于设备中标到设备商确认收入要经历生产、运输交付、客户验证等过程，我们认为由于<br>近年来硅片扩产较快，公司订单生产交付及验收周期拉长，收入确认节奏慢于签单速度，<br>造成公司在手订单持续增长。随着公司在手单晶炉订单逐步确认收入，以及公司半导体和<br>碳化硅设备，光伏电池、组件设备陆续放量，丰富的在手订单有望支撑公司设备收入稳健<br>增长，但通过上文测算，我们认为单晶炉整体市场可能在 24 及 25 年逐渐收缩，公司光伏<br>设备在手订单有下降风险，但由于在手设备订单仍较多，公司收入预计仍将增长，但 24-25<br>年收入增速将有所下降。 </p>\n<p>公司材料板块主要包含光伏石英坩埚、金刚线、蓝宝石，碳化硅衬底等，光伏石英<br>坩埚为材料板块主要收入来源。坩埚用量随硅片产量提升而提升，且 N 型硅片占比提升有<br>望提升坩埚用量。价格方面，根据 solarzoom 数据，36 英寸光伏石英坩埚最新价格为 42000<br>元&#x2F;只，根据美晶新材招股书，预计 2024 年石英砂仍短缺，24 年石英坩埚平均价格维持在<br>高位，25 年随着原材料扩产，价格下降 20%。公司钨丝金刚线及碳化硅衬底随着产能释放，<br>收入有望逐步增长，蓝宝石业务下游竞争较为充分，预计收入将保持稳定。</p>\n<p>公司新业务拓展不顺利：若钨丝金刚线得不到下游客户广泛认可，渗透率提升不及预期，<br>新建产能可能造成产能闲置，不利于公司整体经营。此外，公司碳化硅衬底、半导体设备<br>等业务技术壁垒较高，公司存在新业务拓展不顺利的风险。</p>\n<h3 id=\"现金流\"><a href=\"#现金流\" class=\"headerlink\" title=\"现金流\"></a>现金流</h3><ol>\n<li>2.4-1.4&#x3D;1+0.8&#x3D;1.8 *6</li>\n</ol>\n<h3 id=\"榨菜\"><a href=\"#榨菜\" class=\"headerlink\" title=\"榨菜\"></a>榨菜</h3><p>1.受大消费市场持续疲软影响,产品终端动销放缓;2.二季度公司对部分终端老日期产品进行了促销拉动,并放缓了部分经销商的调货; 3.同期部分销售大区受疫情<br>影响,居民备货及居家消费频次增加,销售基数增加,报告期该因素消除销售量同比下降;4.餐饮行业恢复短期对家庭消费带来影响。</p>\n<h3 id=\"牧原股份\"><a href=\"#牧原股份\" class=\"headerlink\" title=\"牧原股份\"></a>牧原股份</h3><p>公司屠宰肉食板块 2023 年在渠道的开拓与客户的发掘上取得一定成效，全年<br>屠宰生猪在 1,300 万头以上，同比增长 80%左右，但距离理想产能利用率仍有一定<br>差距。由于东北厂区投产时间短，产能利用率较低，头均固定成本较高，当前屠宰<br>肉食业务仍处于亏损状态，但整体头均亏损水平已较 2022 年明显下降。2024 年，<br>公司屠宰肉食板块会加强销售能力建设，优化产品结构与客户结构，同时加强内部<br>生产、运营、销售等板块的协同，以提升整体盈利能力。</p>\n<h3 id=\"榨菜-1\"><a href=\"#榨菜-1\" class=\"headerlink\" title=\"榨菜\"></a>榨菜</h3><p>这次定增就是要扩大收储能力，平抑价格波动，同时深度绑定青菜头种植户，实现传统农业升级，提高当地农民种植收入，助力乡村振兴，实现共同富裕。公司的发展，更要关心的是新上任的管理层，定增项目能否顺利落地，未来的发展规划。公司的负债率极低，可以说是家庭作坊式的生产模式，未来可以锚定周转率的进一步提高，匹配中央厨房的发展趋势，适当提高负债率，协同提升roe水平。几块钱的消费升级的生意，长期看空间还是很大的</p>\n<p>从量方面，目前榨菜产能13-15万吨，基本满产满销，预计扩产20万吨，约1.5倍，预计回报5亿&#x2F;年。不扩产净利润9亿；扩产带来的净利润空间6-14亿，其中滞销带来的资产投入计提净利润约6亿，满产满销约14亿</p>\n<p> 给15-20倍市盈率，按最低净利润估值，6×15&#x3D;90亿，6×20&#x3D;120亿，区间90-120亿。<br>按满产满销净利润估值，14亿，14×15&#x3D;210亿，14×20&#x3D;280亿</p>\n<h3 id=\"制冷剂\"><a href=\"#制冷剂\" class=\"headerlink\" title=\"制冷剂\"></a>制冷剂</h3><p> 制冷剂行业经历了连续三年的低迷状态，具有利润修复的诉求。在配额基准期内，制冷剂生产企业连续 3 年，通过低<br>价、低利润甚至是负利润来抢占更多的市场份额，导致企业连续三年制冷剂业务承担了巨大的利润压力，很多小型企<br>业难以长期坚持。度过配额锁定阶段后，国内配额形成了供给端限制，使得制冷剂具有涨价基础，行业的企业具有通<br>过涨价获得利润修复的诉求，且由于具有配额限制，并不担心行业内形成新的进入者，行业利润有望获得较大程度的<br>提升。</p>\n<p>四代制冷剂主要以海外巨头供应为主，国内受专利、设备、价格等因素影响，短时间内难<br>以大规模推广。四代制冷剂（HFOs）在 ODP 值、GWP 值等环保指标方面优于三代制冷剂，<br>且物理性质、制冷性能等方面能够做到与三代相近，在少数领域已经开始有所应用。以四<br>代制冷剂目前的主流品种 HFO-1234yf 为例，HFO-1234yf 在热力特性和能效等方面已经与<br>HFC-134a 接近，可以作为汽车空调使用的新一代制冷剂。</p>\n<p>海外巨头构筑了四代制冷剂专利壁垒，国内企业短期难以实现大范围国产化。不同于国内<br>的追赶路线，以科慕、霍尼韦尔、大金为代表的海外巨头在制冷剂领域布局相对较早，在<br>含氟制冷剂领域具有较好的积淀，因为相比之下，海外制冷剂基本算是领先国内一代产品。<br>在国内实现了三代制冷剂的技术突破和工业生产阶段时，海外巨头企业就开始重点发力四<br>代制冷剂，并着手构建四代制冷剂的生产和应用专利池。相对完整的生产专利和应用专利<br>为海外企业构筑了长时间的竞争壁垒，国内企业在四代制冷剂领域发展相对受限，目前主<br>要在产的生产线也以为海外企业代工为主，还未能形成稳定供应销售的产业链布局。</p>\n<p>。经过 2020-2022 年<br>基准期的配额锁定，2024 年行业将进入配额管制阶段，产量较 2022 年下行，供给端受到<br>政策限制；而从结构上看，新的配额政策不仅确定 2024 年的整体配额，更是针对内用配<br>额进行了约定，国内整体三代制冷剂的内用配额占比不足一半，预估国内市场将呈现出明<br>显供需改善的情况，具有价格和利润的改善空间。</p>\n<h3 id=\"禾望电气\"><a href=\"#禾望电气\" class=\"headerlink\" title=\"禾望电气\"></a>禾望电气</h3><p>公司风电变流器技术领先，有望受益风光装机容量高增</p>\n<p>驱动力一：新能源电控业务，把握新能源技术趋势，迎接风光储需求共振。<br>1） 风电：政策规划加持下，2023 年风电行业高景气度彰显，公司顺应变流器<br>大容量化发展，与国内  10  多家整机厂商形成稳定的合作关系，品牌优势<br>有助公司持续巩固行业地位，未来有望受益风光装机容量高增。<br>2） 光伏：光伏迈入平价成长未来几年有望保持高增速，公司组串式逆变器中<br>标量领先，有望充分享受行业增速。同时公司战略布局半导体公司，聚焦<br>碳化硅（SiC）核心技术，推广“单管并联”技术路线，正逐步受到下游客<br>户认可。<br>3） 储能：公司重点布局储能系统解决方案，项目经验丰富，2021  年以来，<br>公司储能产品不断出货，产品技术获业内认可，未来市占率有望实现突破。<br>驱动力二：电气传动业务：工程变频器国产替代中，公司1GCT 变频器性能更<br>佳，目前市场上工业大传动产品国产化率提升空间广阔，未来公司有望凭借技<br>术优势加速开拓市场。<br>驱动力三：氢能业务：电解槽是制氢的核心设备，公司制氢电源可广泛应用于<br>电解水制氢系统，与深圳大学能源研究院在氢能领域建立合作，公司产品已实<br>现实际应用市场，有望受益氢能行业实现快速增长。</p>\n<p><img src=\"/image-5.png\" alt=\"Alt text\"></p>\n<p>IGCT 芯片相比IGBT 更适用于工业大传动变频器领域。在过去较长时间中，IGBT 由于<br>其高频特性，在轨道交通、工业变频、家用电器、新能源逆变器等中小容量应用领域广<br>泛应用，但随着电力电子装备电压和容量等级的进一步提升，IGCT 器件的高压大容量优<br>势在冶金轧钢、石油开采、油气输送、重型制造、海上风电、船舶推动、抽水蓄能等工<br>业大传动领域优势凸显。IGCT 单芯片可以同时承受 4500V 高电压、8000A 大电流，所<br>以应用在巨大功率的“电气大传动”上面；而 IGBT 中，高压 IGBT 芯片可以承受 4500V<br>高电压但只能50A 低电流，低压IGBT 芯片可以承受200A 大电流但只能1700V 电压，<br>所以适合应用在“小传动”，如用在“大传动”需要多芯片串并联使用，可靠性降低。</p>\n<p>（1）  新能源电控业务:该公司主要提供风电变流器，光伏逆变器和储能PCS 相关产品，<br>受益于下游风电、光伏、储能三个行业未来几年的快速发展，公司该业务有望快<br>速起量。预计公司该业务2023-2025 年营收约为33.98&#x2F;46.16&#x2F;59.98 亿元，毛利率<br>分别为27.94%&#x2F;28.10%&#x2F;28.44%。<br>（2）  传动业务：传动变频器技术壁垒深厚，公司是国内第一家IGCT 变频器投入实际<br>应用的产商。相比于海外工业传动变频器，公司产品不仅可以在性能和质量上有<br>很高的保障，且在价格上具有较强的竞争优势，具备较大国产替代空间，预计公<br>司该业务 2023-2025 年营收增速分别为 60%&#x2F;50%&#x2F;40% ，毛利率分别为<br>42%&#x2F;41%&#x2F;40%</p>\n<p>强制配储带动国内储能高速增长，大储在国内储能装机中占据主导地位</p>\n<p>公司风电变流器起家，主营新能<br>源和电气传动产品，业务遍布亚&#x2F;欧&#x2F;非&#x2F;南美&#x2F;北美洲。公司风光储业务优<br>势显著，其中光伏逆变器&#x2F;储能PCS 22 年国内出货量分别位居7&#x2F;8 位，<br>同时传动技术国际领先，变频器定位高端应用广泛。2018-2022 年营收&#x2F;<br>归母净利润CAGR 分别为24.18%&#x2F;49.29%，业绩稳定增长。</p>\n<h3 id=\"盾安环境\"><a href=\"#盾安环境\" class=\"headerlink\" title=\"盾安环境\"></a>盾安环境</h3><p>目前车用热管理阀件已获国内外系统、主机厂充分认可，增长逻辑持续验证。</p>\n<p>此供应链重塑趋势为盾安汽车零部件业务带来了良好发展机遇。<br>盾安目前电子膨胀阀产品已进入比亚迪、蔚小理、极氪等销量高增长车企供应链，在良好合<br>作基础上盾安可持续拓展其热管理零部件产品，充分提高单车价值量。 （占比太低了 7% 三花60%）</p>\n<p>公司盈利能力呈显著回升趋势，预计后续仍有改善。2018-2020 年公司盈利能力因债务问题<br>造成短期波动，2021 年后公司净利率呈显著回升态势，排除债务干扰后，2022 年扣非销售净<br>利率为 4.54%，2023H1 扣非销售净利率为 7.57%，扣非净利率明显提高，目前处于行业中游<br>水平。净利率提高的主要原因是产品结构优化，原材料成本下降，以及海运费、汇率带来的<br>毛利率改善。我们认为随着公司家电业务产品结构的不断优化以及汽零业务的规模效应，公<br>司盈利能力后续仍将有所改善。</p>\n<h3 id=\"三花智控\"><a href=\"#三花智控\" class=\"headerlink\" title=\"三花智控\"></a>三花智控</h3><p>按照产品划分,制冷空调电器零部件业务营业收入为77.06亿元,同比上升10.70%;汽车零部件业务营业收入为48.23亿元,同比上升50.78%。</p>\n<h3 id=\"复星医药\"><a href=\"#复星医药\" class=\"headerlink\" title=\"复星医药\"></a>复星医药</h3><p>2023 年前三季度，不含抗疫产品，本集团营<br>业收入同比增长约 11%；不含抗疫产品，制药业务新品及次新品收入同比增长超过 30%。</p>\n<p>2023 年前三季度，本集团继续加大研发投入，研发投入共计 42.91 亿元，同比增长 13.67%；<br>其中，研发费用为 31.55 亿元，同比增加 2.92 亿元、增长 10.22%。</p>\n<p>抗疫产品及印度子公司 Gland 收入下降，创新药快速增长，药品<br>板块营收占比提至 74.7%；营收总体持平。（1）公司制药板块<br>1H23 营收 159.95 亿元，同比增长 11.64%；分部利润 14.22 亿<br>元，同比减少 9.6%。（2）收入增长，主要来自汉斯状（斯鲁利单<br>抗注射液）、汉曲优（注射用曲妥珠单抗）及曲妥珠单抗原液、<br>苏可欣（马来酸阿伐曲泊帕片）等新品和次新品的快速增长；其<br>中，2022 年 3 月获批的汉斯状营收 5.56 亿元，汉曲优收入同<br>比增长 57.1%、苏可欣收入同比增长 32.7%，但复必泰（mRNA 新<br>冠疫苗）销量同比显著下降。（3）利润减少，主要源于①复必泰<br>（mRNA 新冠疫苗）销量显著下降，但仍有相应的团队和医学、<br>市场等费用发生；②控股子公司 Gland Pharma 因美国市场竞争<br>加剧以及部分产线停产升级等因素导致的经营业绩同比下降；③<br>汉斯状（斯鲁利单抗注射液）、倍稳（盐酸凯普拉生片）等上市<br>新品的市场开发、团队加强等战略性投入以及汉斯状（斯鲁利单<br>抗注射液）在海外市场的前期布局及团队投入；④1H23，药品端<br>研发费用同比增加 3 亿元。</p>\n<p>创新陆续兑现，药品板块营收占比提至 74.7%；成长确定。（1）子<br>公司复宏汉霖的 PD-1 产品汉斯状 11 项联合疗法在全球展开，中<br>国覆盖医院近 1500 家，东南亚与 KGbio 合作，美国自己团队并与<br>Syneos Health 合作。（2）合营公司复星凯特的 CAR-T 产品奕凯达<br>新增获批二线治疗成人大 B 细胞淋巴瘤（r&#x2F;rLBCL）,截至 2023 年<br>6 月底，奕凯达已治疗超过 500 位患者，备案的治疗中心超过 140<br>家及 25 个省市。（3）公司包括 DaxibotulinumtoxinA 型肉毒杆菌<br>毒素、盐酸替纳帕诺片等在内的多款在研药品在中国境内的上市<br>申请（NDA）获受理，注射用曲妥珠单抗在美国的上市申请（BLA）<br>也已获受理。在 1H23 药品营收已升至近 75%的基础上，创新管线<br>蓄力充足。 </p>\n<p>2023年前三季度,公司销售费用调整主要受到以下三个因素影响:<br>(1)抗疫产品销售费用: 抗疫产品收入虽显著下降,但仍有团队和医学、市场等费用;(2)海外市场销售费用:<br>斯鲁利单抗注射液美国市场上市前筹备投入;控股子公司Sisram直销业务费用增加,以及为提升品牌知名度而新聘品牌大使开支;(3)新品团队建设及加强和市场开发等投入</p>\n<h3 id=\"威斯迈\"><a href=\"#威斯迈\" class=\"headerlink\" title=\"威斯迈\"></a>威斯迈</h3><p>产品结构优化，车载电源集成产品为主力，800 V 产品初现规模。2022 年起，公司车载电<br>源集成产品销售收入占销售总收入 85%以上，收入及占比均呈快速增长趋势，主要原因是<br>车载电源集成产品的销量快速增长。</p>\n<p>2022 年前五大客户销售收入占比下降至 57.37%，上汽、理想在近<br>两年内销售占比下降趋势明显，但仍为公司前二客户。公司践行“走出去”战略，近年<br>来境外收入占比也逐渐攀升。公司一方面与小鹏汽车、理想汽车、合众新能源、零跑汽<br>车等造车新势力以及上汽集团、吉利汽车、奇瑞汽车、长安汽车等众多国内知名车企建<br>立长期战略关系；同时在海外市场，已向知名车企 Stellantis 集团量产销售车载电源<br>集成产品，并与雷诺确定定点合作关系</p>\n<p>境外收入占比达新高，境外毛利率稳步提升。公司海外收入逐步提升，2023H1 海外收<br>入占比 14.49%。毛利率方面，境外毛利率逐年提升，但整体毛利率仍然低于境内水<br>平，未来随着整体规模的提升，境外业务毛利率有望进一步提升。</p>\n<p> 新能源动力系统可以分为电驱动系统和电源系统。电驱动系统包括驱动电机、电机控制器<br>和减速器，电驱动系统是新能源的核心，新能源车通过电驱动系统实现动力的输入和控<br>制；电源系统主要包括车载充电器 OBC、DC-DC 变换器和高压配电盒 PDU，其作用是实现电<br>力转化和电池充放电功能。</p>\n<p>从成本上来看，电动汽车最大的成本占比为动力电池，占比约为 38%，电机成本占比 7%，电控<br>占比约为 6%</p>\n<p>电驱动和电源行业参与者可分为整车厂自供体系和第三方电驱动供应商。整车厂自供体系代表<br>公司有特斯拉、比亚迪旗下的弗迪动力、蔚来旗下的蔚然动力以及长安旗下的蜂巢能源等。第<br>三方电驱动供应商可以分为海外零部件巨头和国内供应商，海外汽车零部件巨头如联合电子、<br>日本电产、博世、大陆、博格华纳等，凭借深厚的技术、工艺等积淀拓展至新能源汽车领域，<br>本身产品力强、产能规模大，且具备全球主流车企客户资源。国内第三方电驱动供应商在近年<br>来快速崛起，根据业务侧重点可以分为以电控为主的英搏尔、汇川科技，以电机为主的方正电<br>机、卧龙电驱,以电源为主的威迈斯等厂商。在集成化的趋势下，部分企业开始布局电机、电<br>控、电源与“多合一”系统</p>\n<p>集成化方兴未艾，电源+电驱系统多合一大势所趋<br>目前行业主流产品已由分立式部件转为集成式部件，集成化成为未来行业发展趋势。近年<br>来，随着新能源汽车行业的快速发展，新能源汽车动力系统核心零部件呈现集成化、轻量<br>化、智能化的发展趋势，分立式零部件逐渐往总成类方向发展。相关厂商也从原先供应独<br>立电机、电控、减速器等，逐渐专向提供多合一、深度系统集成化的产品</p>\n<p>国内外企业纷纷跟进 800V 架构，超级快充是大势所趋。相比较目前 400V 充电电压，800V<br>高压系统能提升充电功率和驱动功率，显著提高整车性能，同时减少整车线束等零部件重<br>量及成本。目前，国内外车企已开展布局，如保时捷、小鹏、比亚迪等车企均推出搭载<br>800V 高压平台车型；下游超快充充电桩也在逐步铺设覆盖，小鹏、广汽、理想、华为等均<br>发布超快充桩、计划投建超充站。佐思汽研结合各车厂规划预测，到 2027 年底，800V 高<br>压平台车型保有量将达到 300 万辆，800V 超充站保有量达到 1.5-2 万座</p>\n<p>高压+高功率密度趋势下， SIC 渗透率或将提升。未来电机控制器技术发展趋势为高安全<br>性,高功率密度化以及高压化。随着 800V 电压平台推出，在大功率，大电流条件下减少损<br>耗、增大效率和减小器件尺寸成为需求点，电机控制器的主驱逆变器需要硅基 IGBT 替换为<br>SiC 基 MOS 模块，存量替代市场空间较大。作为第三代半导体材料的代表，SiC 具有大禁带<br>宽度、高击穿电场强度、高饱和漂移速度和高热导率等优良特性。SiC 的禁带宽度（2.3-<br>3.3eV）约是 Si 的 3 倍，击穿电场强度（0.8×106V&#x2F;cm-3×106V&#x2F;cm）约是 Si 的 10 倍，热<br>导率（490W&#x2F;(m·K)）约是 Si 的 3.2 倍，可以满足高温、高功率、高压、高频等多种应用<br>场景</p>\n<p>大功率充电下，液冷散热成为解决发热的重要手段之一。相较于风冷散热，全隔离防护技<br>术下的液冷充电模块是通过压缩机制冷，依靠循环液带走热量，并使用冷凝器对循环液进<br>行降温，具有高防护、低噪声</p>\n<h4 id=\"晨光\"><a href=\"#晨光\" class=\"headerlink\" title=\"晨光\"></a>晨光</h4><p>短期来看，晨光生物没有多少亮点，持续下跌磨底，如利润持续下滑，则未来深不见底。</p>\n<p>1.中药配方颗粒集采入围但无量，原料药生产效益一般。</p>\n<p>2.饲料级叶黄素价格低迷，销量下滑非常多，辣椒红和辣椒精相对稳定。</p>\n<p>3.棉籽加工产能释放，但薄利销售，年利润约1个亿，潜力不大。</p>\n<p>4.工业大麻暂时看不到风口，赞比亚土地开发进展缓慢。</p>\n<p>5.保健品增速快但量太小才0.8亿，利润占比太小，其他提取不成气侯，三大主力产品后继无人，姜黄素、水飞蓟、花椒提取雷声大雨点小。</p>\n<p>6.管理机制不佳，招人不少，但创新缺乏重大成果</p>\n<p>2024 年，公司主导产品辣椒红色素要发挥产能优势，朝着市场占有率 3&#x2F;4<br>甚至 4&#x2F;5 的目标继续努力；辣椒油树脂要发挥原料及市场优势，逐步扩大市场份<br>额；叶黄素要通过发展云南、印度、赞比亚、缅甸原料基地，持续提升市场话语<br>权。番茄红素、食品级叶黄素要加快高端应用市场开发进度，争取在销售上实现<br>大的突破；甜菊糖产品要发挥生产成本优势，加大国内外市场开发力度，进一步<br>扩大市场份额；水飞蓟素、姜黄素、迷迭香提取物等产品要通过工艺优化、产能<br>扩大等措施，尽快建立竞争优势，形成新的经济增长点。</p>\n<p>在工艺、技术、装备等方面积累的丰富经验，已成为公司在激烈市场竞争中<br>的核心优势。公司要保持对新工艺、新技术、新设备的敏感性，积极借鉴各行业<br>先进的技术和装备，持续推进生产系统改进创新，不断提高生产效率，降低生产<br>成本，实现高质量发展</p>\n<p>贯彻“吃干榨净”理念，多种类提取物综合利用。公司创新应用资源综合利<br>用技术，从加工所得副产品中提取出新的有效成分，通过多种类综合提取有效降<br>低产品成本。除首创复合溶剂同步提取辣椒红色素与辣椒精技术外，葡萄籽已实<br>现提取原花青素和葡萄籽油的综合利用，万寿菊同步提取叶黄素和槲皮万寿菊素<br>（QG）、甜叶菊同步提取甜菊糖和 CQA 技术均已经实现工业应用，2022 年槲皮<br>万寿菊素被批准为新饲料添加剂，QG、di-CQA 的多应用场景功效验证为动保产<br>品推广提供了理论支撑，在全球禁抗和动物产品消费升级的大背景下，天然植物<br>提取物作为替抗饲料添加剂的市场需求将持续增长。公司不断通过资源综合利用<br>开发新的品种，在基本不增加成本的情况下提高产品附加值，挖掘业绩增长点</p>\n<p>研发投入逐年增长，研发团队高质量发展。2022 年公司研发费用破亿元，较<br>上市前刚破千万的研发费产生巨大突破，同时自 2020 年起研发费用率维持在 2%<br>左右的水平，因公司棉籽业务更偏大宗品属性，剔除棉籽业务营收来看公司植提<br>主业的研发费用率增速较快，2022 年达到 4.42%，多年持续研发投入，使得公司<br>在新产品研发、提取工艺、装备制造、产品品质等方面积累了明显的优势，打造了<br>坚实的技术壁垒。同时，公司不断引进高端技术人才，研发团队维持在百人左右<br>的同时持续优化研发团队人员结构，2020-2022 年硕博学历人员占比由 61.2%提<br>升至 69.2%，研发团队专业素养强。</p>\n<p>天然着色剂安全健康，多领域广泛应用。辣椒红色素是天然色素的主要品种<br>之一，属于类胡萝卜素，联合国粮农组织（FAO）和世界卫生组织（WHO）将辣<br>椒红色素列为 A 类色素，在使用中不加以限量。辣椒红色素不仅着色效果好、色<br>泽均匀稳定，而且具有一定保健作用，产品广泛应用于食品、医药保健品、化妆<br>品、饲料等行业着色（或调色），据智研咨询数据显示，2015-2022 年我国辣椒红<br>色素市场规模从 1.72亿元增长至 4.67亿元，期间 CAGR 达到 15.34%，预计 2023<br>年有望突破 5 亿元，发展前景广阔</p>\n<p>行业扩容和市占率提升共促量增，成本加成定价下毛利率长期稳定。量增：<br>主要受益于辣椒红在工业化趋势下的渗透率提升、应用领域的持续拓展与公司以<br>市占率为先的策略。2015 年至 2022 年，我国辣椒红色素的产量&#x2F;需求量分别从<br>3.2&#x2F;1.2 千吨增长至 9.5&#x2F;2.8 千吨，期间 CAGR 分别为 16.7%&#x2F;13.6%，国内辣椒红<br>素产品多用于出口，国内市场拓展后劲十足。2008 年公司辣椒红色素已超过印度<br>Synthite 成为世界第一，2022 年国际市场份额实现从不到 2%到 80%以上的飞跃；<br>2017-2022 年公司辣椒红色素产品销量始终保持增长态势，2022 年辣椒红色素销<br>量超 8500 吨，较 2017 年销量实现翻倍增长；2023H1 实现销量约 5900 吨，同<br>比增长 16%。利稳：受益于行业扩容的同时，公司在辣椒红色素领域的生产规模、<br>工艺技术、产品质量、产品成本均处于领先水平，在成本领先优势的基础上通过<br>与上下游共享技术进步的成果等方式推动产品渗透率提升，产品毛利率长期维持<br>较稳定状态，市场份额不断拓展，在成本加成的定价方式下公司有望通过延伸上<br>游种植、降低原料成本来拉升毛利空间。</p>\n<p>多举措丰富原材料布局，收入与利润贡献稳定。公司辣椒精产品的产销量已<br>连续多年位居世界第一或前列，作为主力单品对公司业绩有较好贡献。公司辣椒<br>精产品的原材料是印度高辣度辣椒，2020-2021 年采购季节受到印度新冠肺炎大<br>面积爆发影响，行业总供应较为紧张；2022 年印度辣椒产区受到病虫害影响，导<br>致辣椒产量下降，故公司 2020-2022 年辣椒精销量对比疫情前的 2019 年有较为<br>明显的下降，但 2023H1 销量同比增长 25%达到 385 吨，且高于 2021 年同期销<br>量（361 吨），展望长期预计仍有望逐步恢复至疫情前的情况。公司作为我国植物<br>提取行业领跑者，具备应对突发情况的灵活处理能力，虽然 2020 年至今印度辣椒<br>原材料成本居高不下，但公司在 2022 年抢抓时机收购高性价比的印度花皮辣椒，<br>竞争优势显著提升；2023 年公司在印度辣椒的价格仍然较高的情况下及时调整采<br>购计划，在国内采购部分高辣度辣椒，优化原材料结构，产品竞争优势得到提升，<br>实现 2023Q1-3 辣椒精销量同比增长约  18%。同时，辣椒精供应较为紧张导致销<br>售均价同比有一定幅度上涨，2021 年收入及利润均创历史新高，2022 年受销量<br>影响收入端小幅下滑但价格仍维持在较高水平，预计 2023 全年在销量增长良好<br>的情况下收入有望恢复正增长</p>\n<p>天然健康营养素，高附加值方向发展。叶黄素别名植物黄体素，是一种存在<br>于人眼视网膜黄斑区的主要色素。叶黄素主要应用于饲料、食品加工、保健品等<br>领域。在饲料和食品加工领域，叶黄素具有极好着色作用；在保健品领域，叶黄素<br>对视网膜中的黄斑有重要保护作用，是帮助眼睛发育的关键营养元素。近些年民<br>众健康生活观念不断增强，叶黄素需求呈现增长趋势，叶黄素原料市场规模从<br>2015 年的 2.59 亿元增长至 2022 年的 4.75 亿元，期间 CAGR 达到 9.05%，行业<br>不断扩容。同时，高附加值的叶黄素产品增长迅速，据魔镜数据显示，2021 年淘<br>宝平台含叶黄素的保健食品销售额超 10 亿元，同比增速达 69%，但 从品牌来看，<br>目前含叶黄素保健食品赛道中仍以海外品牌为主，国内品牌仍有较大替代空间</p>\n<p>代糖领域核心产品之一，综合优势较为突出。甜菊糖苷是由甜叶菊精提而得<br>的天然植物提取甜味剂，相比化学合成甜味剂，甜菊糖苷具有纯天然、无副作用<br>且安全性高的优势；相比其他天然植物提取甜味剂，甜菊糖苷具有甜度较高、热<br>量更低的特点，甜度是蔗糖的 200-300 倍，热量仅有蔗糖的 1&#x2F;300。价甜比总体<br>介于化学合成甜味剂与糖醇类甜味剂之间，在高端应用市场中发展较好</p>\n<p>在做好植物提取物多个大单品的基础上，公司结<br>合植物提取物的功效，积极布局第三步“做大做强保健品、中药提取等大健康产<br>业，为人类健康做贡献”版图，为消费者提供天然、营养、健康的产品，目前保健<br>品业务和中药业务仍处于起步阶段，公司低成本工业化生产优势为业务发展提供<br>帮助，远期看业绩贡献空间大。</p>\n<p>辣椒精：辣椒精的原材料是<br>印度高辣度辣椒，2020-2023 年原材料价格维持较高位置，销量受高价<br>影响整体呈下滑趋势。2023H1 辣椒精售价维持高位，销量同比增长约<br>25%，公司及时调整采购计划，预计全年吨成本和售价均将有小幅下滑，<br>销量或有回暖，整体收入端恢复正增长，但盈利水平或有下滑。（3）叶<br>黄素：23H1 饲料级叶黄素销量同比下降约 70%，食品级叶黄素销量同<br>比增长超 110%，但 叶黄素价格在 23Q2 触底企稳，预计下半年销量有良<br>好恢复。从全年来看，受饲料级叶黄素体量较大影响，预计全年收入和<br>利润均有所下滑，毛利率也有所下降。（4）其他植物提取物：今年上半<br>年餐饮消费恢复带动花椒提取物销量快速增长，销量增长同比增长约<br>50%，创同期历史新高，预计全年有较好恢复；23H1 甜菊糖销售近亿元，<br>行业需求保持增长的态势下出现激烈价格战的可能性较小，预计全年稳<br>健增长。综合各细项来看：1）收入端：全年收入端其他植物提取物在低<br>基数与环境转好背景下收入增速最快，其次为稳定增长的辣椒红、辣椒<br>精，叶黄素受销售节奏影响下滑，整体全年植提业务将呈现稳定增长趋<br>势。预计 2024-2025 年叶黄素业务恢复正常增长轨道，同时公司不断扩<br>充产品矩阵，收入增长或提速。2）利润端：全年来看，较高毛利水平的<br>饲料级叶黄素在收入中占比降低，业务结构变化导致整体毛利率降低</p>\n<h3 id=\"舍得\"><a href=\"#舍得\" class=\"headerlink\" title=\"舍得\"></a>舍得</h3><p>23Q3 公司毛利率&#x2F;净利率分<br>别同比变动-4.02&#x2F;-1.03 个百分点至 74.63%&#x2F;21.87%，其中毛利率下降或主<br>因：①普通酒占比提升；②夜郎古并表有影响。环比看，受益于旺季品味<br>舍得动销良好，23Q3 毛利率环比提升 2.75 个百分点。净利率下降或主因<br>结构变动，费用端看：23Q3 销售费用率&#x2F; 管理费用率分别同比变动<br>+2.83&#x2F;-2.53pcts 至21.46%&#x2F;10.86%，销售费用率提升或主因公司加大营销活<br>动投放力度。23Q3 合同负债同比&#x2F;环比分别变动-0.36&#x2F;-1.83 亿元至3.26 亿<br>元；经营性现金流同比-109.17%至-0.59 亿元</p>\n<h3 id=\"国瓷材料\"><a href=\"#国瓷材料\" class=\"headerlink\" title=\"国瓷材料\"></a>国瓷材料</h3><p>1)电子材料:<br>MLCC介质粉体产品销量环比略有下降,维持全年弱复苏态势;2)催化材料:<br>淡季不淡销量持续提升,蜂窝陶瓷、铈锆固溶体等产品增长明显;3)生物医疗:<br>持续推动全球化布局,努力提升产品多元化和品牌化;4)新能源材料:<br>氧化铝、勃姆石销量快速提升,但销售价格下降,公司通过优化成本提升盈利能力;5)精密陶瓷:<br>三季度开始,公司在800V高压快充新能源车领域已完成批量供应,目前正加紧扩产氮化硅粉体;6)陶瓷墨水:<br>公司陶瓷墨水国内市场地位保持稳定,与科达制造的协同将开始逐步显现。</p>\n<p>精密陶瓷板块的增量主要是新能源汽车陶瓷球和陶瓷基板两个方向。<br>其中,新能源汽车陶瓷球业务的进展比较顺利,高压快充的新能源汽车开始引起市场关注,已经开始有部分车企推出相关产品。<br>今年下半年开始,公司新能源汽车陶瓷球的销售收入不断增长,速度在加快。<br>同时,公司正在加紧推动氮化硅粉体的产能建设。<br> 陶瓷基板方面,公司今年2月并表了铜陵赛创,完成了粉体、基板、金属化的布局,铜陵赛创进入到国瓷体系后,各项业务都在加速推进,LED大灯用陶瓷基板已经通<br>过了国际头部客户的验证,激光雷达用陶瓷基板已经开始逐步放量。<br>另一个新产品是陶瓷金属管壳,这个产品主要是用在低轨卫星中的接收和发射模块,具有非常好的发展前景,公司将根据市场需求重点发展。<br>综合来看未来几年陶瓷球和基板业务都将实现快速增长。 </p>\n<h3 id=\"芯片\"><a href=\"#芯片\" class=\"headerlink\" title=\"芯片\"></a>芯片</h3><p>AI 科技革命趋势日益显著，先进制程加速追赶：随着先进制程工艺成<br>本不断上升，当前只有台积电、三星、英特尔仍留在先进制程赛道<br>上，公司是唯一的先进制程挑战者。中芯国际在 2019 年下半年正式开<br>始量产 14nm  FinFET，成为继台积电、三星、格罗方德、联电后的第<br>五家掌握该技术并能够量产的厂商。且后续 12 纳米、7 纳米等制程开<br>发均可继续沿用 FinFET 结构成果。AI 科技革命趋势日益显著，作为<br>当前的先进制程挑战者，公司有望在AI 趋势的发展中起到重要作用。 </p>\n<h3 id=\"造船\"><a href=\"#造船\" class=\"headerlink\" title=\"造船\"></a>造船</h3><p>4 中国船舶：12月接单11艘，产能覆盖率为3.49年<br>2.5 中国重工：12月接单13艘，产能覆盖率为4.14年<br>2.6 中船防务：产能覆盖率为2.94年</p>\n<p>A公司已经进入新一轮船舶周期的业绩兑现期。目前，部分成本较高的老订单已交付，同时上游材料价格已出现较大回落，外汇端的压力也出现较大改善，预计公司未来盈利能力将会回升至较高水平。以PB估值看，估值越过中轴线，进入景气周期，有望业绩估值双击</p>\n<h3 id=\"中国船舶\"><a href=\"#中国船舶\" class=\"headerlink\" title=\"中国船舶\"></a>中国船舶</h3><p>碳中和趋势下，利好本轮造船行业替换需求上行。针对 IMO 提出的具体要求，船东应对<br>方法主要包括：（1）降速航行带来的有效运力降低；（2）调整能效要求不足的运力安排<br>和班期；（3）增加甲醇、LNG 等燃料船舶，降低整体碳排放等；（ 4）老船加装节能装置<br>等。环保政策推动下，海运平均航速持续下降带来的运力损失和老旧船舶的更新替代有<br>望成为造船市场需求来源之一，同时 LNG、LPG 等低碳船型产能有望持续扩张。根据<br>Clarksons 数据统计，截至 2022 年，全球安装脱硫设备船共 4385 艘，占全球总船数的<br>4.27%。<br>整体来看，公司收入端，需求上行叠加新造船价格上升，民船造修有望实现量价齐升；成本端，造船板<br>价格自 2H21 以来波动下行，公司成本压力减弱，盈利能力有望提升。此外，公司积极布<br>局 LNG、大型邮轮等高价值量船型，有望持续推动公司产品结构升级，增强公司核心竞<br>争力<br>全球宏观经济不确定因素对新船订单量和新造船价格均会<br>产生波动性影响。同时公司目前整体排产已至 2026 年，考虑到本轮周期造船厂扩产谨慎，<br>同时造船业务属于充分竞争市场，公司后续新增订单增速存在不及预期可能性。</p>\n<p>公司作为全球船舶制造龙头，在各种高端船型领域均有突破。其中，公司设<br>计的“MSC CHINA”号集装箱船具有较低的燃油消耗和温室气体排放，是<br>公司在高端船舶领域的一大突破。我们维持盈利预测，预计公司23-25 年归<br>母净利润为 34.0&#x2F;75.6&#x2F;110.5 亿元，同比+1876%&#x2F;+123%&#x2F;+46%</p>\n<p>公司股权结构清晰，实际控制人为国务院国资委。公司为中船集团旗下核心军民品主业<br>上市公司平台<br>公司为中船集团核心上市公司，主营船舶造修、海洋工程及机电<br>设备等业务。公司控股江南造船、外高桥造船、广船国际、中船<br>澄西四大船厂，全面覆盖军民船舶等各类领域。受益船舶市场回<br>暖，公司 1-3Q22 实现营收 385.92 亿元，同比+0.96%；公司非经<br>常性损益使得 1-3Q22 归母净利润 14.63 亿元，同比+256.35%。<br>同时 2023 年新一轮国企改革有望为公司带来新催化</p>\n<p> 需求端：船舶行业大周期复苏，扩张需求+替换需求共振。船舶<br>行业二十年一周期，2021 年海运景气度回升明显，全球新接船订<br>单（按万载重吨统计）同比+97.2%，创 2013 年以来新高，2022<br>年新接订单万载重吨口径同比-36.5%，但新接订单金额同比仍增<br>长 8.2%，主要系目前各船厂排产饱满，造船已进入“量降价升”<br>的挑单环节。替换需求方面，当前大型活跃船队平均船龄已接近<br>21.7 年，老旧船替换周期临近。同时 IMO2023 年环保新规使得绿<br>色船舶改造替换需求确认，有望进一步推动新造船周期上行</p>\n<p>公司在手货币资金较为充足，2020 年公司完成资产重组后，货币资金实力进一步增长，<br>维持在 500 亿元以上。公司整体经营性现金流自 2017 年开始呈现净流入状态，2022 年<br>前三季度公司经营性现金流-47.80 亿元，主要系子公司船舶产品收款同比减少，材料设<br>备支出同比减幅小于收款减幅所致</p>\n<p>2016-2017 年受船市下行周期、海工产品大额减值及原材料价格上涨<br>等原因影响，外高桥造船出现两年亏损。近两年公司业绩总体保持稳定，1H22 外高<br>桥造船实现营收 57.47 亿元，净利润 0.26 亿元。</p>\n<p>经营层面上，广船国际积极承接双燃料汽车滚装船（PCTC）、 客滚船、极地凝析油船<br>及极地科考船等双高技术船舶。<br><img src=\"/image-8.png\" alt=\"Alt text\"></p>\n<p>中长期看，原油需求持续增长，油船市场景气度有望接力。2020 年受全球疫情影响、宏<br>观经济下行以及新能源替换等因素，全球原油贸易下滑明显，伴随全球经济逐渐复苏及<br>贸易量提升，交通运输及工业用石油需求开始复苏，目前原油处于去库存阶段，全球主<br>要经济体原油库存处于低位，截至 2022 年底，经合组织国家商业原油库存下降至 39.68<br>亿桶，已基本见底，补库存周期有望恢复，根据原油需求改善下对应船队运力增加，当<br>前油运价格已出现复苏迹象，油船有望成为继集装箱船后又一支撑市场发展的主力船型</p>\n<p>新能源船替代传统燃料船大势所趋，未来低碳船型主要包括 LNG 船、LPG 船与锂、氨、<br>氢能源动力船等。新能源燃料要综合考虑热值、密度、安全性、经济性等多方面因素，<br>当前 LNG&#x2F;LPG 船等技术成熟度已经相对较高，氨燃料优势在于实现大量碳排放降低，但<br>目前技术相对还不成熟，成本相对较高。</p>\n<p>核心观点：长建设周期、扩产困难使得行业不断向龙头企业集中，本轮造船上行周期中<br>国有望延续上一轮韩国情况，引领全球造船业发展。2022 年我国三大造船指标占据全球<br>约 50%市场份额，中国船舶占我国市场份额约 20%，占全球份额约 10%。整体来看，公司<br>收入端，需求上行叠加新造船价格上升，民船造修有望实现量价齐升；成本端，造船板<br>价格自 2H21 以来波动下行，公司成本压力减弱，盈利能力有望提升。此外，公司积极布<br>局 LNG、大型邮轮等高价值量船型，有望持续推动公司产品结构升级，增强公司核心竞<br>争力</p>\n<p>2022 年我国新接订单量、在手订单量和造船完工量<br>以万载重吨计分别占全球总量的 55.2%、47.3%和 49.0%。<br>我国在大型 LNG 船领域持续突破，2022 年全年新接大型 LNG 船订单国际市场份额首次超<br>过 30%。2022 年中国形成了以沪东中华、大船重工、江南造船、招商海门和江苏扬子江<br>船业为主的多个大型 LNG 船建造企业集群</p>\n<p>船价在签订订单时已基本锁定，其成本波动主要在船舶建造周期中由造船厂自己承<br>担。根据公司公告，船舶主要原材料以 6mm 和 20mm 船用钢板为主。2020 年底新造船<br>价格逐渐升高，但同时造船钢材价格伴随上涨目前新造船价格上涨。造船板价格在<br>5M21 达到峰值后开始回落，截至 2022 年底，上海 20mm 造船板价格为 4480 元&#x2F;吨，<br>同比下降 17.8%，相较 2021 年峰值下滑接近 35%。造船板价格下降有利于增加公司<br>在手订单毛利，盈利能力有望持续修复</p>\n<p>公司船型结构也同时持续优化，2021 年公司散货船&#x2F;集装箱船&#x2F;油船交付<br>量分别为 352&#x2F;100&#x2F;134 万载重吨，同比增长-27%&#x2F;129%&#x2F;0.5%，其中集装箱船占比增幅明<br>显，高价值量船型结构占比提升</p>\n<p>公司针对高附加值船型持续突破。2018 年初，公司下属子公司江南造船获得法国达飞海<br>运公司 23000TEU 超大型 LNG 双燃料集装箱船订单，该型船上配置了世界上第一批 MARK<br>III 薄膜型 LNG 燃料舱，2022 年 5 月第四艘已交付完成。2021 年江南造船与广东九丰能<br>源签订 1 艘 79800 立方米 MARK III 薄膜型 LNG 运输船订单，正式进入薄膜型液化气船建<br>造领域。根据公司公告，江南造船与阿布扎比国家石油公司（简称 ADNOC）旗下 ADNOC<br>Logistics &amp; Services 订了 2 艘 17.5 万立方米 LNG 运输船建造合同。同时公司进军大<br>型邮轮领域，2018 年外高桥造船与中船嘉年华及中船邮轮签订“2+4”艘 13.55 万总吨<br>Vista 级大型邮轮新造船合同，其中实船 2 艘，选择船 4 艘，根据公司公告，国产首制<br>大型邮轮有望年中出坞，年底交船。</p>\n<p>大型豪华邮轮、大型 LNG 船、航母并称为造船业“皇冠上的明珠”</p>\n<p>中美海军力量存在较大差距，中国航母、军辅船等存在较大市场空间。根据《The<br>Military Balance2022》，中国同美国在航母、驱逐舰、护卫舰、潜水艇等主力舰艇方面<br>存在较大的差距，随着国际形势的日益严峻与我国海军战略由“近海防御”向“远海防<br>卫”的转变，我国在航母及军辅船等方面存在更多的需求。 </p>\n<p>2016 年美国军费支出由降转升，中国军费也将继续增长。从绝对量的角度来看，2021 年<br>中国军费支出 2933.52 亿美元，美国军费支出 8006.72 亿美元，美国军费支出约是中国<br>军费支出的 2.73 倍，中美之间军费支出存在较大差距；从军费支出占本国 GDP 的比重来<br>看，2020 年中国军费支出占 GDP 比重为 1.75%，而同期发达国家军费支出一般在 2%以上，<br>2020 年美国军费支出占 GDP 的比重为 3.74%。受全球局势动荡与中美关系恶化的影响，<br>2016 年美国军费支出开始增加，占 GDP 的比重也开始呈上升趋势。同时近期两会政府工<br>作报告中指出，我国要深入贯彻强军思想，全面加强练兵备战，创新军事战略指导，大<br>抓实战化军事训练，统筹抓好各方向各领域军事斗争</p>\n<p>十四五”期间，<br>我国海军战略由“近海防御”转向“远海防卫”，对海军装备需求随之增加。2022 年我<br>国国防支出 1.45 万亿元，同比增长 7.02%，受益于国防开支的增加与装备的升级换代，<br>海军装备采购需求有望不断增加。</p>\n<p>江南造船厂于 2015 年成为中国第一军工造船企业，目前能够满足海军各系列舰船的建造<br>需要。江南造船是我国历史最悠久、军品结构最齐全、造船效率最高的军工造船企业，<br>也是我国技术最先进、规模最大的军船生产基地。江南造船厂承担了我国 003 号航母<br>“福建舰”、第一代至第四代导弹驱逐舰、万吨新型驱逐舰“南昌号”等的建设任务。目<br>前，江南造船厂占地面积 517 万平方米，岸线总长 3561 米，共分三个生产区域，能够满<br>足海军各系列舰船的建造需要。</p>\n<p>设备及钢材的用量随船的交付体<br>量而增长，同时中性预期假设造船钢板水平将在 2022-25 年有所回落但总体有望维持在<br>一定水平，预计公司整体 2023 年毛利率相较 2022 年有望增长 5.3pcts</p>\n<h3 id=\"保险\"><a href=\"#保险\" class=\"headerlink\" title=\"保险\"></a>保险</h3><p>首先，近期社融持续改善，后续积极的财政政策有望带动总需求和经济恢复动能逐步增强，稳健的货币政策也会通过降准等多种方式予以协同配合，将共同稳固宽信用进程。长期利率下行空间有限，更可能随着经济形势的复苏，利率出现回升，并利好险资债权资产，同时利率增速的企稳也有望持续拉动债市的回弹。</p>\n<p>其次，股市在经历了惨淡的2023年已经整体处于较为低估的水平，2024年上行的概率加大。股市回暖将带动险企股基等权益资产投资业绩向好；而 IFRS9 金融准则实施后 FVTPL 资产占比明显上升，也将进一步放大投资波动，或对2024年利润增长提供较好支撑。此外，险企将持续加大包括高股息股票在内的权益资产配置，预计此类资产将普遍计入 OCI资产类别中，股息分红收入的增加将稳定并提振险企净投资收益率，从而带动总投资收益率改善。</p>\n<p>最后，保险公司持有的地产等投资开始出清，相关的资产风险逐步化解。险企资产质量持续改善</p>\n<p> 平安首个动工的超高端养老社区—深圳·臻颐年将于2024年完工。平安已在全国17城拥有健康检测中心，成为平安保险+医疗+养老的粘合剂。平安自有医生、外接医生以及自有健康管理中心，且线上、线下服务渠道最为均衡，相较于其他保险公司，平安能够提供闭环程度更高的省心、省时又省钱的服务。随着平安保险+生态服务陆续面世，新业务价值率弹性空间更大。</p>\n<h3 id=\"恒立液压\"><a href=\"#恒立液压\" class=\"headerlink\" title=\"恒立液压\"></a>恒立液压</h3><p> 挖掘机预计 2024-2025 年完成筑底开启新周期<br> 伴随房改政策出台提振信心，一万亿国债发行，基建<br>发力带动复苏，用 8 年左右一个周期测算，行业预计在 2024-2025 年完成筑底开启新周期。</p>\n<p> 挖掘机销量主要由下游需求决定。国产品牌对国外品牌的国产替代已基本实现，销量被<br>下游需求决定。需求端为两类新增需求和更新需求：国内的新增需求取决于地产、基建、矿<br>山等固定资产投资；国外的新增需求取决于欧美市场占有率提升、“一带一路”等国家的基<br>建项目和矿山开发等；更新需求主要包括设备老化更新需求，环保标准升级的换代需求和技<br>术创新后的升级需求</p>\n<p>盾构机油缸技术领先，全球市占率超60%。从 2005年起恒立开始研发生产盾构机油缸，<br>油缸配套至中交“长城号”等大型盾构机；在美国西雅图 Bertha 号盾构机中，全套高压油<br>缸均来自公司，即使该在地下施工作业两年，也未出现腐蚀、密封件老化等问题。根据公司<br>公众号，2019 年恒立盾构油缸全球市场占有率超过 60%，国内市场占有率超过 80%，技术<br>世界领先。</p>\n<p>海外高空作业平台市场以存量更新为主。北美、欧洲等海外发达国家和地区经济发展水<br>平高，安全生产法规严格，高空作业平台市场成熟，存量市场大，应用普及率高，产品结构<br>完善，更新替换需求稳定。2021 年，美国租赁市场高空作业平台保有量为 72.21 万台，同<br>比增长 10%。欧洲十国租赁市场保有量为 32.46 万台，同比增长 3%</p>\n<p>国内市场仍处于高速成长阶段。中国高空作业平台市场仍处于成长期，低成本、高效率、<br>安全作业保障是促使高空作业平台在国内市场快速发展的三大驱动因素。据中国工程机械工<br>业协会的数据显示，2022 年，我国高空作业平台销量达 19.6 万台，同比增长 22.40%。2022<br>年中国高空作业平台保有量约为 43.85 万台，同比增长 33%，与美国 2021 年高机租赁保有<br>量 72.21 万台相比摊平的人口总量上来看，仍存在较大增长空间。</p>\n<p>海外营收持续增长，毛利率领先国内同行。2022 年公司实现海外收入 17.53 亿元，同<br>比增长 41.9%，自 2015 年以来实现复合增长率达 28.54%，实现海外业务高速发展。从海<br>外收入占比来看，公司 2022 年海外收入占比达 21.4%，与 2021 年相比提升 8.1pct；其中，<br>2015-2020 年海外营收占比下滑的原因是，国内工程机械进入上行周期，增速远超海外业务<br>所致。从毛利率来看，公司海外业务毛利长期维持在 35%左右，领先同行艾迪精密 8-10pct<br>左右，凸显公司经营管理、成本管控和品牌效益领先行业</p>\n<p>墨西哥项目投产在即，业绩提升 17.03 亿元增量。2021 年公司非公开发行募资 50 亿<br>元，其中建设投资 14.12 亿元，该项目达产后将形成工程机械用油缸 200,440 根、延伸缸和<br>其他特种油缸 62,650 根以及液压泵和马达 150,000 台的生产能力。墨西哥项目预计在 2024<br>年上半年开始逐步投产，将有利于公司深度拓展美洲市场，避开贸易关税壁垒，提升交期和<br>售后速度。项目达产后预计将为公司带来 17.03 亿元的业绩增量，占 2022 年总营收的 20.8%</p>\n<p>丝杠项目明年逐步投产，预计带来至少 62.96 亿元业绩增量。根据公司公众号报道，目<br>前新工厂已建成，各项基础设施建设已经进入扫尾阶段。全部完成届时将形成年产标准滚珠<br>丝杆 66 万米、精密滚珠丝杆 42.2 万米、行星滚珠丝杆 1 万米、直线导轨 100 万米、标准<br>滚珠丝杠电动缸 10.4 万根、重载型滚珠丝杆电动缸 2.5 万根和行星滚柱丝杆电动缸 1750 根<br>的生产能力。根据公司公告中的单价进行预测，整个丝杠项目可创造至少营收 62.96 亿元，<br>占 2022 年营收 76.8%。预计 2024 年上半年开始逐步投产，开启第三增长曲线</p>\n<p>油缸业务：公司国内挖机油缸市占率可保持在 60%以上，未来海外市场渗透率有望提升<br>带来增量；非标油缸由于海工装备、盾构机、高空作业平台和非挖工程机械的油缸保持增长，<br>平滑挖机业务的波动，预计 2023-2025 年公司油缸收入增速保持稳增长为 5%，10%，14%，<br>随着下游工程机械在 2024-2025 年的景气度恢复，预计油缸业务毛利率将回升，分别为<br>39.90%、42.5%、44%。<br>泵阀业务：主要包含挖机泵阀马达和非标泵阀马达等；预计未来公司中大挖泵阀市占率<br>稳中有升，挖机马达市占率上行，并且泵阀突破进入海外主机厂为业绩带来增长点。非标泵<br>阀、马达业务受益于农机和高级泵阀产品放量，带动泵阀业务占比提升。预计 2023-2025 年<br>公司泵阀收入增速为 12.5%、22.0%、32.0%。预计 2023-2025 年公司泵阀业务毛利率水平<br>分别为  48.36%、49%、49%。<br>液压系统：此业务偏项目型，受制造业宏观形势影响，预计 2023-2025 年收入增速为-<br>30%、29%、27%，毛利率水平保持稳定，按 44.90%、45.0%、45.0%计算。 </p>\n<h3 id=\"猪\"><a href=\"#猪\" class=\"headerlink\" title=\"猪\"></a>猪</h3><p>生猪出栏量完成目标，能繁母猪存栏量稳步增加。公司2023全<br>年出栏 6382 万头，同比+4%，此前公告出栏目标为 6250~6400<br>万头，出栏量完成目标。伴随猪价持续低迷，预计公司单月养<br>殖亏损环比加剧。4Q23末公司能繁母猪存栏313万头，较3Q23<br>末增加4%、同比增加11%</p>\n<p>猪价旺季不旺，产能持续去化。根据调研，2023 年腌腊旺季猪<br>肉消费量有较为明显的减少，生猪价格旺季不旺。结合目前生<br>猪供给量大，以及2023年国庆及元旦前的猪价表现，我们预计<br>年前的猪价反弹幅度有限、行业或将继续亏损。参考1H23能繁<br>母猪存栏量降幅较小，且1-3Q23行业投苗量较高，我们预计未<br>来 1-2 个季度生猪供给压力仍然较大。目前看来，能繁母猪产<br>能去化趋势加深，根据行业数据，12 月规模场能繁母猪存栏量<br>环比减少2.02%，同比减少5.45%，2023年12月较1月能繁减<br>少5.30%。我们预计2Q24之后有望出现猪周期的底部拐点</p>\n<p>公司2023年12月的生猪养殖完全成本为15.3元&#x2F;kg,相比前几个月有所上升,主要原因是冬季疫病造成的生产成绩波动以及防控疫病的投入有所增加。<br>目前疫病对猪群的影响已趋于平稳,公司会持续做好疫病防控,一是通过空气过滤猪舍、精准通风系统等硬件装备进行防控,二是做好人员、物资的消毒管理,三是<br>保证一线人员对各项生物安全措施的有效执行</p>\n<p> 现金成本是影响公司现金流安全的关键因素之一,当前公司生猪养殖完全成本中,折旧摊销占比在10%左右,现金成本在13.5元&#x2F;kg左右,公司现金成本安全垫较<br>厚。<br>此外,公司与银行等金融机构保持稳定、良好的合作关系,授信储备充足, 中国农业银行、中国建设银行、中国银行等头部银行均将公司作为总行战略客户,目前头<br>部银行授信占比超过70%,未用信额度超过300亿元,去年新增银行贷款成本基本在4%以下</p>\n<h3 id=\"九毛九\"><a href=\"#九毛九\" class=\"headerlink\" title=\"九毛九\"></a>九毛九</h3><p>强中台成就多品牌，全球化延拓优势。1）怂火锅：火锅赛道机遇与挑战并存，怂品牌借力平<br>台优势，模型跑通、加速开店、有效全国化，中期维度形成集团又一利润驱动。2）赖美丽：<br>烤鱼行业广阔明朗，赖美丽定位烤鱼版太二，在标准化经营、高辨识品牌、强协同供应角度直<br>接受益集团赋能，将适时开店以赛代练、持续打磨蓄势待发。3）太二国内：从渠道发展和人<br>口覆盖角度测算，太二品牌在五年维度于国内门店空间可略超1000 家，目前高质量扩张、节<br>奏稳健，品牌能量强劲向上。4）海外：海外中式餐饮市场潜力较大，川式正餐品类适应性<br>强，而集团全球化布局清晰，延续集约、标准、效率的经营思路，第一阶段率先渗透东南亚、<br>北美等华人聚集地，对标进驻海外较早的川式休闲餐品牌海底捞，中长期目标预计或可看约<br>150 家；除华人市场外，川式正餐在海外本土市场也具备较大潜力，现有龙头在经营规模化、<br>管理标准化、设计本土化的成功经验可为借鉴</p>\n<p>以火锅、酸菜<br>鱼为代表的菜品由于具备易标准化的特质，龙头公司门店数量较高，连锁品牌扩张潜力更加充分；<br>而粤菜、传统西餐等由于食材要求、制作工序相对复杂，对厨师依赖度高，因而难以形成统一稳<br>定的标准化供应服务体系，相应其赛道中的龙头公司也更难形成规模化扩张。</p>\n<p><img src=\"/image-9.png\" alt=\"Alt text\"></p>\n<p>联营介入原料生产，食材质价深度把握。1）鲈鱼：早在2020 年7 月，集团便与上游食材供应商<br>成立合营公司开展第一个合作养鱼项目，截至2020 年底，合营公司已拥有3000 余亩的加州鲈养<br>殖基地，集加州鲈的育苗、养殖、加工、销售为一体。酸菜：太二与酸菜供<br>应商在四川成立酸菜腌制基地，以独特的配方在传统中国陶罐中腌制定制的酸菜，并且公司与酸<br>菜供应商通过达成长期且稳定的合作协议，获得提前付款的折扣，以此保障酸菜的供货质量与价<br>格。3）火锅调料：22 年年底，公司斥资 9.96 亿元收购重庆市涪陵区 3.3 万平米土地使用权，部<br>分用于建设火锅底料及复合调味料生产厂房，为怂重庆火锅品牌的核心原料供应奠定基础</p>\n<p>供应能力打造完备，并成为集团的基础设施资产，未来多品牌均将享受规模与效率红利。1）集<br>团已有的鱼养殖基地、酸菜种植收采机制、调料自产厂房设备，从主料到辅料，全方位奠基成集<br>团突出的供应能力，且将辐射多个新品牌，形成规模集采与生产效率红利，有望构筑优于同行的<br>产品质价和盈利能力。如太二的鲈鱼养殖基地能够养殖赖美丽所需的江团鱼和牛蛙，底料工厂或<br>可辅助生产烤鱼所需的麻辣风味底料，提高集团各品牌在供应链端的协同效应。2）全国化中央<br>厨房及总部供应中心建成，将从食材仓储、加工、物运等角度提高品牌协同和整体经营效率，保<br>证品质把控和口味统一，可为集团旗下未来有望全国化的多个品牌提供门店储配支持。 </p>\n<p>SKU 集约化，降低决策时间。太二 SKU 不超过 30 个（含<br>配菜），而主品酸菜鱼只可更改分量（辣度、鱼品、基础配菜均固定），精简的单品设置不仅降<br>低顾客决策时间，也减少后厨备菜成本，同时降低上游供应管理难度，提高采购物运的规模效益，<br>为门店翻台提升和成本降低均提供充足空间。2）场景精简化，加快用餐速度。太二餐厅原则上<br>不接待 4 人以上同时就餐，且不提供拼桌加位服务，将就餐场景限定为工作餐、快捷休闲餐等偏<br>刚需的类目上，有利于充分吸纳核心受众、加快整体用餐速度，同时减轻宴请派对等环节的服务<br>需求，降低不必要的人员成本。3）流程自助化，减少服务冗余。太二餐厅服务人员负责引导顾<br>客入座、传菜及响应必要需求，其余点餐、茶水、结账等流程均通过小程序或顾客自助完成，进<br>一步提高就餐效率，降低服务成本</p>\n<p>“爆品策略+品牌 IP”，战术化营销方式实现强势破圈。1）单品故事先行，差异化塑造品牌记忆点。<br>太二主打一道老坛子酸菜鱼，以“酸菜比鱼好吃”体现差异化；怂火锅主营重庆锅底和鲜切黄牛肉，<br>主打“灵魂是锅底，头牌是牛肉”带给顾客独特的消费体验；赖美丽延续集团精简 SKU 的路线，以<br>青花椒烤鱼为主要特色且只卖自养江团鱼，建立了差异化的品牌壁垒，树立了独树一帜的消费卖<br>点。2）打造品牌 IP，传递独特品牌文化。太二设计了沉默寡言的二老板及活泼幽默的小二哥形<br>象，通过黑白漫画形式推送新品及活动，并以品牌形象与猫咪“何英俊”联名进行公益活动等，吸<br>引年轻消费群体率先入场；怂火锅塑造了飒小妹、怂厂长两个 IP 形象，输出“你，开心就好”的品<br>牌理念；后续孵化的赖美丽也打造出一个出身养鱼世家、爱笑爱吃烤鱼的个性女孩形象，增强趣<br>味性，在与年轻顾客拉近距离的同时，输出品牌专注菜品高品质、创新独特有趣的品牌调性，不<br>断提升品牌在受众客群中的影响力，迅速提高品牌知名度，也是未来新品牌可沿用的打法</p>\n<h3 id=\"云南白药\"><a href=\"#云南白药\" class=\"headerlink\" title=\"云南白药\"></a>云南白药</h3><p>百年品牌，焕发新活力。2019 年“白药模式”混改落地，公司引入民营资<br>本并实施股权激励和员工持股等政策，激发员工积极性。白药参与上海医药<br>定增，双方未来有望在药品研发、医药商业等领域强强联合；全面要约收购<br>万隆控股，完善工业大麻产业布局，搭建国际化贸易平台。</p>\n<p>持续探索外延，力求第二增长曲线，数字化平台焕新赋能。在做深做实现有<br>业务板块的同时，云南白药立足“1+4+1”战略，积极探索“第二增长曲线”，<br>着力布局医美、口腔护理、骨伤以及女性关怀产业链，推出“齿说”智能电<br>动牙刷、冲牙器等多个产品，并集中优势资源，积极推进医美产业布局。</p>\n<p>四大事业部行稳致远，进而有为。1）药品事业部：云南白药作为百年名药，<br>其配方享有国家最高保密级别，其中云南白药膏与云南白药气雾剂均为 10<br>亿级别大单品，多款产品位居骨伤科前列；2）健康事业部：2022 年，健康<br>事业部营业收入61.97 亿元，同比+5%，其中牙膏市占率稳居细分赛道第一；<br>3）中药资源事业部：在 2013 年单独成立后，营业收入从 2013 年的 2.98<br>亿，增长到2022 年的峰值14.47 亿元，在各事业部中增长最快，是公司四<br>大业务部门中最有潜力的增长点，受益于产业布局，公司中药材板块在三七<br>价格持续走低的背景下逆势上扬；4）医药商业板块主要依托云南省医药公<br>司，发展医药流通和云南白药大药房两大业务，两票制后公司并购中小流通<br>商，并获上海医药支持，区域龙头地位稳固，将长期受益于行业集中度提升</p>\n<p>战投上海医药。2022 年 4 月，云南白药发布公告，作为战略投资者，以现金方式认购上<br>海医药665,626,796 股份。此次认购完成后，云南白药持有上海医药18.01%股份，成为<br>上海医药第二大股东，上海市国资委仍为上海医药实际控制人。</p>\n<p>以白药系列为核心，培育医疗器械产品矩阵。药品事业部主要包含药品系列和医疗器械品<br>牌，其中云南白药药品系列共有19 个剂型，300 余个品种，分为白药系列和普药。1）白<br>药系列：云南白药系列在传统的云南白药散剂基础上，拓展出云南白药膏、云南白药气雾<br>剂、云南白药创可贴等多种剂型，满足差异化消费需求；2）普药和特色药系列：以气血<br>康口服液、宫血宁等大单品为基础，向感冒类、胃肠道类、抗感染类和清热类等产品延伸；<br>3）医疗器械：2022 年，药品事业部以“稳药品·育器械”为核心战略，选择慢病疼痛、<br>眼健康两大细分领域拓展发力，探索医疗器械家庭化使用场景，谋求新增长极。</p>\n<h3 id=\"充电桩\"><a href=\"#充电桩\" class=\"headerlink\" title=\"充电桩\"></a>充电桩</h3><p>超充落地具备可行性，全生命周期充电度电成本大幅降低。液冷超充桩初始投资<br>成本较高，通过微电网、共享储能可解决超充对电网稳定性的冲击但也大幅提升<br>了初始投资成本。充电网作为重要的新型基础设施，应考虑未来技术迭代和标准<br>升级，改变简单比较单瓦成本的思路，引入全生命周期的充电度电成本进行评估。<br>以华为全液冷超充方案为例，度电成本要远低于传统方案，10 年整站度电成本<br>0.34 元&#x2F;kWh，分别较一体桩、风冷堆低 35%、26%，投资回收期仅为 6.7 年</p>\n<p>，超充桩建设成为800V 高压快充推广的制约因素。<br>海内外车企成为超充桩建设主力，华为 600kW 液冷超充站引领技术趋势，超充<br>桩成为充电桩投资侧重点。关注大功率直流桩占比高的整桩企业、超充桩带来的<br>液冷模块、液冷枪线等技术升级方向。<br>推荐：威迈斯、鑫宏业；关注：永贵电器、通合科技、利和兴、绿能慧充。</p>\n<p>要实现高压快充主要从 4 个方面入手：（1）车端：提升整车平台电压，相应部<br>件耐压性需升级；（2）电池端：提升电池快充倍率性能；（3）桩端：大功率<br>直流超充升级，提升散热能力，例如液冷模块、线缆和充电枪液冷技术的应用；<br>（4）电网端，需解决大功率充电对电网稳定性带来的冲击。</p>\n<p>（1）具有技术、客户等优势的液冷充电模块公司，推荐：威迈斯，建议关注：<br>通合科技；（2）液冷枪和液冷线缆公司，推荐：鑫宏业，建议关注：永贵电器<br>等；（3）大功率快充整桩和代工公司，建议关注：利和兴、绿能慧充等</p>\n<p>通过微电网、共享储能可解决超充对电网稳定性的冲击。微电网是指由分布式电<br>源、储能装置、能量转换装置、负荷、监控和保护装置等组成的小型发配电系统，<br>是解决分布式电源直接接入电网所引起一系列问题的有效手段。</p>\n<p><img src=\"/image-10.png\" alt=\"Alt text\"></p>\n<p> 超充有待规模化降本，应从度电成本视角衡量经济<br>性</p>\n<p>大功率液冷充电<br>枪是在充电线缆中放置液冷管道，让冷却液带走线缆的发热量，此种方式不仅可<br>以减小线缆线芯截面积，而且充电电流更大，充电过程温升更低</p>\n<h3 id=\"盛弘股份\"><a href=\"#盛弘股份\" class=\"headerlink\" title=\"盛弘股份\"></a>盛弘股份</h3><p>公司的电能质量产品主要解决用户在用电过程中遇到的工业配套电源问题,通过解决电网谐波、三相不平衡、电压暂降、突然断电等问题,提升用户用电质量及用<br>电安全。<br>可以广泛应用于高端装备制造、石油矿采、轨道交通、IDC数据中心、通信、冶金化工、汽车制造工业、公共设施、银行、医院、剧院、广电、主题公园、电力<br>系统等行业</p>\n<p>公司成立于 2007 年，2017 年深交所上市，是国家创新基金、深圳市科技<br>研究开发计划入选企业。公司是专业的能源互联网核心电力设备及解决方案<br>提供商，主要业务属于国家性战略新兴产业中的节能环保、新能源领域</p>\n<p>营收拆分：2022 全年营收同比增长47.16%，增速提高 14.75pct。主要系：<br>（1）”十四五”纲要等政策刺激高端装备制造业快速发展，公司电能质量设备<br>业务稳定增长，2022 年实现营收 5.12 亿元，同比增长 26.69%；（ 2）受新<br>能源电动汽车市场风口推动，充电桩业务发展势头良好，产品出货持续增加，<br>22 年实现营收4.26 亿元，同比增长116.96%；（ 3）锂电池厂商持续扩大锂<br>电池的生产需求，带动公司电池化成与检测业务营收增长，22 年营收 2.58<br>亿元，同比增长72.37%。</p>\n<p>迎接充电行业高景气度周期，大力推进快充技术和海外布局。公司深耕充电桩<br>研发制造十余载，目前公司充电桩产品覆盖整桩和模块，拥有 50 多款不同充<br>电规格的充电设备产品，实现 7kw-800kw 全功率段产品全覆盖。技术方面，<br>公司已开发 200 多种独有的充电控制技术，并率先发力高压快充，已将碳化硅、<br>液冷超充等前沿技术应用于产品。2023 年上半年公司充电桩业务实现收入<br>3.84 亿元，2023 年前三季度收入预计超 6 亿元，总体实现高速增长。此外为<br>顺应全球化浪潮，公司加速充电桩海外布局，成为首批进入英国石油中国供应<br>商名单的充电桩厂家。考虑到截至 2023 年 9 月，全国新能源车保有量 1821<br>万辆，充电基础设施保有量 764.2 万台，车桩比 2.38:1，离工信部“2025 年<br>实现车桩比 2:1，2030 年 1：1”的目标仍有差距，国内充电桩增量空间依然<br>广阔，叠加海外广阔需求，公司充电桩业务有望继续强劲增长。</p>\n<p>新能源电能变换设备业务成为公司重要营收来源。2018-2021 年，公司新能<br>源电能变换设备业务营收占比分别为8.79%、15.59%、16.10%、23.51%，<br>呈持续上升趋势。2022 年，电能变换设备营收贡献下降至17.02%，主要系<br>充电桩业务营收增速提升，22 年充电桩业务营收贡献同比提升 9.11pct，达<br>28.33%。未来，公司仍会依托这四个业务板块持续开拓新市场与新客户，并<br>不断提高产业链的广度与深度</p>\n<p>充电桩产品主要包括直流桩和交流桩、一体式和分体式等多种产品类<br>型；充电桩模块涵盖 15kW、20kW、30kW、40kW 等功率等级。公司拓<br>展多元化客户，包括小桔充电、国家电网、南方电网等运营商，比亚<br>迪、吉利等车企，中石油、中石化、BP、壳牌等能源企业，以及长沙<br>城发、南宁交投等政企。公司丰富的产品品类、多元的客户分布以及<br>强大的服务能力有望为公司充电桩业务带来高速增长。</p>\n<p>华为引领全液冷超充技术。当前液冷超充桩大多是在传统风冷充电桩基础上，采<br>用液冷充电枪来实现大电流充电输出，大充电功率下噪声较大，可靠性较低，后<br>期维护成本较高。华为发布的全液冷充电架构采用液冷充电模块、液冷充电枪，<br>系统整体采用液冷散热设计，具有充电电流大、噪声小、可靠性高的特点</p>\n<p>公司是最早在国内推广发展电能质量设备的厂商之一、全国首家低压电能质量<br>领域上市企业，形成了包括谐波和无功电流检测与控制等一系列直接应对谐波治理、<br>无功补偿、三相不平衡治理、电压暂降等问题的核心技术，技术优势明显</p>\n<p>全面覆盖电流质量、电能质量治理的低<br>压、中高压领域，产品被广泛应用于谐波治理、无功补偿、地铁储能、电<br>压暂降、保障用电安全的工业UPS 等场景</p>\n<p>储能变流器（PCS）用于储能电池和电网之间的双向电能变换及传输，是<br>储能系统中除电池外的第二大成本来源，直接决定储能系统效率与安全性，<br>作为核心装置具有广阔应用前景2022 年公司在全球市场列于第五大供应<br>商；2022 年公司在国内市场位列第七大供应商，市场份额位居前列。</p>\n<p>全产品三方认证，出海产品资质优势明显。<br>积极捕捉海外市场发展机遇，绑定优质客户共同成长相较于国内储能市<br>场，海外储能市场发展更为成熟，公司把握巨大市场发展机遇，根据海外<br>不同市场需求提供多样解决方案。（1）针对欧美市场，公司为其需量电费<br>管理与新能源消纳提供高效解决方案；（2）针对缅甸、印尼、泰国和非洲<br>等无电、弱电及偏远地区，通过灵活的模块化储能方案，建设一体化储能<br>系统，改善当地生活环境。</p>\n<p>新能源汽车充电桩产业链的上游为建设及运营充电桩所需要的元器件和设<br>备生产商，中游为充电运营商，下游为各类电动汽车用户。其中设备生产<br>商和充电运营商是充电桩产业链中最主要的环节。公司充电桩业务主要位<br>于充电桩行业链中上游</p>\n<p>行业上游：充电设备供应商竞争较充分，IGBT 国产化趋势升温。充电模块<br>是充电桩的核心设备和主要成本来源，占新能源汽车充电桩硬件成本的<br>45%-55%，其主要功能为将交流电网中的交流电转换为可以为电池充电的<br>直流电，公司自产充电模块性能优异，有效节省了充电桩生产成本。公司<br>充电桩设备上游企业主要为变压器、电度表、功率器件等原材料供应商。<br>其中IGBT 功率器件是充电模块的关键组成部分，国内如士兰微、斯达半导<br>等都在积极布局IGBT</p>\n<p>行业中下游：国企、民营并驾齐驱，市场集中度较高。经过一系列的行业<br>洗牌，部分玩家出局，充电桩市场向集中化迈进。目前，公司充电桩业务<br>下游客户主要为各类运营商。国资企业是公共桩营运市场的先行者，典型<br>代表是国家电网，依托电网广泛分布的基础设施，完成充电服务网络的建<br>设。民营运营商包括专业电气厂商或其子公司和整车厂两类，前者典型代<br>表是特锐德的子公司特来电，目前是国内最大的公共桩服务提供商；后者<br>典型代表是比亚迪，依托自身庞大的新能源汽车业务线，开展充电桩服务。<br>截至 2023 年 5 月，国内排名前十五位的公共充电桩运营商市占率共达<br>94.1%，市场集中度较高。伴随着充电行业的逐渐成熟，充电桩的发展方向<br>由最初的建设端向质量更高的运营端转移，在技术、市场、盈利模式上产<br>生大的变革。</p>\n<p>其中，荷兰、挪威计划于2025 年开始禁售燃油车；德国、瑞典、<br>比利时计划于2030 年开始禁售；英国、法国计划于2040 年开始禁售。<br>这类强制性政策将显著助推新能源车渗透率上涨。</p>\n<p>产品性能优异，持续为客户提供定制化服务。公司充电桩业务主要从事一体<br>式直流充电桩、直流充电模块、智能柔性充电堆以及交流充电桩四类产品<br>的研发、销售与运维服务。其中，一体式直流充电桩为公司主打产品，主<br>要特点为大功率快充，分为单枪与双枪式，单枪式功率为80kW，双枪式覆<br>盖功率为 60~240kW，广泛适用于商场、写字楼、公园、住宅区、大型电<br>动汽车充电站等各种场景。智能柔性充电堆也为直流快充产品，功率达<br>360kW，可进行功率智能调配，满足各功率、各容量等级的电动汽车快速<br>充电的需求。公司交流充电桩产品主要应用于小功率慢充，为住宅区、酒<br>店等场景提供充电服务，可有效延长电池寿命</p>\n<h3 id=\"化工\"><a href=\"#化工\" class=\"headerlink\" title=\"化工\"></a>化工</h3><p>气凝胶：凭借密度最小、绝热系数最高等多项吉尼斯记录，被自然杂志评价为改变<br>世界的神奇材料。气凝胶作为绝佳的保温材料，迄今为止产业化发展不到三十年，<br>且是少数国内外发展水平相近的新材料。近年随着全球碳中和、碳达峰的政策推动，<br>相关市场应用逐渐受到重视。我们认为，基于气凝胶产业目前处在快速成长期，建<br>议关注短期有技术优势和产业化能力、长期有成本下降空间的相关公司</p>\n<h3 id=\"洛阳钼业\"><a href=\"#洛阳钼业\" class=\"headerlink\" title=\"洛阳钼业\"></a>洛阳钼业</h3><p>全球第一大钴生产商，24年有望跻身前十大铜生产商</p>\n<p>铜矿生产高扰动延续，供给约束下铜价有望保持高位运行</p>\n<h3 id=\"石头科技\"><a href=\"#石头科技\" class=\"headerlink\" title=\"石头科技\"></a>石头科技</h3><p>023 年Q1-Q3 销售、管理、研发费用<br>率分别为19.68%、3.01%、7.88%，同比分别提升1.73、0.72、0.03pcts，但<br>公司费用控制明显优于科沃斯（科沃斯同期销售、管理、研发费用率分<br>别为 32.43%、3.95%、5.74%）</p>\n<h3 id=\"科沃斯\"><a href=\"#科沃斯\" class=\"headerlink\" title=\"科沃斯\"></a>科沃斯</h3><p>报告期内，公司科沃斯<br>品牌海外业务收入同比增长 26.5%，添可品牌海外业务收入同比增长 24.2%，占各自收入比重分别<br>达到 34.3%和 30.9%,较上年同期分别增加 7.1 和 3.2 个百分点。未来公司将进一步加大对海外市<br>场的投入，提升产品结构，优化渠道，扩大地域市场，推动海外营收规模的持续快速成长</p>\n<p>未来扫地机将从短中长期三个维度进行产品功能迭代。短期维度，考虑在自清<br>洁上继续升级，如解决自动上下水等仍存在空间限制、集尘和除尘部件需手动清理<br>等问题；中期维度，会针对扫地机目前存在的无法进入狭小空间、无法越障、无法<br>清洁长毛地毯等问题，做出相应改进，并提升避障精准度，如通过去除顶部激光头<br>或传感器融合的方法将扫地机机身做的更加轻薄、通过增加辅助轮或机械腿的方式<br>辅助行走以解决扫地机本身无法完成的越障问题等，同时将针对避障性、脱困性以<br>及 AI 识别功能进行算法上的持续迭代；长远来看，智能家居最终会走向集中控制，<br>形成统一的生态系统。随着物联网和云计算等技术的成熟，扫地机会与其他智能家<br>居一体化，通过智能语音、环境识别等方法，自主满足人们的需求</p>\n<p>科沃斯不断发掘其他赛道，横向拓展新兴品类，打造第三增长曲线。除洗地机<br>外，科沃斯还将技术运用于不同领域，不断拓展新品类，2021-2022 年推出了商用<br>清洁机器人、割草机、智能料理机、空气净化器等各种新品。其中，2022 年推出的<br>新品食万 3.0 智能料理机迎合了当前预制菜的热潮，在功能上进一步简化了做饭步<br>骤，此后又通过料理机、食万净菜和添可生活 APP 三大板块，搭建了智能化烹饪的<br>全链路解决方案。此外，公司还在家用扫地机的基础上，延展了商用清洁赛道，持<br>续投入商用清洁机器人的研发和布局，推出了 DEEBOT PRO K1产品。目前公司可<br>为酒店、写字楼等商业 B 端场所提供清洁专用解决方案，并创新性采用租赁模式，<br>以降低客户使用成本。通过不断横向拓展新兴品类，科沃斯有望打造第三成长曲线</p>\n<h3 id=\"闻泰科技\"><a href=\"#闻泰科技\" class=\"headerlink\" title=\"闻泰科技\"></a>闻泰科技</h3><p>闻泰科技主要从事集研发设计和生产制造于一体的产品集成、基础半导体<br>和光学业务，主要提供手机、平板、笔电、服务器、IoT、汽车电子等终端产品<br>研发制造；半导体功率器件、模拟芯片的研发设计、晶圆制造和封装测试；光<br>学模组的研发制造服</p>\n<p>2019 年闻泰科技通过收购安世半导体切入半导体业务领域</p>\n<p>2021 年闻泰科技收购得尔塔科技，进军光学模组业务领域，研发和生产应<br>用于手机、汽车电子、笔电等领域的摄像头模组。得尔塔科技前身为索尼电子<br>华南有限公司，2017 年被欧菲光收购。目前得尔塔科技在广州、珠海建有大型<br>生产基地，在日本熊本设有设备研发中心</p>\n<p>移动终端 ODM 是公司主要收入来源，收入结构持续优化。公司主营业务包<br>含移动终端 ODM、半导体 IDM、光学模组及其他三大板块，2022 年各板块收入占<br>比分别约为 68.03%、27.55%、4.42%。移动终端 ODM 为公司传统业务，虽近年来<br>占比有所下滑，但仍为主要业务收入来源；半导体 IDM 业务发展迅速，是主要<br>的盈利来源，未来占比有望进一步提高；光学模组业务在战略上补足产业链一<br>体化格局，为公司发展补全战略版图</p>\n<p>子公司半导体业务全球领先。闻泰科技旗下安世半导体以半导体 IDM 为主<br>营业务，包含芯片设计、晶圆制造和封装测试等全产业链环节，业务涵盖汽车、<br>通信、消费、工业等众多领域。安世半导体前身为恩智浦的标准产品事业部，<br>具有超过 60 年的半导体行业经验，2017 年从恩智浦剥离，2019 年被闻泰科技<br>收购。</p>\n<p>产品集成业务方面，手机 ODM 业务是公司的传统业务以及主要营收来源。<br>闻泰科技自 2006 年起从事手机方案设计，2008 年随着嘉兴生产基地投产，闻<br>泰通讯从 IDH 转型为集研发设计与生产制造为一体的 ODM，成为行业龙头。除<br>手机 ODM 外，公司的集成业务还拓展到平板、笔电、AIoT、服务器、汽车电子<br>等领域。在笔电业务上应用闻泰、安世联合推出的各类射频、通讯、 电路小型<br>化 SiP 模块产品以推进产品创新，已通过多个全球笔记本电脑客户深刻认证，<br>即将量产。通过与半导体业务联合，公司亦凭借 2U 双路机架服务器和 4U 双路<br>存储服务器等产品成功开拓服务器市场，中标多个知名客户的服务器项目，服<br>务器业务有望成为新的利润增长点。此外，公司还积极发展汽车电子业务，旨<br>在成为汽车电子行业的智能汽车和智慧出行的前装车规级解决方案提供商，为<br>客户提供从软件到硬件再到制造的一整套方案，包括但不限于智能座舱、智能<br>网联和自动驾驶领域的创新产品研发</p>\n<p>闻泰科技致力于加强各板块间业务协同合作，以打造出全产业链的一体化<br>格局，以公司提高核心竞争力。半导体业务和产品集成业务的协同有助于整合<br>通讯和半导体业务的产品、客户、供应链资源。通过与半导体业务拉通，产品<br>集成业务可以充分应用半导体业务 IDM 平台能力，引入更多功率、模拟芯片的<br>产品协同能力，从而推动 SiP 等晶圆级封装、Mini&#x2F;MicroLED、汽车电子等方<br>向的半导体技术融合创新，并以半导体能力为牵引构筑产品集成业务护城河。<br>笔电业务在高质量的模拟和逻辑芯片以及功率器件产品上也将得到更多的支持，<br>闻泰安世联合推出的各类射频、通讯、电路小型化 SiP 模块产品也有望应用于<br>笔电产品。此外，得尔塔科技具有行业领先的 Flip  Chip 晶圆级封装技术，发<br>挥其低功耗、小型化的特色，可推动车载、笔电、AR&#x2F;VR 应用落地，推动协同<br>供货手机 ODM 业务并实现光学业务的多极化增长</p>\n<p>2017-2023H1，公司实现归母净利润分别为3.29&#x2F;0.61&#x2F;12.54&#x2F;24.15&#x2F;26.12&#x2F;<br>14.60&#x2F;12.58 亿元，2018 年主要受消费电子市场低迷、收购安世股权等影响，<br>归母净利润有较大下滑，随后随着半导体业务的大幅增长，归母净利润逐年提<br>升，2022 年归母净利润下降至 14.60 亿元，较上年同期下降 44.10%，主要是由<br>业务发展所带来的销售费用和研发费用大幅增加，以及公司发行可转换公司债<br>券使得非现金利息支出增加所导致的财务费用增加所导致。2023H1，公司实现<br>归母净利润 12.58 亿元，同比增长 6.45%。</p>\n<p>半导体业务自被收购以来贡献了主要的净利润来源。分业务板块来看，<br>2020-2022 年半导体业务净利润分别为 9.88&#x2F;26.32&#x2F;37.49 亿元。产品集成业务<br>净利润下行后回暖，2020、2021 年净利润分别为 8.06&#x2F;1.84 亿元，2022 年净亏<br>损 15.69 亿元，主要原因在于全球手机和平板市场的需求低迷，但 2023 年上半<br>年扭亏为盈，实现净利润 0.07 亿元。光学模组业务 2022 年度净亏损 3.35 亿<br>元</p>\n<p>导体方面，2022 年公司半导体业务研发投入 11.91 亿元，较上年同期增<br>长 42.29%，以 加速推动技术进步与迭代，覆盖功率分立器件(IGBT、SiC 和 GaN)<br>和模块、12 英寸创新产品、模拟 IC 组合、功率管理 IC 和信号调 节 IC 等<br>方面。在化合物半导体产品方面，硅基氮化镓功率器件(GaN  FET)已通过 AECQ<br>认证测试并实现量产，在产业合作伙伴的协同下已完成 GaN  在电动车逆变器、<br>电控、电源等方案的设计工作；碳化硅技术研发进展顺利，碳化硅二极管产品<br>已经出样；IGBT 产品流片已经完成，正处测试验证阶段；新的模拟 IC 类产品<br>也正处在加速研发推进中。目前闻泰在马来西亚槟城和中国上海均开设了新的<br>全球研发中心，并扩大了位于中国香港、德国汉堡和英国曼彻斯特现有的研发<br>中心。</p>\n<p>功率半导体在新能源汽车电池动力模块中发挥重要作用。由于电动车功率<br>器件对工作电流和电压有更高要求，新增需求主要来自以下几个方面：逆变器<br>中的 IGBT 模块、DC&#x2F;DC 中的高压 MOSFET、辅助电器中的 IGBT 分立器件、OBC 中<br>的超级结 MOSFET。总的来说，混合动力汽车的功率器件占比达 40%，纯电动汽<br>车的功率器件占比达 55%。相比传统汽车，新能源车功率半导体需求提升近 9 倍，<br>功率半导体在新能源汽车领域潜力巨大<br>光伏行业是功率半导体的主要下游应用领域之一。功率半导体主要应用在<br>逆变器中,功率半导体器件 IGBT 是光伏逆变器的核心零部件。逆变器是光伏系<br>统并网的必要设备，光伏装机容量的不断增长带动逆变器行业增长，同时也为<br>功率半导体行业的持续发展提供动力。</p>\n<p>目前光学摄像头模组行业三个最主要的终端市场为手机摄像头、视频监控<br>摄像头和车载摄像头  目前车载摄像头市场处于无人驾驶与车联网市场的双风口，作为 ADAS 系统<br>的主要视觉传感器，在自动驾驶时代，车载摄像头模组用量将跟随 ADAS 系统的<br>增长而进一步增加。目前车载摄像头市场呈现持续扩张趋势，根据 TSR 咨询机<br>构数据，2021年全球车载摄像头出货量达到 185.50 百万件，年增长率达到 10%</p>\n<p>全球功率半导体市场仍主要被起步较早的美日欧厂商所把控，美日欧厂商<br>约占据全球 60%以上的市场份额。根据 Omdia 市场研究机构数据，2021 年全球<br>十大功率半导体企业分别为英飞凌、安森美、意法半导体、三菱电机、富士电<br>机、东芝、威仕、安世半导体、瑞萨、罗姆。前十企业共占据总市场份额的 57%</p>\n<p><img src=\"/image-11.png\" alt=\"Alt text\"></p>\n<p>半导体业务是公司营业收入的主要来源，公司充分发挥半导体业务在汽车<br>和工业领域的产品和技术领先优势，通过扩大产能、持续研发、垂直整合等多<br>项措施不断扩大业务规模，2022 年公司跃居全球功率分立器件半导体公司第 5<br>位。2022 年公司来自汽车领域的半导体业务收入达到 48.6%，是主要的收入方<br>向。2022 年汽车工业需求旺盛，2023 年汽车终端市场相对疲软，但在汽车行业<br>电动化智能化趋势不改的背景下，2023 年预计市场需求有所修复，行业需求持<br>续处于上行周期。工业领域半导体业务是其次的收入来源，2022 年工业领域需<br>求 相 对 平 稳 。 综 合 预 计 2023&#x2F;2024&#x2F;2025 年 半 导 体 业 务 方 面 实 现 营 收<br>155&#x2F;180&#x2F;210 亿元，同比增速达 1.35%&#x2F;16.13%&#x2F;16.67%。由于汽车需求旺盛、价<br>格坚挺，半导体业务预计维持稳定毛利率水平,2023&#x2F;2024&#x2F;2025 年毛利率维持<br>42.00%。</p>\n<p>我们预计公司 2023-2025 年营业收入分别为 650.83&#x2F;764.16&#x2F;899.83 亿元，<br>同 比 增 长 率 分 别 为 12.06%&#x2F;17.41%&#x2F;17.75% ； 归 属 母 公 司 净 利 润 分 别 为<br>26.86&#x2F;33.63&#x2F;48.34 亿元，对应增速分别为 84.01%&#x2F;25.19%&#x2F;43.74%。</p>\n<h3 id=\"九号\"><a href=\"#九号\" class=\"headerlink\" title=\"九号\"></a>九号</h3><p>自2015 年系统研发机器人产品以来，公司已积累包括室内外定位导航、机器人<br>运动控制、高精度伺服轮毂电机等机器人关键技术。（1）定位导航技术方面，公司<br>已掌握UWB 室内定位、RTK-GPS 室外定位、激光雷达&#x2F;毫米波雷达、双目视觉&#x2F;IMU<br>（视觉惯导）等核心技术。（2）避障技术方面，公司掌握激光+视觉融合、结构光摄<br>像头、超声波传感器以及内置AI 的传感器避障（可检测识别物体）关键技术。除核<br>心定位导航和避障技术外，公司亦掌握计算机视觉（识别人体数据）核心技术</p>\n<p>RMP 移动平台：2003 年 Segway 布局 RMP 业务，2015 年九号公司收购<br>Segway，2020 年九号公司自研第一代产品RMP Lite，在支撑公司内部产品研发，实<br>现对内赋能的同时，也支持二次开发或定制化服务，进而实现了外部商业落地。RMP<br>移动平台采用了九号公司 AIOT 感知技术和决策技术能力，可实现限制路况下低速<br>自动驾驶，同时采用了轮毂电机技术，可调教合适速度-扭矩曲线</p>\n<p>扫地机器人领域，应用场景为室内，石头科技和科沃斯为代表的企业避障和物<br>体识别能力要优于其他企业。石头科技和科沃斯多采用结构光避障方式配合AI 识别<br>技术，能够识别多种障碍物并根据障碍物种类做相应的避障策略，例如石头G20 采<br>用结构光+AI 识别避障，能够识别 13 类 42 种障碍物。而云鲸和小米部分机型未采<br>用AI 技术或仍采用单激光避障方式。</p>\n<p>九号两轮车较为优秀的处理运算和驾驶辅助能力主要系传统主业例如机器人、<br>滑板车底层技术和研发团队赋能。从两轮车发展史来看，公司先后自研并引入了ABS、<br>TCS 和RSC 等主动安全辅助系统。感应方面，公司进入两轮车领域伊始便引入了姿<br>态感应系统，全车多处传感器提供多种姿态识别，随后通过机器学习+AI 算法提高<br>车辆状态识别能力。控制方面，公司联合旗下公司零级创新推出了自研的鼹鼠控<br>MoleDrive，配合传感器实现坡道驻车、助力推行等智能化功能</p>\n<p>外销有望受益新品驱动，叠加内销两轮车有望高增，看好2024 年业绩反转<br>此前拖累公司业绩的小米分销和ToB渠道以及非经常性负面因素影响逐步减弱。<br>内销方面，高增两轮车品类净利率进入上升通道，2024 年扩渠道逻辑下收入和<br>利润率有望持续提升。外销方面，本次CES 展新款割草机器人、全地形车、E-Bike<br>将逐步于欧美市场销售，其中全地形车在新品驱动下北美经销商网点拓展顺利，<br>我们看好强产品竞争力驱动2024 年各品类收入增长以及盈利提升</p>\n<h3 id=\"联创光电\"><a href=\"#联创光电\" class=\"headerlink\" title=\"联创光电\"></a>联创光电</h3><p>公司是由江西省电子集团整合旗下部分优质军工资产<br>设立，军工底蕴浓厚。</p>\n<p>联创光电：深耕光电领域20 余载，聚焦超导与激光实现转型升级<br>公司深耕光电领域二十载，是“国家火炬计划重点高新技术企业”、  “国<br>家863 计划成果产业化基地”，近年来围绕“进而有为，退而有序”的经<br>营方针，加速剥离背光源与电缆业务，重点打造激光和超导等新兴产业。</p>\n<p>高温超导具有显著成本优势，适合大范围商业化应用，应用场景包括超导<br>感应加热、可控核聚变、高温超导单晶硅生长炉等。在超导感应加热方面，<br>高温超导感应加热设备有着高穿透、高能效、高均匀性、高梯度性的优势，<br>市场潜力巨大。在可控核聚变领域，高温超导能大幅降低托卡马克装置的<br>建造周期、体积和造价，可加快可控核聚变商业化应用。</p>\n<p>深耕光电领域二十余载，积极布局“超导+激光”焕发生机。江西联创光电科技股份有限<br>公司于1999 年6 月设立，2001 年3 月在上交所上市。公司是“国家火炬计划重点高新技<br>术企业”、“国家技术创新示范企业”、“国家863 计划成果产业化基地”，致力于成为<br>科技领先型企业。公司深耕光电领域二十余年，近年来公司围绕“进而有为，退而有序”<br>的经营方针，重点打造激光和超导两个高科技新兴产业。在光电领域，公司积淀形成了良<br>好的光电子产业基础和产业转化能力，产品布局包括智能控制部件、背光源及应用、电线<br>电缆等产业板块；在激光领域，2019 年11 月公司设立江西中久激光技术有限公司，通过<br>产研融合的方式实现激光反无人机领域全产业链布局；在超导领域，联创超导于 2019 年<br>成功研制世界首台兆瓦级高温超导感应加热装置，为工业热处理行业提供了一种全新的、<br>具有颠覆性变革的技术创新应用。同时，公司基于已掌握的高温超导磁体技术积极布局于<br>可控核聚变、磁控单晶硅生长炉等领域，目前已组建团队开展相关研究。</p>\n<p>背光源与电缆业务：毛利率下降趋势明显，公司加速剥离背光源与电缆业务</p>\n<p>激光与超导：多年光电积淀，激光+超导两大新兴产业齐发力。激光方面，公司2019 年设<br>立子公司中久激光，并于2020 年4 月成立中久光电产业研究院。目前公司已形成了从“泵<br>浦源”器件产品到“激光器”集成产品，再到“光刃系列”整机产品的完整的产品体系。<br>2023 年上半年，激光产品实现主营业务收入 1.20 亿元、净利润  0.32 亿元，较上年同期<br>分别增长 14.49%和 33.9%；高温超导方面，目前由参股子公司联创超导开展超导业务，<br>研发团队自 2013 年开始研发兆瓦级高温超导加热设备，交付予中铝东轻的首台设备投产<br>标志着公司在高温超导领域取得重大进展，截至2022 年12 月31 日超导感应加热设备订<br>单已超过60 台，公司预计超导产业园达成后，高温超导产品年产能有望达到500 台以上。</p>\n<p>我们认为，公司聚焦激光、超导两大未来主业优化产业结构已初见成效，激光产业产能快<br>速释放，未来营业收入有望持续增长</p>\n<p>激光等高毛利业务放量叠加背光源与线缆等低毛利业务剥离，有望驱动公司盈利能力稳步<br>提升。归母净利润方面，2022&#x2F;2023H1 公司实现归母净利 2.67&#x2F;2.15 亿元，同比增长<br>15.41%&#x2F;20.06。毛利率方面，2022&#x2F;2023H1 年公司实现整体销售毛利率14.73%&#x2F;18.08%，<br>继续保持稳步提升趋势。分板块来看，2022 年公司智能控制&#x2F;背光源&#x2F;激光系列产品的毛利<br>率分别为 16.75%&#x2F;4.49%&#x2F;35.83%。费率方面，公司期间费用整体控制有效，研发支出保<br>持稳定。2022&#x2F;2023H1 期间费用率为 15.76%&#x2F;13.49%，整体呈下降趋势；2022&#x2F;2023H1<br>年研发费用分别为 1.66&#x2F;0.71 亿元，研发投入保持稳定。我们认为，随着公司激光等高毛<br>利业务放量叠加背光源与线缆等低毛利业务剥离，未来公司盈利能力有望持续提升。</p>\n<p>超导可以分为低温超导、高温超导与室温超导，高温超导具备成本优势。超导是指某些物<br>质在环境温度降至某一临界温度以下时，电阻突然变为零的现象。</p>\n<p>低温超导材料一般都需在昂贵的液氦环境下工作，而高温超导材料临界温度较高，可以在液氮环境中工作，目前<br>工业液氮制冷已较为成熟，一吨液氮的价格稳定在一千元以下，适用范围广且价格低廉；<br>室温超导要在 1GPa（1 万倍左右的大气压）下才能够实现超导态，而实现高温超导的制<br>冷成本低于加压到1GPa 的成本，整体来看，我们认为高温超导实现产业化应用的前景更<br>为广阔</p>\n<p>超导材料具有三大独有特性：零电阻、完全抗磁性、量子隧穿效应</p>\n<p>目前高温超导产业化应用得到了实质性发展，高温超导感应加热、高温超导单晶硅生长炉、超导磁<br>储能、可控核聚变等领域的市场空间也将逐步打开。 </p>\n<p>效率优势：高温超导感应加热能效转化率最高达 85%，相比传统加热炉提升一倍以<br>上。传统的工频炉在加热时大量的热能消耗在产生磁场的铜线圈上，并没有注入工件<br>体内，因此加热效率仅为40%左右。超导感应加热由于利用了超导材料零电阻的特性，<br>产生强磁场过程中只有低温制冷损耗、机械传动损耗等，因此可以将加热能效大幅提<br>升到最高85%</p>\n<p>加热质量优势：高温超导感应加热的透热深度与加热均匀度显著提高。感应炉的加热<br>功率正比于磁场强度与加热频率的乘积，由于超导感应加热炉的磁场是传统工频炉的<br>100 倍以上，使得超导炉可以实现5Hz 左右的极低频的加热，透热深度与加热均匀度<br>显著提高。在透热深度上，高温超导感应加热将传统工频炉 10mm 的透热深度大幅<br>提升至200mm 以上；在加热均匀度上，高温超导感应加热的感应电流可直接整体加<br>热工件内部，可以对大尺寸金属工件进行表芯同步快速均匀加热</p>\n<p>节能优势：由于高温超导感应加热可以将加热能效大幅提升到 85%，这就意味着一<br>台加热功率为1mw 的高温超导加热设备可以替代掉传统2.5mw 的工频炉，一年可节<br>省超600 万度电，此外还能节省电力增容费和未来的碳排放指标等。</p>\n<p>经济性分析：高温超导感应加热综合运营成本低，投资成本回收快。高温超导感应加<br>热设备的设备投资成本高于传统大功率感应加热设备，但其综合运营成本低。以运营<br>成本中的外围设备电费为例，传统设备需配置大功率水冷机组，而超导直流感应加热<br>器所用超导线圈基本无能耗，因此外围辅助设备电力成本远低于传统交流感应加热设<br>备。得益于优越的能效表现和较低的营运成本，高温超导直流感应加热设备只需2-3<br>年就可收回全部设备投资成本</p>\n<p>高温超导感应加热及相关磁体技术应用范围广，市场潜力大。高温超导感应加热设备可广<br>泛用于铝、铜、镁、钛、特种钢材、高温合金等非磁金属加工热成型领域（包括挤压、锻<br>造、轧制等）、金属熔炼及半导体熔融等领域，</p>\n<p>激光系统：高功率激光器市场规模稳步提升，激光反无人机装<br>备需求旺盛</p>\n<p>刃整机：成本优势明显，未来产品矩阵有望持续丰富。公司光刃系列激光反制无人<br>机系统主要包括“光刃-I”和“光刃-II”两大产品，具有明显的技术优势。同样的<br>杀伤效果，公司产品重量更轻、体积更小，因此在合理利润空间下公司产品成本优势<br>较为明显。目前，第一代新型激光反制无人机产品生产线现已配置，并已完成其改进<br>设计、研制工作，且顺利通过专家组验收评审；第二代新型激光反制无人机产品顺利<br>完成研制并通过验收。我们认为，公司基于已掌握的激光核心技术加速产品研发与迭<br>代，未来光刃整机产品矩阵有望持续丰富</p>\n<p>公司在手订单充足，产能迅速扩张。激光业务是公司重点发展的高科技新兴产业，激光产<br>业持续高速增长。中久激光订单充足，产能饱满，泵浦源、激光器、激光电源等项目产能<br>已处于满负荷生产状态。根据业务发展规划，公司今明两年将加速增扩产能。我们认为，<br>公司激光业务订单饱满，已进入高速增长阶段，随着产能持续扩张，未来激光业务有望持<br>续发力。</p>\n<p>公司深耕光电领域二十载，在传统业务退而有序的同时，加速布局高温超导与激光系统两<br>大“大国重器”，盈利能力有望持续提升，并打开公司长期成长空间。我们预计公司<br>2023-2025 年营收分别为31.97、34.64、37.77 亿元，归母净利润分别为4.71、6.25、7.85<br>亿元，对应EPS 分别为1.04、1.37、1.73 元</p>\n<h3 id=\"寿仙谷\"><a href=\"#寿仙谷\" class=\"headerlink\" title=\"寿仙谷\"></a>寿仙谷</h3><p> 公司核心产<br>品破壁灵芝孢子粉采用独创的“四低一高” 超音速低温气流破壁技术， 提<br>高了破壁率， 也避免了重金属污染和物料氧化</p>\n<p> 随着我国人口老龄化加深， 灵芝孢子粉和铁皮石斛<br>等药食同源中药因具有积极的免疫调节功效而具备市场潜力</p>\n<p> 灵芝所含功效活性成分十分丰<br>富， 主要包括多糖类、 三萜类、 核苷酸、 甾醇、 生物碱、 脂肪酸等。 灵芝多糖和三萜类含量<br>是灵芝类作为中药饮片或保健食品的主要功效评价指标， 灵芝孢子是灵芝子实体的有性生<br>殖细胞， 主要有效成分含量高出灵芝 75 倍， 具有抑制肿瘤、 提升免疫力、 抗氧化、 保肝护<br>肝和调节血糖等药理作用， 但其细胞壁主要由坚硬的几丁质构成， 人的消化系统不易分解，<br>因此有必要对灵芝孢子粉进行破壁处理。 </p>\n<p>铁皮石斛常被用于身体保健及治疗临床复杂性、 慢性疾病， 具有消<br>炎去热、 养阴生津、 补益脾胃、 润肺止咳等功效。 铁皮石斛化学成分复杂， 据研究表明， 铁<br>皮石斛内含有多重有效活性成分， 包括多糖、 酚类、 生物碱， 还有木质素等， 具有增强免疫、<br>降低血糖、 降脂、 抗炎、 抗氧化、 抗肿瘤等作用。 </p>\n<p>多糖被认为可以提高免疫力，这是因为多糖具有免疫调节作用。多糖可以刺激机体免疫系统的活性，增强免疫细胞的功能，促进免疫细胞的增殖和活化，从而增强机体的抵抗力，提高免疫功能。多糖还可以调节免疫系统的平衡，增强机体对病原体的识别和清除能力，有助于预防和治疗疾病。</p>\n"},{"title":"yanbao1","date":"2024-01-28T03:20:17.000Z","_content":"### 国投电力\n雅砻江为我国第三大\n水电开发基地，自然资源禀赋优越，水量丰富且年际变化不大；流域已建成三大调节\n水库，梯级联合调度能力强；受益于以上两点优势，水电的发电利用小时数高且年际\n波动小。在目前优质水电资源基本开发完毕的背景下，雅砻江水电作为优质大水电的\n稀缺性凸显。\n\n 推进雅砻江水风光一体化建设，项目获取及消纳优势显著，未来新能源成长空间可期。\n根据公司规划，到 2025 年公司新能源装机增长空间有望达到 1000 万千瓦。公司依托雅\n砻江优质水电资源开展水风光互补，在周边新能源项目获取方面具有先天优势，且水\n风光互补可以平滑出力曲线、借已有通道实现打捆外送，公司风电光伏消纳优势明显\n\n\n火电资产结构优质，盈利有望显著改善。公司火电机组以高参数大容量机组为主，百\n万千瓦级机组占 67.5%；公司火电机组集中在沿海等经济发达、电力需求旺盛的地区，\n利用小时数有保障；且用煤结构里面海外煤占比高，随着今年海外煤价中枢下降及电\n力市场化改革的推进，我们预计公司火电板块的盈利有望迎来大幅改善\n### 三美\n\n生产厂家将视情况对有关产品的产能做转产处理,未来也存在配额量少的企业进行委外生产、配额转让的可能。 \n随着行情的周期性波动,行业产能逐步向头部企业集中,而一些小、散的产能逐步退\n\nPVDF 在锂电池中主要用于正极粘结剂与隔膜涂覆。PVDF 是一种高分子含氟聚合物，由 VDF\n（偏氟乙烯）聚合形成，属于可熔融加工氟树脂，下游可用于涂料、注塑、光伏背板膜、\n锂电池等诸多领域。传统应用方面，PVDF 涂料具有耐候、耐腐蚀、抗渗透等性能，具有较\n长的使用寿命，同时 PVDF 的加工性能优异，可以通过挤出成型等热塑性加工方法加工为\n薄膜、片材、管材、棒材等，在注塑领域应用广泛。新兴领域方面，PVDF 可用于光伏、水\n处理、锂电池等。PVDF 由于其耐高压能力强、热稳定性好、易于分散等优良特性可作为锂\n电池正极粘结剂，进而降低电极阻抗、减小电池极化。PVDF 还可被用于锂电池隔膜涂覆，\n主要起到提高耐高温性能、增加电解液保液量、增加高压状态下电池安全性等作用\n\n由于六氟磷酸锂和 PVDF 供需失衡问题突出，且未来仍有部分新增产能投产，行\n业整体盈利能力较差，但相对而言 FEP 供需格局相对较好，因此盈利能力相对较强，预计\n2024-2025 年公司含氟聚合物与含氟精细化工品项目整体毛利率为 3%/14.6%.\n\n### 伊利\n\n公司在费用投放上兼顾效率和效果，不断提升费用使用效率，未来销售费\n用率有望持续稳中有降。23Q3 归母净利率为9.85%，同比+3.51pct，盈\n利水平提升较为显著\n\n### 光模块\n\n光模块是光通信中实现光电和光电转换的光电子器件，是光通信产业的核心部分\n\n光模块产业链由上游的光芯片、光器件等，中游的光模块制造商和下游的设备商、运\n营商等组成。光模块上游包括光芯片、光器件、电芯片等，光器件行业的供应商较多，\n但高端光器件目前仍主要由国外供应商提供。光模块行业下游主要是包括电信运营\n商、互联网及云计算企业等，光模块产品的运营领域涵盖了互联网服务、电信市场等\n行业\n\n5G 和 IDC 建设拉动光模块需求，预期带来增量市场\n\n中国光模块厂商凭借劳动力成本等优势，在与海外厂商竞争中不断占据上风。\n\n![Alt text](image-13.png)\n\n### 中国移动\n\n中国移动预计 2022 年将投入 480 亿用于算力网络资本开支，其中数据中心将投入 58\n亿，公司预计未来算力网络的相关资本开支会逐步增长。2）1H22 中国联通资本开支为284\n亿元，同比增长 98.5%，公司将紧抓“东数西算”新机遇，倾力打造“联接+感知+计算+\n智能”的算网一体化服务。3）中国电信2022 年的产业数字化资本开支预算同比增长61.7%\n至279 亿元，公司2021 年末的算力总规模达到2.1EFLOPS，公司表示将加快算力规模建\n设，预计算力总规模将以超过年均80%的复合率增长，预计十四五末期将达到16.3EFLOPS\n\n云业务：运营商接捧互联网成为云计算市场主力军 \n政策推动云计算增长动力转向传统行业，三大运营商接捧互联网巨头成云计算市场主力军。\n受互联网流量增长 缓及国资云建设等政策影响，云计算行业增长动力逐步由互联网行业\n转向传统企业，在此背景下，三大运营商接捧互联网巨头成为政府、金融等行业的云服务\n主力军。 \n\n而在算力网络建设及国资云的拉动下，三大运营商云计算业务2Q22 合计实\n现营收360 亿元，同比增长108.5%，已成为云计算行业的主要增长极。\n\n运营商等国资企业在云计算行业中重要性提升，云基础设施国产化进程加速。国资云 构\n下，云基础设施的建设运营方多为运营商或相关国资企业，例如，中国首个国资监管云服\n务由中国电信牵头，联合中国电 、中国电 等多个央企共同完成。在国资云推动下，运\n营商等国资企业在云计算行业中重要性提升，市场份额由2019 年的12%提升至2021 年的\n23%。我们认为国资云的推广有望加速云基础设施国产化进程。以浙江省国资云为例，其\n建设采用全国产化信创服务器作为底层基础设施，依托具有国产自主知 产权的“ 天云”\n底座搭建而成。在国资云建设背景下，云基础设施国产化进程有望加速\n\nIDC：规划“4+3+X”数据中心布局，收入增速领先同业 \n三大电信运营商占据国内 IDC 市场的主导地位。据 IDC 统计，2021 年三大电信运营商在\n国内IDC 市场的总份额达67.9%，其中中国电信、中国联通、中国移动在中国IDC 市场的\n份额分别为27%、23%、18%\n\n东数西算带动下，三大运营商丰富机 资源，加快推进 IDC 布局。中国移动在 津冀、长\n三角、粤 澳大湾区、成渝四大热点区域中心，持续完善“4+3+X”数据中心布局，部 \n42.9 万 机 ；中国电信聚焦 津冀、长三角、粤 澳大湾区、川渝陕四大经济发达区推\n进“2+4+31+X+0”布局，部  IDC 超过 700 个，加强边缘计算能力建设，机 规模达到\n48.7 万 ，机 资源居于国内首位；中国联通按 “5+4+31+X”总体布局，聚焦 津冀、\n长三角、粤 澳大湾区等区域建设IDC 共808 个，机 规模达32.9 万 。截至2022 年上\n半年，三家运营商共有机 124.5 万 ，较21 年底新增7.6 万 。据三大运营商2021 年\n年报中披露的2022 年IDC 建设规划，下半年运营商机 规模将新增9.8 万 。 \n\n网络、运营及维护费用：中国移动计划不断提高网络能力和质量，算力网络建设等新基\n建项目加速建成投产，以支持5G 和产业数字化发展。据公司2021 年年报，公司计划在2022\n年底新增开通5G 基站47 万个，计划在2022 年新增IDC 机 4.3 万 ，并加快中心云、\n边缘云的建设进度。我们预计随着公司5G 网络和数据中心建设规模的扩大，其网络、运营\n及维护费用将相应有 提升，但随着主要算力节点逐步布局完成、5G 网络建设步入尾声，\n费用增速将呈现出逐年下降趋势，预计其  2022/ 2023/2024 年总网络运营和维护费用同比增\n长12%/9.5%/8%至人民币2,418.4 亿/2648.2 亿/2,860.0 亿\n\n### 中环\n\nQ4 基本盈亏平衡，单瓦盈利环降5-6 分；组\n件出货3-3.5GW，整体延续亏损。受价格快速下行影响公司计提减值亏\n损约 8-10 亿元；同时处理多晶硅参股公司股权，投资收益亏损 6-8 亿\n元，导致Q4 业绩承压。24 年看，硅片环节开工率分化加强+N 型占比\n持续提升，公司预计出货150GW+，维持龙头地位。 \n\n### 新华保险\n\n### 小米\n\n小 米自动驾驶的目标是 2024 年进入行业第一阵营，小米智能驾驶系统 装备了两颗英伟达 Orin X 芯片，单颗提供 508TOPS 的算力，搭载的 高精度激光雷达能够实现 0.05 米的泊车精度，以及 11 颗高清摄像头、 3 颗毫米波雷达、12 颗超声波雷达。\n\n小米 SU7 定位中大型纯电轿车，零百公里加\n速时间 2.78s。小米推出转速高达 21000 转/分钟的电机 V6/V6s 和转速高达 27200\n转/分钟的电机 V8s。电池方面推出了 800V 碳化硅高压平台， 5 分钟充电可以实\n现 220km 续航，研发的 CTB 一体化电池技术实现了 77.8%的体积效率。续航方\n面双电机的小米 SU7 Max 在 CLTC 续航能力可达 800 公里。公司自研小米泰坦\n合金，研发了 9100 吨锁模力的小米超级压铸机，能制造 72 个零件合而为一的\n一体化压铸后地板，让焊接点减少 840 处，重量减轻 17%。\n\n应用场景不同，超声波雷达主要应用于泊车辅助、以及盲区碰撞预警。主要安装前后保险杠上作为倒车雷达，以及车身侧身测距。而毫米波雷达主要应用于自适应巡航、自动刹车辅助系统等。安装在汽车正前方、车辆后保险杠内、前保险杠内等位置\n\n \n### 三一\n\n对海外市场更为乐观：疫情扰动下借助产品力+供需缺口，中国工程机械出口销量大幅增加，\n20-22 年我国挖掘机出口销量 CAGR 为 60.21%。23 年下半年海外需求降温+海外供应链恢\n复，中国工程机械出海增速有所回落，市场普遍担心 24 年国产品牌海外销售下滑，甚至引\n发了对中长期国产品牌出海的悲观。我们认为，国内地产、基建需求反哺下，国产品牌产\n品力非常强，随着中国品牌持续布局海外研发、渠道、售后等，未来有望把“产品力”转\n化为“品牌力”，我们预计持续完善的海外布局+出口挖掘机吨位提升带来的均价提升有望\n支撑 24 年海外收入增长。三一重工作为国内龙头，领先的全球布局有望推动公司成长为全\n球龙头。 \n \n电动化虽言之尚早，但是长期来看带来的不只是业绩弹性，更重要的是对出海的助力：以\n史为鉴，发动机、液压技术等重大技术变革都会重塑工程机械行业格局，电动化作为又一\n重大技术变革有望重塑全球竞争格局。参照叉车行业，受益于锂电化浪潮，中国电动叉车\n的性能实现了重大突破，开启了中国叉车加速走向世界的新征程。中国“三电”技术全球\n领先，电动化趋势下有望助力中国品牌全球化进程。三一电动化布局逐步完善，掌握核心\n技术，有望在电动化浪潮下持续领先，并在电动化的助力下完善全球化布局，成长为全球\n龙头。\n\n预计毛利率随着海外占比提升、中大吨位占比增加而稳步提高，分别为 34%、\n35%、35.5%。\n\n### 牧原\n2023年,公司共计屠宰生猪1,326万头,同比增长80%,产能利用率由2022年的25%提升至46%,但距离理想的产能利用率仍有一定差距。 \n由于部分厂区投产时间短,2023年屠宰肉食业务尚未实现盈利,但头均亏损水平已由2022年的120元左右下降至2023年的70元左右。 \n2024年屠宰肉食板块会持续开拓市场,优化产品结构和客户结构,加强内部生产运营管理,以争取早日实现盈利。 \n 面对当前外部市场形势,公司会合理把控生产经营节奏,规划资本开支水平,持续降低成本,提高整体发展质量。 \n同时,公司当前资金储备充足,在融资端也与银行保持稳定的合作关系,能够保证现金流的安全稳定\n\n公司2023年全年的生猪养殖平均成本相比2022年下降了0.7元/kg,成本下降的来源主要是生产成绩的改善和期间费用的下降,如果将料价上升因素剔除,生产成绩\n改善和期间费用下降带来的成本下降贡献在0.9元/kg左右\n\n近期猪价上涨具有区域性特点,部分省份仔猪及商品猪价格有一定上涨,主要为节前短期供需变化所致。 \n全年来看,预计2024年整体价格表现相比2023年更乐观一些。 \n在供给端,当前能繁母猪仍处于较高水平,但整体为下降趋势,2024年生猪供应量预计将低于去年;在需求端,随着经济逐步企稳,2024年需求量预计将有一定上升\n\n 2023年12月底,公司能繁母猪数量为312.9万头,同比增长30万头左右。 \n对应今年出栏量也将有一定增长,增长比例预计在10%左右,实际出栏量将会受公司生产经营安排、生产成绩波动等多种因素影响,2024年具体出栏量区间指引将\n在2023年年度报告中披露\n\n### 理想\n\n理想将采用自研 800V高压纯电\n平台和5C 倍率电池；实现充电 9分 30秒，续航 400公里。充电时间比当前主流\n的 1.6C 电池缩短 66%。技术层面，理想 5C 电芯采用超离子环石墨负极技术+活\n性面调控技术，保证充电效率。通过低阻抗体系设计、一体化极柱结构设计和电\n芯间侧面冷却的热管理方案，保证充放电安全。\n\n高端车型智能驾驶芯片均采用英伟达 Orin，智能座舱芯\n片采用高通 8155。感知层面，均采用激光雷达+超声波雷达+毫米波雷达+摄像头\n的混合方案。伴随理想 L9上市，产品将具备 L4 级别辅助驾驶硬件，在硬件配置\n方面迅速追平行业领先地位\n\n### 蔚来\n光瀑式环绕氛围灯，256 色渐变，10 种氛围主题，支持呼吸律动、音乐联动，渲染轻松的家居格调\n\n### 宇通\n英国、 法国、 德国、 丹麦等国公交客车新能源化领先， 占据电动城\n市公交超 50%份额\n\n宇通客车 2022 年以 479 辆注册量排名第一（同比+58%） ， 2022 年其欧洲电动\n巴士市占率为 11.5%， 同比+2.3pct，\n\nBYD-ADL 排名第二， 2022 年注册量 465 辆（同比+24%） ， 其与英国当地最大的\n客车公司 ADL 合作（2015 年开始） ， 比亚迪提供底盘、 三电技术支持， ADL 根据\n当地市场需求专门定制外饰、 结构和车型等， 并且给予渠道资源的协助， 双方目\n前已生产电动大巴超 1000 辆， 在英国市占率 50%-70%\n\n中国客车市场黄金发展阶段（2009-2014 年） 已过， 同时\n存量公交新能源更新基本到位， 未来销量支撑主要来源于 1） 城镇化率提升背景\n下， 公交市场持续渗透， 需求较为刚性； 2） 疫情推迟存量替换， 更新需求迫切；\n3） 海外市场新能源化促进出口； 4） “双碳” 政策持续推进， 旅游、 团体等公路\n客车新能源化持续发展。\n\n房车： 市场规模年均复合增速\n\n技术进步和产品更新风险： 汽车行业属于资金密集、 技术密集型行业。 公司\n具备丰富的产品开发和制造经验， 而且历年来始终注重新技术、 新产品的研\n究与开发。 新技术、 新产品的研发离不开资金的投入， 如果公司未来在新产\n品开发过程中无法持续投入研发或没能及时开发出与新车型相配套的产品，\n将面临技术进步带来的风险和经营风险。\n\n### 比亚迪\n\n目前公司拥有刀片电池、 DM 混动、 e3.0 平\n台、 CTB 电池车身一体化、易四方、云辇和 DiLink 智能网联系统等领先科\n技\n\n腾势 N7 搭载智驾硬科技，未来可期。 公司首款智能豪华猎跑 SUV 腾势 N7\n正式上市，新车搭载智能座舱（ Link 超感交互智慧座舱，智慧六联屏，配备\n6nm 制程芯片， 5G 智能网联系统）、智能底盘（标准版配备自研云辇-A 智\n能空气车身控制系统）、智能驾驶（搭载腾势 Pilot 高阶智能驾驶辅助）三大\n智能科技，为用户带来卓越的智能驾驶体验\n\n比亚迪插电式混合动力技术（ DM 技术）积累始于 2006 年，现已形成主打“超强动\n力”的 DM-p 王者混动和主打“超低油耗”的 DM-i 超级混动两大技术平台。 DM-i 超\n级混动作为以电为主的混动技术，围绕大功率电机驱动和大容量动力电池供能为主，发\n动机为辅的电混架构，颠覆传统混动技术以油为主的设计架构， 达到超低油耗、静谧平\n顺、卓越动力的整车表现。 DM-p 王者混动，以电四驱超强动力，重新定义了四轮驱动，\n带来极速、安全、经济，三大极致用车体验。实现零到百公里加速在 5 秒以内，动力表\n现超越传统大排量燃油车。\n\ne3.0 平台让“电动”带来的智能优势、高效优势、安全优势、美学优势充分释放。 百\n公里电耗比同级别车型降低 10%，续航里程最大可突破 1000 公里。电池可承受 50 吨\n重卡碾压，满足“超五星”碰撞安全标准。\n\n2023 年 1 月，公司正式发布易四方技术。 易四方技术平台是一套以四电机独立驱动\n为核心的动力系统，从感知、控制、执行三个维度围绕新能源汽车的特性进行了全面\n重构，彻底颠覆以往燃油车的动力系统能力体系感\n\n辇产品矩阵包含云辇-C、云辇-A、云辇-P 等产品，将从舒适、\n操控、安全、越野等维度大幅提升消费者的驾乘体验。云辇能够有效抑制车身姿态变化，\n显著降低车辆侧翻的风险，减小驾乘人员坐姿位移。同时云辇系统可以在雪地、泥地、\n水域等复杂路况下，有效保护车身， 防止地形造成的整车磕碰损伤，提升驾乘舒适及安\n全性，实现对人和车的双重保护。\n\n全场景数字钥匙提供多种车辆解锁方式，包括 App 远程遥控、蓝牙钥匙和手机 NFC\n车钥匙。 最新一代 NFC 数字钥匙不仅与 iPhone、 Apple Watch 等设备兼容，还支持其\n他品牌设备。手机 NFC 数字钥匙具备高性能、超便捷、快分享、强兼容四大优势，适\n用于多种品牌手机，可以取代传统车钥匙，在无网络和电源的情况下也可以进行车辆解\n锁闭锁操作\n\n区别于传统汽车，新能源汽车最核心的技术是“三电”，\n包括电池、电机、电控。其中电机又称电驱系统，包括驱动电机、传动结构、控制器等，\n承担了新能源车运动相关的所有功能。电机的扭矩是否精确对新能源车的效率和性能至关\n重要。电控又被称为电源系统，包括 DC/DC 变换器、 OBC、高压配电盒，是传统发动机变\n速箱的替代，性能直接决定了电动汽车爬坡、加速、最高时速等指标。成本上来看，据钜\n大锂电，驱动电机、电控系统成本分别占到新能源汽车总成本的 6.5%/5.5%，是新能源车\n的重要组成\n\n### 重卡\n\n今年宏观经济处于弱复苏阶段，基建投资与物流运输需求温和，重卡\n行业处于恢复性增长阶段。明后年宏观经济复苏进程加快后，与投资\n相关的工程建设用车以及与快递快运相关的物流用车将持续增长。同\n时，在“到 2025 年新能源和国六排放标准货车保有量占比力争超过\n40%”的目标约束下，叠加国三、国四淘汰政策的催化，更新置换需求\n将有力支撑重卡市场恢复。此外，海外市场的需求持续增长，打开了\n重卡行业的增量空间，\n\n工程建设与物流运输是重卡的主要应用需求，因此固定资产投资与消费是重卡\n新增需求的核心驱动力。重卡的新增需求是指重卡市场的经济效益在增加，不断吸\n引着新进入者，导致重卡市场的绝对规模在增长。从应用场景来看，重卡产品主要\n应用于长途物流运输、工程建设、城市环卫、消防等场景。其中，物流运输用车需\n求由国内消费景气度决定，工程建设用车需求则由房地产开发投资与基建投资决\n定。因此，重卡的销量涨跌更容易受到宏观经济周期更替的影响。\n\n重卡出口的驱动力在于进口国经济增长与出海政策红利。目前我国重卡出口的\n目的地主要集中在“一带一路”沿线国家，占比超过 55%。其中，俄罗斯、越南、\n菲律宾、巴基斯坦等国是我国重卡出口的主要目的地。非洲、拉美地区也是重卡出\n口的主要地区。因此，重卡出口增速与新兴经济体的实际经济增速基本保持一致。\n同时，“一带一路”政策下，中国基建企业出海也带动了重卡出口销量。\n\n### 电力\n煤电容量电价按照回收煤电机组一定比例固定成本的方式确定。其中，用于计算容量电价的煤电机组固定成本实行全国统一标准，为每年每千瓦330元；通过容量电价回收的固定成本比例，综合考虑各地电力系统需要、煤电功能转型情况等因素确定，2024～2025年多数地方为30%左右，部分煤电功能转型较快的地方适当高一些，为50%左右。2026年起，将各地通过容量电价回收固定成本的比例提升至不低于50\n\n 由于华北地区基准电价较高，公司整体电价水平并不低，另一方面，2021年深化电力体制改革方案提出，煤电市场化交易浮动范围提高为上下20%，高耗能企业市场交易电价不受限制，内蒙古地区高耗能占比接近50%，电价具备上涨弹性。\n\n ### 中国化学\n\n 实业及新材料业务：中国化学始终以市场为导向，坚持“创新驱动”，积极发展\n实业及新材料业务，建立了“1 总院+多分院+N 平台”的技术创新平台体系，在\n新材料领域，已研发和掌握己内酰胺、己二腈、气凝胶等化工新材料领域核心技\n术，并达到国际先进水平。22 年以来公司气凝胶、PBAT、己二腈项目陆续投产，\n预计2022-2024 年实业及新材料业务的营收分别为74/130/156 亿元；目前国内\n己二腈产能有限，短期内己二腈项目可获得较高的利润率，预计 2022-2024 年\n实业及新材料毛利率分别为25%/22%/20%\n\n### 贵研铂业\n催化剂是什么？机动车尾气中含有一氧化碳（CO），碳氢化合物（HC），氮氧化合物（NOx）和颗粒物（PM）\n等污染物，会对人类健康和环境产生直接和间接危害。汽车尾气催化剂是最为有效的净化汽车尾气的处理方\n式，处理过程简单概括则为通过氧化反应把 CO 和 HC 变成二氧化碳和水，通过还原反应把 NOx 变成二氧化碳\n和氮气\n\n催化剂由四部分结构组成。分别是贵金属活性组分、催化剂载体、涂层及助剂；其中贵金属活性成分为催化\n剂的核心部分，主要是将金属铂、铑、钯的物质成分喷涂在蜂窝状陶瓷或金属为基体的载体上(也有颗粒型\n及 SiC 泡沫型)，而涂层及助剂层则是为了提高铂铑钯的分散度。催化剂活性组分的用途\n\n贵金属资源循环回收业务：公司国内龙头地位进一步强化\n\n随着贵金属矿产资源的不断开采，高品位资源严重匮乏，矿产金、银、铂族金属生产加工成本不断上升，贵\n金属再生资源越来越成为重要的贵金属原料供应来源。铂族金属再生不仅有利于保证供应和资源循环利用，\n同时具有明显的经济效益。由于资源短缺，欧美日等发达国家很早就开始对废旧贵金属加以回收利用，把二\n次资源回收作为重要的产业关键环节加以布局和扶持，在这方面具有较为系统的管理和运作机制。从地域分\n布来看，铂族金属的回收区域主要为欧洲、北美以及日本等经济发达地区，一些新兴国家的回收也开始显现。\n回收来源包括电子废料、废催化剂、失效化工催化剂、首饰等\n\n金属价格大幅波动，汽车产销不及预期，产能释放不及预期，贵金属新材料市场拓展规模不及预期\n\n### 旗滨\n\n中性硼药用玻璃性能优于钙钠玻璃和低硼硅玻璃。 药用玻璃是指专门用于药品\n包装的玻璃，一般指玻璃瓶罐及器皿。 药品的稳定性易受温度、湿度、空气、光、微\n生物等影响而变化，因此需要特殊的药用玻璃作为包装材料。 根据药用玻璃的材料，\n目前药用玻璃可以分为钠钙玻璃、低硼硅玻璃、 中硼硅玻璃和高硼硅玻璃四类。 化学\n性能是衡量药用玻璃质量高低的重要标准之一，其中， 最重要的参数是线热膨胀系数\n\n我国药用玻璃国产替代空间广阔。 我国药用玻璃市场规模在 2020 年达到 234 亿\n元，然而，国产仅占比 15%， 进口占比 85%，国产替代空间广阔\n\n公司药玻良品率逐步提升。 中性硼硅玻璃生产技术门槛高，需解决熔化过程气泡\n不易排出、易产生节瘤、成型时间短、尺寸精度要求高等技术难题。 公司持续技术突\n破，实现良品率的逐步提升，良品率由初期的约 30%提升至如今的 60%，与国际龙\n头企业肖特的良品率差距大幅缩小。\n、\n\n### 山推股份\n公司向潍柴动力采购发动机、从林德液压采购液压件、从山重建机采购\n挖掘机等，实现动力总成、液压件、变速箱、变矩器、四轮一带、研发\n等方面的资源共享，发挥“1+1＞ 2”的集合效应，实现了集团内部的\n优势互补，形成了人无我有的资源优势，极大提升了公司的核心竞争力\n\n公司是推土机行业龙头，形成多样化主机及配件的完整布局。 国产大马\n力推土机国内独家， 实现外资品牌替代， 出口订单充裕逐步放量； 受益\n于山东重工集团的整合优势，公司的主机产品型谱逐渐完善， 挖机和装\n载机渗透率提升空间大。 各项业务关键假设如下：\n1）推土机：大马力推土机出口需求旺盛，且公司定增募投项目产能释\n放，假设大马力产品销量高增；中小马力产品受国内基建需求影响，预\n计 23 年国内需求有所下降，随后企稳回升。\n2）装载机和挖掘机： 22 年并入上市公司体内，基数较低，借助集团海\n外销售渠道，受益于工程机械出口，预计收入迅速增长；假设毛利率维\n持稳定。\n3）配件：具备耗材属性，预计增速保持稳定略有增长；由于 23 年一\n季度钢材价格下滑，假设 23 年毛利率提升，后续维持稳定。\n\n### 钢研高钠\n\n生产技术门槛高， 独家供应享主导地位。 ODS 合金目前属于国外封锁技术，生产技术难度大，\n进入门槛很高。 据招股说明书， 公司是我国目前唯一具备 ODS 合金生产技术的企业，且唯一\n实现了量产，生产的该类产品全部应用在航空航天发动机关键部件，处于独家供应状态。公\n司目前已拥有自行设计的机械合金化装备与特种工艺技术，在 ODS 合金领域处于事实上的主\n导地位\n\n高温抗氧化和耐碳、硫腐蚀之“王”，高温组织稳定性\n好，热膨胀系数低，冷、热和机加工性能好，耐温高达\n1350℃。\n\n### 国电南瑞\n\n电网建设投资于两大方向，一是以特高压直\n流为主的跨区跨省输电，来解决新能源大基地送出问题。二是加强配电网建设，来应对\n日益增长的分布式电源发展、电动汽车接入等需求。我国电网建设的大背景是以新能源\n为主体的新型电力系统建设，而我国清洁能源主要分布在西部和北部地区，需要高效运\n输新能源需要发挥电网的资源配置优势。配电网领域需要进行数字化赋能，构建以数字\n电网建设支撑的新型电力系统和新型能源体系\n\n整体来看，国电南瑞子公司占所有61 家国家电网2022 年度中标企业中标份额超过49%，\n占比近半，国电南瑞行业龙头地位显著\n\n### 中核科技\n\n华龙一号”公司单机组核岛阀门价值量2.69 亿元，至2030 年公司国\n内核电阀门价值量约40 亿元，十倍增长空间。公司在核电机组切断类\n阀门市占率50%以上，依据纽威股份招股说明书，切断类阀门包括括闸\n阀、截止阀、隔膜阀、旋塞阀、球阀、蝶阀等，该类阀门在核岛阀门中\n占比为83%。公司单台机组核岛阀门价值量约2.69 亿元。至2030 年，\n公司新增核岛阀门价值量约26.85 亿元，维修阀门价值量约15.41 亿元。\n而公司2022 年核电核化工产品收入近4.31 亿元，还有约十倍的增长空\n间\n\n核电阀门是民用核安全设备，竞争格局清晰。\n\n气液联动执行机构突破，单机组价值量仍有望提升。公司在气液联动执\n行机构研发方面取得了突破，在漳州核电、国核示范快堆等项目上已实\n现供货，目前在手订单几千万\n\n产能逐步扩充，应对产能瓶颈。公司目前已按实施产能扩充方\n\n三倍核能宣言有望打开核电出口市场。根据中国核电网，美国等二十二\n国发布《三倍核能宣言》，核心内容包括共同努力推进到2050 年将全\n球核能容量增加两倍，达到目前容量三倍的目标，\n\n核电站建设加速有望带来乏燃料后处理方向的投资额提升。\n\n我国坚持闭式循环，希望解决燃料可持续问题。通常来讲，压水堆核电\n站铀资源的利用率仅为0.6%左右，如果对乏燃料进行后处理，用“榨”\n出来的铀在压水中再循环一次，可节省天然铀25%；若如此多次循环，\n则铀资源的利用率可以达到1%；若将后处理得到的钚与铀富集后剩下\n的贫铀制成快堆燃料，铀资源的利用率可以达到60%到70%。同时，\n经过后处理的乏燃料长期放射性毒性降低。以百万千瓦压水堆核电站为\n例，每年产生的乏燃料为25 吨至30 吨，乏燃料中有大量的放射性元素，\n毒性大、半衰期长，要在地质处置过程中衰变到天然铀矿水平需10 万\n年以上，但经过后处理等环节后，其放射性摄入毒性降到天然铀辐射水\n平的时间可减至千年以\n\n公司深度参与后处理工程。公司在后处理的关键阀门供货中承担了重要\n任务，取得了穿地阀等重要核心阀门订单，未来有望成为公司第二增长\n曲线\n\n高温气冷堆有望突破，打开公司业绩增长第三\n\n四代核电愈行愈近，在可持续性、经济性、安全与可靠性、废物最小化、\n防扩散和实体保护等领域有较大优势。第四代核能系统国际论坛（GIF）\n发起了有关未来核能系统的联合研究。中、法、韩、日、俄、美、欧盟\n之间由此展开了积极合作。GIF 提出了六大领域的技术目标和相关评估\n指标：可持续性、经济性、安全与可靠性、废物最小化、防扩散和实体\n保护。六类最有前景的核系统被选中，其中两类为气体（氦）冷却反应\n堆，另两类是液态金属（钠、铅合金）冷却堆，还有一类超临界水冷堆，\n最后一类是熔盐冷却\n\n甘肃武威 2MW 钍基熔盐堆获得运行许可。钍基熔盐堆核能系统以\nLiBeNaZr 等的氟化盐与溶解的U、Pu、Th 等的氟化物熔融混合后作燃\n料，在600-700°C的高温低压下运行，其中LiF﹑NaF﹑BeF2 和ZrF4 为\n载体盐，UF4 和PuF3 为裂变材料，ThF4 和UF4 为增殖燃料，吸收中子\n后产生新的裂变材料U 和Pu。我国具有丰富的钍资源，钍基熔盐堆亦\n被视为增殖核燃料的一条途径。中科院上海应物所正在研究设计2MW\n的试验反应堆和20MWe 模块化钍基熔盐堆研究堆及科学设施。钍基熔\n盐堆技术仍有很多问题有待解决，而且要建立一套以铀钍循环为基础的\n核燃料循环工业体系\n\n工业阀门上游主要包括原材料、铸件、锻件及阀门设计：阀门产品制\n造的最重要的原材料是钢材料与铜材料，其成本占阀门制造企业主营成\n本的70%左右；中游按照不同阀门结构分为闸阀、压力阀、蝶阀、球\n阀、旋启阀。下游应用行业较多：其中占比较大应用较多的为石油化工、\n冶金、电力、水处理等行业。阀门在机械产品中比重较高，是石油、化\n工、电站、长输管线、造船、核工业、宇航以及海洋采油等国民经济各\n部门不可缺少的流体控制设备。从下游应用分布来看，油气、能源、炼\n化、化工等是工业阀门的主要下游，占比分别达到17%、14%、13%\n及11%，四个主要下游合计占比近55%\n\n国内炼化一体化建设持续推进，全球\nLNG 运输船有望迎来集中交付。目前国内工业阀门市场参与者众多、竞争格局\n分散，进出口价差大，国产阀门向高端定制升级。公司在工业阀门高端市场拓展\n有所成效，已与中石化、上海卓然等签订战略合作协议，入围中石化和中石油的\n年度框架；海外及新下游领域稳步拓展，有望进一步巩固阀门龙头优势\n\n核电进入批量化周期：我们\n详细梳理并测算了核电行业及核岛阀门行业的市场空间，截止2023 年12 月15 日，\n核准待开工核电机组8 台，选址通过待核准机组有14 台，受理选址环评机组共3\n个厂址、6 台机组。经测算，国内核电站年均投资额1860 亿元，从2020 年开始至\n2028 年核电投资额CAGR 约 22%\n\n我们预计公司 2023-2025 年收入为 18.31/23.89/29.24 亿元，归母净利润为\n2.53/3.55/4.73 亿元，对应 EPS 分别为 0.66/0.92/1.23 元，对应 PE 分别为\n\n核电核化工产品：公司作为核岛阀门核心供应商，①持续聚焦高端核岛\n阀门主业，在手订单饱满，核电新开工机组数有望上行；②扩充单机组\n价值量，盈利能力有望再上台阶；③后处理建设刻不容缓，有望打开公\n司第二增长曲线；④高温气冷堆在规划中，公司有望打开第三增长极。\n我们预计 2023-2025 年核电核化工产品收入增速分别为 55.89%、\n64.79%、36.13%，毛利率分别为35.00%、36.00%、37.00%\n\n公司在核电站用关键阀门领域基本具备二代、三代核电机组阀门成套供货能力,四代核电机组关键阀门供货能力;在核燃料真空阀及浓缩铀生产关键阀门领域,四大\n类国产化关键阀门总体性能达到或超过进口产品水平,具备成套供货能力。 \n\n### 湖南黄金\n锑性质独特，在广泛的应用领域发挥着关键作用，享有“工业味精”的美称。从物理性质\n上看，锑具有低熔点（630.74°C）、高沸点（1750°C）、无延展性的特征，是电和热的不良\n导体。锑热缩冷胀的特性可以使合金的硬度发生变化，常应用于军事武器；从化学性质上\n看，锑具有双重属性，既亲铜又亲氧，低温时亲硫成矿，高温时亲石分散。此外，锑不溶\n于一般的酸碱溶液，只有王水、浓酸等溶液才会将其溶解。锑具有耐腐蚀和高强度特性，\n作为转轴生产的关键材料应用于机械齿轮；锑与卤族元素易生成相应的卤化物，产生大量\n卤化物白烟。利用锑的低燃点特性，西方发达国家强制要求在如建材产品、电子电器产品、\n塑料制品等易燃材料中添加卤化锑作为阻燃材料，当前还未发现比锑更好的阻燃代替品。\n\n1）价格假设 \n金价假设：2023 年黄金均价为 450 元/克。美联储加息周期已经结束，预计美联储正式释\n放降息信号后实际利率逐步回摆，推动金价上行。我们预计 2024-2025 年金价分别为\n485/490 元/克。（2024 年初至今黄金均价为 480 元/克） \n锑价假设：2023 年锑锭均价为 8.15 万元/吨。全球锑矿供给增量有限，需求端光伏新增\n装机高增带来锑金属长期需求动能，预计全球锑供需平衡维持短缺且缺口具有扩大趋势。\n我们预计 2024-2025 年锑锭均价为 8.5/8.7 万元/吨。（ 2024 年初至今锑锭均价为 8.48 万\n元/吨） \n钨价假设：公司自有矿山及外购钨精矿生产仲钨酸铵，2023 年仲钨酸铵均价为 17.9 万元\n/吨，我们预计 2024-2025 年仲钨酸铵价格维持 2023 年水平。（2024 年初至今仲钨酸铵均\n价为 18.1 万元/吨） \n（2）成本假设 \n自产金成本：公司自有矿山分为纯黄金矿和金锑伴生矿，伴生矿山成本由黄金和锑分摊，\n由于 2023 年公司矿山停产影响，成本上涨较为明显，预计 2024-2025 年成本有所回落，\n预计 2023-2025 年公司综合自产金生产成本分别为 250/245/245 元/克。 \n自产锑成本：公司锑品分为自有矿山和外购原料生产，自有矿山成本较为可控，产品毛利\n率较高，属于公司高盈利能力产品。我们预计 2023-2025 年公司自产锑品中含量锑生产成\n本维持 2.7 万元/吨。\n\n### 猪\n公司生猪养殖成本下降的根本在于养殖生产效率的提升,核心在于猪群的健康管理,最终体现至成活率、料比、生长速度等生产指标的全面改善。 \n在疫病防控方面,公司当前正在搭建“猪病天网工程”,对生猪相关的多种疾病进行全面深入的研究,配备环控系统、生物安全管理、检测体系、免疫管理等措施,\n将研究成果落地生产管理\n\n### 铝\n铝土矿本身不稀缺，但分布严重不均。主要的制造业和工业品输出国比如我们中国，还有日韩等，铝土矿大量依赖进口。大储量高品质易开采的铝土矿分布在澳大利亚、几内亚等制造业规模规模并不庞大的国家。这导致了铝土矿的供需矛盾在全球进入一个相对“无序”的状态下的会变得紧张。\n\n，铝股的弹性，几乎是大宗商品股票里面最强。铝股在大宗商品上涨的周期里，动不动就是几倍十倍的涨幅，比如05-07年的铝股大涨，几乎都是五六倍七八倍的涨幅。最近一次大宗商品暴涨让美国铝业的股价涨了差不多20倍，中国铝业则也涨了4倍多。一旦未来铝土矿再次大幅度上行，铝股的涨幅大概率会比较大。未来即使铝土矿价格没有大幅度上涨，长期保持高位，那铝股的盈利能力也是非常强的\n\n铝股的位置相对还算安全，铝价未来有较大的上涨空间，因此我几乎是没有犹豫的买入了云铝股份。云铝股份本身有一定的铝矿，同时享有比较好的电力资源（电力成本是决定铝价的重要因素），同时作为央企的子公司，它拥有更好的风险管理能力和庞大市场。还有一些财务和产销上的细节在这里不做赘述。之前我买入过神火股份，有一个不错的收益，但后面复盘发现神火主要跟的是媒，这也算是歪打正着。神火目前价格已经被炒得很高了，虽然估值看起来比较低，但综合考虑而言没有云铝那么有弹性了。中国铝业这些当然也可以，都是一波的，但在确定性比较足的情况下我选择爆发性最好的那个。\n\n现货价格他们都在高位，整体维持涨价，加上美元降息预期，股价低位，所以存在修复逻辑，未来行业业绩能见度高，业绩反转之后，最少也是高息股逻辑。赔率和胜率兼备\n\n绿电铝龙头，成本优势凸显：公司产能全部位于云南，用电结构中水电\n比例约达88.6%；得益于云南低价水电，云南地区电解铝企业综合用电\n成本长期位于全行业前20%分位水平。且随着欧洲碳税政策加码，公司\n未来有望享受显著成本优势\n\n吨铝市值行业最低，涨价弹性领先行业：根据各公司电解铝权益产能和\n市值，我们测算可得云铝股份吨市值为可比公司最低，仅为2 万元，远\n低于可比公司。当电解铝价格上涨10%时，公司2022 年PE 有望从 11\n倍下降至6 倍，涨价弹性可观\n\n国企改革持续推进，管理层购股参与\n分红；财务报表和资产结构优化，业绩释放可期。2018 年至2022 年，\n公司 ROE 大幅增长、资产周转率和销售净利率也迅猛提高，公司资产\n结构显著优化，盈利质量和资产质量明显提升\n\n电解铝的原料氧化铝不足以自给，中铝作为稳定的上游资源供应商，使得云铝无需保持\n\n长期氧化铝高库存，降低了氧化铝存货波动\n\n铝（Al）是一种银白色金属，在地壳中含量仅次于氧和硅，具有轻便性、高导电性、\n高导热性、耐腐蚀性等优良特性，是机械、电力、航空航天、船舶制造、汽车制造、包\n装、建筑、交通运输和房地产等行业的重要材料，在国民经济中占有重要地位\n\n汽车轻量化拉动：根据国际铝协数据，2020 年国内传统乘用车/纯电动/混动新\n能源乘用车单车用铝量分别为 138.6/157.9/198.1kg，其预计到 2025 年中国传统燃油车/\n纯电动/插电混动车的单车用铝量能分别提升至180/227/238kg。\n\n得益于电解铝下游地产开工回暖，汽车轻量化和光伏电站建设旺盛，电解铝迅速去\n库；根据我国主要市场（上海、无锡等地）电解铝库存数据，2023 年4 月20 日库存仅\n为86 万吨，同比下滑19%、周度环比下滑14%\n\n公司在铝土矿—氧化铝及铝用炭素方面的资源优势为公司控制生产成本，规避大宗\n原辅料价格波动风险提供坚强保障。\n\n绿电铝龙头，成本优势凸显。依托云南省丰富的绿色电力优势，2022 年公司生产\n用电结构中绿电比例达到约88.6%。公司依托绿色能源生产的绿色铝与煤电铝相比，碳\n排放仅为煤电铝的约20%左右。水电铝相比火电铝，除了用电成本更低，还有很好的减\n排效果。生产一吨水电铝，要比火电铝减少碳排放 10 吨以上，降幅达 90%，同时减少\n粉尘量4 吨以上。尽管云南省政府从2021 年9 月份取消了0.25  元/千瓦时的优惠电价政\n策，但相较于全国其他省份，云南省电价仍处于全国低位。云铝股份因产能全部位于云\n南，可以充分享受云南低价水电带来的成本优势，生产成本位于行业前20%的低位水平\n\n### 华能国际\n\n公司实际控制方为国务院国资委，直接控股股东是华能集团。华能集团是中国核心电力\n集团企业之一，作为行业龙头在业务布局、规模效应、资源整合等多方面具有显著优势。\n华能集团直接持有公司9.91%的股权，通过中国华能集团香港有限公司和华能国际电力\n开发公司分别间接持有公司3.01%和32.28%的股权\n\n但随着煤电上\n网电价的提升以及新能源发电量增长，公司收入规模持续提升且盈利能力有所改善，亏\n损幅度较2021 年有所收窄。受益于2023 年煤炭价格中枢回落和电量同比增长，以及境\n外电力资产盈利提升，2023H1 公司实现归母净利润63.1 亿元，同比大幅增长309.7%，\n业绩增速突出，扭亏为盈。 \n\n火电仍是最大营收来源，清洁能源盈利能力高位持稳。 \n➢ 营收结构方面：电力及热力业务占比达95.3%，以火电为主，但随着公司向清洁能\n源转型，风电和光伏发电的营收占比逐渐增大，其中风电营收增长明显，从 2018\n年占整体营收的3%逐步扩张到2022 年的6%。 \n➢ 利润贡献方面：近两年，受煤价上涨影响，火电处于大幅亏损状态，风电成为公司\n利润的主要来源。 \n➢ 盈利能力方面：由于 2021 年前集中式光伏电站、工商业分布式光伏项目和新核准\n陆上风电并网项目均享受补贴政策，公司风、光毛利率维持在50%以上水平。\n\n分红方面，公司现金分红政策规定公司在当年盈利及累计未分配利润为正，且公司现金\n流可以满足公司正常经营和可持续发展的情况下，现金分红比例不少于当年实现的合并\n报表可分配利润的50%。2021-2022 年，出于归属于本公司股东的净利润为负、公司转\n型发展的投资需求以及资产负债率上升等原因，公司决议不分红。随着公司业绩扭亏为\n盈，盈利能力提升，预期未来将回归合理分红水平。\n\n辅助服务市场机制不断完善，容量电价呼之欲出，火电调峰收益兑现。各省市纷纷出台\n相关的政策措施，助力火电充分发掘容量和调峰特性，驱动火电灵活性改造，并为未来\n火电盈利再开源\n\n机组分布集中沿海地区，区位优势突出。公司境内电厂分布在 26 个省、自治区和直辖\n市，多数位于沿海沿江地区，经济发展快，用电量和电价水平较高；内陆电厂大多分布\n在环绕首都和燃料陆运直达区域，有利于多渠道采购煤炭、稳定供给。同时公司拥有港\n口及码头资源，对提高集约化燃料管理起到了极大的支持作用，有利于公司统一库存、\n发挥淡储旺耗的功能，加速煤炭周转，减少滞期费用。此外，公司在新加坡全资拥有一\n家营运电力公司，在巴基斯坦投资一家营运电力公司。公司电厂的境内外区域布局可以\n形成优势互补、增强抵抗经营风险的能力\n\n2019-2022 年，华能国际风电、太阳能装机容量分别以年复合增长率 32%和 66%的速\n度增长，远超于全国风电、太阳能装机容量年复合增长率 20%和 24%，增速领先全行\n业。公司2022 年风电发电量为280.68 亿千瓦时，同比增长34.72%，太阳能发电量为\n60.8 亿千瓦时，同比增长69.65%，分别占全国风电发电量的3.68%和1.42%，实现快\n速增长。 \n \n ；2022 年公司上网结算电价已经有近 20%的涨幅，我们预计在现\n有电价政策下后续趋于稳定，但一旦电改相关政策推进，仍有上涨空间。\n\n清洁能源板块：公司致力于新能源转型，并且在“十四五”期间保持风电光伏\n装机较快增速，2023 年已为“十四五”中期，我们预计后两年装机增速将会进一步提升\n以完成公司的十四五装机目标。叠加硅料及光伏组件价格加速下降，以及 CCER 和绿电\n交易机制进一步推广，公司的新能源项目盈利能力将进一步增强。我们预计 2023-2025\n风电与光伏装机规模增量分别为2.5/3.5/5GW 和6/8/10GW，风光利用小时数仍将保持\n稳定\n \n \n \n \n \n \n \n \n \n \n","source":"_posts/yanbao1.md","raw":"---\ntitle: yanbao1\ndate: 2024-01-28 11:20:17\ntags:\n---\n### 国投电力\n雅砻江为我国第三大\n水电开发基地，自然资源禀赋优越，水量丰富且年际变化不大；流域已建成三大调节\n水库，梯级联合调度能力强；受益于以上两点优势，水电的发电利用小时数高且年际\n波动小。在目前优质水电资源基本开发完毕的背景下，雅砻江水电作为优质大水电的\n稀缺性凸显。\n\n 推进雅砻江水风光一体化建设，项目获取及消纳优势显著，未来新能源成长空间可期。\n根据公司规划，到 2025 年公司新能源装机增长空间有望达到 1000 万千瓦。公司依托雅\n砻江优质水电资源开展水风光互补，在周边新能源项目获取方面具有先天优势，且水\n风光互补可以平滑出力曲线、借已有通道实现打捆外送，公司风电光伏消纳优势明显\n\n\n火电资产结构优质，盈利有望显著改善。公司火电机组以高参数大容量机组为主，百\n万千瓦级机组占 67.5%；公司火电机组集中在沿海等经济发达、电力需求旺盛的地区，\n利用小时数有保障；且用煤结构里面海外煤占比高，随着今年海外煤价中枢下降及电\n力市场化改革的推进，我们预计公司火电板块的盈利有望迎来大幅改善\n### 三美\n\n生产厂家将视情况对有关产品的产能做转产处理,未来也存在配额量少的企业进行委外生产、配额转让的可能。 \n随着行情的周期性波动,行业产能逐步向头部企业集中,而一些小、散的产能逐步退\n\nPVDF 在锂电池中主要用于正极粘结剂与隔膜涂覆。PVDF 是一种高分子含氟聚合物，由 VDF\n（偏氟乙烯）聚合形成，属于可熔融加工氟树脂，下游可用于涂料、注塑、光伏背板膜、\n锂电池等诸多领域。传统应用方面，PVDF 涂料具有耐候、耐腐蚀、抗渗透等性能，具有较\n长的使用寿命，同时 PVDF 的加工性能优异，可以通过挤出成型等热塑性加工方法加工为\n薄膜、片材、管材、棒材等，在注塑领域应用广泛。新兴领域方面，PVDF 可用于光伏、水\n处理、锂电池等。PVDF 由于其耐高压能力强、热稳定性好、易于分散等优良特性可作为锂\n电池正极粘结剂，进而降低电极阻抗、减小电池极化。PVDF 还可被用于锂电池隔膜涂覆，\n主要起到提高耐高温性能、增加电解液保液量、增加高压状态下电池安全性等作用\n\n由于六氟磷酸锂和 PVDF 供需失衡问题突出，且未来仍有部分新增产能投产，行\n业整体盈利能力较差，但相对而言 FEP 供需格局相对较好，因此盈利能力相对较强，预计\n2024-2025 年公司含氟聚合物与含氟精细化工品项目整体毛利率为 3%/14.6%.\n\n### 伊利\n\n公司在费用投放上兼顾效率和效果，不断提升费用使用效率，未来销售费\n用率有望持续稳中有降。23Q3 归母净利率为9.85%，同比+3.51pct，盈\n利水平提升较为显著\n\n### 光模块\n\n光模块是光通信中实现光电和光电转换的光电子器件，是光通信产业的核心部分\n\n光模块产业链由上游的光芯片、光器件等，中游的光模块制造商和下游的设备商、运\n营商等组成。光模块上游包括光芯片、光器件、电芯片等，光器件行业的供应商较多，\n但高端光器件目前仍主要由国外供应商提供。光模块行业下游主要是包括电信运营\n商、互联网及云计算企业等，光模块产品的运营领域涵盖了互联网服务、电信市场等\n行业\n\n5G 和 IDC 建设拉动光模块需求，预期带来增量市场\n\n中国光模块厂商凭借劳动力成本等优势，在与海外厂商竞争中不断占据上风。\n\n![Alt text](image-13.png)\n\n### 中国移动\n\n中国移动预计 2022 年将投入 480 亿用于算力网络资本开支，其中数据中心将投入 58\n亿，公司预计未来算力网络的相关资本开支会逐步增长。2）1H22 中国联通资本开支为284\n亿元，同比增长 98.5%，公司将紧抓“东数西算”新机遇，倾力打造“联接+感知+计算+\n智能”的算网一体化服务。3）中国电信2022 年的产业数字化资本开支预算同比增长61.7%\n至279 亿元，公司2021 年末的算力总规模达到2.1EFLOPS，公司表示将加快算力规模建\n设，预计算力总规模将以超过年均80%的复合率增长，预计十四五末期将达到16.3EFLOPS\n\n云业务：运营商接捧互联网成为云计算市场主力军 \n政策推动云计算增长动力转向传统行业，三大运营商接捧互联网巨头成云计算市场主力军。\n受互联网流量增长 缓及国资云建设等政策影响，云计算行业增长动力逐步由互联网行业\n转向传统企业，在此背景下，三大运营商接捧互联网巨头成为政府、金融等行业的云服务\n主力军。 \n\n而在算力网络建设及国资云的拉动下，三大运营商云计算业务2Q22 合计实\n现营收360 亿元，同比增长108.5%，已成为云计算行业的主要增长极。\n\n运营商等国资企业在云计算行业中重要性提升，云基础设施国产化进程加速。国资云 构\n下，云基础设施的建设运营方多为运营商或相关国资企业，例如，中国首个国资监管云服\n务由中国电信牵头，联合中国电 、中国电 等多个央企共同完成。在国资云推动下，运\n营商等国资企业在云计算行业中重要性提升，市场份额由2019 年的12%提升至2021 年的\n23%。我们认为国资云的推广有望加速云基础设施国产化进程。以浙江省国资云为例，其\n建设采用全国产化信创服务器作为底层基础设施，依托具有国产自主知 产权的“ 天云”\n底座搭建而成。在国资云建设背景下，云基础设施国产化进程有望加速\n\nIDC：规划“4+3+X”数据中心布局，收入增速领先同业 \n三大电信运营商占据国内 IDC 市场的主导地位。据 IDC 统计，2021 年三大电信运营商在\n国内IDC 市场的总份额达67.9%，其中中国电信、中国联通、中国移动在中国IDC 市场的\n份额分别为27%、23%、18%\n\n东数西算带动下，三大运营商丰富机 资源，加快推进 IDC 布局。中国移动在 津冀、长\n三角、粤 澳大湾区、成渝四大热点区域中心，持续完善“4+3+X”数据中心布局，部 \n42.9 万 机 ；中国电信聚焦 津冀、长三角、粤 澳大湾区、川渝陕四大经济发达区推\n进“2+4+31+X+0”布局，部  IDC 超过 700 个，加强边缘计算能力建设，机 规模达到\n48.7 万 ，机 资源居于国内首位；中国联通按 “5+4+31+X”总体布局，聚焦 津冀、\n长三角、粤 澳大湾区等区域建设IDC 共808 个，机 规模达32.9 万 。截至2022 年上\n半年，三家运营商共有机 124.5 万 ，较21 年底新增7.6 万 。据三大运营商2021 年\n年报中披露的2022 年IDC 建设规划，下半年运营商机 规模将新增9.8 万 。 \n\n网络、运营及维护费用：中国移动计划不断提高网络能力和质量，算力网络建设等新基\n建项目加速建成投产，以支持5G 和产业数字化发展。据公司2021 年年报，公司计划在2022\n年底新增开通5G 基站47 万个，计划在2022 年新增IDC 机 4.3 万 ，并加快中心云、\n边缘云的建设进度。我们预计随着公司5G 网络和数据中心建设规模的扩大，其网络、运营\n及维护费用将相应有 提升，但随着主要算力节点逐步布局完成、5G 网络建设步入尾声，\n费用增速将呈现出逐年下降趋势，预计其  2022/ 2023/2024 年总网络运营和维护费用同比增\n长12%/9.5%/8%至人民币2,418.4 亿/2648.2 亿/2,860.0 亿\n\n### 中环\n\nQ4 基本盈亏平衡，单瓦盈利环降5-6 分；组\n件出货3-3.5GW，整体延续亏损。受价格快速下行影响公司计提减值亏\n损约 8-10 亿元；同时处理多晶硅参股公司股权，投资收益亏损 6-8 亿\n元，导致Q4 业绩承压。24 年看，硅片环节开工率分化加强+N 型占比\n持续提升，公司预计出货150GW+，维持龙头地位。 \n\n### 新华保险\n\n### 小米\n\n小 米自动驾驶的目标是 2024 年进入行业第一阵营，小米智能驾驶系统 装备了两颗英伟达 Orin X 芯片，单颗提供 508TOPS 的算力，搭载的 高精度激光雷达能够实现 0.05 米的泊车精度，以及 11 颗高清摄像头、 3 颗毫米波雷达、12 颗超声波雷达。\n\n小米 SU7 定位中大型纯电轿车，零百公里加\n速时间 2.78s。小米推出转速高达 21000 转/分钟的电机 V6/V6s 和转速高达 27200\n转/分钟的电机 V8s。电池方面推出了 800V 碳化硅高压平台， 5 分钟充电可以实\n现 220km 续航，研发的 CTB 一体化电池技术实现了 77.8%的体积效率。续航方\n面双电机的小米 SU7 Max 在 CLTC 续航能力可达 800 公里。公司自研小米泰坦\n合金，研发了 9100 吨锁模力的小米超级压铸机，能制造 72 个零件合而为一的\n一体化压铸后地板，让焊接点减少 840 处，重量减轻 17%。\n\n应用场景不同，超声波雷达主要应用于泊车辅助、以及盲区碰撞预警。主要安装前后保险杠上作为倒车雷达，以及车身侧身测距。而毫米波雷达主要应用于自适应巡航、自动刹车辅助系统等。安装在汽车正前方、车辆后保险杠内、前保险杠内等位置\n\n \n### 三一\n\n对海外市场更为乐观：疫情扰动下借助产品力+供需缺口，中国工程机械出口销量大幅增加，\n20-22 年我国挖掘机出口销量 CAGR 为 60.21%。23 年下半年海外需求降温+海外供应链恢\n复，中国工程机械出海增速有所回落，市场普遍担心 24 年国产品牌海外销售下滑，甚至引\n发了对中长期国产品牌出海的悲观。我们认为，国内地产、基建需求反哺下，国产品牌产\n品力非常强，随着中国品牌持续布局海外研发、渠道、售后等，未来有望把“产品力”转\n化为“品牌力”，我们预计持续完善的海外布局+出口挖掘机吨位提升带来的均价提升有望\n支撑 24 年海外收入增长。三一重工作为国内龙头，领先的全球布局有望推动公司成长为全\n球龙头。 \n \n电动化虽言之尚早，但是长期来看带来的不只是业绩弹性，更重要的是对出海的助力：以\n史为鉴，发动机、液压技术等重大技术变革都会重塑工程机械行业格局，电动化作为又一\n重大技术变革有望重塑全球竞争格局。参照叉车行业，受益于锂电化浪潮，中国电动叉车\n的性能实现了重大突破，开启了中国叉车加速走向世界的新征程。中国“三电”技术全球\n领先，电动化趋势下有望助力中国品牌全球化进程。三一电动化布局逐步完善，掌握核心\n技术，有望在电动化浪潮下持续领先，并在电动化的助力下完善全球化布局，成长为全球\n龙头。\n\n预计毛利率随着海外占比提升、中大吨位占比增加而稳步提高，分别为 34%、\n35%、35.5%。\n\n### 牧原\n2023年,公司共计屠宰生猪1,326万头,同比增长80%,产能利用率由2022年的25%提升至46%,但距离理想的产能利用率仍有一定差距。 \n由于部分厂区投产时间短,2023年屠宰肉食业务尚未实现盈利,但头均亏损水平已由2022年的120元左右下降至2023年的70元左右。 \n2024年屠宰肉食板块会持续开拓市场,优化产品结构和客户结构,加强内部生产运营管理,以争取早日实现盈利。 \n 面对当前外部市场形势,公司会合理把控生产经营节奏,规划资本开支水平,持续降低成本,提高整体发展质量。 \n同时,公司当前资金储备充足,在融资端也与银行保持稳定的合作关系,能够保证现金流的安全稳定\n\n公司2023年全年的生猪养殖平均成本相比2022年下降了0.7元/kg,成本下降的来源主要是生产成绩的改善和期间费用的下降,如果将料价上升因素剔除,生产成绩\n改善和期间费用下降带来的成本下降贡献在0.9元/kg左右\n\n近期猪价上涨具有区域性特点,部分省份仔猪及商品猪价格有一定上涨,主要为节前短期供需变化所致。 \n全年来看,预计2024年整体价格表现相比2023年更乐观一些。 \n在供给端,当前能繁母猪仍处于较高水平,但整体为下降趋势,2024年生猪供应量预计将低于去年;在需求端,随着经济逐步企稳,2024年需求量预计将有一定上升\n\n 2023年12月底,公司能繁母猪数量为312.9万头,同比增长30万头左右。 \n对应今年出栏量也将有一定增长,增长比例预计在10%左右,实际出栏量将会受公司生产经营安排、生产成绩波动等多种因素影响,2024年具体出栏量区间指引将\n在2023年年度报告中披露\n\n### 理想\n\n理想将采用自研 800V高压纯电\n平台和5C 倍率电池；实现充电 9分 30秒，续航 400公里。充电时间比当前主流\n的 1.6C 电池缩短 66%。技术层面，理想 5C 电芯采用超离子环石墨负极技术+活\n性面调控技术，保证充电效率。通过低阻抗体系设计、一体化极柱结构设计和电\n芯间侧面冷却的热管理方案，保证充放电安全。\n\n高端车型智能驾驶芯片均采用英伟达 Orin，智能座舱芯\n片采用高通 8155。感知层面，均采用激光雷达+超声波雷达+毫米波雷达+摄像头\n的混合方案。伴随理想 L9上市，产品将具备 L4 级别辅助驾驶硬件，在硬件配置\n方面迅速追平行业领先地位\n\n### 蔚来\n光瀑式环绕氛围灯，256 色渐变，10 种氛围主题，支持呼吸律动、音乐联动，渲染轻松的家居格调\n\n### 宇通\n英国、 法国、 德国、 丹麦等国公交客车新能源化领先， 占据电动城\n市公交超 50%份额\n\n宇通客车 2022 年以 479 辆注册量排名第一（同比+58%） ， 2022 年其欧洲电动\n巴士市占率为 11.5%， 同比+2.3pct，\n\nBYD-ADL 排名第二， 2022 年注册量 465 辆（同比+24%） ， 其与英国当地最大的\n客车公司 ADL 合作（2015 年开始） ， 比亚迪提供底盘、 三电技术支持， ADL 根据\n当地市场需求专门定制外饰、 结构和车型等， 并且给予渠道资源的协助， 双方目\n前已生产电动大巴超 1000 辆， 在英国市占率 50%-70%\n\n中国客车市场黄金发展阶段（2009-2014 年） 已过， 同时\n存量公交新能源更新基本到位， 未来销量支撑主要来源于 1） 城镇化率提升背景\n下， 公交市场持续渗透， 需求较为刚性； 2） 疫情推迟存量替换， 更新需求迫切；\n3） 海外市场新能源化促进出口； 4） “双碳” 政策持续推进， 旅游、 团体等公路\n客车新能源化持续发展。\n\n房车： 市场规模年均复合增速\n\n技术进步和产品更新风险： 汽车行业属于资金密集、 技术密集型行业。 公司\n具备丰富的产品开发和制造经验， 而且历年来始终注重新技术、 新产品的研\n究与开发。 新技术、 新产品的研发离不开资金的投入， 如果公司未来在新产\n品开发过程中无法持续投入研发或没能及时开发出与新车型相配套的产品，\n将面临技术进步带来的风险和经营风险。\n\n### 比亚迪\n\n目前公司拥有刀片电池、 DM 混动、 e3.0 平\n台、 CTB 电池车身一体化、易四方、云辇和 DiLink 智能网联系统等领先科\n技\n\n腾势 N7 搭载智驾硬科技，未来可期。 公司首款智能豪华猎跑 SUV 腾势 N7\n正式上市，新车搭载智能座舱（ Link 超感交互智慧座舱，智慧六联屏，配备\n6nm 制程芯片， 5G 智能网联系统）、智能底盘（标准版配备自研云辇-A 智\n能空气车身控制系统）、智能驾驶（搭载腾势 Pilot 高阶智能驾驶辅助）三大\n智能科技，为用户带来卓越的智能驾驶体验\n\n比亚迪插电式混合动力技术（ DM 技术）积累始于 2006 年，现已形成主打“超强动\n力”的 DM-p 王者混动和主打“超低油耗”的 DM-i 超级混动两大技术平台。 DM-i 超\n级混动作为以电为主的混动技术，围绕大功率电机驱动和大容量动力电池供能为主，发\n动机为辅的电混架构，颠覆传统混动技术以油为主的设计架构， 达到超低油耗、静谧平\n顺、卓越动力的整车表现。 DM-p 王者混动，以电四驱超强动力，重新定义了四轮驱动，\n带来极速、安全、经济，三大极致用车体验。实现零到百公里加速在 5 秒以内，动力表\n现超越传统大排量燃油车。\n\ne3.0 平台让“电动”带来的智能优势、高效优势、安全优势、美学优势充分释放。 百\n公里电耗比同级别车型降低 10%，续航里程最大可突破 1000 公里。电池可承受 50 吨\n重卡碾压，满足“超五星”碰撞安全标准。\n\n2023 年 1 月，公司正式发布易四方技术。 易四方技术平台是一套以四电机独立驱动\n为核心的动力系统，从感知、控制、执行三个维度围绕新能源汽车的特性进行了全面\n重构，彻底颠覆以往燃油车的动力系统能力体系感\n\n辇产品矩阵包含云辇-C、云辇-A、云辇-P 等产品，将从舒适、\n操控、安全、越野等维度大幅提升消费者的驾乘体验。云辇能够有效抑制车身姿态变化，\n显著降低车辆侧翻的风险，减小驾乘人员坐姿位移。同时云辇系统可以在雪地、泥地、\n水域等复杂路况下，有效保护车身， 防止地形造成的整车磕碰损伤，提升驾乘舒适及安\n全性，实现对人和车的双重保护。\n\n全场景数字钥匙提供多种车辆解锁方式，包括 App 远程遥控、蓝牙钥匙和手机 NFC\n车钥匙。 最新一代 NFC 数字钥匙不仅与 iPhone、 Apple Watch 等设备兼容，还支持其\n他品牌设备。手机 NFC 数字钥匙具备高性能、超便捷、快分享、强兼容四大优势，适\n用于多种品牌手机，可以取代传统车钥匙，在无网络和电源的情况下也可以进行车辆解\n锁闭锁操作\n\n区别于传统汽车，新能源汽车最核心的技术是“三电”，\n包括电池、电机、电控。其中电机又称电驱系统，包括驱动电机、传动结构、控制器等，\n承担了新能源车运动相关的所有功能。电机的扭矩是否精确对新能源车的效率和性能至关\n重要。电控又被称为电源系统，包括 DC/DC 变换器、 OBC、高压配电盒，是传统发动机变\n速箱的替代，性能直接决定了电动汽车爬坡、加速、最高时速等指标。成本上来看，据钜\n大锂电，驱动电机、电控系统成本分别占到新能源汽车总成本的 6.5%/5.5%，是新能源车\n的重要组成\n\n### 重卡\n\n今年宏观经济处于弱复苏阶段，基建投资与物流运输需求温和，重卡\n行业处于恢复性增长阶段。明后年宏观经济复苏进程加快后，与投资\n相关的工程建设用车以及与快递快运相关的物流用车将持续增长。同\n时，在“到 2025 年新能源和国六排放标准货车保有量占比力争超过\n40%”的目标约束下，叠加国三、国四淘汰政策的催化，更新置换需求\n将有力支撑重卡市场恢复。此外，海外市场的需求持续增长，打开了\n重卡行业的增量空间，\n\n工程建设与物流运输是重卡的主要应用需求，因此固定资产投资与消费是重卡\n新增需求的核心驱动力。重卡的新增需求是指重卡市场的经济效益在增加，不断吸\n引着新进入者，导致重卡市场的绝对规模在增长。从应用场景来看，重卡产品主要\n应用于长途物流运输、工程建设、城市环卫、消防等场景。其中，物流运输用车需\n求由国内消费景气度决定，工程建设用车需求则由房地产开发投资与基建投资决\n定。因此，重卡的销量涨跌更容易受到宏观经济周期更替的影响。\n\n重卡出口的驱动力在于进口国经济增长与出海政策红利。目前我国重卡出口的\n目的地主要集中在“一带一路”沿线国家，占比超过 55%。其中，俄罗斯、越南、\n菲律宾、巴基斯坦等国是我国重卡出口的主要目的地。非洲、拉美地区也是重卡出\n口的主要地区。因此，重卡出口增速与新兴经济体的实际经济增速基本保持一致。\n同时，“一带一路”政策下，中国基建企业出海也带动了重卡出口销量。\n\n### 电力\n煤电容量电价按照回收煤电机组一定比例固定成本的方式确定。其中，用于计算容量电价的煤电机组固定成本实行全国统一标准，为每年每千瓦330元；通过容量电价回收的固定成本比例，综合考虑各地电力系统需要、煤电功能转型情况等因素确定，2024～2025年多数地方为30%左右，部分煤电功能转型较快的地方适当高一些，为50%左右。2026年起，将各地通过容量电价回收固定成本的比例提升至不低于50\n\n 由于华北地区基准电价较高，公司整体电价水平并不低，另一方面，2021年深化电力体制改革方案提出，煤电市场化交易浮动范围提高为上下20%，高耗能企业市场交易电价不受限制，内蒙古地区高耗能占比接近50%，电价具备上涨弹性。\n\n ### 中国化学\n\n 实业及新材料业务：中国化学始终以市场为导向，坚持“创新驱动”，积极发展\n实业及新材料业务，建立了“1 总院+多分院+N 平台”的技术创新平台体系，在\n新材料领域，已研发和掌握己内酰胺、己二腈、气凝胶等化工新材料领域核心技\n术，并达到国际先进水平。22 年以来公司气凝胶、PBAT、己二腈项目陆续投产，\n预计2022-2024 年实业及新材料业务的营收分别为74/130/156 亿元；目前国内\n己二腈产能有限，短期内己二腈项目可获得较高的利润率，预计 2022-2024 年\n实业及新材料毛利率分别为25%/22%/20%\n\n### 贵研铂业\n催化剂是什么？机动车尾气中含有一氧化碳（CO），碳氢化合物（HC），氮氧化合物（NOx）和颗粒物（PM）\n等污染物，会对人类健康和环境产生直接和间接危害。汽车尾气催化剂是最为有效的净化汽车尾气的处理方\n式，处理过程简单概括则为通过氧化反应把 CO 和 HC 变成二氧化碳和水，通过还原反应把 NOx 变成二氧化碳\n和氮气\n\n催化剂由四部分结构组成。分别是贵金属活性组分、催化剂载体、涂层及助剂；其中贵金属活性成分为催化\n剂的核心部分，主要是将金属铂、铑、钯的物质成分喷涂在蜂窝状陶瓷或金属为基体的载体上(也有颗粒型\n及 SiC 泡沫型)，而涂层及助剂层则是为了提高铂铑钯的分散度。催化剂活性组分的用途\n\n贵金属资源循环回收业务：公司国内龙头地位进一步强化\n\n随着贵金属矿产资源的不断开采，高品位资源严重匮乏，矿产金、银、铂族金属生产加工成本不断上升，贵\n金属再生资源越来越成为重要的贵金属原料供应来源。铂族金属再生不仅有利于保证供应和资源循环利用，\n同时具有明显的经济效益。由于资源短缺，欧美日等发达国家很早就开始对废旧贵金属加以回收利用，把二\n次资源回收作为重要的产业关键环节加以布局和扶持，在这方面具有较为系统的管理和运作机制。从地域分\n布来看，铂族金属的回收区域主要为欧洲、北美以及日本等经济发达地区，一些新兴国家的回收也开始显现。\n回收来源包括电子废料、废催化剂、失效化工催化剂、首饰等\n\n金属价格大幅波动，汽车产销不及预期，产能释放不及预期，贵金属新材料市场拓展规模不及预期\n\n### 旗滨\n\n中性硼药用玻璃性能优于钙钠玻璃和低硼硅玻璃。 药用玻璃是指专门用于药品\n包装的玻璃，一般指玻璃瓶罐及器皿。 药品的稳定性易受温度、湿度、空气、光、微\n生物等影响而变化，因此需要特殊的药用玻璃作为包装材料。 根据药用玻璃的材料，\n目前药用玻璃可以分为钠钙玻璃、低硼硅玻璃、 中硼硅玻璃和高硼硅玻璃四类。 化学\n性能是衡量药用玻璃质量高低的重要标准之一，其中， 最重要的参数是线热膨胀系数\n\n我国药用玻璃国产替代空间广阔。 我国药用玻璃市场规模在 2020 年达到 234 亿\n元，然而，国产仅占比 15%， 进口占比 85%，国产替代空间广阔\n\n公司药玻良品率逐步提升。 中性硼硅玻璃生产技术门槛高，需解决熔化过程气泡\n不易排出、易产生节瘤、成型时间短、尺寸精度要求高等技术难题。 公司持续技术突\n破，实现良品率的逐步提升，良品率由初期的约 30%提升至如今的 60%，与国际龙\n头企业肖特的良品率差距大幅缩小。\n、\n\n### 山推股份\n公司向潍柴动力采购发动机、从林德液压采购液压件、从山重建机采购\n挖掘机等，实现动力总成、液压件、变速箱、变矩器、四轮一带、研发\n等方面的资源共享，发挥“1+1＞ 2”的集合效应，实现了集团内部的\n优势互补，形成了人无我有的资源优势，极大提升了公司的核心竞争力\n\n公司是推土机行业龙头，形成多样化主机及配件的完整布局。 国产大马\n力推土机国内独家， 实现外资品牌替代， 出口订单充裕逐步放量； 受益\n于山东重工集团的整合优势，公司的主机产品型谱逐渐完善， 挖机和装\n载机渗透率提升空间大。 各项业务关键假设如下：\n1）推土机：大马力推土机出口需求旺盛，且公司定增募投项目产能释\n放，假设大马力产品销量高增；中小马力产品受国内基建需求影响，预\n计 23 年国内需求有所下降，随后企稳回升。\n2）装载机和挖掘机： 22 年并入上市公司体内，基数较低，借助集团海\n外销售渠道，受益于工程机械出口，预计收入迅速增长；假设毛利率维\n持稳定。\n3）配件：具备耗材属性，预计增速保持稳定略有增长；由于 23 年一\n季度钢材价格下滑，假设 23 年毛利率提升，后续维持稳定。\n\n### 钢研高钠\n\n生产技术门槛高， 独家供应享主导地位。 ODS 合金目前属于国外封锁技术，生产技术难度大，\n进入门槛很高。 据招股说明书， 公司是我国目前唯一具备 ODS 合金生产技术的企业，且唯一\n实现了量产，生产的该类产品全部应用在航空航天发动机关键部件，处于独家供应状态。公\n司目前已拥有自行设计的机械合金化装备与特种工艺技术，在 ODS 合金领域处于事实上的主\n导地位\n\n高温抗氧化和耐碳、硫腐蚀之“王”，高温组织稳定性\n好，热膨胀系数低，冷、热和机加工性能好，耐温高达\n1350℃。\n\n### 国电南瑞\n\n电网建设投资于两大方向，一是以特高压直\n流为主的跨区跨省输电，来解决新能源大基地送出问题。二是加强配电网建设，来应对\n日益增长的分布式电源发展、电动汽车接入等需求。我国电网建设的大背景是以新能源\n为主体的新型电力系统建设，而我国清洁能源主要分布在西部和北部地区，需要高效运\n输新能源需要发挥电网的资源配置优势。配电网领域需要进行数字化赋能，构建以数字\n电网建设支撑的新型电力系统和新型能源体系\n\n整体来看，国电南瑞子公司占所有61 家国家电网2022 年度中标企业中标份额超过49%，\n占比近半，国电南瑞行业龙头地位显著\n\n### 中核科技\n\n华龙一号”公司单机组核岛阀门价值量2.69 亿元，至2030 年公司国\n内核电阀门价值量约40 亿元，十倍增长空间。公司在核电机组切断类\n阀门市占率50%以上，依据纽威股份招股说明书，切断类阀门包括括闸\n阀、截止阀、隔膜阀、旋塞阀、球阀、蝶阀等，该类阀门在核岛阀门中\n占比为83%。公司单台机组核岛阀门价值量约2.69 亿元。至2030 年，\n公司新增核岛阀门价值量约26.85 亿元，维修阀门价值量约15.41 亿元。\n而公司2022 年核电核化工产品收入近4.31 亿元，还有约十倍的增长空\n间\n\n核电阀门是民用核安全设备，竞争格局清晰。\n\n气液联动执行机构突破，单机组价值量仍有望提升。公司在气液联动执\n行机构研发方面取得了突破，在漳州核电、国核示范快堆等项目上已实\n现供货，目前在手订单几千万\n\n产能逐步扩充，应对产能瓶颈。公司目前已按实施产能扩充方\n\n三倍核能宣言有望打开核电出口市场。根据中国核电网，美国等二十二\n国发布《三倍核能宣言》，核心内容包括共同努力推进到2050 年将全\n球核能容量增加两倍，达到目前容量三倍的目标，\n\n核电站建设加速有望带来乏燃料后处理方向的投资额提升。\n\n我国坚持闭式循环，希望解决燃料可持续问题。通常来讲，压水堆核电\n站铀资源的利用率仅为0.6%左右，如果对乏燃料进行后处理，用“榨”\n出来的铀在压水中再循环一次，可节省天然铀25%；若如此多次循环，\n则铀资源的利用率可以达到1%；若将后处理得到的钚与铀富集后剩下\n的贫铀制成快堆燃料，铀资源的利用率可以达到60%到70%。同时，\n经过后处理的乏燃料长期放射性毒性降低。以百万千瓦压水堆核电站为\n例，每年产生的乏燃料为25 吨至30 吨，乏燃料中有大量的放射性元素，\n毒性大、半衰期长，要在地质处置过程中衰变到天然铀矿水平需10 万\n年以上，但经过后处理等环节后，其放射性摄入毒性降到天然铀辐射水\n平的时间可减至千年以\n\n公司深度参与后处理工程。公司在后处理的关键阀门供货中承担了重要\n任务，取得了穿地阀等重要核心阀门订单，未来有望成为公司第二增长\n曲线\n\n高温气冷堆有望突破，打开公司业绩增长第三\n\n四代核电愈行愈近，在可持续性、经济性、安全与可靠性、废物最小化、\n防扩散和实体保护等领域有较大优势。第四代核能系统国际论坛（GIF）\n发起了有关未来核能系统的联合研究。中、法、韩、日、俄、美、欧盟\n之间由此展开了积极合作。GIF 提出了六大领域的技术目标和相关评估\n指标：可持续性、经济性、安全与可靠性、废物最小化、防扩散和实体\n保护。六类最有前景的核系统被选中，其中两类为气体（氦）冷却反应\n堆，另两类是液态金属（钠、铅合金）冷却堆，还有一类超临界水冷堆，\n最后一类是熔盐冷却\n\n甘肃武威 2MW 钍基熔盐堆获得运行许可。钍基熔盐堆核能系统以\nLiBeNaZr 等的氟化盐与溶解的U、Pu、Th 等的氟化物熔融混合后作燃\n料，在600-700°C的高温低压下运行，其中LiF﹑NaF﹑BeF2 和ZrF4 为\n载体盐，UF4 和PuF3 为裂变材料，ThF4 和UF4 为增殖燃料，吸收中子\n后产生新的裂变材料U 和Pu。我国具有丰富的钍资源，钍基熔盐堆亦\n被视为增殖核燃料的一条途径。中科院上海应物所正在研究设计2MW\n的试验反应堆和20MWe 模块化钍基熔盐堆研究堆及科学设施。钍基熔\n盐堆技术仍有很多问题有待解决，而且要建立一套以铀钍循环为基础的\n核燃料循环工业体系\n\n工业阀门上游主要包括原材料、铸件、锻件及阀门设计：阀门产品制\n造的最重要的原材料是钢材料与铜材料，其成本占阀门制造企业主营成\n本的70%左右；中游按照不同阀门结构分为闸阀、压力阀、蝶阀、球\n阀、旋启阀。下游应用行业较多：其中占比较大应用较多的为石油化工、\n冶金、电力、水处理等行业。阀门在机械产品中比重较高，是石油、化\n工、电站、长输管线、造船、核工业、宇航以及海洋采油等国民经济各\n部门不可缺少的流体控制设备。从下游应用分布来看，油气、能源、炼\n化、化工等是工业阀门的主要下游，占比分别达到17%、14%、13%\n及11%，四个主要下游合计占比近55%\n\n国内炼化一体化建设持续推进，全球\nLNG 运输船有望迎来集中交付。目前国内工业阀门市场参与者众多、竞争格局\n分散，进出口价差大，国产阀门向高端定制升级。公司在工业阀门高端市场拓展\n有所成效，已与中石化、上海卓然等签订战略合作协议，入围中石化和中石油的\n年度框架；海外及新下游领域稳步拓展，有望进一步巩固阀门龙头优势\n\n核电进入批量化周期：我们\n详细梳理并测算了核电行业及核岛阀门行业的市场空间，截止2023 年12 月15 日，\n核准待开工核电机组8 台，选址通过待核准机组有14 台，受理选址环评机组共3\n个厂址、6 台机组。经测算，国内核电站年均投资额1860 亿元，从2020 年开始至\n2028 年核电投资额CAGR 约 22%\n\n我们预计公司 2023-2025 年收入为 18.31/23.89/29.24 亿元，归母净利润为\n2.53/3.55/4.73 亿元，对应 EPS 分别为 0.66/0.92/1.23 元，对应 PE 分别为\n\n核电核化工产品：公司作为核岛阀门核心供应商，①持续聚焦高端核岛\n阀门主业，在手订单饱满，核电新开工机组数有望上行；②扩充单机组\n价值量，盈利能力有望再上台阶；③后处理建设刻不容缓，有望打开公\n司第二增长曲线；④高温气冷堆在规划中，公司有望打开第三增长极。\n我们预计 2023-2025 年核电核化工产品收入增速分别为 55.89%、\n64.79%、36.13%，毛利率分别为35.00%、36.00%、37.00%\n\n公司在核电站用关键阀门领域基本具备二代、三代核电机组阀门成套供货能力,四代核电机组关键阀门供货能力;在核燃料真空阀及浓缩铀生产关键阀门领域,四大\n类国产化关键阀门总体性能达到或超过进口产品水平,具备成套供货能力。 \n\n### 湖南黄金\n锑性质独特，在广泛的应用领域发挥着关键作用，享有“工业味精”的美称。从物理性质\n上看，锑具有低熔点（630.74°C）、高沸点（1750°C）、无延展性的特征，是电和热的不良\n导体。锑热缩冷胀的特性可以使合金的硬度发生变化，常应用于军事武器；从化学性质上\n看，锑具有双重属性，既亲铜又亲氧，低温时亲硫成矿，高温时亲石分散。此外，锑不溶\n于一般的酸碱溶液，只有王水、浓酸等溶液才会将其溶解。锑具有耐腐蚀和高强度特性，\n作为转轴生产的关键材料应用于机械齿轮；锑与卤族元素易生成相应的卤化物，产生大量\n卤化物白烟。利用锑的低燃点特性，西方发达国家强制要求在如建材产品、电子电器产品、\n塑料制品等易燃材料中添加卤化锑作为阻燃材料，当前还未发现比锑更好的阻燃代替品。\n\n1）价格假设 \n金价假设：2023 年黄金均价为 450 元/克。美联储加息周期已经结束，预计美联储正式释\n放降息信号后实际利率逐步回摆，推动金价上行。我们预计 2024-2025 年金价分别为\n485/490 元/克。（2024 年初至今黄金均价为 480 元/克） \n锑价假设：2023 年锑锭均价为 8.15 万元/吨。全球锑矿供给增量有限，需求端光伏新增\n装机高增带来锑金属长期需求动能，预计全球锑供需平衡维持短缺且缺口具有扩大趋势。\n我们预计 2024-2025 年锑锭均价为 8.5/8.7 万元/吨。（ 2024 年初至今锑锭均价为 8.48 万\n元/吨） \n钨价假设：公司自有矿山及外购钨精矿生产仲钨酸铵，2023 年仲钨酸铵均价为 17.9 万元\n/吨，我们预计 2024-2025 年仲钨酸铵价格维持 2023 年水平。（2024 年初至今仲钨酸铵均\n价为 18.1 万元/吨） \n（2）成本假设 \n自产金成本：公司自有矿山分为纯黄金矿和金锑伴生矿，伴生矿山成本由黄金和锑分摊，\n由于 2023 年公司矿山停产影响，成本上涨较为明显，预计 2024-2025 年成本有所回落，\n预计 2023-2025 年公司综合自产金生产成本分别为 250/245/245 元/克。 \n自产锑成本：公司锑品分为自有矿山和外购原料生产，自有矿山成本较为可控，产品毛利\n率较高，属于公司高盈利能力产品。我们预计 2023-2025 年公司自产锑品中含量锑生产成\n本维持 2.7 万元/吨。\n\n### 猪\n公司生猪养殖成本下降的根本在于养殖生产效率的提升,核心在于猪群的健康管理,最终体现至成活率、料比、生长速度等生产指标的全面改善。 \n在疫病防控方面,公司当前正在搭建“猪病天网工程”,对生猪相关的多种疾病进行全面深入的研究,配备环控系统、生物安全管理、检测体系、免疫管理等措施,\n将研究成果落地生产管理\n\n### 铝\n铝土矿本身不稀缺，但分布严重不均。主要的制造业和工业品输出国比如我们中国，还有日韩等，铝土矿大量依赖进口。大储量高品质易开采的铝土矿分布在澳大利亚、几内亚等制造业规模规模并不庞大的国家。这导致了铝土矿的供需矛盾在全球进入一个相对“无序”的状态下的会变得紧张。\n\n，铝股的弹性，几乎是大宗商品股票里面最强。铝股在大宗商品上涨的周期里，动不动就是几倍十倍的涨幅，比如05-07年的铝股大涨，几乎都是五六倍七八倍的涨幅。最近一次大宗商品暴涨让美国铝业的股价涨了差不多20倍，中国铝业则也涨了4倍多。一旦未来铝土矿再次大幅度上行，铝股的涨幅大概率会比较大。未来即使铝土矿价格没有大幅度上涨，长期保持高位，那铝股的盈利能力也是非常强的\n\n铝股的位置相对还算安全，铝价未来有较大的上涨空间，因此我几乎是没有犹豫的买入了云铝股份。云铝股份本身有一定的铝矿，同时享有比较好的电力资源（电力成本是决定铝价的重要因素），同时作为央企的子公司，它拥有更好的风险管理能力和庞大市场。还有一些财务和产销上的细节在这里不做赘述。之前我买入过神火股份，有一个不错的收益，但后面复盘发现神火主要跟的是媒，这也算是歪打正着。神火目前价格已经被炒得很高了，虽然估值看起来比较低，但综合考虑而言没有云铝那么有弹性了。中国铝业这些当然也可以，都是一波的，但在确定性比较足的情况下我选择爆发性最好的那个。\n\n现货价格他们都在高位，整体维持涨价，加上美元降息预期，股价低位，所以存在修复逻辑，未来行业业绩能见度高，业绩反转之后，最少也是高息股逻辑。赔率和胜率兼备\n\n绿电铝龙头，成本优势凸显：公司产能全部位于云南，用电结构中水电\n比例约达88.6%；得益于云南低价水电，云南地区电解铝企业综合用电\n成本长期位于全行业前20%分位水平。且随着欧洲碳税政策加码，公司\n未来有望享受显著成本优势\n\n吨铝市值行业最低，涨价弹性领先行业：根据各公司电解铝权益产能和\n市值，我们测算可得云铝股份吨市值为可比公司最低，仅为2 万元，远\n低于可比公司。当电解铝价格上涨10%时，公司2022 年PE 有望从 11\n倍下降至6 倍，涨价弹性可观\n\n国企改革持续推进，管理层购股参与\n分红；财务报表和资产结构优化，业绩释放可期。2018 年至2022 年，\n公司 ROE 大幅增长、资产周转率和销售净利率也迅猛提高，公司资产\n结构显著优化，盈利质量和资产质量明显提升\n\n电解铝的原料氧化铝不足以自给，中铝作为稳定的上游资源供应商，使得云铝无需保持\n\n长期氧化铝高库存，降低了氧化铝存货波动\n\n铝（Al）是一种银白色金属，在地壳中含量仅次于氧和硅，具有轻便性、高导电性、\n高导热性、耐腐蚀性等优良特性，是机械、电力、航空航天、船舶制造、汽车制造、包\n装、建筑、交通运输和房地产等行业的重要材料，在国民经济中占有重要地位\n\n汽车轻量化拉动：根据国际铝协数据，2020 年国内传统乘用车/纯电动/混动新\n能源乘用车单车用铝量分别为 138.6/157.9/198.1kg，其预计到 2025 年中国传统燃油车/\n纯电动/插电混动车的单车用铝量能分别提升至180/227/238kg。\n\n得益于电解铝下游地产开工回暖，汽车轻量化和光伏电站建设旺盛，电解铝迅速去\n库；根据我国主要市场（上海、无锡等地）电解铝库存数据，2023 年4 月20 日库存仅\n为86 万吨，同比下滑19%、周度环比下滑14%\n\n公司在铝土矿—氧化铝及铝用炭素方面的资源优势为公司控制生产成本，规避大宗\n原辅料价格波动风险提供坚强保障。\n\n绿电铝龙头，成本优势凸显。依托云南省丰富的绿色电力优势，2022 年公司生产\n用电结构中绿电比例达到约88.6%。公司依托绿色能源生产的绿色铝与煤电铝相比，碳\n排放仅为煤电铝的约20%左右。水电铝相比火电铝，除了用电成本更低，还有很好的减\n排效果。生产一吨水电铝，要比火电铝减少碳排放 10 吨以上，降幅达 90%，同时减少\n粉尘量4 吨以上。尽管云南省政府从2021 年9 月份取消了0.25  元/千瓦时的优惠电价政\n策，但相较于全国其他省份，云南省电价仍处于全国低位。云铝股份因产能全部位于云\n南，可以充分享受云南低价水电带来的成本优势，生产成本位于行业前20%的低位水平\n\n### 华能国际\n\n公司实际控制方为国务院国资委，直接控股股东是华能集团。华能集团是中国核心电力\n集团企业之一，作为行业龙头在业务布局、规模效应、资源整合等多方面具有显著优势。\n华能集团直接持有公司9.91%的股权，通过中国华能集团香港有限公司和华能国际电力\n开发公司分别间接持有公司3.01%和32.28%的股权\n\n但随着煤电上\n网电价的提升以及新能源发电量增长，公司收入规模持续提升且盈利能力有所改善，亏\n损幅度较2021 年有所收窄。受益于2023 年煤炭价格中枢回落和电量同比增长，以及境\n外电力资产盈利提升，2023H1 公司实现归母净利润63.1 亿元，同比大幅增长309.7%，\n业绩增速突出，扭亏为盈。 \n\n火电仍是最大营收来源，清洁能源盈利能力高位持稳。 \n➢ 营收结构方面：电力及热力业务占比达95.3%，以火电为主，但随着公司向清洁能\n源转型，风电和光伏发电的营收占比逐渐增大，其中风电营收增长明显，从 2018\n年占整体营收的3%逐步扩张到2022 年的6%。 \n➢ 利润贡献方面：近两年，受煤价上涨影响，火电处于大幅亏损状态，风电成为公司\n利润的主要来源。 \n➢ 盈利能力方面：由于 2021 年前集中式光伏电站、工商业分布式光伏项目和新核准\n陆上风电并网项目均享受补贴政策，公司风、光毛利率维持在50%以上水平。\n\n分红方面，公司现金分红政策规定公司在当年盈利及累计未分配利润为正，且公司现金\n流可以满足公司正常经营和可持续发展的情况下，现金分红比例不少于当年实现的合并\n报表可分配利润的50%。2021-2022 年，出于归属于本公司股东的净利润为负、公司转\n型发展的投资需求以及资产负债率上升等原因，公司决议不分红。随着公司业绩扭亏为\n盈，盈利能力提升，预期未来将回归合理分红水平。\n\n辅助服务市场机制不断完善，容量电价呼之欲出，火电调峰收益兑现。各省市纷纷出台\n相关的政策措施，助力火电充分发掘容量和调峰特性，驱动火电灵活性改造，并为未来\n火电盈利再开源\n\n机组分布集中沿海地区，区位优势突出。公司境内电厂分布在 26 个省、自治区和直辖\n市，多数位于沿海沿江地区，经济发展快，用电量和电价水平较高；内陆电厂大多分布\n在环绕首都和燃料陆运直达区域，有利于多渠道采购煤炭、稳定供给。同时公司拥有港\n口及码头资源，对提高集约化燃料管理起到了极大的支持作用，有利于公司统一库存、\n发挥淡储旺耗的功能，加速煤炭周转，减少滞期费用。此外，公司在新加坡全资拥有一\n家营运电力公司，在巴基斯坦投资一家营运电力公司。公司电厂的境内外区域布局可以\n形成优势互补、增强抵抗经营风险的能力\n\n2019-2022 年，华能国际风电、太阳能装机容量分别以年复合增长率 32%和 66%的速\n度增长，远超于全国风电、太阳能装机容量年复合增长率 20%和 24%，增速领先全行\n业。公司2022 年风电发电量为280.68 亿千瓦时，同比增长34.72%，太阳能发电量为\n60.8 亿千瓦时，同比增长69.65%，分别占全国风电发电量的3.68%和1.42%，实现快\n速增长。 \n \n ；2022 年公司上网结算电价已经有近 20%的涨幅，我们预计在现\n有电价政策下后续趋于稳定，但一旦电改相关政策推进，仍有上涨空间。\n\n清洁能源板块：公司致力于新能源转型，并且在“十四五”期间保持风电光伏\n装机较快增速，2023 年已为“十四五”中期，我们预计后两年装机增速将会进一步提升\n以完成公司的十四五装机目标。叠加硅料及光伏组件价格加速下降，以及 CCER 和绿电\n交易机制进一步推广，公司的新能源项目盈利能力将进一步增强。我们预计 2023-2025\n风电与光伏装机规模增量分别为2.5/3.5/5GW 和6/8/10GW，风光利用小时数仍将保持\n稳定\n \n \n \n \n \n \n \n \n \n \n","slug":"yanbao1","published":1,"updated":"2024-10-27T03:26:03.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm3eamu1u00008kxhb5g13im8","content":"<h3 id=\"国投电力\"><a href=\"#国投电力\" class=\"headerlink\" title=\"国投电力\"></a>国投电力</h3><p>雅砻江为我国第三大<br>水电开发基地，自然资源禀赋优越，水量丰富且年际变化不大；流域已建成三大调节<br>水库，梯级联合调度能力强；受益于以上两点优势，水电的发电利用小时数高且年际<br>波动小。在目前优质水电资源基本开发完毕的背景下，雅砻江水电作为优质大水电的<br>稀缺性凸显。</p>\n<p> 推进雅砻江水风光一体化建设，项目获取及消纳优势显著，未来新能源成长空间可期。<br>根据公司规划，到 2025 年公司新能源装机增长空间有望达到 1000 万千瓦。公司依托雅<br>砻江优质水电资源开展水风光互补，在周边新能源项目获取方面具有先天优势，且水<br>风光互补可以平滑出力曲线、借已有通道实现打捆外送，公司风电光伏消纳优势明显</p>\n<p>火电资产结构优质，盈利有望显著改善。公司火电机组以高参数大容量机组为主，百<br>万千瓦级机组占 67.5%；公司火电机组集中在沿海等经济发达、电力需求旺盛的地区，<br>利用小时数有保障；且用煤结构里面海外煤占比高，随着今年海外煤价中枢下降及电<br>力市场化改革的推进，我们预计公司火电板块的盈利有望迎来大幅改善</p>\n<h3 id=\"三美\"><a href=\"#三美\" class=\"headerlink\" title=\"三美\"></a>三美</h3><p>生产厂家将视情况对有关产品的产能做转产处理,未来也存在配额量少的企业进行委外生产、配额转让的可能。<br>随着行情的周期性波动,行业产能逐步向头部企业集中,而一些小、散的产能逐步退</p>\n<p>PVDF 在锂电池中主要用于正极粘结剂与隔膜涂覆。PVDF 是一种高分子含氟聚合物，由 VDF<br>（偏氟乙烯）聚合形成，属于可熔融加工氟树脂，下游可用于涂料、注塑、光伏背板膜、<br>锂电池等诸多领域。传统应用方面，PVDF 涂料具有耐候、耐腐蚀、抗渗透等性能，具有较<br>长的使用寿命，同时 PVDF 的加工性能优异，可以通过挤出成型等热塑性加工方法加工为<br>薄膜、片材、管材、棒材等，在注塑领域应用广泛。新兴领域方面，PVDF 可用于光伏、水<br>处理、锂电池等。PVDF 由于其耐高压能力强、热稳定性好、易于分散等优良特性可作为锂<br>电池正极粘结剂，进而降低电极阻抗、减小电池极化。PVDF 还可被用于锂电池隔膜涂覆，<br>主要起到提高耐高温性能、增加电解液保液量、增加高压状态下电池安全性等作用</p>\n<p>由于六氟磷酸锂和 PVDF 供需失衡问题突出，且未来仍有部分新增产能投产，行<br>业整体盈利能力较差，但相对而言 FEP 供需格局相对较好，因此盈利能力相对较强，预计<br>2024-2025 年公司含氟聚合物与含氟精细化工品项目整体毛利率为 3%&#x2F;14.6%.</p>\n<h3 id=\"伊利\"><a href=\"#伊利\" class=\"headerlink\" title=\"伊利\"></a>伊利</h3><p>公司在费用投放上兼顾效率和效果，不断提升费用使用效率，未来销售费<br>用率有望持续稳中有降。23Q3 归母净利率为9.85%，同比+3.51pct，盈<br>利水平提升较为显著</p>\n<h3 id=\"光模块\"><a href=\"#光模块\" class=\"headerlink\" title=\"光模块\"></a>光模块</h3><p>光模块是光通信中实现光电和光电转换的光电子器件，是光通信产业的核心部分</p>\n<p>光模块产业链由上游的光芯片、光器件等，中游的光模块制造商和下游的设备商、运<br>营商等组成。光模块上游包括光芯片、光器件、电芯片等，光器件行业的供应商较多，<br>但高端光器件目前仍主要由国外供应商提供。光模块行业下游主要是包括电信运营<br>商、互联网及云计算企业等，光模块产品的运营领域涵盖了互联网服务、电信市场等<br>行业</p>\n<p>5G 和 IDC 建设拉动光模块需求，预期带来增量市场</p>\n<p>中国光模块厂商凭借劳动力成本等优势，在与海外厂商竞争中不断占据上风。</p>\n<p><img src=\"/image-13.png\" alt=\"Alt text\"></p>\n<h3 id=\"中国移动\"><a href=\"#中国移动\" class=\"headerlink\" title=\"中国移动\"></a>中国移动</h3><p>中国移动预计 2022 年将投入 480 亿用于算力网络资本开支，其中数据中心将投入 58<br>亿，公司预计未来算力网络的相关资本开支会逐步增长。2）1H22 中国联通资本开支为284<br>亿元，同比增长 98.5%，公司将紧抓“东数西算”新机遇，倾力打造“联接+感知+计算+<br>智能”的算网一体化服务。3）中国电信2022 年的产业数字化资本开支预算同比增长61.7%<br>至279 亿元，公司2021 年末的算力总规模达到2.1EFLOPS，公司表示将加快算力规模建<br>设，预计算力总规模将以超过年均80%的复合率增长，预计十四五末期将达到16.3EFLOPS</p>\n<p>云业务：运营商接捧互联网成为云计算市场主力军<br>政策推动云计算增长动力转向传统行业，三大运营商接捧互联网巨头成云计算市场主力军。<br>受互联网流量增长 缓及国资云建设等政策影响，云计算行业增长动力逐步由互联网行业<br>转向传统企业，在此背景下，三大运营商接捧互联网巨头成为政府、金融等行业的云服务<br>主力军。 </p>\n<p>而在算力网络建设及国资云的拉动下，三大运营商云计算业务2Q22 合计实<br>现营收360 亿元，同比增长108.5%，已成为云计算行业的主要增长极。</p>\n<p>运营商等国资企业在云计算行业中重要性提升，云基础设施国产化进程加速。国资云 构<br>下，云基础设施的建设运营方多为运营商或相关国资企业，例如，中国首个国资监管云服<br>务由中国电信牵头，联合中国电 、中国电 等多个央企共同完成。在国资云推动下，运<br>营商等国资企业在云计算行业中重要性提升，市场份额由2019 年的12%提升至2021 年的<br>23%。我们认为国资云的推广有望加速云基础设施国产化进程。以浙江省国资云为例，其<br>建设采用全国产化信创服务器作为底层基础设施，依托具有国产自主知 产权的“ 天云”<br>底座搭建而成。在国资云建设背景下，云基础设施国产化进程有望加速</p>\n<p>IDC：规划“4+3+X”数据中心布局，收入增速领先同业<br>三大电信运营商占据国内 IDC 市场的主导地位。据 IDC 统计，2021 年三大电信运营商在<br>国内IDC 市场的总份额达67.9%，其中中国电信、中国联通、中国移动在中国IDC 市场的<br>份额分别为27%、23%、18%</p>\n<p>东数西算带动下，三大运营商丰富机 资源，加快推进 IDC 布局。中国移动在 津冀、长<br>三角、粤 澳大湾区、成渝四大热点区域中心，持续完善“4+3+X”数据中心布局，部<br>42.9 万 机 ；中国电信聚焦 津冀、长三角、粤 澳大湾区、川渝陕四大经济发达区推<br>进“2+4+31+X+0”布局，部  IDC 超过 700 个，加强边缘计算能力建设，机 规模达到<br>48.7 万 ，机 资源居于国内首位；中国联通按 “5+4+31+X”总体布局，聚焦 津冀、<br>长三角、粤 澳大湾区等区域建设IDC 共808 个，机 规模达32.9 万 。截至2022 年上<br>半年，三家运营商共有机 124.5 万 ，较21 年底新增7.6 万 。据三大运营商2021 年<br>年报中披露的2022 年IDC 建设规划，下半年运营商机 规模将新增9.8 万 。 </p>\n<p>网络、运营及维护费用：中国移动计划不断提高网络能力和质量，算力网络建设等新基<br>建项目加速建成投产，以支持5G 和产业数字化发展。据公司2021 年年报，公司计划在2022<br>年底新增开通5G 基站47 万个，计划在2022 年新增IDC 机 4.3 万 ，并加快中心云、<br>边缘云的建设进度。我们预计随着公司5G 网络和数据中心建设规模的扩大，其网络、运营<br>及维护费用将相应有 提升，但随着主要算力节点逐步布局完成、5G 网络建设步入尾声，<br>费用增速将呈现出逐年下降趋势，预计其  2022&#x2F; 2023&#x2F;2024 年总网络运营和维护费用同比增<br>长12%&#x2F;9.5%&#x2F;8%至人民币2,418.4 亿&#x2F;2648.2 亿&#x2F;2,860.0 亿</p>\n<h3 id=\"中环\"><a href=\"#中环\" class=\"headerlink\" title=\"中环\"></a>中环</h3><p>Q4 基本盈亏平衡，单瓦盈利环降5-6 分；组<br>件出货3-3.5GW，整体延续亏损。受价格快速下行影响公司计提减值亏<br>损约 8-10 亿元；同时处理多晶硅参股公司股权，投资收益亏损 6-8 亿<br>元，导致Q4 业绩承压。24 年看，硅片环节开工率分化加强+N 型占比<br>持续提升，公司预计出货150GW+，维持龙头地位。 </p>\n<h3 id=\"新华保险\"><a href=\"#新华保险\" class=\"headerlink\" title=\"新华保险\"></a>新华保险</h3><h3 id=\"小米\"><a href=\"#小米\" class=\"headerlink\" title=\"小米\"></a>小米</h3><p>小 米自动驾驶的目标是 2024 年进入行业第一阵营，小米智能驾驶系统 装备了两颗英伟达 Orin X 芯片，单颗提供 508TOPS 的算力，搭载的 高精度激光雷达能够实现 0.05 米的泊车精度，以及 11 颗高清摄像头、 3 颗毫米波雷达、12 颗超声波雷达。</p>\n<p>小米 SU7 定位中大型纯电轿车，零百公里加<br>速时间 2.78s。小米推出转速高达 21000 转&#x2F;分钟的电机 V6&#x2F;V6s 和转速高达 27200<br>转&#x2F;分钟的电机 V8s。电池方面推出了 800V 碳化硅高压平台， 5 分钟充电可以实<br>现 220km 续航，研发的 CTB 一体化电池技术实现了 77.8%的体积效率。续航方<br>面双电机的小米 SU7 Max 在 CLTC 续航能力可达 800 公里。公司自研小米泰坦<br>合金，研发了 9100 吨锁模力的小米超级压铸机，能制造 72 个零件合而为一的<br>一体化压铸后地板，让焊接点减少 840 处，重量减轻 17%。</p>\n<p>应用场景不同，超声波雷达主要应用于泊车辅助、以及盲区碰撞预警。主要安装前后保险杠上作为倒车雷达，以及车身侧身测距。而毫米波雷达主要应用于自适应巡航、自动刹车辅助系统等。安装在汽车正前方、车辆后保险杠内、前保险杠内等位置</p>\n<h3 id=\"三一\"><a href=\"#三一\" class=\"headerlink\" title=\"三一\"></a>三一</h3><p>对海外市场更为乐观：疫情扰动下借助产品力+供需缺口，中国工程机械出口销量大幅增加，<br>20-22 年我国挖掘机出口销量 CAGR 为 60.21%。23 年下半年海外需求降温+海外供应链恢<br>复，中国工程机械出海增速有所回落，市场普遍担心 24 年国产品牌海外销售下滑，甚至引<br>发了对中长期国产品牌出海的悲观。我们认为，国内地产、基建需求反哺下，国产品牌产<br>品力非常强，随着中国品牌持续布局海外研发、渠道、售后等，未来有望把“产品力”转<br>化为“品牌力”，我们预计持续完善的海外布局+出口挖掘机吨位提升带来的均价提升有望<br>支撑 24 年海外收入增长。三一重工作为国内龙头，领先的全球布局有望推动公司成长为全<br>球龙头。 </p>\n<p>电动化虽言之尚早，但是长期来看带来的不只是业绩弹性，更重要的是对出海的助力：以<br>史为鉴，发动机、液压技术等重大技术变革都会重塑工程机械行业格局，电动化作为又一<br>重大技术变革有望重塑全球竞争格局。参照叉车行业，受益于锂电化浪潮，中国电动叉车<br>的性能实现了重大突破，开启了中国叉车加速走向世界的新征程。中国“三电”技术全球<br>领先，电动化趋势下有望助力中国品牌全球化进程。三一电动化布局逐步完善，掌握核心<br>技术，有望在电动化浪潮下持续领先，并在电动化的助力下完善全球化布局，成长为全球<br>龙头。</p>\n<p>预计毛利率随着海外占比提升、中大吨位占比增加而稳步提高，分别为 34%、<br>35%、35.5%。</p>\n<h3 id=\"牧原\"><a href=\"#牧原\" class=\"headerlink\" title=\"牧原\"></a>牧原</h3><p>2023年,公司共计屠宰生猪1,326万头,同比增长80%,产能利用率由2022年的25%提升至46%,但距离理想的产能利用率仍有一定差距。<br>由于部分厂区投产时间短,2023年屠宰肉食业务尚未实现盈利,但头均亏损水平已由2022年的120元左右下降至2023年的70元左右。<br>2024年屠宰肉食板块会持续开拓市场,优化产品结构和客户结构,加强内部生产运营管理,以争取早日实现盈利。<br> 面对当前外部市场形势,公司会合理把控生产经营节奏,规划资本开支水平,持续降低成本,提高整体发展质量。<br>同时,公司当前资金储备充足,在融资端也与银行保持稳定的合作关系,能够保证现金流的安全稳定</p>\n<p>公司2023年全年的生猪养殖平均成本相比2022年下降了0.7元&#x2F;kg,成本下降的来源主要是生产成绩的改善和期间费用的下降,如果将料价上升因素剔除,生产成绩<br>改善和期间费用下降带来的成本下降贡献在0.9元&#x2F;kg左右</p>\n<p>近期猪价上涨具有区域性特点,部分省份仔猪及商品猪价格有一定上涨,主要为节前短期供需变化所致。<br>全年来看,预计2024年整体价格表现相比2023年更乐观一些。<br>在供给端,当前能繁母猪仍处于较高水平,但整体为下降趋势,2024年生猪供应量预计将低于去年;在需求端,随着经济逐步企稳,2024年需求量预计将有一定上升</p>\n<p> 2023年12月底,公司能繁母猪数量为312.9万头,同比增长30万头左右。<br>对应今年出栏量也将有一定增长,增长比例预计在10%左右,实际出栏量将会受公司生产经营安排、生产成绩波动等多种因素影响,2024年具体出栏量区间指引将<br>在2023年年度报告中披露</p>\n<h3 id=\"理想\"><a href=\"#理想\" class=\"headerlink\" title=\"理想\"></a>理想</h3><p>理想将采用自研 800V高压纯电<br>平台和5C 倍率电池；实现充电 9分 30秒，续航 400公里。充电时间比当前主流<br>的 1.6C 电池缩短 66%。技术层面，理想 5C 电芯采用超离子环石墨负极技术+活<br>性面调控技术，保证充电效率。通过低阻抗体系设计、一体化极柱结构设计和电<br>芯间侧面冷却的热管理方案，保证充放电安全。</p>\n<p>高端车型智能驾驶芯片均采用英伟达 Orin，智能座舱芯<br>片采用高通 8155。感知层面，均采用激光雷达+超声波雷达+毫米波雷达+摄像头<br>的混合方案。伴随理想 L9上市，产品将具备 L4 级别辅助驾驶硬件，在硬件配置<br>方面迅速追平行业领先地位</p>\n<h3 id=\"蔚来\"><a href=\"#蔚来\" class=\"headerlink\" title=\"蔚来\"></a>蔚来</h3><p>光瀑式环绕氛围灯，256 色渐变，10 种氛围主题，支持呼吸律动、音乐联动，渲染轻松的家居格调</p>\n<h3 id=\"宇通\"><a href=\"#宇通\" class=\"headerlink\" title=\"宇通\"></a>宇通</h3><p>英国、 法国、 德国、 丹麦等国公交客车新能源化领先， 占据电动城<br>市公交超 50%份额</p>\n<p>宇通客车 2022 年以 479 辆注册量排名第一（同比+58%） ， 2022 年其欧洲电动<br>巴士市占率为 11.5%， 同比+2.3pct，</p>\n<p>BYD-ADL 排名第二， 2022 年注册量 465 辆（同比+24%） ， 其与英国当地最大的<br>客车公司 ADL 合作（2015 年开始） ， 比亚迪提供底盘、 三电技术支持， ADL 根据<br>当地市场需求专门定制外饰、 结构和车型等， 并且给予渠道资源的协助， 双方目<br>前已生产电动大巴超 1000 辆， 在英国市占率 50%-70%</p>\n<p>中国客车市场黄金发展阶段（2009-2014 年） 已过， 同时<br>存量公交新能源更新基本到位， 未来销量支撑主要来源于 1） 城镇化率提升背景<br>下， 公交市场持续渗透， 需求较为刚性； 2） 疫情推迟存量替换， 更新需求迫切；<br>3） 海外市场新能源化促进出口； 4） “双碳” 政策持续推进， 旅游、 团体等公路<br>客车新能源化持续发展。</p>\n<p>房车： 市场规模年均复合增速</p>\n<p>技术进步和产品更新风险： 汽车行业属于资金密集、 技术密集型行业。 公司<br>具备丰富的产品开发和制造经验， 而且历年来始终注重新技术、 新产品的研<br>究与开发。 新技术、 新产品的研发离不开资金的投入， 如果公司未来在新产<br>品开发过程中无法持续投入研发或没能及时开发出与新车型相配套的产品，<br>将面临技术进步带来的风险和经营风险。</p>\n<h3 id=\"比亚迪\"><a href=\"#比亚迪\" class=\"headerlink\" title=\"比亚迪\"></a>比亚迪</h3><p>目前公司拥有刀片电池、 DM 混动、 e3.0 平<br>台、 CTB 电池车身一体化、易四方、云辇和 DiLink 智能网联系统等领先科<br>技</p>\n<p>腾势 N7 搭载智驾硬科技，未来可期。 公司首款智能豪华猎跑 SUV 腾势 N7<br>正式上市，新车搭载智能座舱（ Link 超感交互智慧座舱，智慧六联屏，配备<br>6nm 制程芯片， 5G 智能网联系统）、智能底盘（标准版配备自研云辇-A 智<br>能空气车身控制系统）、智能驾驶（搭载腾势 Pilot 高阶智能驾驶辅助）三大<br>智能科技，为用户带来卓越的智能驾驶体验</p>\n<p>比亚迪插电式混合动力技术（ DM 技术）积累始于 2006 年，现已形成主打“超强动<br>力”的 DM-p 王者混动和主打“超低油耗”的 DM-i 超级混动两大技术平台。 DM-i 超<br>级混动作为以电为主的混动技术，围绕大功率电机驱动和大容量动力电池供能为主，发<br>动机为辅的电混架构，颠覆传统混动技术以油为主的设计架构， 达到超低油耗、静谧平<br>顺、卓越动力的整车表现。 DM-p 王者混动，以电四驱超强动力，重新定义了四轮驱动，<br>带来极速、安全、经济，三大极致用车体验。实现零到百公里加速在 5 秒以内，动力表<br>现超越传统大排量燃油车。</p>\n<p>e3.0 平台让“电动”带来的智能优势、高效优势、安全优势、美学优势充分释放。 百<br>公里电耗比同级别车型降低 10%，续航里程最大可突破 1000 公里。电池可承受 50 吨<br>重卡碾压，满足“超五星”碰撞安全标准。</p>\n<p>2023 年 1 月，公司正式发布易四方技术。 易四方技术平台是一套以四电机独立驱动<br>为核心的动力系统，从感知、控制、执行三个维度围绕新能源汽车的特性进行了全面<br>重构，彻底颠覆以往燃油车的动力系统能力体系感</p>\n<p>辇产品矩阵包含云辇-C、云辇-A、云辇-P 等产品，将从舒适、<br>操控、安全、越野等维度大幅提升消费者的驾乘体验。云辇能够有效抑制车身姿态变化，<br>显著降低车辆侧翻的风险，减小驾乘人员坐姿位移。同时云辇系统可以在雪地、泥地、<br>水域等复杂路况下，有效保护车身， 防止地形造成的整车磕碰损伤，提升驾乘舒适及安<br>全性，实现对人和车的双重保护。</p>\n<p>全场景数字钥匙提供多种车辆解锁方式，包括 App 远程遥控、蓝牙钥匙和手机 NFC<br>车钥匙。 最新一代 NFC 数字钥匙不仅与 iPhone、 Apple Watch 等设备兼容，还支持其<br>他品牌设备。手机 NFC 数字钥匙具备高性能、超便捷、快分享、强兼容四大优势，适<br>用于多种品牌手机，可以取代传统车钥匙，在无网络和电源的情况下也可以进行车辆解<br>锁闭锁操作</p>\n<p>区别于传统汽车，新能源汽车最核心的技术是“三电”，<br>包括电池、电机、电控。其中电机又称电驱系统，包括驱动电机、传动结构、控制器等，<br>承担了新能源车运动相关的所有功能。电机的扭矩是否精确对新能源车的效率和性能至关<br>重要。电控又被称为电源系统，包括 DC&#x2F;DC 变换器、 OBC、高压配电盒，是传统发动机变<br>速箱的替代，性能直接决定了电动汽车爬坡、加速、最高时速等指标。成本上来看，据钜<br>大锂电，驱动电机、电控系统成本分别占到新能源汽车总成本的 6.5%&#x2F;5.5%，是新能源车<br>的重要组成</p>\n<h3 id=\"重卡\"><a href=\"#重卡\" class=\"headerlink\" title=\"重卡\"></a>重卡</h3><p>今年宏观经济处于弱复苏阶段，基建投资与物流运输需求温和，重卡<br>行业处于恢复性增长阶段。明后年宏观经济复苏进程加快后，与投资<br>相关的工程建设用车以及与快递快运相关的物流用车将持续增长。同<br>时，在“到 2025 年新能源和国六排放标准货车保有量占比力争超过<br>40%”的目标约束下，叠加国三、国四淘汰政策的催化，更新置换需求<br>将有力支撑重卡市场恢复。此外，海外市场的需求持续增长，打开了<br>重卡行业的增量空间，</p>\n<p>工程建设与物流运输是重卡的主要应用需求，因此固定资产投资与消费是重卡<br>新增需求的核心驱动力。重卡的新增需求是指重卡市场的经济效益在增加，不断吸<br>引着新进入者，导致重卡市场的绝对规模在增长。从应用场景来看，重卡产品主要<br>应用于长途物流运输、工程建设、城市环卫、消防等场景。其中，物流运输用车需<br>求由国内消费景气度决定，工程建设用车需求则由房地产开发投资与基建投资决<br>定。因此，重卡的销量涨跌更容易受到宏观经济周期更替的影响。</p>\n<p>重卡出口的驱动力在于进口国经济增长与出海政策红利。目前我国重卡出口的<br>目的地主要集中在“一带一路”沿线国家，占比超过 55%。其中，俄罗斯、越南、<br>菲律宾、巴基斯坦等国是我国重卡出口的主要目的地。非洲、拉美地区也是重卡出<br>口的主要地区。因此，重卡出口增速与新兴经济体的实际经济增速基本保持一致。<br>同时，“一带一路”政策下，中国基建企业出海也带动了重卡出口销量。</p>\n<h3 id=\"电力\"><a href=\"#电力\" class=\"headerlink\" title=\"电力\"></a>电力</h3><p>煤电容量电价按照回收煤电机组一定比例固定成本的方式确定。其中，用于计算容量电价的煤电机组固定成本实行全国统一标准，为每年每千瓦330元；通过容量电价回收的固定成本比例，综合考虑各地电力系统需要、煤电功能转型情况等因素确定，2024～2025年多数地方为30%左右，部分煤电功能转型较快的地方适当高一些，为50%左右。2026年起，将各地通过容量电价回收固定成本的比例提升至不低于50</p>\n<p> 由于华北地区基准电价较高，公司整体电价水平并不低，另一方面，2021年深化电力体制改革方案提出，煤电市场化交易浮动范围提高为上下20%，高耗能企业市场交易电价不受限制，内蒙古地区高耗能占比接近50%，电价具备上涨弹性。</p>\n<h3 id=\"中国化学\"><a href=\"#中国化学\" class=\"headerlink\" title=\"中国化学\"></a>中国化学</h3><p> 实业及新材料业务：中国化学始终以市场为导向，坚持“创新驱动”，积极发展<br>实业及新材料业务，建立了“1 总院+多分院+N 平台”的技术创新平台体系，在<br>新材料领域，已研发和掌握己内酰胺、己二腈、气凝胶等化工新材料领域核心技<br>术，并达到国际先进水平。22 年以来公司气凝胶、PBAT、己二腈项目陆续投产，<br>预计2022-2024 年实业及新材料业务的营收分别为74&#x2F;130&#x2F;156 亿元；目前国内<br>己二腈产能有限，短期内己二腈项目可获得较高的利润率，预计 2022-2024 年<br>实业及新材料毛利率分别为25%&#x2F;22%&#x2F;20%</p>\n<h3 id=\"贵研铂业\"><a href=\"#贵研铂业\" class=\"headerlink\" title=\"贵研铂业\"></a>贵研铂业</h3><p>催化剂是什么？机动车尾气中含有一氧化碳（CO），碳氢化合物（HC），氮氧化合物（NOx）和颗粒物（PM）<br>等污染物，会对人类健康和环境产生直接和间接危害。汽车尾气催化剂是最为有效的净化汽车尾气的处理方<br>式，处理过程简单概括则为通过氧化反应把 CO 和 HC 变成二氧化碳和水，通过还原反应把 NOx 变成二氧化碳<br>和氮气</p>\n<p>催化剂由四部分结构组成。分别是贵金属活性组分、催化剂载体、涂层及助剂；其中贵金属活性成分为催化<br>剂的核心部分，主要是将金属铂、铑、钯的物质成分喷涂在蜂窝状陶瓷或金属为基体的载体上(也有颗粒型<br>及 SiC 泡沫型)，而涂层及助剂层则是为了提高铂铑钯的分散度。催化剂活性组分的用途</p>\n<p>贵金属资源循环回收业务：公司国内龙头地位进一步强化</p>\n<p>随着贵金属矿产资源的不断开采，高品位资源严重匮乏，矿产金、银、铂族金属生产加工成本不断上升，贵<br>金属再生资源越来越成为重要的贵金属原料供应来源。铂族金属再生不仅有利于保证供应和资源循环利用，<br>同时具有明显的经济效益。由于资源短缺，欧美日等发达国家很早就开始对废旧贵金属加以回收利用，把二<br>次资源回收作为重要的产业关键环节加以布局和扶持，在这方面具有较为系统的管理和运作机制。从地域分<br>布来看，铂族金属的回收区域主要为欧洲、北美以及日本等经济发达地区，一些新兴国家的回收也开始显现。<br>回收来源包括电子废料、废催化剂、失效化工催化剂、首饰等</p>\n<p>金属价格大幅波动，汽车产销不及预期，产能释放不及预期，贵金属新材料市场拓展规模不及预期</p>\n<h3 id=\"旗滨\"><a href=\"#旗滨\" class=\"headerlink\" title=\"旗滨\"></a>旗滨</h3><p>中性硼药用玻璃性能优于钙钠玻璃和低硼硅玻璃。 药用玻璃是指专门用于药品<br>包装的玻璃，一般指玻璃瓶罐及器皿。 药品的稳定性易受温度、湿度、空气、光、微<br>生物等影响而变化，因此需要特殊的药用玻璃作为包装材料。 根据药用玻璃的材料，<br>目前药用玻璃可以分为钠钙玻璃、低硼硅玻璃、 中硼硅玻璃和高硼硅玻璃四类。 化学<br>性能是衡量药用玻璃质量高低的重要标准之一，其中， 最重要的参数是线热膨胀系数</p>\n<p>我国药用玻璃国产替代空间广阔。 我国药用玻璃市场规模在 2020 年达到 234 亿<br>元，然而，国产仅占比 15%， 进口占比 85%，国产替代空间广阔</p>\n<p>公司药玻良品率逐步提升。 中性硼硅玻璃生产技术门槛高，需解决熔化过程气泡<br>不易排出、易产生节瘤、成型时间短、尺寸精度要求高等技术难题。 公司持续技术突<br>破，实现良品率的逐步提升，良品率由初期的约 30%提升至如今的 60%，与国际龙<br>头企业肖特的良品率差距大幅缩小。<br>、</p>\n<h3 id=\"山推股份\"><a href=\"#山推股份\" class=\"headerlink\" title=\"山推股份\"></a>山推股份</h3><p>公司向潍柴动力采购发动机、从林德液压采购液压件、从山重建机采购<br>挖掘机等，实现动力总成、液压件、变速箱、变矩器、四轮一带、研发<br>等方面的资源共享，发挥“1+1＞ 2”的集合效应，实现了集团内部的<br>优势互补，形成了人无我有的资源优势，极大提升了公司的核心竞争力</p>\n<p>公司是推土机行业龙头，形成多样化主机及配件的完整布局。 国产大马<br>力推土机国内独家， 实现外资品牌替代， 出口订单充裕逐步放量； 受益<br>于山东重工集团的整合优势，公司的主机产品型谱逐渐完善， 挖机和装<br>载机渗透率提升空间大。 各项业务关键假设如下：<br>1）推土机：大马力推土机出口需求旺盛，且公司定增募投项目产能释<br>放，假设大马力产品销量高增；中小马力产品受国内基建需求影响，预<br>计 23 年国内需求有所下降，随后企稳回升。<br>2）装载机和挖掘机： 22 年并入上市公司体内，基数较低，借助集团海<br>外销售渠道，受益于工程机械出口，预计收入迅速增长；假设毛利率维<br>持稳定。<br>3）配件：具备耗材属性，预计增速保持稳定略有增长；由于 23 年一<br>季度钢材价格下滑，假设 23 年毛利率提升，后续维持稳定。</p>\n<h3 id=\"钢研高钠\"><a href=\"#钢研高钠\" class=\"headerlink\" title=\"钢研高钠\"></a>钢研高钠</h3><p>生产技术门槛高， 独家供应享主导地位。 ODS 合金目前属于国外封锁技术，生产技术难度大，<br>进入门槛很高。 据招股说明书， 公司是我国目前唯一具备 ODS 合金生产技术的企业，且唯一<br>实现了量产，生产的该类产品全部应用在航空航天发动机关键部件，处于独家供应状态。公<br>司目前已拥有自行设计的机械合金化装备与特种工艺技术，在 ODS 合金领域处于事实上的主<br>导地位</p>\n<p>高温抗氧化和耐碳、硫腐蚀之“王”，高温组织稳定性<br>好，热膨胀系数低，冷、热和机加工性能好，耐温高达<br>1350℃。</p>\n<h3 id=\"国电南瑞\"><a href=\"#国电南瑞\" class=\"headerlink\" title=\"国电南瑞\"></a>国电南瑞</h3><p>电网建设投资于两大方向，一是以特高压直<br>流为主的跨区跨省输电，来解决新能源大基地送出问题。二是加强配电网建设，来应对<br>日益增长的分布式电源发展、电动汽车接入等需求。我国电网建设的大背景是以新能源<br>为主体的新型电力系统建设，而我国清洁能源主要分布在西部和北部地区，需要高效运<br>输新能源需要发挥电网的资源配置优势。配电网领域需要进行数字化赋能，构建以数字<br>电网建设支撑的新型电力系统和新型能源体系</p>\n<p>整体来看，国电南瑞子公司占所有61 家国家电网2022 年度中标企业中标份额超过49%，<br>占比近半，国电南瑞行业龙头地位显著</p>\n<h3 id=\"中核科技\"><a href=\"#中核科技\" class=\"headerlink\" title=\"中核科技\"></a>中核科技</h3><p>华龙一号”公司单机组核岛阀门价值量2.69 亿元，至2030 年公司国<br>内核电阀门价值量约40 亿元，十倍增长空间。公司在核电机组切断类<br>阀门市占率50%以上，依据纽威股份招股说明书，切断类阀门包括括闸<br>阀、截止阀、隔膜阀、旋塞阀、球阀、蝶阀等，该类阀门在核岛阀门中<br>占比为83%。公司单台机组核岛阀门价值量约2.69 亿元。至2030 年，<br>公司新增核岛阀门价值量约26.85 亿元，维修阀门价值量约15.41 亿元。<br>而公司2022 年核电核化工产品收入近4.31 亿元，还有约十倍的增长空<br>间</p>\n<p>核电阀门是民用核安全设备，竞争格局清晰。</p>\n<p>气液联动执行机构突破，单机组价值量仍有望提升。公司在气液联动执<br>行机构研发方面取得了突破，在漳州核电、国核示范快堆等项目上已实<br>现供货，目前在手订单几千万</p>\n<p>产能逐步扩充，应对产能瓶颈。公司目前已按实施产能扩充方</p>\n<p>三倍核能宣言有望打开核电出口市场。根据中国核电网，美国等二十二<br>国发布《三倍核能宣言》，核心内容包括共同努力推进到2050 年将全<br>球核能容量增加两倍，达到目前容量三倍的目标，</p>\n<p>核电站建设加速有望带来乏燃料后处理方向的投资额提升。</p>\n<p>我国坚持闭式循环，希望解决燃料可持续问题。通常来讲，压水堆核电<br>站铀资源的利用率仅为0.6%左右，如果对乏燃料进行后处理，用“榨”<br>出来的铀在压水中再循环一次，可节省天然铀25%；若如此多次循环，<br>则铀资源的利用率可以达到1%；若将后处理得到的钚与铀富集后剩下<br>的贫铀制成快堆燃料，铀资源的利用率可以达到60%到70%。同时，<br>经过后处理的乏燃料长期放射性毒性降低。以百万千瓦压水堆核电站为<br>例，每年产生的乏燃料为25 吨至30 吨，乏燃料中有大量的放射性元素，<br>毒性大、半衰期长，要在地质处置过程中衰变到天然铀矿水平需10 万<br>年以上，但经过后处理等环节后，其放射性摄入毒性降到天然铀辐射水<br>平的时间可减至千年以</p>\n<p>公司深度参与后处理工程。公司在后处理的关键阀门供货中承担了重要<br>任务，取得了穿地阀等重要核心阀门订单，未来有望成为公司第二增长<br>曲线</p>\n<p>高温气冷堆有望突破，打开公司业绩增长第三</p>\n<p>四代核电愈行愈近，在可持续性、经济性、安全与可靠性、废物最小化、<br>防扩散和实体保护等领域有较大优势。第四代核能系统国际论坛（GIF）<br>发起了有关未来核能系统的联合研究。中、法、韩、日、俄、美、欧盟<br>之间由此展开了积极合作。GIF 提出了六大领域的技术目标和相关评估<br>指标：可持续性、经济性、安全与可靠性、废物最小化、防扩散和实体<br>保护。六类最有前景的核系统被选中，其中两类为气体（氦）冷却反应<br>堆，另两类是液态金属（钠、铅合金）冷却堆，还有一类超临界水冷堆，<br>最后一类是熔盐冷却</p>\n<p>甘肃武威 2MW 钍基熔盐堆获得运行许可。钍基熔盐堆核能系统以<br>LiBeNaZr 等的氟化盐与溶解的U、Pu、Th 等的氟化物熔融混合后作燃<br>料，在600-700°C的高温低压下运行，其中LiF﹑NaF﹑BeF2 和ZrF4 为<br>载体盐，UF4 和PuF3 为裂变材料，ThF4 和UF4 为增殖燃料，吸收中子<br>后产生新的裂变材料U 和Pu。我国具有丰富的钍资源，钍基熔盐堆亦<br>被视为增殖核燃料的一条途径。中科院上海应物所正在研究设计2MW<br>的试验反应堆和20MWe 模块化钍基熔盐堆研究堆及科学设施。钍基熔<br>盐堆技术仍有很多问题有待解决，而且要建立一套以铀钍循环为基础的<br>核燃料循环工业体系</p>\n<p>工业阀门上游主要包括原材料、铸件、锻件及阀门设计：阀门产品制<br>造的最重要的原材料是钢材料与铜材料，其成本占阀门制造企业主营成<br>本的70%左右；中游按照不同阀门结构分为闸阀、压力阀、蝶阀、球<br>阀、旋启阀。下游应用行业较多：其中占比较大应用较多的为石油化工、<br>冶金、电力、水处理等行业。阀门在机械产品中比重较高，是石油、化<br>工、电站、长输管线、造船、核工业、宇航以及海洋采油等国民经济各<br>部门不可缺少的流体控制设备。从下游应用分布来看，油气、能源、炼<br>化、化工等是工业阀门的主要下游，占比分别达到17%、14%、13%<br>及11%，四个主要下游合计占比近55%</p>\n<p>国内炼化一体化建设持续推进，全球<br>LNG 运输船有望迎来集中交付。目前国内工业阀门市场参与者众多、竞争格局<br>分散，进出口价差大，国产阀门向高端定制升级。公司在工业阀门高端市场拓展<br>有所成效，已与中石化、上海卓然等签订战略合作协议，入围中石化和中石油的<br>年度框架；海外及新下游领域稳步拓展，有望进一步巩固阀门龙头优势</p>\n<p>核电进入批量化周期：我们<br>详细梳理并测算了核电行业及核岛阀门行业的市场空间，截止2023 年12 月15 日，<br>核准待开工核电机组8 台，选址通过待核准机组有14 台，受理选址环评机组共3<br>个厂址、6 台机组。经测算，国内核电站年均投资额1860 亿元，从2020 年开始至<br>2028 年核电投资额CAGR 约 22%</p>\n<p>我们预计公司 2023-2025 年收入为 18.31&#x2F;23.89&#x2F;29.24 亿元，归母净利润为<br>2.53&#x2F;3.55&#x2F;4.73 亿元，对应 EPS 分别为 0.66&#x2F;0.92&#x2F;1.23 元，对应 PE 分别为</p>\n<p>核电核化工产品：公司作为核岛阀门核心供应商，①持续聚焦高端核岛<br>阀门主业，在手订单饱满，核电新开工机组数有望上行；②扩充单机组<br>价值量，盈利能力有望再上台阶；③后处理建设刻不容缓，有望打开公<br>司第二增长曲线；④高温气冷堆在规划中，公司有望打开第三增长极。<br>我们预计 2023-2025 年核电核化工产品收入增速分别为 55.89%、<br>64.79%、36.13%，毛利率分别为35.00%、36.00%、37.00%</p>\n<p>公司在核电站用关键阀门领域基本具备二代、三代核电机组阀门成套供货能力,四代核电机组关键阀门供货能力;在核燃料真空阀及浓缩铀生产关键阀门领域,四大<br>类国产化关键阀门总体性能达到或超过进口产品水平,具备成套供货能力。 </p>\n<h3 id=\"湖南黄金\"><a href=\"#湖南黄金\" class=\"headerlink\" title=\"湖南黄金\"></a>湖南黄金</h3><p>锑性质独特，在广泛的应用领域发挥着关键作用，享有“工业味精”的美称。从物理性质<br>上看，锑具有低熔点（630.74°C）、高沸点（1750°C）、无延展性的特征，是电和热的不良<br>导体。锑热缩冷胀的特性可以使合金的硬度发生变化，常应用于军事武器；从化学性质上<br>看，锑具有双重属性，既亲铜又亲氧，低温时亲硫成矿，高温时亲石分散。此外，锑不溶<br>于一般的酸碱溶液，只有王水、浓酸等溶液才会将其溶解。锑具有耐腐蚀和高强度特性，<br>作为转轴生产的关键材料应用于机械齿轮；锑与卤族元素易生成相应的卤化物，产生大量<br>卤化物白烟。利用锑的低燃点特性，西方发达国家强制要求在如建材产品、电子电器产品、<br>塑料制品等易燃材料中添加卤化锑作为阻燃材料，当前还未发现比锑更好的阻燃代替品。</p>\n<p>1）价格假设<br>金价假设：2023 年黄金均价为 450 元&#x2F;克。美联储加息周期已经结束，预计美联储正式释<br>放降息信号后实际利率逐步回摆，推动金价上行。我们预计 2024-2025 年金价分别为<br>485&#x2F;490 元&#x2F;克。（2024 年初至今黄金均价为 480 元&#x2F;克）<br>锑价假设：2023 年锑锭均价为 8.15 万元&#x2F;吨。全球锑矿供给增量有限，需求端光伏新增<br>装机高增带来锑金属长期需求动能，预计全球锑供需平衡维持短缺且缺口具有扩大趋势。<br>我们预计 2024-2025 年锑锭均价为 8.5&#x2F;8.7 万元&#x2F;吨。（ 2024 年初至今锑锭均价为 8.48 万<br>元&#x2F;吨）<br>钨价假设：公司自有矿山及外购钨精矿生产仲钨酸铵，2023 年仲钨酸铵均价为 17.9 万元<br>&#x2F;吨，我们预计 2024-2025 年仲钨酸铵价格维持 2023 年水平。（2024 年初至今仲钨酸铵均<br>价为 18.1 万元&#x2F;吨）<br>（2）成本假设<br>自产金成本：公司自有矿山分为纯黄金矿和金锑伴生矿，伴生矿山成本由黄金和锑分摊，<br>由于 2023 年公司矿山停产影响，成本上涨较为明显，预计 2024-2025 年成本有所回落，<br>预计 2023-2025 年公司综合自产金生产成本分别为 250&#x2F;245&#x2F;245 元&#x2F;克。<br>自产锑成本：公司锑品分为自有矿山和外购原料生产，自有矿山成本较为可控，产品毛利<br>率较高，属于公司高盈利能力产品。我们预计 2023-2025 年公司自产锑品中含量锑生产成<br>本维持 2.7 万元&#x2F;吨。</p>\n<h3 id=\"猪\"><a href=\"#猪\" class=\"headerlink\" title=\"猪\"></a>猪</h3><p>公司生猪养殖成本下降的根本在于养殖生产效率的提升,核心在于猪群的健康管理,最终体现至成活率、料比、生长速度等生产指标的全面改善。<br>在疫病防控方面,公司当前正在搭建“猪病天网工程”,对生猪相关的多种疾病进行全面深入的研究,配备环控系统、生物安全管理、检测体系、免疫管理等措施,<br>将研究成果落地生产管理</p>\n<h3 id=\"铝\"><a href=\"#铝\" class=\"headerlink\" title=\"铝\"></a>铝</h3><p>铝土矿本身不稀缺，但分布严重不均。主要的制造业和工业品输出国比如我们中国，还有日韩等，铝土矿大量依赖进口。大储量高品质易开采的铝土矿分布在澳大利亚、几内亚等制造业规模规模并不庞大的国家。这导致了铝土矿的供需矛盾在全球进入一个相对“无序”的状态下的会变得紧张。</p>\n<p>，铝股的弹性，几乎是大宗商品股票里面最强。铝股在大宗商品上涨的周期里，动不动就是几倍十倍的涨幅，比如05-07年的铝股大涨，几乎都是五六倍七八倍的涨幅。最近一次大宗商品暴涨让美国铝业的股价涨了差不多20倍，中国铝业则也涨了4倍多。一旦未来铝土矿再次大幅度上行，铝股的涨幅大概率会比较大。未来即使铝土矿价格没有大幅度上涨，长期保持高位，那铝股的盈利能力也是非常强的</p>\n<p>铝股的位置相对还算安全，铝价未来有较大的上涨空间，因此我几乎是没有犹豫的买入了云铝股份。云铝股份本身有一定的铝矿，同时享有比较好的电力资源（电力成本是决定铝价的重要因素），同时作为央企的子公司，它拥有更好的风险管理能力和庞大市场。还有一些财务和产销上的细节在这里不做赘述。之前我买入过神火股份，有一个不错的收益，但后面复盘发现神火主要跟的是媒，这也算是歪打正着。神火目前价格已经被炒得很高了，虽然估值看起来比较低，但综合考虑而言没有云铝那么有弹性了。中国铝业这些当然也可以，都是一波的，但在确定性比较足的情况下我选择爆发性最好的那个。</p>\n<p>现货价格他们都在高位，整体维持涨价，加上美元降息预期，股价低位，所以存在修复逻辑，未来行业业绩能见度高，业绩反转之后，最少也是高息股逻辑。赔率和胜率兼备</p>\n<p>绿电铝龙头，成本优势凸显：公司产能全部位于云南，用电结构中水电<br>比例约达88.6%；得益于云南低价水电，云南地区电解铝企业综合用电<br>成本长期位于全行业前20%分位水平。且随着欧洲碳税政策加码，公司<br>未来有望享受显著成本优势</p>\n<p>吨铝市值行业最低，涨价弹性领先行业：根据各公司电解铝权益产能和<br>市值，我们测算可得云铝股份吨市值为可比公司最低，仅为2 万元，远<br>低于可比公司。当电解铝价格上涨10%时，公司2022 年PE 有望从 11<br>倍下降至6 倍，涨价弹性可观</p>\n<p>国企改革持续推进，管理层购股参与<br>分红；财务报表和资产结构优化，业绩释放可期。2018 年至2022 年，<br>公司 ROE 大幅增长、资产周转率和销售净利率也迅猛提高，公司资产<br>结构显著优化，盈利质量和资产质量明显提升</p>\n<p>电解铝的原料氧化铝不足以自给，中铝作为稳定的上游资源供应商，使得云铝无需保持</p>\n<p>长期氧化铝高库存，降低了氧化铝存货波动</p>\n<p>铝（Al）是一种银白色金属，在地壳中含量仅次于氧和硅，具有轻便性、高导电性、<br>高导热性、耐腐蚀性等优良特性，是机械、电力、航空航天、船舶制造、汽车制造、包<br>装、建筑、交通运输和房地产等行业的重要材料，在国民经济中占有重要地位</p>\n<p>汽车轻量化拉动：根据国际铝协数据，2020 年国内传统乘用车&#x2F;纯电动&#x2F;混动新<br>能源乘用车单车用铝量分别为 138.6&#x2F;157.9&#x2F;198.1kg，其预计到 2025 年中国传统燃油车&#x2F;<br>纯电动&#x2F;插电混动车的单车用铝量能分别提升至180&#x2F;227&#x2F;238kg。</p>\n<p>得益于电解铝下游地产开工回暖，汽车轻量化和光伏电站建设旺盛，电解铝迅速去<br>库；根据我国主要市场（上海、无锡等地）电解铝库存数据，2023 年4 月20 日库存仅<br>为86 万吨，同比下滑19%、周度环比下滑14%</p>\n<p>公司在铝土矿—氧化铝及铝用炭素方面的资源优势为公司控制生产成本，规避大宗<br>原辅料价格波动风险提供坚强保障。</p>\n<p>绿电铝龙头，成本优势凸显。依托云南省丰富的绿色电力优势，2022 年公司生产<br>用电结构中绿电比例达到约88.6%。公司依托绿色能源生产的绿色铝与煤电铝相比，碳<br>排放仅为煤电铝的约20%左右。水电铝相比火电铝，除了用电成本更低，还有很好的减<br>排效果。生产一吨水电铝，要比火电铝减少碳排放 10 吨以上，降幅达 90%，同时减少<br>粉尘量4 吨以上。尽管云南省政府从2021 年9 月份取消了0.25  元&#x2F;千瓦时的优惠电价政<br>策，但相较于全国其他省份，云南省电价仍处于全国低位。云铝股份因产能全部位于云<br>南，可以充分享受云南低价水电带来的成本优势，生产成本位于行业前20%的低位水平</p>\n<h3 id=\"华能国际\"><a href=\"#华能国际\" class=\"headerlink\" title=\"华能国际\"></a>华能国际</h3><p>公司实际控制方为国务院国资委，直接控股股东是华能集团。华能集团是中国核心电力<br>集团企业之一，作为行业龙头在业务布局、规模效应、资源整合等多方面具有显著优势。<br>华能集团直接持有公司9.91%的股权，通过中国华能集团香港有限公司和华能国际电力<br>开发公司分别间接持有公司3.01%和32.28%的股权</p>\n<p>但随着煤电上<br>网电价的提升以及新能源发电量增长，公司收入规模持续提升且盈利能力有所改善，亏<br>损幅度较2021 年有所收窄。受益于2023 年煤炭价格中枢回落和电量同比增长，以及境<br>外电力资产盈利提升，2023H1 公司实现归母净利润63.1 亿元，同比大幅增长309.7%，<br>业绩增速突出，扭亏为盈。 </p>\n<p>火电仍是最大营收来源，清洁能源盈利能力高位持稳。<br>➢ 营收结构方面：电力及热力业务占比达95.3%，以火电为主，但随着公司向清洁能<br>源转型，风电和光伏发电的营收占比逐渐增大，其中风电营收增长明显，从 2018<br>年占整体营收的3%逐步扩张到2022 年的6%。<br>➢ 利润贡献方面：近两年，受煤价上涨影响，火电处于大幅亏损状态，风电成为公司<br>利润的主要来源。<br>➢ 盈利能力方面：由于 2021 年前集中式光伏电站、工商业分布式光伏项目和新核准<br>陆上风电并网项目均享受补贴政策，公司风、光毛利率维持在50%以上水平。</p>\n<p>分红方面，公司现金分红政策规定公司在当年盈利及累计未分配利润为正，且公司现金<br>流可以满足公司正常经营和可持续发展的情况下，现金分红比例不少于当年实现的合并<br>报表可分配利润的50%。2021-2022 年，出于归属于本公司股东的净利润为负、公司转<br>型发展的投资需求以及资产负债率上升等原因，公司决议不分红。随着公司业绩扭亏为<br>盈，盈利能力提升，预期未来将回归合理分红水平。</p>\n<p>辅助服务市场机制不断完善，容量电价呼之欲出，火电调峰收益兑现。各省市纷纷出台<br>相关的政策措施，助力火电充分发掘容量和调峰特性，驱动火电灵活性改造，并为未来<br>火电盈利再开源</p>\n<p>机组分布集中沿海地区，区位优势突出。公司境内电厂分布在 26 个省、自治区和直辖<br>市，多数位于沿海沿江地区，经济发展快，用电量和电价水平较高；内陆电厂大多分布<br>在环绕首都和燃料陆运直达区域，有利于多渠道采购煤炭、稳定供给。同时公司拥有港<br>口及码头资源，对提高集约化燃料管理起到了极大的支持作用，有利于公司统一库存、<br>发挥淡储旺耗的功能，加速煤炭周转，减少滞期费用。此外，公司在新加坡全资拥有一<br>家营运电力公司，在巴基斯坦投资一家营运电力公司。公司电厂的境内外区域布局可以<br>形成优势互补、增强抵抗经营风险的能力</p>\n<p>2019-2022 年，华能国际风电、太阳能装机容量分别以年复合增长率 32%和 66%的速<br>度增长，远超于全国风电、太阳能装机容量年复合增长率 20%和 24%，增速领先全行<br>业。公司2022 年风电发电量为280.68 亿千瓦时，同比增长34.72%，太阳能发电量为<br>60.8 亿千瓦时，同比增长69.65%，分别占全国风电发电量的3.68%和1.42%，实现快<br>速增长。 </p>\n<p> ；2022 年公司上网结算电价已经有近 20%的涨幅，我们预计在现<br>有电价政策下后续趋于稳定，但一旦电改相关政策推进，仍有上涨空间。</p>\n<p>清洁能源板块：公司致力于新能源转型，并且在“十四五”期间保持风电光伏<br>装机较快增速，2023 年已为“十四五”中期，我们预计后两年装机增速将会进一步提升<br>以完成公司的十四五装机目标。叠加硅料及光伏组件价格加速下降，以及 CCER 和绿电<br>交易机制进一步推广，公司的新能源项目盈利能力将进一步增强。我们预计 2023-2025<br>风电与光伏装机规模增量分别为2.5&#x2F;3.5&#x2F;5GW 和6&#x2F;8&#x2F;10GW，风光利用小时数仍将保持<br>稳定</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"国投电力\"><a href=\"#国投电力\" class=\"headerlink\" title=\"国投电力\"></a>国投电力</h3><p>雅砻江为我国第三大<br>水电开发基地，自然资源禀赋优越，水量丰富且年际变化不大；流域已建成三大调节<br>水库，梯级联合调度能力强；受益于以上两点优势，水电的发电利用小时数高且年际<br>波动小。在目前优质水电资源基本开发完毕的背景下，雅砻江水电作为优质大水电的<br>稀缺性凸显。</p>\n<p> 推进雅砻江水风光一体化建设，项目获取及消纳优势显著，未来新能源成长空间可期。<br>根据公司规划，到 2025 年公司新能源装机增长空间有望达到 1000 万千瓦。公司依托雅<br>砻江优质水电资源开展水风光互补，在周边新能源项目获取方面具有先天优势，且水<br>风光互补可以平滑出力曲线、借已有通道实现打捆外送，公司风电光伏消纳优势明显</p>\n<p>火电资产结构优质，盈利有望显著改善。公司火电机组以高参数大容量机组为主，百<br>万千瓦级机组占 67.5%；公司火电机组集中在沿海等经济发达、电力需求旺盛的地区，<br>利用小时数有保障；且用煤结构里面海外煤占比高，随着今年海外煤价中枢下降及电<br>力市场化改革的推进，我们预计公司火电板块的盈利有望迎来大幅改善</p>\n<h3 id=\"三美\"><a href=\"#三美\" class=\"headerlink\" title=\"三美\"></a>三美</h3><p>生产厂家将视情况对有关产品的产能做转产处理,未来也存在配额量少的企业进行委外生产、配额转让的可能。<br>随着行情的周期性波动,行业产能逐步向头部企业集中,而一些小、散的产能逐步退</p>\n<p>PVDF 在锂电池中主要用于正极粘结剂与隔膜涂覆。PVDF 是一种高分子含氟聚合物，由 VDF<br>（偏氟乙烯）聚合形成，属于可熔融加工氟树脂，下游可用于涂料、注塑、光伏背板膜、<br>锂电池等诸多领域。传统应用方面，PVDF 涂料具有耐候、耐腐蚀、抗渗透等性能，具有较<br>长的使用寿命，同时 PVDF 的加工性能优异，可以通过挤出成型等热塑性加工方法加工为<br>薄膜、片材、管材、棒材等，在注塑领域应用广泛。新兴领域方面，PVDF 可用于光伏、水<br>处理、锂电池等。PVDF 由于其耐高压能力强、热稳定性好、易于分散等优良特性可作为锂<br>电池正极粘结剂，进而降低电极阻抗、减小电池极化。PVDF 还可被用于锂电池隔膜涂覆，<br>主要起到提高耐高温性能、增加电解液保液量、增加高压状态下电池安全性等作用</p>\n<p>由于六氟磷酸锂和 PVDF 供需失衡问题突出，且未来仍有部分新增产能投产，行<br>业整体盈利能力较差，但相对而言 FEP 供需格局相对较好，因此盈利能力相对较强，预计<br>2024-2025 年公司含氟聚合物与含氟精细化工品项目整体毛利率为 3%&#x2F;14.6%.</p>\n<h3 id=\"伊利\"><a href=\"#伊利\" class=\"headerlink\" title=\"伊利\"></a>伊利</h3><p>公司在费用投放上兼顾效率和效果，不断提升费用使用效率，未来销售费<br>用率有望持续稳中有降。23Q3 归母净利率为9.85%，同比+3.51pct，盈<br>利水平提升较为显著</p>\n<h3 id=\"光模块\"><a href=\"#光模块\" class=\"headerlink\" title=\"光模块\"></a>光模块</h3><p>光模块是光通信中实现光电和光电转换的光电子器件，是光通信产业的核心部分</p>\n<p>光模块产业链由上游的光芯片、光器件等，中游的光模块制造商和下游的设备商、运<br>营商等组成。光模块上游包括光芯片、光器件、电芯片等，光器件行业的供应商较多，<br>但高端光器件目前仍主要由国外供应商提供。光模块行业下游主要是包括电信运营<br>商、互联网及云计算企业等，光模块产品的运营领域涵盖了互联网服务、电信市场等<br>行业</p>\n<p>5G 和 IDC 建设拉动光模块需求，预期带来增量市场</p>\n<p>中国光模块厂商凭借劳动力成本等优势，在与海外厂商竞争中不断占据上风。</p>\n<p><img src=\"/image-13.png\" alt=\"Alt text\"></p>\n<h3 id=\"中国移动\"><a href=\"#中国移动\" class=\"headerlink\" title=\"中国移动\"></a>中国移动</h3><p>中国移动预计 2022 年将投入 480 亿用于算力网络资本开支，其中数据中心将投入 58<br>亿，公司预计未来算力网络的相关资本开支会逐步增长。2）1H22 中国联通资本开支为284<br>亿元，同比增长 98.5%，公司将紧抓“东数西算”新机遇，倾力打造“联接+感知+计算+<br>智能”的算网一体化服务。3）中国电信2022 年的产业数字化资本开支预算同比增长61.7%<br>至279 亿元，公司2021 年末的算力总规模达到2.1EFLOPS，公司表示将加快算力规模建<br>设，预计算力总规模将以超过年均80%的复合率增长，预计十四五末期将达到16.3EFLOPS</p>\n<p>云业务：运营商接捧互联网成为云计算市场主力军<br>政策推动云计算增长动力转向传统行业，三大运营商接捧互联网巨头成云计算市场主力军。<br>受互联网流量增长 缓及国资云建设等政策影响，云计算行业增长动力逐步由互联网行业<br>转向传统企业，在此背景下，三大运营商接捧互联网巨头成为政府、金融等行业的云服务<br>主力军。 </p>\n<p>而在算力网络建设及国资云的拉动下，三大运营商云计算业务2Q22 合计实<br>现营收360 亿元，同比增长108.5%，已成为云计算行业的主要增长极。</p>\n<p>运营商等国资企业在云计算行业中重要性提升，云基础设施国产化进程加速。国资云 构<br>下，云基础设施的建设运营方多为运营商或相关国资企业，例如，中国首个国资监管云服<br>务由中国电信牵头，联合中国电 、中国电 等多个央企共同完成。在国资云推动下，运<br>营商等国资企业在云计算行业中重要性提升，市场份额由2019 年的12%提升至2021 年的<br>23%。我们认为国资云的推广有望加速云基础设施国产化进程。以浙江省国资云为例，其<br>建设采用全国产化信创服务器作为底层基础设施，依托具有国产自主知 产权的“ 天云”<br>底座搭建而成。在国资云建设背景下，云基础设施国产化进程有望加速</p>\n<p>IDC：规划“4+3+X”数据中心布局，收入增速领先同业<br>三大电信运营商占据国内 IDC 市场的主导地位。据 IDC 统计，2021 年三大电信运营商在<br>国内IDC 市场的总份额达67.9%，其中中国电信、中国联通、中国移动在中国IDC 市场的<br>份额分别为27%、23%、18%</p>\n<p>东数西算带动下，三大运营商丰富机 资源，加快推进 IDC 布局。中国移动在 津冀、长<br>三角、粤 澳大湾区、成渝四大热点区域中心，持续完善“4+3+X”数据中心布局，部<br>42.9 万 机 ；中国电信聚焦 津冀、长三角、粤 澳大湾区、川渝陕四大经济发达区推<br>进“2+4+31+X+0”布局，部  IDC 超过 700 个，加强边缘计算能力建设，机 规模达到<br>48.7 万 ，机 资源居于国内首位；中国联通按 “5+4+31+X”总体布局，聚焦 津冀、<br>长三角、粤 澳大湾区等区域建设IDC 共808 个，机 规模达32.9 万 。截至2022 年上<br>半年，三家运营商共有机 124.5 万 ，较21 年底新增7.6 万 。据三大运营商2021 年<br>年报中披露的2022 年IDC 建设规划，下半年运营商机 规模将新增9.8 万 。 </p>\n<p>网络、运营及维护费用：中国移动计划不断提高网络能力和质量，算力网络建设等新基<br>建项目加速建成投产，以支持5G 和产业数字化发展。据公司2021 年年报，公司计划在2022<br>年底新增开通5G 基站47 万个，计划在2022 年新增IDC 机 4.3 万 ，并加快中心云、<br>边缘云的建设进度。我们预计随着公司5G 网络和数据中心建设规模的扩大，其网络、运营<br>及维护费用将相应有 提升，但随着主要算力节点逐步布局完成、5G 网络建设步入尾声，<br>费用增速将呈现出逐年下降趋势，预计其  2022&#x2F; 2023&#x2F;2024 年总网络运营和维护费用同比增<br>长12%&#x2F;9.5%&#x2F;8%至人民币2,418.4 亿&#x2F;2648.2 亿&#x2F;2,860.0 亿</p>\n<h3 id=\"中环\"><a href=\"#中环\" class=\"headerlink\" title=\"中环\"></a>中环</h3><p>Q4 基本盈亏平衡，单瓦盈利环降5-6 分；组<br>件出货3-3.5GW，整体延续亏损。受价格快速下行影响公司计提减值亏<br>损约 8-10 亿元；同时处理多晶硅参股公司股权，投资收益亏损 6-8 亿<br>元，导致Q4 业绩承压。24 年看，硅片环节开工率分化加强+N 型占比<br>持续提升，公司预计出货150GW+，维持龙头地位。 </p>\n<h3 id=\"新华保险\"><a href=\"#新华保险\" class=\"headerlink\" title=\"新华保险\"></a>新华保险</h3><h3 id=\"小米\"><a href=\"#小米\" class=\"headerlink\" title=\"小米\"></a>小米</h3><p>小 米自动驾驶的目标是 2024 年进入行业第一阵营，小米智能驾驶系统 装备了两颗英伟达 Orin X 芯片，单颗提供 508TOPS 的算力，搭载的 高精度激光雷达能够实现 0.05 米的泊车精度，以及 11 颗高清摄像头、 3 颗毫米波雷达、12 颗超声波雷达。</p>\n<p>小米 SU7 定位中大型纯电轿车，零百公里加<br>速时间 2.78s。小米推出转速高达 21000 转&#x2F;分钟的电机 V6&#x2F;V6s 和转速高达 27200<br>转&#x2F;分钟的电机 V8s。电池方面推出了 800V 碳化硅高压平台， 5 分钟充电可以实<br>现 220km 续航，研发的 CTB 一体化电池技术实现了 77.8%的体积效率。续航方<br>面双电机的小米 SU7 Max 在 CLTC 续航能力可达 800 公里。公司自研小米泰坦<br>合金，研发了 9100 吨锁模力的小米超级压铸机，能制造 72 个零件合而为一的<br>一体化压铸后地板，让焊接点减少 840 处，重量减轻 17%。</p>\n<p>应用场景不同，超声波雷达主要应用于泊车辅助、以及盲区碰撞预警。主要安装前后保险杠上作为倒车雷达，以及车身侧身测距。而毫米波雷达主要应用于自适应巡航、自动刹车辅助系统等。安装在汽车正前方、车辆后保险杠内、前保险杠内等位置</p>\n<h3 id=\"三一\"><a href=\"#三一\" class=\"headerlink\" title=\"三一\"></a>三一</h3><p>对海外市场更为乐观：疫情扰动下借助产品力+供需缺口，中国工程机械出口销量大幅增加，<br>20-22 年我国挖掘机出口销量 CAGR 为 60.21%。23 年下半年海外需求降温+海外供应链恢<br>复，中国工程机械出海增速有所回落，市场普遍担心 24 年国产品牌海外销售下滑，甚至引<br>发了对中长期国产品牌出海的悲观。我们认为，国内地产、基建需求反哺下，国产品牌产<br>品力非常强，随着中国品牌持续布局海外研发、渠道、售后等，未来有望把“产品力”转<br>化为“品牌力”，我们预计持续完善的海外布局+出口挖掘机吨位提升带来的均价提升有望<br>支撑 24 年海外收入增长。三一重工作为国内龙头，领先的全球布局有望推动公司成长为全<br>球龙头。 </p>\n<p>电动化虽言之尚早，但是长期来看带来的不只是业绩弹性，更重要的是对出海的助力：以<br>史为鉴，发动机、液压技术等重大技术变革都会重塑工程机械行业格局，电动化作为又一<br>重大技术变革有望重塑全球竞争格局。参照叉车行业，受益于锂电化浪潮，中国电动叉车<br>的性能实现了重大突破，开启了中国叉车加速走向世界的新征程。中国“三电”技术全球<br>领先，电动化趋势下有望助力中国品牌全球化进程。三一电动化布局逐步完善，掌握核心<br>技术，有望在电动化浪潮下持续领先，并在电动化的助力下完善全球化布局，成长为全球<br>龙头。</p>\n<p>预计毛利率随着海外占比提升、中大吨位占比增加而稳步提高，分别为 34%、<br>35%、35.5%。</p>\n<h3 id=\"牧原\"><a href=\"#牧原\" class=\"headerlink\" title=\"牧原\"></a>牧原</h3><p>2023年,公司共计屠宰生猪1,326万头,同比增长80%,产能利用率由2022年的25%提升至46%,但距离理想的产能利用率仍有一定差距。<br>由于部分厂区投产时间短,2023年屠宰肉食业务尚未实现盈利,但头均亏损水平已由2022年的120元左右下降至2023年的70元左右。<br>2024年屠宰肉食板块会持续开拓市场,优化产品结构和客户结构,加强内部生产运营管理,以争取早日实现盈利。<br> 面对当前外部市场形势,公司会合理把控生产经营节奏,规划资本开支水平,持续降低成本,提高整体发展质量。<br>同时,公司当前资金储备充足,在融资端也与银行保持稳定的合作关系,能够保证现金流的安全稳定</p>\n<p>公司2023年全年的生猪养殖平均成本相比2022年下降了0.7元&#x2F;kg,成本下降的来源主要是生产成绩的改善和期间费用的下降,如果将料价上升因素剔除,生产成绩<br>改善和期间费用下降带来的成本下降贡献在0.9元&#x2F;kg左右</p>\n<p>近期猪价上涨具有区域性特点,部分省份仔猪及商品猪价格有一定上涨,主要为节前短期供需变化所致。<br>全年来看,预计2024年整体价格表现相比2023年更乐观一些。<br>在供给端,当前能繁母猪仍处于较高水平,但整体为下降趋势,2024年生猪供应量预计将低于去年;在需求端,随着经济逐步企稳,2024年需求量预计将有一定上升</p>\n<p> 2023年12月底,公司能繁母猪数量为312.9万头,同比增长30万头左右。<br>对应今年出栏量也将有一定增长,增长比例预计在10%左右,实际出栏量将会受公司生产经营安排、生产成绩波动等多种因素影响,2024年具体出栏量区间指引将<br>在2023年年度报告中披露</p>\n<h3 id=\"理想\"><a href=\"#理想\" class=\"headerlink\" title=\"理想\"></a>理想</h3><p>理想将采用自研 800V高压纯电<br>平台和5C 倍率电池；实现充电 9分 30秒，续航 400公里。充电时间比当前主流<br>的 1.6C 电池缩短 66%。技术层面，理想 5C 电芯采用超离子环石墨负极技术+活<br>性面调控技术，保证充电效率。通过低阻抗体系设计、一体化极柱结构设计和电<br>芯间侧面冷却的热管理方案，保证充放电安全。</p>\n<p>高端车型智能驾驶芯片均采用英伟达 Orin，智能座舱芯<br>片采用高通 8155。感知层面，均采用激光雷达+超声波雷达+毫米波雷达+摄像头<br>的混合方案。伴随理想 L9上市，产品将具备 L4 级别辅助驾驶硬件，在硬件配置<br>方面迅速追平行业领先地位</p>\n<h3 id=\"蔚来\"><a href=\"#蔚来\" class=\"headerlink\" title=\"蔚来\"></a>蔚来</h3><p>光瀑式环绕氛围灯，256 色渐变，10 种氛围主题，支持呼吸律动、音乐联动，渲染轻松的家居格调</p>\n<h3 id=\"宇通\"><a href=\"#宇通\" class=\"headerlink\" title=\"宇通\"></a>宇通</h3><p>英国、 法国、 德国、 丹麦等国公交客车新能源化领先， 占据电动城<br>市公交超 50%份额</p>\n<p>宇通客车 2022 年以 479 辆注册量排名第一（同比+58%） ， 2022 年其欧洲电动<br>巴士市占率为 11.5%， 同比+2.3pct，</p>\n<p>BYD-ADL 排名第二， 2022 年注册量 465 辆（同比+24%） ， 其与英国当地最大的<br>客车公司 ADL 合作（2015 年开始） ， 比亚迪提供底盘、 三电技术支持， ADL 根据<br>当地市场需求专门定制外饰、 结构和车型等， 并且给予渠道资源的协助， 双方目<br>前已生产电动大巴超 1000 辆， 在英国市占率 50%-70%</p>\n<p>中国客车市场黄金发展阶段（2009-2014 年） 已过， 同时<br>存量公交新能源更新基本到位， 未来销量支撑主要来源于 1） 城镇化率提升背景<br>下， 公交市场持续渗透， 需求较为刚性； 2） 疫情推迟存量替换， 更新需求迫切；<br>3） 海外市场新能源化促进出口； 4） “双碳” 政策持续推进， 旅游、 团体等公路<br>客车新能源化持续发展。</p>\n<p>房车： 市场规模年均复合增速</p>\n<p>技术进步和产品更新风险： 汽车行业属于资金密集、 技术密集型行业。 公司<br>具备丰富的产品开发和制造经验， 而且历年来始终注重新技术、 新产品的研<br>究与开发。 新技术、 新产品的研发离不开资金的投入， 如果公司未来在新产<br>品开发过程中无法持续投入研发或没能及时开发出与新车型相配套的产品，<br>将面临技术进步带来的风险和经营风险。</p>\n<h3 id=\"比亚迪\"><a href=\"#比亚迪\" class=\"headerlink\" title=\"比亚迪\"></a>比亚迪</h3><p>目前公司拥有刀片电池、 DM 混动、 e3.0 平<br>台、 CTB 电池车身一体化、易四方、云辇和 DiLink 智能网联系统等领先科<br>技</p>\n<p>腾势 N7 搭载智驾硬科技，未来可期。 公司首款智能豪华猎跑 SUV 腾势 N7<br>正式上市，新车搭载智能座舱（ Link 超感交互智慧座舱，智慧六联屏，配备<br>6nm 制程芯片， 5G 智能网联系统）、智能底盘（标准版配备自研云辇-A 智<br>能空气车身控制系统）、智能驾驶（搭载腾势 Pilot 高阶智能驾驶辅助）三大<br>智能科技，为用户带来卓越的智能驾驶体验</p>\n<p>比亚迪插电式混合动力技术（ DM 技术）积累始于 2006 年，现已形成主打“超强动<br>力”的 DM-p 王者混动和主打“超低油耗”的 DM-i 超级混动两大技术平台。 DM-i 超<br>级混动作为以电为主的混动技术，围绕大功率电机驱动和大容量动力电池供能为主，发<br>动机为辅的电混架构，颠覆传统混动技术以油为主的设计架构， 达到超低油耗、静谧平<br>顺、卓越动力的整车表现。 DM-p 王者混动，以电四驱超强动力，重新定义了四轮驱动，<br>带来极速、安全、经济，三大极致用车体验。实现零到百公里加速在 5 秒以内，动力表<br>现超越传统大排量燃油车。</p>\n<p>e3.0 平台让“电动”带来的智能优势、高效优势、安全优势、美学优势充分释放。 百<br>公里电耗比同级别车型降低 10%，续航里程最大可突破 1000 公里。电池可承受 50 吨<br>重卡碾压，满足“超五星”碰撞安全标准。</p>\n<p>2023 年 1 月，公司正式发布易四方技术。 易四方技术平台是一套以四电机独立驱动<br>为核心的动力系统，从感知、控制、执行三个维度围绕新能源汽车的特性进行了全面<br>重构，彻底颠覆以往燃油车的动力系统能力体系感</p>\n<p>辇产品矩阵包含云辇-C、云辇-A、云辇-P 等产品，将从舒适、<br>操控、安全、越野等维度大幅提升消费者的驾乘体验。云辇能够有效抑制车身姿态变化，<br>显著降低车辆侧翻的风险，减小驾乘人员坐姿位移。同时云辇系统可以在雪地、泥地、<br>水域等复杂路况下，有效保护车身， 防止地形造成的整车磕碰损伤，提升驾乘舒适及安<br>全性，实现对人和车的双重保护。</p>\n<p>全场景数字钥匙提供多种车辆解锁方式，包括 App 远程遥控、蓝牙钥匙和手机 NFC<br>车钥匙。 最新一代 NFC 数字钥匙不仅与 iPhone、 Apple Watch 等设备兼容，还支持其<br>他品牌设备。手机 NFC 数字钥匙具备高性能、超便捷、快分享、强兼容四大优势，适<br>用于多种品牌手机，可以取代传统车钥匙，在无网络和电源的情况下也可以进行车辆解<br>锁闭锁操作</p>\n<p>区别于传统汽车，新能源汽车最核心的技术是“三电”，<br>包括电池、电机、电控。其中电机又称电驱系统，包括驱动电机、传动结构、控制器等，<br>承担了新能源车运动相关的所有功能。电机的扭矩是否精确对新能源车的效率和性能至关<br>重要。电控又被称为电源系统，包括 DC&#x2F;DC 变换器、 OBC、高压配电盒，是传统发动机变<br>速箱的替代，性能直接决定了电动汽车爬坡、加速、最高时速等指标。成本上来看，据钜<br>大锂电，驱动电机、电控系统成本分别占到新能源汽车总成本的 6.5%&#x2F;5.5%，是新能源车<br>的重要组成</p>\n<h3 id=\"重卡\"><a href=\"#重卡\" class=\"headerlink\" title=\"重卡\"></a>重卡</h3><p>今年宏观经济处于弱复苏阶段，基建投资与物流运输需求温和，重卡<br>行业处于恢复性增长阶段。明后年宏观经济复苏进程加快后，与投资<br>相关的工程建设用车以及与快递快运相关的物流用车将持续增长。同<br>时，在“到 2025 年新能源和国六排放标准货车保有量占比力争超过<br>40%”的目标约束下，叠加国三、国四淘汰政策的催化，更新置换需求<br>将有力支撑重卡市场恢复。此外，海外市场的需求持续增长，打开了<br>重卡行业的增量空间，</p>\n<p>工程建设与物流运输是重卡的主要应用需求，因此固定资产投资与消费是重卡<br>新增需求的核心驱动力。重卡的新增需求是指重卡市场的经济效益在增加，不断吸<br>引着新进入者，导致重卡市场的绝对规模在增长。从应用场景来看，重卡产品主要<br>应用于长途物流运输、工程建设、城市环卫、消防等场景。其中，物流运输用车需<br>求由国内消费景气度决定，工程建设用车需求则由房地产开发投资与基建投资决<br>定。因此，重卡的销量涨跌更容易受到宏观经济周期更替的影响。</p>\n<p>重卡出口的驱动力在于进口国经济增长与出海政策红利。目前我国重卡出口的<br>目的地主要集中在“一带一路”沿线国家，占比超过 55%。其中，俄罗斯、越南、<br>菲律宾、巴基斯坦等国是我国重卡出口的主要目的地。非洲、拉美地区也是重卡出<br>口的主要地区。因此，重卡出口增速与新兴经济体的实际经济增速基本保持一致。<br>同时，“一带一路”政策下，中国基建企业出海也带动了重卡出口销量。</p>\n<h3 id=\"电力\"><a href=\"#电力\" class=\"headerlink\" title=\"电力\"></a>电力</h3><p>煤电容量电价按照回收煤电机组一定比例固定成本的方式确定。其中，用于计算容量电价的煤电机组固定成本实行全国统一标准，为每年每千瓦330元；通过容量电价回收的固定成本比例，综合考虑各地电力系统需要、煤电功能转型情况等因素确定，2024～2025年多数地方为30%左右，部分煤电功能转型较快的地方适当高一些，为50%左右。2026年起，将各地通过容量电价回收固定成本的比例提升至不低于50</p>\n<p> 由于华北地区基准电价较高，公司整体电价水平并不低，另一方面，2021年深化电力体制改革方案提出，煤电市场化交易浮动范围提高为上下20%，高耗能企业市场交易电价不受限制，内蒙古地区高耗能占比接近50%，电价具备上涨弹性。</p>\n<h3 id=\"中国化学\"><a href=\"#中国化学\" class=\"headerlink\" title=\"中国化学\"></a>中国化学</h3><p> 实业及新材料业务：中国化学始终以市场为导向，坚持“创新驱动”，积极发展<br>实业及新材料业务，建立了“1 总院+多分院+N 平台”的技术创新平台体系，在<br>新材料领域，已研发和掌握己内酰胺、己二腈、气凝胶等化工新材料领域核心技<br>术，并达到国际先进水平。22 年以来公司气凝胶、PBAT、己二腈项目陆续投产，<br>预计2022-2024 年实业及新材料业务的营收分别为74&#x2F;130&#x2F;156 亿元；目前国内<br>己二腈产能有限，短期内己二腈项目可获得较高的利润率，预计 2022-2024 年<br>实业及新材料毛利率分别为25%&#x2F;22%&#x2F;20%</p>\n<h3 id=\"贵研铂业\"><a href=\"#贵研铂业\" class=\"headerlink\" title=\"贵研铂业\"></a>贵研铂业</h3><p>催化剂是什么？机动车尾气中含有一氧化碳（CO），碳氢化合物（HC），氮氧化合物（NOx）和颗粒物（PM）<br>等污染物，会对人类健康和环境产生直接和间接危害。汽车尾气催化剂是最为有效的净化汽车尾气的处理方<br>式，处理过程简单概括则为通过氧化反应把 CO 和 HC 变成二氧化碳和水，通过还原反应把 NOx 变成二氧化碳<br>和氮气</p>\n<p>催化剂由四部分结构组成。分别是贵金属活性组分、催化剂载体、涂层及助剂；其中贵金属活性成分为催化<br>剂的核心部分，主要是将金属铂、铑、钯的物质成分喷涂在蜂窝状陶瓷或金属为基体的载体上(也有颗粒型<br>及 SiC 泡沫型)，而涂层及助剂层则是为了提高铂铑钯的分散度。催化剂活性组分的用途</p>\n<p>贵金属资源循环回收业务：公司国内龙头地位进一步强化</p>\n<p>随着贵金属矿产资源的不断开采，高品位资源严重匮乏，矿产金、银、铂族金属生产加工成本不断上升，贵<br>金属再生资源越来越成为重要的贵金属原料供应来源。铂族金属再生不仅有利于保证供应和资源循环利用，<br>同时具有明显的经济效益。由于资源短缺，欧美日等发达国家很早就开始对废旧贵金属加以回收利用，把二<br>次资源回收作为重要的产业关键环节加以布局和扶持，在这方面具有较为系统的管理和运作机制。从地域分<br>布来看，铂族金属的回收区域主要为欧洲、北美以及日本等经济发达地区，一些新兴国家的回收也开始显现。<br>回收来源包括电子废料、废催化剂、失效化工催化剂、首饰等</p>\n<p>金属价格大幅波动，汽车产销不及预期，产能释放不及预期，贵金属新材料市场拓展规模不及预期</p>\n<h3 id=\"旗滨\"><a href=\"#旗滨\" class=\"headerlink\" title=\"旗滨\"></a>旗滨</h3><p>中性硼药用玻璃性能优于钙钠玻璃和低硼硅玻璃。 药用玻璃是指专门用于药品<br>包装的玻璃，一般指玻璃瓶罐及器皿。 药品的稳定性易受温度、湿度、空气、光、微<br>生物等影响而变化，因此需要特殊的药用玻璃作为包装材料。 根据药用玻璃的材料，<br>目前药用玻璃可以分为钠钙玻璃、低硼硅玻璃、 中硼硅玻璃和高硼硅玻璃四类。 化学<br>性能是衡量药用玻璃质量高低的重要标准之一，其中， 最重要的参数是线热膨胀系数</p>\n<p>我国药用玻璃国产替代空间广阔。 我国药用玻璃市场规模在 2020 年达到 234 亿<br>元，然而，国产仅占比 15%， 进口占比 85%，国产替代空间广阔</p>\n<p>公司药玻良品率逐步提升。 中性硼硅玻璃生产技术门槛高，需解决熔化过程气泡<br>不易排出、易产生节瘤、成型时间短、尺寸精度要求高等技术难题。 公司持续技术突<br>破，实现良品率的逐步提升，良品率由初期的约 30%提升至如今的 60%，与国际龙<br>头企业肖特的良品率差距大幅缩小。<br>、</p>\n<h3 id=\"山推股份\"><a href=\"#山推股份\" class=\"headerlink\" title=\"山推股份\"></a>山推股份</h3><p>公司向潍柴动力采购发动机、从林德液压采购液压件、从山重建机采购<br>挖掘机等，实现动力总成、液压件、变速箱、变矩器、四轮一带、研发<br>等方面的资源共享，发挥“1+1＞ 2”的集合效应，实现了集团内部的<br>优势互补，形成了人无我有的资源优势，极大提升了公司的核心竞争力</p>\n<p>公司是推土机行业龙头，形成多样化主机及配件的完整布局。 国产大马<br>力推土机国内独家， 实现外资品牌替代， 出口订单充裕逐步放量； 受益<br>于山东重工集团的整合优势，公司的主机产品型谱逐渐完善， 挖机和装<br>载机渗透率提升空间大。 各项业务关键假设如下：<br>1）推土机：大马力推土机出口需求旺盛，且公司定增募投项目产能释<br>放，假设大马力产品销量高增；中小马力产品受国内基建需求影响，预<br>计 23 年国内需求有所下降，随后企稳回升。<br>2）装载机和挖掘机： 22 年并入上市公司体内，基数较低，借助集团海<br>外销售渠道，受益于工程机械出口，预计收入迅速增长；假设毛利率维<br>持稳定。<br>3）配件：具备耗材属性，预计增速保持稳定略有增长；由于 23 年一<br>季度钢材价格下滑，假设 23 年毛利率提升，后续维持稳定。</p>\n<h3 id=\"钢研高钠\"><a href=\"#钢研高钠\" class=\"headerlink\" title=\"钢研高钠\"></a>钢研高钠</h3><p>生产技术门槛高， 独家供应享主导地位。 ODS 合金目前属于国外封锁技术，生产技术难度大，<br>进入门槛很高。 据招股说明书， 公司是我国目前唯一具备 ODS 合金生产技术的企业，且唯一<br>实现了量产，生产的该类产品全部应用在航空航天发动机关键部件，处于独家供应状态。公<br>司目前已拥有自行设计的机械合金化装备与特种工艺技术，在 ODS 合金领域处于事实上的主<br>导地位</p>\n<p>高温抗氧化和耐碳、硫腐蚀之“王”，高温组织稳定性<br>好，热膨胀系数低，冷、热和机加工性能好，耐温高达<br>1350℃。</p>\n<h3 id=\"国电南瑞\"><a href=\"#国电南瑞\" class=\"headerlink\" title=\"国电南瑞\"></a>国电南瑞</h3><p>电网建设投资于两大方向，一是以特高压直<br>流为主的跨区跨省输电，来解决新能源大基地送出问题。二是加强配电网建设，来应对<br>日益增长的分布式电源发展、电动汽车接入等需求。我国电网建设的大背景是以新能源<br>为主体的新型电力系统建设，而我国清洁能源主要分布在西部和北部地区，需要高效运<br>输新能源需要发挥电网的资源配置优势。配电网领域需要进行数字化赋能，构建以数字<br>电网建设支撑的新型电力系统和新型能源体系</p>\n<p>整体来看，国电南瑞子公司占所有61 家国家电网2022 年度中标企业中标份额超过49%，<br>占比近半，国电南瑞行业龙头地位显著</p>\n<h3 id=\"中核科技\"><a href=\"#中核科技\" class=\"headerlink\" title=\"中核科技\"></a>中核科技</h3><p>华龙一号”公司单机组核岛阀门价值量2.69 亿元，至2030 年公司国<br>内核电阀门价值量约40 亿元，十倍增长空间。公司在核电机组切断类<br>阀门市占率50%以上，依据纽威股份招股说明书，切断类阀门包括括闸<br>阀、截止阀、隔膜阀、旋塞阀、球阀、蝶阀等，该类阀门在核岛阀门中<br>占比为83%。公司单台机组核岛阀门价值量约2.69 亿元。至2030 年，<br>公司新增核岛阀门价值量约26.85 亿元，维修阀门价值量约15.41 亿元。<br>而公司2022 年核电核化工产品收入近4.31 亿元，还有约十倍的增长空<br>间</p>\n<p>核电阀门是民用核安全设备，竞争格局清晰。</p>\n<p>气液联动执行机构突破，单机组价值量仍有望提升。公司在气液联动执<br>行机构研发方面取得了突破，在漳州核电、国核示范快堆等项目上已实<br>现供货，目前在手订单几千万</p>\n<p>产能逐步扩充，应对产能瓶颈。公司目前已按实施产能扩充方</p>\n<p>三倍核能宣言有望打开核电出口市场。根据中国核电网，美国等二十二<br>国发布《三倍核能宣言》，核心内容包括共同努力推进到2050 年将全<br>球核能容量增加两倍，达到目前容量三倍的目标，</p>\n<p>核电站建设加速有望带来乏燃料后处理方向的投资额提升。</p>\n<p>我国坚持闭式循环，希望解决燃料可持续问题。通常来讲，压水堆核电<br>站铀资源的利用率仅为0.6%左右，如果对乏燃料进行后处理，用“榨”<br>出来的铀在压水中再循环一次，可节省天然铀25%；若如此多次循环，<br>则铀资源的利用率可以达到1%；若将后处理得到的钚与铀富集后剩下<br>的贫铀制成快堆燃料，铀资源的利用率可以达到60%到70%。同时，<br>经过后处理的乏燃料长期放射性毒性降低。以百万千瓦压水堆核电站为<br>例，每年产生的乏燃料为25 吨至30 吨，乏燃料中有大量的放射性元素，<br>毒性大、半衰期长，要在地质处置过程中衰变到天然铀矿水平需10 万<br>年以上，但经过后处理等环节后，其放射性摄入毒性降到天然铀辐射水<br>平的时间可减至千年以</p>\n<p>公司深度参与后处理工程。公司在后处理的关键阀门供货中承担了重要<br>任务，取得了穿地阀等重要核心阀门订单，未来有望成为公司第二增长<br>曲线</p>\n<p>高温气冷堆有望突破，打开公司业绩增长第三</p>\n<p>四代核电愈行愈近，在可持续性、经济性、安全与可靠性、废物最小化、<br>防扩散和实体保护等领域有较大优势。第四代核能系统国际论坛（GIF）<br>发起了有关未来核能系统的联合研究。中、法、韩、日、俄、美、欧盟<br>之间由此展开了积极合作。GIF 提出了六大领域的技术目标和相关评估<br>指标：可持续性、经济性、安全与可靠性、废物最小化、防扩散和实体<br>保护。六类最有前景的核系统被选中，其中两类为气体（氦）冷却反应<br>堆，另两类是液态金属（钠、铅合金）冷却堆，还有一类超临界水冷堆，<br>最后一类是熔盐冷却</p>\n<p>甘肃武威 2MW 钍基熔盐堆获得运行许可。钍基熔盐堆核能系统以<br>LiBeNaZr 等的氟化盐与溶解的U、Pu、Th 等的氟化物熔融混合后作燃<br>料，在600-700°C的高温低压下运行，其中LiF﹑NaF﹑BeF2 和ZrF4 为<br>载体盐，UF4 和PuF3 为裂变材料，ThF4 和UF4 为增殖燃料，吸收中子<br>后产生新的裂变材料U 和Pu。我国具有丰富的钍资源，钍基熔盐堆亦<br>被视为增殖核燃料的一条途径。中科院上海应物所正在研究设计2MW<br>的试验反应堆和20MWe 模块化钍基熔盐堆研究堆及科学设施。钍基熔<br>盐堆技术仍有很多问题有待解决，而且要建立一套以铀钍循环为基础的<br>核燃料循环工业体系</p>\n<p>工业阀门上游主要包括原材料、铸件、锻件及阀门设计：阀门产品制<br>造的最重要的原材料是钢材料与铜材料，其成本占阀门制造企业主营成<br>本的70%左右；中游按照不同阀门结构分为闸阀、压力阀、蝶阀、球<br>阀、旋启阀。下游应用行业较多：其中占比较大应用较多的为石油化工、<br>冶金、电力、水处理等行业。阀门在机械产品中比重较高，是石油、化<br>工、电站、长输管线、造船、核工业、宇航以及海洋采油等国民经济各<br>部门不可缺少的流体控制设备。从下游应用分布来看，油气、能源、炼<br>化、化工等是工业阀门的主要下游，占比分别达到17%、14%、13%<br>及11%，四个主要下游合计占比近55%</p>\n<p>国内炼化一体化建设持续推进，全球<br>LNG 运输船有望迎来集中交付。目前国内工业阀门市场参与者众多、竞争格局<br>分散，进出口价差大，国产阀门向高端定制升级。公司在工业阀门高端市场拓展<br>有所成效，已与中石化、上海卓然等签订战略合作协议，入围中石化和中石油的<br>年度框架；海外及新下游领域稳步拓展，有望进一步巩固阀门龙头优势</p>\n<p>核电进入批量化周期：我们<br>详细梳理并测算了核电行业及核岛阀门行业的市场空间，截止2023 年12 月15 日，<br>核准待开工核电机组8 台，选址通过待核准机组有14 台，受理选址环评机组共3<br>个厂址、6 台机组。经测算，国内核电站年均投资额1860 亿元，从2020 年开始至<br>2028 年核电投资额CAGR 约 22%</p>\n<p>我们预计公司 2023-2025 年收入为 18.31&#x2F;23.89&#x2F;29.24 亿元，归母净利润为<br>2.53&#x2F;3.55&#x2F;4.73 亿元，对应 EPS 分别为 0.66&#x2F;0.92&#x2F;1.23 元，对应 PE 分别为</p>\n<p>核电核化工产品：公司作为核岛阀门核心供应商，①持续聚焦高端核岛<br>阀门主业，在手订单饱满，核电新开工机组数有望上行；②扩充单机组<br>价值量，盈利能力有望再上台阶；③后处理建设刻不容缓，有望打开公<br>司第二增长曲线；④高温气冷堆在规划中，公司有望打开第三增长极。<br>我们预计 2023-2025 年核电核化工产品收入增速分别为 55.89%、<br>64.79%、36.13%，毛利率分别为35.00%、36.00%、37.00%</p>\n<p>公司在核电站用关键阀门领域基本具备二代、三代核电机组阀门成套供货能力,四代核电机组关键阀门供货能力;在核燃料真空阀及浓缩铀生产关键阀门领域,四大<br>类国产化关键阀门总体性能达到或超过进口产品水平,具备成套供货能力。 </p>\n<h3 id=\"湖南黄金\"><a href=\"#湖南黄金\" class=\"headerlink\" title=\"湖南黄金\"></a>湖南黄金</h3><p>锑性质独特，在广泛的应用领域发挥着关键作用，享有“工业味精”的美称。从物理性质<br>上看，锑具有低熔点（630.74°C）、高沸点（1750°C）、无延展性的特征，是电和热的不良<br>导体。锑热缩冷胀的特性可以使合金的硬度发生变化，常应用于军事武器；从化学性质上<br>看，锑具有双重属性，既亲铜又亲氧，低温时亲硫成矿，高温时亲石分散。此外，锑不溶<br>于一般的酸碱溶液，只有王水、浓酸等溶液才会将其溶解。锑具有耐腐蚀和高强度特性，<br>作为转轴生产的关键材料应用于机械齿轮；锑与卤族元素易生成相应的卤化物，产生大量<br>卤化物白烟。利用锑的低燃点特性，西方发达国家强制要求在如建材产品、电子电器产品、<br>塑料制品等易燃材料中添加卤化锑作为阻燃材料，当前还未发现比锑更好的阻燃代替品。</p>\n<p>1）价格假设<br>金价假设：2023 年黄金均价为 450 元&#x2F;克。美联储加息周期已经结束，预计美联储正式释<br>放降息信号后实际利率逐步回摆，推动金价上行。我们预计 2024-2025 年金价分别为<br>485&#x2F;490 元&#x2F;克。（2024 年初至今黄金均价为 480 元&#x2F;克）<br>锑价假设：2023 年锑锭均价为 8.15 万元&#x2F;吨。全球锑矿供给增量有限，需求端光伏新增<br>装机高增带来锑金属长期需求动能，预计全球锑供需平衡维持短缺且缺口具有扩大趋势。<br>我们预计 2024-2025 年锑锭均价为 8.5&#x2F;8.7 万元&#x2F;吨。（ 2024 年初至今锑锭均价为 8.48 万<br>元&#x2F;吨）<br>钨价假设：公司自有矿山及外购钨精矿生产仲钨酸铵，2023 年仲钨酸铵均价为 17.9 万元<br>&#x2F;吨，我们预计 2024-2025 年仲钨酸铵价格维持 2023 年水平。（2024 年初至今仲钨酸铵均<br>价为 18.1 万元&#x2F;吨）<br>（2）成本假设<br>自产金成本：公司自有矿山分为纯黄金矿和金锑伴生矿，伴生矿山成本由黄金和锑分摊，<br>由于 2023 年公司矿山停产影响，成本上涨较为明显，预计 2024-2025 年成本有所回落，<br>预计 2023-2025 年公司综合自产金生产成本分别为 250&#x2F;245&#x2F;245 元&#x2F;克。<br>自产锑成本：公司锑品分为自有矿山和外购原料生产，自有矿山成本较为可控，产品毛利<br>率较高，属于公司高盈利能力产品。我们预计 2023-2025 年公司自产锑品中含量锑生产成<br>本维持 2.7 万元&#x2F;吨。</p>\n<h3 id=\"猪\"><a href=\"#猪\" class=\"headerlink\" title=\"猪\"></a>猪</h3><p>公司生猪养殖成本下降的根本在于养殖生产效率的提升,核心在于猪群的健康管理,最终体现至成活率、料比、生长速度等生产指标的全面改善。<br>在疫病防控方面,公司当前正在搭建“猪病天网工程”,对生猪相关的多种疾病进行全面深入的研究,配备环控系统、生物安全管理、检测体系、免疫管理等措施,<br>将研究成果落地生产管理</p>\n<h3 id=\"铝\"><a href=\"#铝\" class=\"headerlink\" title=\"铝\"></a>铝</h3><p>铝土矿本身不稀缺，但分布严重不均。主要的制造业和工业品输出国比如我们中国，还有日韩等，铝土矿大量依赖进口。大储量高品质易开采的铝土矿分布在澳大利亚、几内亚等制造业规模规模并不庞大的国家。这导致了铝土矿的供需矛盾在全球进入一个相对“无序”的状态下的会变得紧张。</p>\n<p>，铝股的弹性，几乎是大宗商品股票里面最强。铝股在大宗商品上涨的周期里，动不动就是几倍十倍的涨幅，比如05-07年的铝股大涨，几乎都是五六倍七八倍的涨幅。最近一次大宗商品暴涨让美国铝业的股价涨了差不多20倍，中国铝业则也涨了4倍多。一旦未来铝土矿再次大幅度上行，铝股的涨幅大概率会比较大。未来即使铝土矿价格没有大幅度上涨，长期保持高位，那铝股的盈利能力也是非常强的</p>\n<p>铝股的位置相对还算安全，铝价未来有较大的上涨空间，因此我几乎是没有犹豫的买入了云铝股份。云铝股份本身有一定的铝矿，同时享有比较好的电力资源（电力成本是决定铝价的重要因素），同时作为央企的子公司，它拥有更好的风险管理能力和庞大市场。还有一些财务和产销上的细节在这里不做赘述。之前我买入过神火股份，有一个不错的收益，但后面复盘发现神火主要跟的是媒，这也算是歪打正着。神火目前价格已经被炒得很高了，虽然估值看起来比较低，但综合考虑而言没有云铝那么有弹性了。中国铝业这些当然也可以，都是一波的，但在确定性比较足的情况下我选择爆发性最好的那个。</p>\n<p>现货价格他们都在高位，整体维持涨价，加上美元降息预期，股价低位，所以存在修复逻辑，未来行业业绩能见度高，业绩反转之后，最少也是高息股逻辑。赔率和胜率兼备</p>\n<p>绿电铝龙头，成本优势凸显：公司产能全部位于云南，用电结构中水电<br>比例约达88.6%；得益于云南低价水电，云南地区电解铝企业综合用电<br>成本长期位于全行业前20%分位水平。且随着欧洲碳税政策加码，公司<br>未来有望享受显著成本优势</p>\n<p>吨铝市值行业最低，涨价弹性领先行业：根据各公司电解铝权益产能和<br>市值，我们测算可得云铝股份吨市值为可比公司最低，仅为2 万元，远<br>低于可比公司。当电解铝价格上涨10%时，公司2022 年PE 有望从 11<br>倍下降至6 倍，涨价弹性可观</p>\n<p>国企改革持续推进，管理层购股参与<br>分红；财务报表和资产结构优化，业绩释放可期。2018 年至2022 年，<br>公司 ROE 大幅增长、资产周转率和销售净利率也迅猛提高，公司资产<br>结构显著优化，盈利质量和资产质量明显提升</p>\n<p>电解铝的原料氧化铝不足以自给，中铝作为稳定的上游资源供应商，使得云铝无需保持</p>\n<p>长期氧化铝高库存，降低了氧化铝存货波动</p>\n<p>铝（Al）是一种银白色金属，在地壳中含量仅次于氧和硅，具有轻便性、高导电性、<br>高导热性、耐腐蚀性等优良特性，是机械、电力、航空航天、船舶制造、汽车制造、包<br>装、建筑、交通运输和房地产等行业的重要材料，在国民经济中占有重要地位</p>\n<p>汽车轻量化拉动：根据国际铝协数据，2020 年国内传统乘用车&#x2F;纯电动&#x2F;混动新<br>能源乘用车单车用铝量分别为 138.6&#x2F;157.9&#x2F;198.1kg，其预计到 2025 年中国传统燃油车&#x2F;<br>纯电动&#x2F;插电混动车的单车用铝量能分别提升至180&#x2F;227&#x2F;238kg。</p>\n<p>得益于电解铝下游地产开工回暖，汽车轻量化和光伏电站建设旺盛，电解铝迅速去<br>库；根据我国主要市场（上海、无锡等地）电解铝库存数据，2023 年4 月20 日库存仅<br>为86 万吨，同比下滑19%、周度环比下滑14%</p>\n<p>公司在铝土矿—氧化铝及铝用炭素方面的资源优势为公司控制生产成本，规避大宗<br>原辅料价格波动风险提供坚强保障。</p>\n<p>绿电铝龙头，成本优势凸显。依托云南省丰富的绿色电力优势，2022 年公司生产<br>用电结构中绿电比例达到约88.6%。公司依托绿色能源生产的绿色铝与煤电铝相比，碳<br>排放仅为煤电铝的约20%左右。水电铝相比火电铝，除了用电成本更低，还有很好的减<br>排效果。生产一吨水电铝，要比火电铝减少碳排放 10 吨以上，降幅达 90%，同时减少<br>粉尘量4 吨以上。尽管云南省政府从2021 年9 月份取消了0.25  元&#x2F;千瓦时的优惠电价政<br>策，但相较于全国其他省份，云南省电价仍处于全国低位。云铝股份因产能全部位于云<br>南，可以充分享受云南低价水电带来的成本优势，生产成本位于行业前20%的低位水平</p>\n<h3 id=\"华能国际\"><a href=\"#华能国际\" class=\"headerlink\" title=\"华能国际\"></a>华能国际</h3><p>公司实际控制方为国务院国资委，直接控股股东是华能集团。华能集团是中国核心电力<br>集团企业之一，作为行业龙头在业务布局、规模效应、资源整合等多方面具有显著优势。<br>华能集团直接持有公司9.91%的股权，通过中国华能集团香港有限公司和华能国际电力<br>开发公司分别间接持有公司3.01%和32.28%的股权</p>\n<p>但随着煤电上<br>网电价的提升以及新能源发电量增长，公司收入规模持续提升且盈利能力有所改善，亏<br>损幅度较2021 年有所收窄。受益于2023 年煤炭价格中枢回落和电量同比增长，以及境<br>外电力资产盈利提升，2023H1 公司实现归母净利润63.1 亿元，同比大幅增长309.7%，<br>业绩增速突出，扭亏为盈。 </p>\n<p>火电仍是最大营收来源，清洁能源盈利能力高位持稳。<br>➢ 营收结构方面：电力及热力业务占比达95.3%，以火电为主，但随着公司向清洁能<br>源转型，风电和光伏发电的营收占比逐渐增大，其中风电营收增长明显，从 2018<br>年占整体营收的3%逐步扩张到2022 年的6%。<br>➢ 利润贡献方面：近两年，受煤价上涨影响，火电处于大幅亏损状态，风电成为公司<br>利润的主要来源。<br>➢ 盈利能力方面：由于 2021 年前集中式光伏电站、工商业分布式光伏项目和新核准<br>陆上风电并网项目均享受补贴政策，公司风、光毛利率维持在50%以上水平。</p>\n<p>分红方面，公司现金分红政策规定公司在当年盈利及累计未分配利润为正，且公司现金<br>流可以满足公司正常经营和可持续发展的情况下，现金分红比例不少于当年实现的合并<br>报表可分配利润的50%。2021-2022 年，出于归属于本公司股东的净利润为负、公司转<br>型发展的投资需求以及资产负债率上升等原因，公司决议不分红。随着公司业绩扭亏为<br>盈，盈利能力提升，预期未来将回归合理分红水平。</p>\n<p>辅助服务市场机制不断完善，容量电价呼之欲出，火电调峰收益兑现。各省市纷纷出台<br>相关的政策措施，助力火电充分发掘容量和调峰特性，驱动火电灵活性改造，并为未来<br>火电盈利再开源</p>\n<p>机组分布集中沿海地区，区位优势突出。公司境内电厂分布在 26 个省、自治区和直辖<br>市，多数位于沿海沿江地区，经济发展快，用电量和电价水平较高；内陆电厂大多分布<br>在环绕首都和燃料陆运直达区域，有利于多渠道采购煤炭、稳定供给。同时公司拥有港<br>口及码头资源，对提高集约化燃料管理起到了极大的支持作用，有利于公司统一库存、<br>发挥淡储旺耗的功能，加速煤炭周转，减少滞期费用。此外，公司在新加坡全资拥有一<br>家营运电力公司，在巴基斯坦投资一家营运电力公司。公司电厂的境内外区域布局可以<br>形成优势互补、增强抵抗经营风险的能力</p>\n<p>2019-2022 年，华能国际风电、太阳能装机容量分别以年复合增长率 32%和 66%的速<br>度增长，远超于全国风电、太阳能装机容量年复合增长率 20%和 24%，增速领先全行<br>业。公司2022 年风电发电量为280.68 亿千瓦时，同比增长34.72%，太阳能发电量为<br>60.8 亿千瓦时，同比增长69.65%，分别占全国风电发电量的3.68%和1.42%，实现快<br>速增长。 </p>\n<p> ；2022 年公司上网结算电价已经有近 20%的涨幅，我们预计在现<br>有电价政策下后续趋于稳定，但一旦电改相关政策推进，仍有上涨空间。</p>\n<p>清洁能源板块：公司致力于新能源转型，并且在“十四五”期间保持风电光伏<br>装机较快增速，2023 年已为“十四五”中期，我们预计后两年装机增速将会进一步提升<br>以完成公司的十四五装机目标。叠加硅料及光伏组件价格加速下降，以及 CCER 和绿电<br>交易机制进一步推广，公司的新能源项目盈利能力将进一步增强。我们预计 2023-2025<br>风电与光伏装机规模增量分别为2.5&#x2F;3.5&#x2F;5GW 和6&#x2F;8&#x2F;10GW，风光利用小时数仍将保持<br>稳定</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckzf5sdyt0000yy8kmd769rti","tag_id":"ckzf5sdyz0002yy8kx28s5ks9","_id":"ckzf5sdz40007yy8k6dgno3hw"},{"post_id":"ckzf5sdyx0001yy8kr15yui10","tag_id":"ckzf5sdz30006yy8kyqd9pcka","_id":"ckzf5sdz8000cyy8kwtt6ic07"},{"post_id":"ckzf5sdz00003yy8kwrbubbr1","tag_id":"ckzf5sdz6000ayy8k8021yu1h","_id":"ckzf5sdza000gyy8kja3x8w13"},{"post_id":"ckzf5sdz10004yy8kzjoaknzp","tag_id":"ckzf5sdz9000eyy8k34dwupn6","_id":"ckzf5sdzc000kyy8kbxnxyti3"},{"post_id":"ckzf5sdz50009yy8kz8op9s2m","tag_id":"ckzf5sdzb000iyy8kssa8i01f","_id":"ckzf5sdzf000oyy8k7hfy42av"},{"post_id":"ckzf5sdz7000byy8kfpyjem2w","tag_id":"ckzf5sdzb000iyy8kssa8i01f","_id":"ckzf5sdzg000ryy8kvwbv8o2z"},{"post_id":"ckzf5sdz8000dyy8k29g6ve88","tag_id":"ckzf5sdzg000qyy8ki8jk7i8z","_id":"ckzf5sdzg000tyy8kv3r0g7fh"},{"post_id":"ckzf5sdza000hyy8ktd9jwllr","tag_id":"ckzf5sdzg000syy8kkwg9bopk","_id":"ckzf5sdzh000vyy8kej1kdrhr"},{"post_id":"ckzf5sdzc000lyy8k9vpw6foi","tag_id":"ckzf5sdzg000uyy8k28dafgfe","_id":"ckzf5sdzh000xyy8kakpmbr9x"},{"post_id":"ckzf5sdzd000myy8k7p79iiia","tag_id":"ckzf5sdzh000wyy8khfwnyz5n","_id":"ckzf5sdzh000zyy8ks8zwlnvn"},{"post_id":"ckzf5sdzf000pyy8ka3xwt8wg","tag_id":"ckzf5sdzh000yyy8kfown54ao","_id":"ckzf5sdzi0010yy8k6m09y7n3"},{"post_id":"ckzf5sdzt0011yy8km8m96hpl","tag_id":"ckzf5sdzw0015yy8kn7poe6z3","_id":"ckzf5se00001byy8kbka87v2k"},{"post_id":"ckzf5sdzu0013yy8kbq705u2x","tag_id":"ckzf5sdzz001ayy8krn65wekr","_id":"ckzf5se02001gyy8kvxj6cx3g"},{"post_id":"ckzf5sdzw0016yy8k0odcnot3","tag_id":"ckzf5se01001eyy8k53rgvqo3","_id":"ckzf5se04001kyy8k8a6bw9gx"},{"post_id":"ckzf5sdzy0018yy8kjk235izp","tag_id":"ckzf5se03001iyy8k5vzl9dyr","_id":"ckzf5se06001oyy8kbz2071xm"},{"post_id":"ckzf5se00001cyy8kexq6tpd4","tag_id":"ckzf5se05001myy8kbuxdvnsn","_id":"ckzf5se08001syy8k1byn0a4i"},{"post_id":"ckzf5se01001dyy8kqqgbzys3","tag_id":"ckzf5se08001ryy8kfgt4390r","_id":"ckzf5se0b001xyy8k17s64fa7"},{"post_id":"ckzf5se02001fyy8kjwqmoexv","tag_id":"ckzf5se0a001vyy8kqnwxnw3c","_id":"ckzf5se0d0021yy8kls4o23m6"},{"post_id":"ckzf5se03001hyy8kowub1e2u","tag_id":"ckzf5se0c001zyy8k3l0g7xja","_id":"ckzf5se0i0025yy8k809hmv8m"},{"post_id":"ckzf5se04001jyy8kch13339z","tag_id":"ckzf5se0f0023yy8kjevxv5k8","_id":"ckzf5se0j0027yy8kgzphytd8"},{"post_id":"ckzf5se05001nyy8k5e3tjozz","tag_id":"ckzf5se0i0026yy8kcacc95gm","_id":"ckzf5se0j0029yy8k3q7xb766"},{"post_id":"ckzf5se06001pyy8k6hle2lny","tag_id":"ckzf5se0j0028yy8kcp84av7y","_id":"ckzf5se0k002byy8kcqv7zcqd"},{"post_id":"ckzf5se07001qyy8ktj7eu1yc","tag_id":"ckzf5se0k002ayy8kh1od3thj","_id":"ckzf5se0l002dyy8kny7oophd"},{"post_id":"ckzf5se08001tyy8kyris7kj2","tag_id":"ckzf5se0k002cyy8kvznvtan7","_id":"ckzf5se0l002fyy8k59cg7bg3"},{"post_id":"ckzf5se09001uyy8k3xjon3gt","tag_id":"ckzf5se0l002eyy8ky7c7jyfm","_id":"ckzf5se0m002hyy8kwixl41ko"},{"post_id":"ckzf5se0a001wyy8khyv2rcii","tag_id":"ckzf5se0m002gyy8kfhgunbnu","_id":"ckzf5se0m002jyy8kccepwgr2"},{"post_id":"ckzf5se0b001yyy8k12cc98uq","tag_id":"ckzf5se0m002iyy8knc4md2f8","_id":"ckzf5se0n002lyy8kzvr5fx0i"},{"post_id":"ckzf5se0d0020yy8k43w0lz0a","tag_id":"ckzf5se0n002kyy8k63o5jay6","_id":"ckzf5se0o002nyy8kcowforj2"},{"post_id":"ckzf5se0h0024yy8k46qvj5vn","tag_id":"ckzf5se0n002myy8kbv4u6mxg","_id":"ckzf5se0o002oyy8kg0v45fzg"}],"Tag":[{"name":"零碎","_id":"ckzf5sdyz0002yy8kx28s5ks9"},{"name":"https","_id":"ckzf5sdz30006yy8kyqd9pcka"},{"name":"css","_id":"ckzf5sdz6000ayy8k8021yu1h"},{"name":"docker","_id":"ckzf5sdz9000eyy8k34dwupn6"},{"name":"es","_id":"ckzf5sdzb000iyy8kssa8i01f"},{"name":"eslint","_id":"ckzf5sdzg000qyy8ki8jk7i8z"},{"name":"hexo","_id":"ckzf5sdzg000syy8kkwg9bopk"},{"name":"git","_id":"ckzf5sdzg000uyy8k28dafgfe"},{"name":"interview","_id":"ckzf5sdzh000wyy8khfwnyz5n"},{"name":"http","_id":"ckzf5sdzh000yyy8kfown54ao"},{"name":"k8s","_id":"ckzf5sdzw0015yy8kn7poe6z3"},{"name":"html","_id":"ckzf5sdzz001ayy8krn65wekr"},{"name":"stock","_id":"ckzf5se01001eyy8k53rgvqo3"},{"name":"loadtest","_id":"ckzf5se03001iyy8k5vzl9dyr"},{"name":"ops","_id":"ckzf5se05001myy8kbuxdvnsn"},{"name":"node、egg","_id":"ckzf5se08001ryy8kfgt4390r"},{"name":"overview","_id":"ckzf5se0a001vyy8kqnwxnw3c"},{"name":"useful package","_id":"ckzf5se0c001zyy8k3l0g7xja"},{"name":"pattern","_id":"ckzf5se0f0023yy8kjevxv5k8"},{"name":"pm2","_id":"ckzf5se0i0026yy8kcacc95gm"},{"name":"postgre","_id":"ckzf5se0j0028yy8kcp84av7y"},{"name":"web 安全","_id":"ckzf5se0k002ayy8kh1od3thj"},{"name":"regex","_id":"ckzf5se0k002cyy8kvznvtan7"},{"name":"encode decode","_id":"ckzf5se0l002eyy8ky7c7jyfm"},{"name":"安全","_id":"ckzf5se0m002gyy8kfhgunbnu"},{"name":"ts","_id":"ckzf5se0m002iyy8knc4md2f8"},{"name":"vue eventloop js","_id":"ckzf5se0n002kyy8k63o5jay6"},{"name":"webpack","_id":"ckzf5se0n002myy8kbv4u6mxg"}]}}